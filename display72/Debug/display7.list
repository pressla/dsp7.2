
display7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c804  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000119b0  08024808  08024808  00034808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080361b8  080361b8  00052644  2**0
                  CONTENTS
  4 .ARM          00000008  080361b8  080361b8  000461b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080361c0  080361c0  00052644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080361c0  080361c0  000461c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080361c8  080361c8  000461c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002644  20000000  080361cc  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006494  20002644  08038810  00052644  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20008ad8  08038810  00058ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00052644  2**0
                  CONTENTS, READONLY
 12 .debug_info   00062555  00000000  00000000  00052674  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009db3  00000000  00000000  000b4bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e20  00000000  00000000  000be980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a28  00000000  00000000  000c07a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f19  00000000  00000000  000c21c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a941  00000000  00000000  000e60e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077a48  00000000  00000000  00110a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018846a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000865c  00000000  00000000  001884e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20002644 	.word	0x20002644
 800801c:	00000000 	.word	0x00000000
 8008020:	080247ec 	.word	0x080247ec

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20002648 	.word	0x20002648
 800803c:	080247ec 	.word	0x080247ec

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73bb      	strb	r3, [r7, #14]
 8008dc8:	230f      	movs	r3, #15
 8008dca:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	78db      	ldrb	r3, [r3, #3]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d039      	beq.n	8008e48 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8008dd4:	4b27      	ldr	r3, [pc, #156]	; (8008e74 <NVIC_Init+0xbc>)
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	0a1b      	lsrs	r3, r3, #8
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	f1c3 0304 	rsb	r3, r3, #4
 8008dea:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8008dec:	7b7a      	ldrb	r2, [r7, #13]
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	fa42 f303 	asr.w	r3, r2, r3
 8008df4:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	785b      	ldrb	r3, [r3, #1]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008e02:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	789a      	ldrb	r2, [r3, #2]
 8008e08:	7b7b      	ldrb	r3, [r7, #13]
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <NVIC_Init+0xc0>)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	4413      	add	r3, r2
 8008e22:	7bfa      	ldrb	r2, [r7, #15]
 8008e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8008e30:	4911      	ldr	r1, [pc, #68]	; (8008e78 <NVIC_Init+0xc0>)
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	7812      	ldrb	r2, [r2, #0]
 8008e36:	0952      	lsrs	r2, r2, #5
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8008e42:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8008e46:	e00f      	b.n	8008e68 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8008e50:	4909      	ldr	r1, [pc, #36]	; (8008e78 <NVIC_Init+0xc0>)
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	7812      	ldrb	r2, [r2, #0]
 8008e56:	0952      	lsrs	r2, r2, #5
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8008e60:	f100 0320 	add.w	r3, r0, #32
 8008e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	e000ed00 	.word	0xe000ed00
 8008e78:	e000e100 	.word	0xe000e100

08008e7c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	791b      	ldrb	r3, [r3, #4]
 8008ea4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4b18      	ldr	r3, [pc, #96]	; (8008f24 <ADC_Init+0xa8>)
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8008ece:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8008ed4:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	795b      	ldrb	r3, [r3, #5]
 8008eda:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8008edc:	4313      	orrs	r3, r2
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ef6:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	7d1b      	ldrb	r3, [r3, #20]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	7afb      	ldrb	r3, [r7, #11]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8008f06:	7afb      	ldrb	r3, [r7, #11]
 8008f08:	051b      	lsls	r3, r3, #20
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008f16:	bf00      	nop
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	c0fff7fd 	.word	0xc0fff7fd

08008f28 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8008f34:	4b0e      	ldr	r3, [pc, #56]	; (8008f70 <ADC_CommonInit+0x48>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <ADC_CommonInit+0x4c>)
 8008f3e:	4013      	ands	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8008f4a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8008f50:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8008f56:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8008f5e:	4a04      	ldr	r2, [pc, #16]	; (8008f70 <ADC_CommonInit+0x48>)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6053      	str	r3, [r2, #4]
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	40012300 	.word	0x40012300
 8008f74:	fffc30e0 	.word	0xfffc30e0

08008f78 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d006      	beq.n	8008f98 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8008f96:	e005      	b.n	8008fa4 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f023 0201 	bic.w	r2, r3, #1
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	609a      	str	r2, [r3, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */

void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	4608      	mov	r0, r1
 8008fba:	4611      	mov	r1, r2
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	70fb      	strb	r3, [r7, #3]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	70bb      	strb	r3, [r7, #2]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	2b09      	cmp	r3, #9
 8008fd6:	d923      	bls.n	8009020 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8008fde:	78fb      	ldrb	r3, [r7, #3]
 8008fe0:	f1a3 020a 	sub.w	r2, r3, #10
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	4413      	add	r3, r2
 8008fea:	2207      	movs	r2, #7
 8008fec:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	43db      	mvns	r3, r3
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8008ffc:	7879      	ldrb	r1, [r7, #1]
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	f1a3 020a 	sub.w	r2, r3, #10
 8009004:	4613      	mov	r3, r2
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	4413      	add	r3, r2
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	60da      	str	r2, [r3, #12]
 800901e:	e01e      	b.n	800905e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	4613      	mov	r3, r2
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	4413      	add	r3, r2
 800902e:	2207      	movs	r2, #7
 8009030:	fa02 f303 	lsl.w	r3, r2, r3
 8009034:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	43db      	mvns	r3, r3
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4013      	ands	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8009040:	7879      	ldrb	r1, [r7, #1]
 8009042:	78fa      	ldrb	r2, [r7, #3]
 8009044:	4613      	mov	r3, r2
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	4413      	add	r3, r2
 800904a:	fa01 f303 	lsl.w	r3, r1, r3
 800904e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800905e:	78bb      	ldrb	r3, [r7, #2]
 8009060:	2b06      	cmp	r3, #6
 8009062:	d821      	bhi.n	80090a8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009068:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800906a:	78bb      	ldrb	r3, [r7, #2]
 800906c:	1e5a      	subs	r2, r3, #1
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	221f      	movs	r2, #31
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	43db      	mvns	r3, r3
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4013      	ands	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8009086:	78f9      	ldrb	r1, [r7, #3]
 8009088:	78bb      	ldrb	r3, [r7, #2]
 800908a:	1e5a      	subs	r2, r3, #1
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	fa01 f303 	lsl.w	r3, r1, r3
 8009096:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4313      	orrs	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80090a6:	e047      	b.n	8009138 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80090a8:	78bb      	ldrb	r3, [r7, #2]
 80090aa:	2b0c      	cmp	r3, #12
 80090ac:	d821      	bhi.n	80090f2 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80090b4:	78bb      	ldrb	r3, [r7, #2]
 80090b6:	1fda      	subs	r2, r3, #7
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	221f      	movs	r2, #31
 80090c0:	fa02 f303 	lsl.w	r3, r2, r3
 80090c4:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	43db      	mvns	r3, r3
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4013      	ands	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80090d0:	78f9      	ldrb	r1, [r7, #3]
 80090d2:	78bb      	ldrb	r3, [r7, #2]
 80090d4:	1fda      	subs	r2, r3, #7
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	fa01 f303 	lsl.w	r3, r1, r3
 80090e0:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090f0:	e022      	b.n	8009138 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80090f8:	78bb      	ldrb	r3, [r7, #2]
 80090fa:	f1a3 020d 	sub.w	r2, r3, #13
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	221f      	movs	r2, #31
 8009106:	fa02 f303 	lsl.w	r3, r2, r3
 800910a:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	43db      	mvns	r3, r3
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4013      	ands	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	78bb      	ldrb	r3, [r7, #2]
 800911a:	f1a3 020d 	sub.w	r2, r3, #13
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	fa01 f303 	lsl.w	r3, r1, r3
 8009128:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009138:	bf00      	nop
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	609a      	str	r2, [r3, #8]
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d006      	beq.n	8009184 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8009182:	e005      	b.n	8009190 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	609a      	str	r2, [r3, #8]
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 80091ba:	e005      	b.n	80091c8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	609a      	str	r2, [r3, #8]
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	4b25      	ldr	r3, [pc, #148]	; (8009280 <DMA_Init+0xac>)
 80091ec:	4013      	ands	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80091fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800920a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8009216:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8009222:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009228:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0307 	bic.w	r3, r3, #7
 8009242:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924c:	4313      	orrs	r3, r2
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	4313      	orrs	r3, r2
 8009252:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	691a      	ldr	r2, [r3, #16]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	689a      	ldr	r2, [r3, #8]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60da      	str	r2, [r3, #12]
}
 8009272:	bf00      	nop
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	f01c803f 	.word	0xf01c803f

08009284 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d006      	beq.n	80092a4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f043 0201 	orr.w	r2, r3, #1
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80092a2:	e005      	b.n	80092b0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f023 0201 	bic.w	r2, r3, #1
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	601a      	str	r2, [r3, #0]
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
 80092d8:	e001      	b.n	80092de <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80092de:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00f      	beq.n	8009324 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d006      	beq.n	8009318 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	615a      	str	r2, [r3, #20]
 8009316:	e005      	b.n	8009324 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b80      	cmp	r3, #128	; 0x80
 8009328:	d014      	beq.n	8009354 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d008      	beq.n	8009342 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 031e 	and.w	r3, r3, #30
 800933a:	431a      	orrs	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8009340:	e008      	b.n	8009354 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f003 031e 	and.w	r3, r3, #30
 800934c:	43db      	mvns	r3, r3
 800934e:	401a      	ands	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	601a      	str	r2, [r3, #0]
}
 8009354:	bf00      	nop
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	2300      	movs	r3, #0
 8009374:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a22      	ldr	r2, [pc, #136]	; (8009404 <DMA_GetITStatus+0xa4>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d802      	bhi.n	8009384 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800937e:	4b22      	ldr	r3, [pc, #136]	; (8009408 <DMA_GetITStatus+0xa8>)
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	e001      	b.n	8009388 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8009384:	4b21      	ldr	r3, [pc, #132]	; (800940c <DMA_GetITStatus+0xac>)
 8009386:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800938e:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	0adb      	lsrs	r3, r3, #11
 800939a:	f003 031e 	and.w	r3, r3, #30
 800939e:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4013      	ands	r3, r2
 80093a8:	60bb      	str	r3, [r7, #8]
 80093aa:	e004      	b.n	80093b6 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b4:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	e002      	b.n	80093ce <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80093d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	4013      	ands	r3, r2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <DMA_GetITStatus+0x90>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80093ea:	2301      	movs	r3, #1
 80093ec:	75fb      	strb	r3, [r7, #23]
 80093ee:	e001      	b.n	80093f4 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80093f0:	2300      	movs	r3, #0
 80093f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	371c      	adds	r7, #28
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	4002640f 	.word	0x4002640f
 8009408:	40026000 	.word	0x40026000
 800940c:	40026400 	.word	0x40026400

08009410 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a10      	ldr	r2, [pc, #64]	; (8009460 <DMA_ClearITPendingBit+0x50>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d802      	bhi.n	8009428 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <DMA_ClearITPendingBit+0x54>)
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	e001      	b.n	800942c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8009428:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <DMA_ClearITPendingBit+0x58>)
 800942a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800943c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8009444:	e006      	b.n	8009454 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800944c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	6093      	str	r3, [r2, #8]
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	4002640f 	.word	0x4002640f
 8009464:	40026000 	.word	0x40026000
 8009468:	40026400 	.word	0x40026400

0800946c <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <FLASH_Unlock+0x24>)
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	da05      	bge.n	8009484 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8009478:	4b05      	ldr	r3, [pc, #20]	; (8009490 <FLASH_Unlock+0x24>)
 800947a:	4a06      	ldr	r2, [pc, #24]	; (8009494 <FLASH_Unlock+0x28>)
 800947c:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800947e:	4b04      	ldr	r3, [pc, #16]	; (8009490 <FLASH_Unlock+0x24>)
 8009480:	4a05      	ldr	r2, [pc, #20]	; (8009498 <FLASH_Unlock+0x2c>)
 8009482:	605a      	str	r2, [r3, #4]
  }  
}
 8009484:	bf00      	nop
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	40023c00 	.word	0x40023c00
 8009494:	45670123 	.word	0x45670123
 8009498:	cdef89ab 	.word	0xcdef89ab

0800949c <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <FLASH_Lock+0x1c>)
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	4a04      	ldr	r2, [pc, #16]	; (80094b8 <FLASH_Lock+0x1c>)
 80094a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094aa:	6113      	str	r3, [r2, #16]
}
 80094ac:	bf00      	nop
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	40023c00 	.word	0x40023c00

080094bc <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80094cc:	2309      	movs	r3, #9
 80094ce:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d102      	bne.n	80094dc <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	e010      	b.n	80094fe <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d103      	bne.n	80094ea <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80094e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e009      	b.n	80094fe <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 80094ea:	78fb      	ldrb	r3, [r7, #3]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d103      	bne.n	80094f8 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80094f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e002      	b.n	80094fe <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80094f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80094fc:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80094fe:	f000 f8af 	bl	8009660 <FLASH_WaitForLastOperation>
 8009502:	4603      	mov	r3, r0
 8009504:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 8009506:	7afb      	ldrb	r3, [r7, #11]
 8009508:	2b09      	cmp	r3, #9
 800950a:	d12f      	bne.n	800956c <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800950c:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <FLASH_EraseSector+0xbc>)
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	4a19      	ldr	r2, [pc, #100]	; (8009578 <FLASH_EraseSector+0xbc>)
 8009512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009516:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8009518:	4b17      	ldr	r3, [pc, #92]	; (8009578 <FLASH_EraseSector+0xbc>)
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	4916      	ldr	r1, [pc, #88]	; (8009578 <FLASH_EraseSector+0xbc>)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8009524:	4b14      	ldr	r3, [pc, #80]	; (8009578 <FLASH_EraseSector+0xbc>)
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	4a13      	ldr	r2, [pc, #76]	; (8009578 <FLASH_EraseSector+0xbc>)
 800952a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800952e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8009530:	4b11      	ldr	r3, [pc, #68]	; (8009578 <FLASH_EraseSector+0xbc>)
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4313      	orrs	r3, r2
 8009538:	4a0f      	ldr	r2, [pc, #60]	; (8009578 <FLASH_EraseSector+0xbc>)
 800953a:	f043 0302 	orr.w	r3, r3, #2
 800953e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8009540:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <FLASH_EraseSector+0xbc>)
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <FLASH_EraseSector+0xbc>)
 8009546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800954a:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800954c:	f000 f888 	bl	8009660 <FLASH_WaitForLastOperation>
 8009550:	4603      	mov	r3, r0
 8009552:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <FLASH_EraseSector+0xbc>)
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	4a07      	ldr	r2, [pc, #28]	; (8009578 <FLASH_EraseSector+0xbc>)
 800955a:	f023 0302 	bic.w	r3, r3, #2
 800955e:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8009560:	4b05      	ldr	r3, [pc, #20]	; (8009578 <FLASH_EraseSector+0xbc>)
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	4a04      	ldr	r2, [pc, #16]	; (8009578 <FLASH_EraseSector+0xbc>)
 8009566:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800956a:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 800956c:	7afb      	ldrb	r3, [r7, #11]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	40023c00 	.word	0x40023c00

0800957c <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8009588:	2309      	movs	r3, #9
 800958a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800958c:	f000 f868 	bl	8009660 <FLASH_WaitForLastOperation>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	2b09      	cmp	r3, #9
 8009598:	d11c      	bne.n	80095d4 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800959a:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <FLASH_ProgramByte+0x64>)
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	4a10      	ldr	r2, [pc, #64]	; (80095e0 <FLASH_ProgramByte+0x64>)
 80095a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095a4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 80095a6:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <FLASH_ProgramByte+0x64>)
 80095a8:	4a0d      	ldr	r2, [pc, #52]	; (80095e0 <FLASH_ProgramByte+0x64>)
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 80095ae:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <FLASH_ProgramByte+0x64>)
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	4a0b      	ldr	r2, [pc, #44]	; (80095e0 <FLASH_ProgramByte+0x64>)
 80095b4:	f043 0301 	orr.w	r3, r3, #1
 80095b8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint8_t*)Address = Data;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80095c0:	f000 f84e 	bl	8009660 <FLASH_WaitForLastOperation>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <FLASH_ProgramByte+0x64>)
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	4a04      	ldr	r2, [pc, #16]	; (80095e0 <FLASH_ProgramByte+0x64>)
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	6113      	str	r3, [r2, #16]
  } 

  /* Return the Program Status */
  return status;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	40023c00 	.word	0x40023c00

080095e4 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 80095ea:	2309      	movs	r3, #9
 80095ec:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80095ee:	4b1b      	ldr	r3, [pc, #108]	; (800965c <FLASH_GetStatus+0x78>)
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095fa:	d102      	bne.n	8009602 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 80095fc:	2301      	movs	r3, #1
 80095fe:	71fb      	strb	r3, [r7, #7]
 8009600:	e025      	b.n	800964e <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8009602:	4b16      	ldr	r3, [pc, #88]	; (800965c <FLASH_GetStatus+0x78>)
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	f003 0310 	and.w	r3, r3, #16
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 800960e:	2306      	movs	r3, #6
 8009610:	71fb      	strb	r3, [r7, #7]
 8009612:	e01c      	b.n	800964e <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8009614:	4b11      	ldr	r3, [pc, #68]	; (800965c <FLASH_GetStatus+0x78>)
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD;
 8009620:	2302      	movs	r3, #2
 8009622:	71fb      	strb	r3, [r7, #7]
 8009624:	e013      	b.n	800964e <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8009626:	4b0d      	ldr	r3, [pc, #52]	; (800965c <FLASH_GetStatus+0x78>)
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 8009632:	2307      	movs	r3, #7
 8009634:	71fb      	strb	r3, [r7, #7]
 8009636:	e00a      	b.n	800964e <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8009638:	4b08      	ldr	r3, [pc, #32]	; (800965c <FLASH_GetStatus+0x78>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 8009644:	2308      	movs	r3, #8
 8009646:	71fb      	strb	r3, [r7, #7]
 8009648:	e001      	b.n	800964e <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 800964a:	2309      	movs	r3, #9
 800964c:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800964e:	79fb      	ldrb	r3, [r7, #7]
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	40023c00 	.word	0x40023c00

08009660 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8009666:	2309      	movs	r3, #9
 8009668:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800966a:	f7ff ffbb 	bl	80095e4 <FLASH_GetStatus>
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8009672:	e003      	b.n	800967c <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8009674:	f7ff ffb6 	bl	80095e4 <FLASH_GetStatus>
 8009678:	4603      	mov	r3, r0
 800967a:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b01      	cmp	r3, #1
 8009682:	d0f7      	beq.n	8009674 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	b2db      	uxtb	r3, r3
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0, tmpbcr = 0, tmpbwr = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	2300      	movs	r3, #0
 800969e:	613b      	str	r3, [r7, #16]
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* Get the BTCR register value */
  tmpbcr = FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank];
 80096a4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b0:	613b      	str	r3, [r7, #16]
 
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpbcr &= ((uint32_t)~(FMC_BCR1_MBKEN   | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	4b69      	ldr	r3, [pc, #420]	; (800985c <FMC_NORSRAMInit+0x1cc>)
 80096b6:	4013      	ands	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]
                         FMC_BCR1_WAITPOL  | FMC_BCR1_WRAPMOD  | FMC_BCR1_WAITCFG  | \
                         FMC_BCR1_WREN     | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                         FMC_BCR1_ASYNCWAIT| FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN));

  /* NOR/SRAM Bank control register configuration */ 
  tmpbcr |=  (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685a      	ldr	r2, [r3, #4]
                       FMC_NORSRAMInitStruct->FMC_MemoryType |
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689b      	ldr	r3, [r3, #8]
  tmpbcr |=  (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80096c2:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68db      	ldr	r3, [r3, #12]
                       FMC_NORSRAMInitStruct->FMC_MemoryType |
 80096c8:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
                       FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80096ce:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	695b      	ldr	r3, [r3, #20]
                       FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80096d4:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_WrapMode |
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	699b      	ldr	r3, [r3, #24]
                       FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80096da:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	69db      	ldr	r3, [r3, #28]
                       FMC_NORSRAMInitStruct->FMC_WrapMode |
 80096e0:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_WriteOperation |
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
                       FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 80096e6:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_WaitSignal |
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                       FMC_NORSRAMInitStruct->FMC_WriteOperation |
 80096ec:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                       FMC_NORSRAMInitStruct->FMC_WaitSignal |
 80096f2:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                       FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80096f8:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_WriteBurst |
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                       FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 80096fe:	431a      	orrs	r2, r3
                       FMC_NORSRAMInitStruct->FMC_ContinousClock;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                       FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8009704:	4313      	orrs	r3, r2
  tmpbcr |=  (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	4313      	orrs	r3, r2
 800970a:	613b      	str	r3, [r7, #16]

  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] = tmpbcr;
 800970c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	2b08      	cmp	r3, #8
 8009720:	d10d      	bne.n	800973e <FMC_NORSRAMInit+0xae>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8009722:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800972e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800973a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009746:	d124      	bne.n	8009792 <FMC_NORSRAMInit+0x102>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d020      	beq.n	8009792 <FMC_NORSRAMInit+0x102>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 8009750:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800975a:	617b      	str	r3, [r7, #20]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800975c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800976a:	4313      	orrs	r3, r2
 800976c:	600b      	str	r3, [r1, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 800976e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800977c:	6013      	str	r3, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	3b01      	subs	r3, #1
 8009786:	051a      	lsls	r2, r3, #20
 8009788:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	4313      	orrs	r3, r2
 8009790:	604b      	str	r3, [r1, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	681a      	ldr	r2, [r3, #0]
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	011b      	lsls	r3, r3, #4
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 80097a0:	431a      	orrs	r2, r3
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	021b      	lsls	r3, r3, #8
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 80097aa:	431a      	orrs	r2, r3
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	041b      	lsls	r3, r3, #16
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 80097b4:	431a      	orrs	r2, r3
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision << 20) |
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	051b      	lsls	r3, r3, #20
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 80097be:	431a      	orrs	r2, r3
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency << 24) |
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	061b      	lsls	r3, r3, #24
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision << 20) |
 80097c8:	ea42 0103 	orr.w	r1, r2, r3
                      FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d0:	699a      	ldr	r2, [r3, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 80097d2:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3301      	adds	r3, #1
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency << 24) |
 80097dc:	430a      	orrs	r2, r1
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 80097de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097ea:	d129      	bne.n	8009840 <FMC_NORSRAMInit+0x1b0>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_TURNAROUND_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    /* Get the BWTR register value */
    tmpbwr = FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank];
 80097ec:	4a1c      	ldr	r2, [pc, #112]	; (8009860 <FMC_NORSRAMInit+0x1d0>)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f6:	60fb      	str	r3, [r7, #12]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpbwr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4b1a      	ldr	r3, [pc, #104]	; (8009864 <FMC_NORSRAMInit+0x1d4>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
                           FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpbwr |= (uint32_t)(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009804:	681a      	ldr	r2, [r3, #0]
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4)|
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	011b      	lsls	r3, r3, #4
    tmpbwr |= (uint32_t)(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800980e:	431a      	orrs	r2, r3
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	021b      	lsls	r3, r3, #8
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4)|
 8009818:	431a      	orrs	r2, r3
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	041b      	lsls	r3, r3, #16
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8009822:	431a      	orrs	r2, r3
                         FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009828:	699b      	ldr	r3, [r3, #24]
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800982a:	4313      	orrs	r3, r2
    tmpbwr |= (uint32_t)(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]

    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = tmpbwr;
 8009832:	490b      	ldr	r1, [pc, #44]	; (8009860 <FMC_NORSRAMInit+0x1d0>)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
  }
  
}
 800983e:	e006      	b.n	800984e <FMC_NORSRAMInit+0x1be>
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 8009840:	4a07      	ldr	r2, [pc, #28]	; (8009860 <FMC_NORSRAMInit+0x1d0>)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800984a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	ffe70080 	.word	0xffe70080
 8009860:	a0000104 	.word	0xa0000104
 8009864:	cff00000 	.word	0xcff00000

08009868 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00c      	beq.n	8009894 <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 800987a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009884:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8009888:	f043 0201 	orr.w	r2, r3, #1
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
  }
}
 8009892:	e00b      	b.n	80098ac <FMC_NORSRAMCmd+0x44>
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 8009894:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800989e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80098a2:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <FMC_NORSRAMCmd+0x50>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	000ffffe 	.word	0x000ffffe

080098bc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e076      	b.n	80099c6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80098d8:	2201      	movs	r2, #1
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	4013      	ands	r3, r2
 80098ea:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d165      	bne.n	80099c0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	2103      	movs	r1, #3
 80098fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009902:	43db      	mvns	r3, r3
 8009904:	401a      	ands	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	791b      	ldrb	r3, [r3, #4]
 8009912:	4619      	mov	r1, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	fa01 f303 	lsl.w	r3, r1, r3
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	791b      	ldrb	r3, [r3, #4]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d003      	beq.n	8009932 <GPIO_Init+0x76>
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	791b      	ldrb	r3, [r3, #4]
 800992e:	2b02      	cmp	r3, #2
 8009930:	d12e      	bne.n	8009990 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	2103      	movs	r1, #3
 800993c:	fa01 f303 	lsl.w	r3, r1, r3
 8009940:	43db      	mvns	r3, r3
 8009942:	401a      	ands	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	795b      	ldrb	r3, [r3, #5]
 8009950:	4619      	mov	r1, r3
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	fa01 f303 	lsl.w	r3, r1, r3
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	b29b      	uxth	r3, r3
 8009968:	4619      	mov	r1, r3
 800996a:	2301      	movs	r3, #1
 800996c:	408b      	lsls	r3, r1
 800996e:	43db      	mvns	r3, r3
 8009970:	401a      	ands	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	7992      	ldrb	r2, [r2, #6]
 800997e:	4611      	mov	r1, r2
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	b292      	uxth	r2, r2
 8009984:	fa01 f202 	lsl.w	r2, r1, r2
 8009988:	b292      	uxth	r2, r2
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	b29b      	uxth	r3, r3
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	2103      	movs	r1, #3
 800999c:	fa01 f303 	lsl.w	r3, r1, r3
 80099a0:	43db      	mvns	r3, r3
 80099a2:	401a      	ands	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	79db      	ldrb	r3, [r3, #7]
 80099b0:	4619      	mov	r1, r3
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	fa01 f303 	lsl.w	r3, r1, r3
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	3301      	adds	r3, #1
 80099c4:	617b      	str	r3, [r7, #20]
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b0f      	cmp	r3, #15
 80099ca:	d985      	bls.n	80098d8 <GPIO_Init+0x1c>
    }
  }
}
 80099cc:	bf00      	nop
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691a      	ldr	r2, [r3, #16]
 80099ec:	887b      	ldrh	r3, [r7, #2]
 80099ee:	4013      	ands	r3, r2
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80099f4:	2301      	movs	r3, #1
 80099f6:	73fb      	strb	r3, [r7, #15]
 80099f8:	e001      	b.n	80099fe <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	887a      	ldrh	r2, [r7, #2]
 8009a1c:	831a      	strh	r2, [r3, #24]
}
 8009a1e:	bf00      	nop
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b083      	sub	sp, #12
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	460b      	mov	r3, r1
 8009a34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	887a      	ldrh	r2, [r7, #2]
 8009a3a:	835a      	strh	r2, [r3, #26]
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	807b      	strh	r3, [r7, #2]
 8009a54:	4613      	mov	r3, r2
 8009a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8009a58:	787b      	ldrb	r3, [r7, #1]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	887a      	ldrh	r2, [r7, #2]
 8009a62:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8009a64:	e002      	b.n	8009a6c <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	887a      	ldrh	r2, [r7, #2]
 8009a6a:	835a      	strh	r2, [r3, #26]
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	807b      	strh	r3, [r7, #2]
 8009a84:	4613      	mov	r3, r2
 8009a86:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8009a90:	787a      	ldrb	r2, [r7, #1]
 8009a92:	887b      	ldrh	r3, [r7, #2]
 8009a94:	f003 0307 	and.w	r3, r3, #7
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8009aa0:	887b      	ldrh	r3, [r7, #2]
 8009aa2:	08db      	lsrs	r3, r3, #3
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3208      	adds	r2, #8
 8009aac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ab0:	887b      	ldrh	r3, [r7, #2]
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	210f      	movs	r1, #15
 8009aba:	fa01 f303 	lsl.w	r3, r1, r3
 8009abe:	43db      	mvns	r3, r3
 8009ac0:	8879      	ldrh	r1, [r7, #2]
 8009ac2:	08c9      	lsrs	r1, r1, #3
 8009ac4:	b289      	uxth	r1, r1
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	ea02 0103 	and.w	r1, r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f100 0208 	add.w	r2, r0, #8
 8009ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	08db      	lsrs	r3, r3, #3
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	461a      	mov	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3208      	adds	r2, #8
 8009ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8009aec:	887b      	ldrh	r3, [r7, #2]
 8009aee:	08db      	lsrs	r3, r3, #3
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3208      	adds	r2, #8
 8009af8:	68b9      	ldr	r1, [r7, #8]
 8009afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
	...

08009b0c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b089      	sub	sp, #36	; 0x24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8009b14:	2300      	movs	r3, #0
 8009b16:	61bb      	str	r3, [r7, #24]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	2302      	movs	r3, #2
 8009b22:	613b      	str	r3, [r7, #16]
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	2302      	movs	r3, #2
 8009b2a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009b2c:	4b47      	ldr	r3, [pc, #284]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 030c 	and.w	r3, r3, #12
 8009b34:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	d007      	beq.n	8009b4c <RCC_GetClocksFreq+0x40>
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	d009      	beq.n	8009b54 <RCC_GetClocksFreq+0x48>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d13d      	bne.n	8009bc0 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a42      	ldr	r2, [pc, #264]	; (8009c50 <RCC_GetClocksFreq+0x144>)
 8009b48:	601a      	str	r2, [r3, #0]
    break;
 8009b4a:	e03d      	b.n	8009bc8 <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a41      	ldr	r2, [pc, #260]	; (8009c54 <RCC_GetClocksFreq+0x148>)
 8009b50:	601a      	str	r2, [r3, #0]
    break;
 8009b52:	e039      	b.n	8009bc8 <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8009b54:	4b3d      	ldr	r3, [pc, #244]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	0d9b      	lsrs	r3, r3, #22
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b60:	4b3a      	ldr	r3, [pc, #232]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b68:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00c      	beq.n	8009b8a <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009b70:	4a38      	ldr	r2, [pc, #224]	; (8009c54 <RCC_GetClocksFreq+0x148>)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b78:	4a34      	ldr	r2, [pc, #208]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009b7a:	6852      	ldr	r2, [r2, #4]
 8009b7c:	0992      	lsrs	r2, r2, #6
 8009b7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b82:	fb02 f303 	mul.w	r3, r2, r3
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	e00b      	b.n	8009ba2 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8009b8a:	4a31      	ldr	r2, [pc, #196]	; (8009c50 <RCC_GetClocksFreq+0x144>)
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b92:	4a2e      	ldr	r2, [pc, #184]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009b94:	6852      	ldr	r2, [r2, #4]
 8009b96:	0992      	lsrs	r2, r2, #6
 8009b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ba0:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8009ba2:	4b2a      	ldr	r3, [pc, #168]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	0c1b      	lsrs	r3, r3, #16
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	3301      	adds	r3, #1
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8009bb2:	69fa      	ldr	r2, [r7, #28]
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	601a      	str	r2, [r3, #0]
    break;
 8009bbe:	e003      	b.n	8009bc8 <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a23      	ldr	r2, [pc, #140]	; (8009c50 <RCC_GetClocksFreq+0x144>)
 8009bc4:	601a      	str	r2, [r3, #0]
    break;
 8009bc6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8009bc8:	4b20      	ldr	r3, [pc, #128]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bd0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	091b      	lsrs	r3, r3, #4
 8009bd6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009bd8:	4a1f      	ldr	r2, [pc, #124]	; (8009c58 <RCC_GetClocksFreq+0x14c>)
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	4413      	add	r3, r2
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	40da      	lsrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8009bf0:	4b16      	ldr	r3, [pc, #88]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009bf8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	0a9b      	lsrs	r3, r3, #10
 8009bfe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009c00:	4a15      	ldr	r2, [pc, #84]	; (8009c58 <RCC_GetClocksFreq+0x14c>)
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	4413      	add	r3, r2
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	40da      	lsrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8009c18:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <RCC_GetClocksFreq+0x140>)
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009c20:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	0b5b      	lsrs	r3, r3, #13
 8009c26:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009c28:	4a0b      	ldr	r2, [pc, #44]	; (8009c58 <RCC_GetClocksFreq+0x14c>)
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	40da      	lsrs	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	60da      	str	r2, [r3, #12]
}
 8009c40:	bf00      	nop
 8009c42:	3724      	adds	r7, #36	; 0x24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40023800 	.word	0x40023800
 8009c50:	00f42400 	.word	0x00f42400
 8009c54:	007a1200 	.word	0x007a1200
 8009c58:	20000000 	.word	0x20000000

08009c5c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d006      	beq.n	8009c7c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8009c6e:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <RCC_AHB1PeriphClockCmd+0x3c>)
 8009c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c72:	4909      	ldr	r1, [pc, #36]	; (8009c98 <RCC_AHB1PeriphClockCmd+0x3c>)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8009c7a:	e006      	b.n	8009c8a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8009c7c:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <RCC_AHB1PeriphClockCmd+0x3c>)
 8009c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	43db      	mvns	r3, r3
 8009c84:	4904      	ldr	r1, [pc, #16]	; (8009c98 <RCC_AHB1PeriphClockCmd+0x3c>)
 8009c86:	4013      	ands	r3, r2
 8009c88:	630b      	str	r3, [r1, #48]	; 0x30
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	40023800 	.word	0x40023800

08009c9c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009ca8:	78fb      	ldrb	r3, [r7, #3]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d006      	beq.n	8009cbc <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8009cae:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <RCC_AHB3PeriphClockCmd+0x3c>)
 8009cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cb2:	4909      	ldr	r1, [pc, #36]	; (8009cd8 <RCC_AHB3PeriphClockCmd+0x3c>)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 8009cba:	e006      	b.n	8009cca <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8009cbc:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <RCC_AHB3PeriphClockCmd+0x3c>)
 8009cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	43db      	mvns	r3, r3
 8009cc4:	4904      	ldr	r1, [pc, #16]	; (8009cd8 <RCC_AHB3PeriphClockCmd+0x3c>)
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	638b      	str	r3, [r1, #56]	; 0x38
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40023800 	.word	0x40023800

08009cdc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009ce8:	78fb      	ldrb	r3, [r7, #3]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d006      	beq.n	8009cfc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009cee:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <RCC_APB1PeriphClockCmd+0x3c>)
 8009cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cf2:	4909      	ldr	r1, [pc, #36]	; (8009d18 <RCC_APB1PeriphClockCmd+0x3c>)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8009cfa:	e006      	b.n	8009d0a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <RCC_APB1PeriphClockCmd+0x3c>)
 8009cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	43db      	mvns	r3, r3
 8009d04:	4904      	ldr	r1, [pc, #16]	; (8009d18 <RCC_APB1PeriphClockCmd+0x3c>)
 8009d06:	4013      	ands	r3, r2
 8009d08:	640b      	str	r3, [r1, #64]	; 0x40
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	40023800 	.word	0x40023800

08009d1c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d006      	beq.n	8009d3c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009d2e:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <RCC_APB2PeriphClockCmd+0x3c>)
 8009d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d32:	4909      	ldr	r1, [pc, #36]	; (8009d58 <RCC_APB2PeriphClockCmd+0x3c>)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8009d3a:	e006      	b.n	8009d4a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009d3c:	4b06      	ldr	r3, [pc, #24]	; (8009d58 <RCC_APB2PeriphClockCmd+0x3c>)
 8009d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	43db      	mvns	r3, r3
 8009d44:	4904      	ldr	r1, [pc, #16]	; (8009d58 <RCC_APB2PeriphClockCmd+0x3c>)
 8009d46:	4013      	ands	r3, r2
 8009d48:	644b      	str	r3, [r1, #68]	; 0x44
}
 8009d4a:	bf00      	nop
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	40023800 	.word	0x40023800

08009d5c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8009d70:	89fb      	ldrh	r3, [r7, #14]
 8009d72:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8009d76:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	881a      	ldrh	r2, [r3, #0]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	885b      	ldrh	r3, [r3, #2]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009d90:	4313      	orrs	r3, r2
 8009d92:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009da0:	4313      	orrs	r3, r2
 8009da2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009da8:	4313      	orrs	r3, r2
 8009daa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8009db0:	4313      	orrs	r3, r2
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	89fb      	ldrh	r3, [r7, #14]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	89fa      	ldrh	r2, [r7, #14]
 8009dbe:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	8b9b      	ldrh	r3, [r3, #28]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	8a1a      	ldrh	r2, [r3, #16]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	821a      	strh	r2, [r3, #16]
}
 8009dd8:	bf00      	nop
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2207      	movs	r2, #7
 8009e20:	821a      	strh	r2, [r3, #16]
}
 8009e22:	bf00      	nop
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009e3a:	78fb      	ldrb	r3, [r7, #3]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d008      	beq.n	8009e52 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8009e50:	e007      	b.n	8009e62 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	801a      	strh	r2, [r3, #0]
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	899b      	ldrh	r3, [r3, #12]
 8009e7a:	b29b      	uxth	r3, r3
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	887a      	ldrh	r2, [r7, #2]
 8009e98:	819a      	strh	r2, [r3, #12]
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	891b      	ldrh	r3, [r3, #8]
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	887b      	ldrh	r3, [r7, #2]
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d002      	beq.n	8009ecc <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	73fb      	strb	r3, [r7, #15]
 8009eca:	e001      	b.n	8009ed0 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
	...

08009ee0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a29      	ldr	r2, [pc, #164]	; (8009f9c <TIM_TimeBaseInit+0xbc>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d013      	beq.n	8009f24 <TIM_TimeBaseInit+0x44>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a28      	ldr	r2, [pc, #160]	; (8009fa0 <TIM_TimeBaseInit+0xc0>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00f      	beq.n	8009f24 <TIM_TimeBaseInit+0x44>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f0a:	d00b      	beq.n	8009f24 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a25      	ldr	r2, [pc, #148]	; (8009fa4 <TIM_TimeBaseInit+0xc4>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d007      	beq.n	8009f24 <TIM_TimeBaseInit+0x44>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a24      	ldr	r2, [pc, #144]	; (8009fa8 <TIM_TimeBaseInit+0xc8>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d003      	beq.n	8009f24 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a23      	ldr	r2, [pc, #140]	; (8009fac <TIM_TimeBaseInit+0xcc>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d108      	bne.n	8009f36 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8009f24:	89fb      	ldrh	r3, [r7, #14]
 8009f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f2a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	885a      	ldrh	r2, [r3, #2]
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a1d      	ldr	r2, [pc, #116]	; (8009fb0 <TIM_TimeBaseInit+0xd0>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00c      	beq.n	8009f58 <TIM_TimeBaseInit+0x78>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a1c      	ldr	r2, [pc, #112]	; (8009fb4 <TIM_TimeBaseInit+0xd4>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d008      	beq.n	8009f58 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8009f46:	89fb      	ldrh	r3, [r7, #14]
 8009f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f4c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	891a      	ldrh	r2, [r3, #8]
 8009f52:	89fb      	ldrh	r3, [r7, #14]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	89fa      	ldrh	r2, [r7, #14]
 8009f5c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	881a      	ldrh	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a0a      	ldr	r2, [pc, #40]	; (8009f9c <TIM_TimeBaseInit+0xbc>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d003      	beq.n	8009f7e <TIM_TimeBaseInit+0x9e>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a09      	ldr	r2, [pc, #36]	; (8009fa0 <TIM_TimeBaseInit+0xc0>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d104      	bne.n	8009f88 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	7a9b      	ldrb	r3, [r3, #10]
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	829a      	strh	r2, [r3, #20]
}
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	40010000 	.word	0x40010000
 8009fa0:	40010400 	.word	0x40010400
 8009fa4:	40000400 	.word	0x40000400
 8009fa8:	40000800 	.word	0x40000800
 8009fac:	40000c00 	.word	0x40000c00
 8009fb0:	40001000 	.word	0x40001000
 8009fb4:	40001400 	.word	0x40001400

08009fb8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009fc4:	78fb      	ldrb	r3, [r7, #3]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d008      	beq.n	8009fdc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	f043 0301 	orr.w	r3, r3, #1
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8009fda:	e007      	b.n	8009fec <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	f023 0301 	bic.w	r3, r3, #1
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	801a      	strh	r2, [r3, #0]
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	807b      	strh	r3, [r7, #2]
 800a004:	4613      	mov	r3, r2
 800a006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a008:	787b      	ldrb	r3, [r7, #1]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d008      	beq.n	800a020 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	899b      	ldrh	r3, [r3, #12]
 800a012:	b29a      	uxth	r2, r3
 800a014:	887b      	ldrh	r3, [r7, #2]
 800a016:	4313      	orrs	r3, r2
 800a018:	b29a      	uxth	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800a01e:	e009      	b.n	800a034 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	899b      	ldrh	r3, [r3, #12]
 800a024:	b29a      	uxth	r2, r3
 800a026:	887b      	ldrh	r3, [r7, #2]
 800a028:	43db      	mvns	r3, r3
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	4013      	ands	r3, r2
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	819a      	strh	r2, [r3, #12]
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800a050:	2300      	movs	r3, #0
 800a052:	81bb      	strh	r3, [r7, #12]
 800a054:	2300      	movs	r3, #0
 800a056:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8a1b      	ldrh	r3, [r3, #16]
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	887b      	ldrh	r3, [r7, #2]
 800a060:	4013      	ands	r3, r2
 800a062:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	899b      	ldrh	r3, [r3, #12]
 800a068:	b29a      	uxth	r2, r3
 800a06a:	887b      	ldrh	r3, [r7, #2]
 800a06c:	4013      	ands	r3, r2
 800a06e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800a070:	89bb      	ldrh	r3, [r7, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d005      	beq.n	800a082 <TIM_GetITStatus+0x42>
 800a076:	897b      	ldrh	r3, [r7, #10]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800a07c:	2301      	movs	r3, #1
 800a07e:	73fb      	strb	r3, [r7, #15]
 800a080:	e001      	b.n	800a086 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3714      	adds	r7, #20
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800a0a0:	887b      	ldrh	r3, [r7, #2]
 800a0a2:	43db      	mvns	r3, r3
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	821a      	strh	r2, [r3, #16]
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	; 0x28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	8a1b      	ldrh	r3, [r3, #16]
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a0e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	88db      	ldrh	r3, [r3, #6]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	899b      	ldrh	r3, [r3, #12]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a104:	f023 030c 	bic.w	r3, r3, #12
 800a108:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	889a      	ldrh	r2, [r3, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	891b      	ldrh	r3, [r3, #8]
 800a112:	4313      	orrs	r3, r2
 800a114:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800a11a:	4313      	orrs	r3, r2
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	461a      	mov	r2, r3
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	4313      	orrs	r3, r2
 800a124:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	b29a      	uxth	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	8a9b      	ldrh	r3, [r3, #20]
 800a132:	b29b      	uxth	r3, r3
 800a134:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	899b      	ldrh	r3, [r3, #12]
 800a142:	461a      	mov	r2, r3
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	4313      	orrs	r3, r2
 800a148:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800a152:	f107 0308 	add.w	r3, r7, #8
 800a156:	4618      	mov	r0, r3
 800a158:	f7ff fcd8 	bl	8009b0c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a30      	ldr	r2, [pc, #192]	; (800a220 <USART_Init+0x168>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d003      	beq.n	800a16c <USART_Init+0xb4>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a2f      	ldr	r2, [pc, #188]	; (800a224 <USART_Init+0x16c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d102      	bne.n	800a172 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	623b      	str	r3, [r7, #32]
 800a170:	e001      	b.n	800a176 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	899b      	ldrh	r3, [r3, #12]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	b21b      	sxth	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	da0c      	bge.n	800a19c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800a182:	6a3a      	ldr	r2, [r7, #32]
 800a184:	4613      	mov	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	009a      	lsls	r2, r3, #2
 800a18c:	441a      	add	r2, r3
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	fbb2 f3f3 	udiv	r3, r2, r3
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	e00b      	b.n	800a1b4 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800a19c:	6a3a      	ldr	r2, [r7, #32]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009a      	lsls	r2, r3, #2
 800a1a6:	441a      	add	r2, r3
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	4a1c      	ldr	r2, [pc, #112]	; (800a228 <USART_Init+0x170>)
 800a1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1bc:	095b      	lsrs	r3, r3, #5
 800a1be:	011b      	lsls	r3, r3, #4
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	091b      	lsrs	r3, r3, #4
 800a1c6:	2264      	movs	r2, #100	; 0x64
 800a1c8:	fb02 f303 	mul.w	r3, r2, r3
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	899b      	ldrh	r3, [r3, #12]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	b21b      	sxth	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da0c      	bge.n	800a1f8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	00db      	lsls	r3, r3, #3
 800a1e2:	3332      	adds	r3, #50	; 0x32
 800a1e4:	4a10      	ldr	r2, [pc, #64]	; (800a228 <USART_Init+0x170>)
 800a1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ea:	095b      	lsrs	r3, r3, #5
 800a1ec:	f003 0307 	and.w	r3, r3, #7
 800a1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1f6:	e00b      	b.n	800a210 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	3332      	adds	r3, #50	; 0x32
 800a1fe:	4a0a      	ldr	r2, [pc, #40]	; (800a228 <USART_Init+0x170>)
 800a200:	fba2 2303 	umull	r2, r3, r2, r3
 800a204:	095b      	lsrs	r3, r3, #5
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20c:	4313      	orrs	r3, r2
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	b29a      	uxth	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	811a      	strh	r2, [r3, #8]
}
 800a218:	bf00      	nop
 800a21a:	3728      	adds	r7, #40	; 0x28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	40011000 	.word	0x40011000
 800a224:	40011400 	.word	0x40011400
 800a228:	51eb851f 	.word	0x51eb851f

0800a22c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a238:	78fb      	ldrb	r3, [r7, #3]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d008      	beq.n	800a250 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	899b      	ldrh	r3, [r3, #12]
 800a242:	b29b      	uxth	r3, r3
 800a244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a248:	b29a      	uxth	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800a24e:	e007      	b.n	800a260 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	899b      	ldrh	r3, [r3, #12]
 800a254:	b29b      	uxth	r3, r3
 800a256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	819a      	strh	r2, [r3, #12]
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	889b      	ldrh	r3, [r3, #4]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27e:	b29b      	uxth	r3, r3
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	807b      	strh	r3, [r7, #2]
 800a298:	4613      	mov	r3, r2
 800a29a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800a29c:	787b      	ldrb	r3, [r7, #1]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d008      	beq.n	800a2b4 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	8a9b      	ldrh	r3, [r3, #20]
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	887b      	ldrh	r3, [r7, #2]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 800a2b2:	e009      	b.n	800a2c8 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	8a9b      	ldrh	r3, [r3, #20]
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	887b      	ldrh	r3, [r7, #2]
 800a2bc:	43db      	mvns	r3, r3
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	829a      	strh	r2, [r3, #20]
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	807b      	strh	r3, [r7, #2]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800a2f8:	887b      	ldrh	r3, [r7, #2]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	095b      	lsrs	r3, r3, #5
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800a302:	887b      	ldrh	r3, [r7, #2]
 800a304:	f003 031f 	and.w	r3, r3, #31
 800a308:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800a30a:	2201      	movs	r2, #1
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	fa02 f303 	lsl.w	r3, r2, r3
 800a312:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d103      	bne.n	800a322 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	330c      	adds	r3, #12
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e009      	b.n	800a336 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d103      	bne.n	800a330 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	3310      	adds	r3, #16
 800a32c:	617b      	str	r3, [r7, #20]
 800a32e:	e002      	b.n	800a336 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	3314      	adds	r3, #20
 800a334:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800a336:	787b      	ldrb	r3, [r7, #1]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d006      	beq.n	800a34a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	6819      	ldr	r1, [r3, #0]
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	430a      	orrs	r2, r1
 800a346:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800a348:	e006      	b.n	800a358 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	6819      	ldr	r1, [r3, #0]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	43da      	mvns	r2, r3
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	400a      	ands	r2, r1
 800a356:	601a      	str	r2, [r3, #0]
}
 800a358:	bf00      	nop
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800a370:	887b      	ldrh	r3, [r7, #2]
 800a372:	43db      	mvns	r3, r3
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	801a      	strh	r2, [r3, #0]
}
 800a37a:	bf00      	nop
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
	...

0800a388 <dsp7_ADC3_Init>:

#define ADCMITTELANZ	300
volatile uint16_t ADC3ConvertedValue[ADCMITTELANZ];

void dsp7_ADC3_Init()
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b09c      	sub	sp, #112	; 0x70
 800a38c:	af00      	add	r7, sp, #0
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  DMA_InitTypeDef       DMA_InitStructure;
  GPIO_InitTypeDef      GPIO_InitStructure;

  // Enable ADC3, DMA2 and GPIO clocks
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOC, ENABLE);
 800a38e:	2101      	movs	r1, #1
 800a390:	4846      	ldr	r0, [pc, #280]	; (800a4ac <dsp7_ADC3_Init+0x124>)
 800a392:	f7ff fc63 	bl	8009c5c <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
 800a396:	2101      	movs	r1, #1
 800a398:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a39c:	f7ff fcbe 	bl	8009d1c <RCC_APB2PeriphClockCmd>

  // DMA2 Stream1 channel0 configuration
  DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 800a3a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a3a4:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(ADC3_BASE + ADC_DR_OFFSET);
 800a3a6:	4b42      	ldr	r3, [pc, #264]	; (800a4b0 <dsp7_ADC3_Init+0x128>)
 800a3a8:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)ADC3ConvertedValue;
 800a3aa:	4b42      	ldr	r3, [pc, #264]	; (800a4b4 <dsp7_ADC3_Init+0x12c>)
 800a3ac:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_BufferSize = ADCMITTELANZ;
 800a3b2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800a3b6:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800a3bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800a3c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800a3c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800a3ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3d2:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800a3d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3d8:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	643b      	str	r3, [r7, #64]	; 0x40
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(DMA2_Stream1, &DMA_InitStructure);
 800a3ea:	f107 030c 	add.w	r3, r7, #12
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4831      	ldr	r0, [pc, #196]	; (800a4b8 <dsp7_ADC3_Init+0x130>)
 800a3f2:	f7fe feef 	bl	80091d4 <DMA_Init>
  DMA_Cmd(DMA2_Stream1, ENABLE);
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	482f      	ldr	r0, [pc, #188]	; (800a4b8 <dsp7_ADC3_Init+0x130>)
 800a3fa:	f7fe ff43 	bl	8009284 <DMA_Cmd>

  NVIC_InitTypeDef   NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream1_IRQn;
 800a3fe:	2339      	movs	r3, #57	; 0x39
 800a400:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 800a402:	2302      	movs	r3, #2
 800a404:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 800a406:	2302      	movs	r3, #2
 800a408:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800a40a:	2301      	movs	r3, #1
 800a40c:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 800a40e:	463b      	mov	r3, r7
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe fcd1 	bl	8008db8 <NVIC_Init>
	DMA_ITConfig(DMA2_Stream1, DMA_IT_TC, ENABLE);
 800a416:	2201      	movs	r2, #1
 800a418:	2110      	movs	r1, #16
 800a41a:	4827      	ldr	r0, [pc, #156]	; (800a4b8 <dsp7_ADC3_Init+0x130>)
 800a41c:	f7fe ff66 	bl	80092ec <DMA_ITConfig>

  // Configure ADC3 as analog input
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800a420:	2302      	movs	r3, #2
 800a422:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800a424:	2303      	movs	r3, #3
 800a426:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a428:	2300      	movs	r3, #0
 800a42a:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800a42c:	1d3b      	adds	r3, r7, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4822      	ldr	r0, [pc, #136]	; (800a4bc <dsp7_ADC3_Init+0x134>)
 800a432:	f7ff fa43 	bl	80098bc <GPIO_Init>

  // ADC Common Init
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 800a436:	2300      	movs	r3, #0
 800a438:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 800a43a:	2300      	movs	r3, #0
 800a43c:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800a43e:	2300      	movs	r3, #0
 800a440:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800a442:	2300      	movs	r3, #0
 800a444:	657b      	str	r3, [r7, #84]	; 0x54
  ADC_CommonInit(&ADC_CommonInitStructure);
 800a446:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fd6c 	bl	8008f28 <ADC_CommonInit>

  // ADC3 Init
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800a450:	2300      	movs	r3, #0
 800a452:	65bb      	str	r3, [r7, #88]	; 0x58
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 800a454:	2300      	movs	r3, #0
 800a456:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800a460:	2300      	movs	r3, #0
 800a462:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800a464:	2300      	movs	r3, #0
 800a466:	66bb      	str	r3, [r7, #104]	; 0x68
  ADC_InitStructure.ADC_NbrOfConversion = 1;
 800a468:	2301      	movs	r3, #1
 800a46a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  ADC_Init(ADC3, &ADC_InitStructure);
 800a46e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a472:	4619      	mov	r1, r3
 800a474:	4812      	ldr	r0, [pc, #72]	; (800a4c0 <dsp7_ADC3_Init+0x138>)
 800a476:	f7fe fd01 	bl	8008e7c <ADC_Init>

  // ADC3 regular channel0 configuration
  ADC_RegularChannelConfig(ADC3, ADC_Channel_11, 1, ADC_SampleTime_3Cycles);
 800a47a:	2300      	movs	r3, #0
 800a47c:	2201      	movs	r2, #1
 800a47e:	210b      	movs	r1, #11
 800a480:	480f      	ldr	r0, [pc, #60]	; (800a4c0 <dsp7_ADC3_Init+0x138>)
 800a482:	f7fe fd95 	bl	8008fb0 <ADC_RegularChannelConfig>

 // Enable DMA request after last transfer (Single-ADC mode) */
  ADC_DMARequestAfterLastTransferCmd(ADC3, ENABLE);
 800a486:	2101      	movs	r1, #1
 800a488:	480d      	ldr	r0, [pc, #52]	; (800a4c0 <dsp7_ADC3_Init+0x138>)
 800a48a:	f7fe fe87 	bl	800919c <ADC_DMARequestAfterLastTransferCmd>

  // Enable ADC3 DMA
  ADC_DMACmd(ADC3, ENABLE);
 800a48e:	2101      	movs	r1, #1
 800a490:	480b      	ldr	r0, [pc, #44]	; (800a4c0 <dsp7_ADC3_Init+0x138>)
 800a492:	f7fe fe67 	bl	8009164 <ADC_DMACmd>

  // Enable ADC3
  ADC_Cmd(ADC3, ENABLE);
 800a496:	2101      	movs	r1, #1
 800a498:	4809      	ldr	r0, [pc, #36]	; (800a4c0 <dsp7_ADC3_Init+0x138>)
 800a49a:	f7fe fd6d 	bl	8008f78 <ADC_Cmd>

  ADC_SoftwareStartConv(ADC3);   // A/D convert start
 800a49e:	4808      	ldr	r0, [pc, #32]	; (800a4c0 <dsp7_ADC3_Init+0x138>)
 800a4a0:	f7fe fe50 	bl	8009144 <ADC_SoftwareStartConv>
}
 800a4a4:	bf00      	nop
 800a4a6:	3770      	adds	r7, #112	; 0x70
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	00400004 	.word	0x00400004
 800a4b0:	4001224c 	.word	0x4001224c
 800a4b4:	20002870 	.word	0x20002870
 800a4b8:	40026428 	.word	0x40026428
 800a4bc:	40020800 	.word	0x40020800
 800a4c0:	40012200 	.word	0x40012200

0800a4c4 <ui16_Read_ADC3_ConvertedValue>:

int ui16_Read_ADC3_ConvertedValue()
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
	unsigned long v=0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	607b      	str	r3, [r7, #4]
	static unsigned long lastv = 999999;

	for(unsigned long i=0; i<ADCMITTELANZ; i++)
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	603b      	str	r3, [r7, #0]
 800a4d2:	e00b      	b.n	800a4ec <ui16_Read_ADC3_ConvertedValue+0x28>
		v += ADC3ConvertedValue[i];
 800a4d4:	4a1a      	ldr	r2, [pc, #104]	; (800a540 <ui16_Read_ADC3_ConvertedValue+0x7c>)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	461a      	mov	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	607b      	str	r3, [r7, #4]
	for(unsigned long i=0; i<ADCMITTELANZ; i++)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a4f2:	d3ef      	bcc.n	800a4d4 <ui16_Read_ADC3_ConvertedValue+0x10>

	v /= ADCMITTELANZ;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a13      	ldr	r2, [pc, #76]	; (800a544 <ui16_Read_ADC3_ConvertedValue+0x80>)
 800a4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4fc:	095b      	lsrs	r3, r3, #5
 800a4fe:	607b      	str	r3, [r7, #4]

	// beruhige zitterndes Digit 0
	if(v == (lastv-1) || v == (lastv+1))
 800a500:	4b11      	ldr	r3, [pc, #68]	; (800a548 <ui16_Read_ADC3_ConvertedValue+0x84>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3b01      	subs	r3, #1
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d005      	beq.n	800a518 <ui16_Read_ADC3_ConvertedValue+0x54>
 800a50c:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <ui16_Read_ADC3_ConvertedValue+0x84>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3301      	adds	r3, #1
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	429a      	cmp	r2, r3
 800a516:	d103      	bne.n	800a520 <ui16_Read_ADC3_ConvertedValue+0x5c>
	{
		// nur eine unbedeutende Änderung, nehme letzten Wert
		v = lastv;
 800a518:	4b0b      	ldr	r3, [pc, #44]	; (800a548 <ui16_Read_ADC3_ConvertedValue+0x84>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	e002      	b.n	800a526 <ui16_Read_ADC3_ConvertedValue+0x62>
	}
	else
		lastv = v;
 800a520:	4a09      	ldr	r2, [pc, #36]	; (800a548 <ui16_Read_ADC3_ConvertedValue+0x84>)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6013      	str	r3, [r2, #0]

	return (int)((v*2500)/4096);      // Read and return conversion result
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a52c:	fb02 f303 	mul.w	r3, r2, r3
 800a530:	0b1b      	lsrs	r3, r3, #12
}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20002870 	.word	0x20002870
 800a544:	1b4e81b5 	.word	0x1b4e81b5
 800a548:	20000010 	.word	0x20000010

0800a54c <DMA2_Stream1_IRQHandler>:

volatile int ADC3cnv_ready = 0;

void DMA2_Stream1_IRQHandler()
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream1,DMA_IT_TCIF1) == SET)
 800a550:	4907      	ldr	r1, [pc, #28]	; (800a570 <DMA2_Stream1_IRQHandler+0x24>)
 800a552:	4808      	ldr	r0, [pc, #32]	; (800a574 <DMA2_Stream1_IRQHandler+0x28>)
 800a554:	f7fe ff04 	bl	8009360 <DMA_GetITStatus>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d106      	bne.n	800a56c <DMA2_Stream1_IRQHandler+0x20>
	{
		ADC3cnv_ready = 1;
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <DMA2_Stream1_IRQHandler+0x2c>)
 800a560:	2201      	movs	r2, #1
 800a562:	601a      	str	r2, [r3, #0]
		DMA_ClearITPendingBit(DMA2_Stream1,DMA_IT_TCIF1);
 800a564:	4902      	ldr	r1, [pc, #8]	; (800a570 <DMA2_Stream1_IRQHandler+0x24>)
 800a566:	4803      	ldr	r0, [pc, #12]	; (800a574 <DMA2_Stream1_IRQHandler+0x28>)
 800a568:	f7fe ff52 	bl	8009410 <DMA_ClearITPendingBit>
	}
}
 800a56c:	bf00      	nop
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	10008800 	.word	0x10008800
 800a574:	40026428 	.word	0x40026428
 800a578:	20002660 	.word	0x20002660

0800a57c <isADC3ConvReady>:

int isADC3ConvReady()
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
	int ret = ADC3cnv_ready;
 800a582:	4b06      	ldr	r3, [pc, #24]	; (800a59c <isADC3ConvReady+0x20>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	607b      	str	r3, [r7, #4]
	ADC3cnv_ready = 0;
 800a588:	4b04      	ldr	r3, [pc, #16]	; (800a59c <isADC3ConvReady+0x20>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]

	return ret;
 800a58e:	687b      	ldr	r3, [r7, #4]
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	20002660 	.word	0x20002660

0800a5a0 <dsp7_ADC_Init>:
#define ADCCHANNELS		10
volatile uint16_t ADC1ConvertedValue[ADCMITTELANZ * ADCCHANNELS];
unsigned char st = ADC_SampleTime_480Cycles;

void dsp7_ADC_Init()
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b09c      	sub	sp, #112	; 0x70
 800a5a4:	af00      	add	r7, sp, #0
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  DMA_InitTypeDef       DMA_InitStructure;
  GPIO_InitTypeDef      GPIO_InitStructure;

  // Enable ADC1, DMA2 and GPIO clocks
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	4871      	ldr	r0, [pc, #452]	; (800a770 <dsp7_ADC_Init+0x1d0>)
 800a5aa:	f7ff fb57 	bl	8009c5c <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a5b4:	f7ff fbb2 	bl	8009d1c <RCC_APB2PeriphClockCmd>

  // DMA2 Stream0 channel0 configuration
  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(ADC1_BASE + ADC_DR_OFFSET);
 800a5bc:	4b6d      	ldr	r3, [pc, #436]	; (800a774 <dsp7_ADC_Init+0x1d4>)
 800a5be:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)ADC1ConvertedValue;
 800a5c0:	4b6d      	ldr	r3, [pc, #436]	; (800a778 <dsp7_ADC_Init+0x1d8>)
 800a5c2:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_BufferSize = ADCMITTELANZ * ADCCHANNELS;
 800a5c8:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a5cc:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800a5d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800a5d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5dc:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800a5de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800a5e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5e8:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800a5ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5ee:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	643b      	str	r3, [r7, #64]	; 0x40
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 800a600:	f107 030c 	add.w	r3, r7, #12
 800a604:	4619      	mov	r1, r3
 800a606:	485d      	ldr	r0, [pc, #372]	; (800a77c <dsp7_ADC_Init+0x1dc>)
 800a608:	f7fe fde4 	bl	80091d4 <DMA_Init>
  DMA_Cmd(DMA2_Stream0, ENABLE);
 800a60c:	2101      	movs	r1, #1
 800a60e:	485b      	ldr	r0, [pc, #364]	; (800a77c <dsp7_ADC_Init+0x1dc>)
 800a610:	f7fe fe38 	bl	8009284 <DMA_Cmd>

	NVIC_InitTypeDef   NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 800a614:	2338      	movs	r3, #56	; 0x38
 800a616:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 800a618:	2302      	movs	r3, #2
 800a61a:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 800a61c:	2302      	movs	r3, #2
 800a61e:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800a620:	2301      	movs	r3, #1
 800a622:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 800a624:	463b      	mov	r3, r7
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe fbc6 	bl	8008db8 <NVIC_Init>
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
 800a62c:	2201      	movs	r2, #1
 800a62e:	2110      	movs	r1, #16
 800a630:	4852      	ldr	r0, [pc, #328]	; (800a77c <dsp7_ADC_Init+0x1dc>)
 800a632:	f7fe fe5b 	bl	80092ec <DMA_ITConfig>

  // Configure ADC1 as analog input
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 800a636:	23f1      	movs	r3, #241	; 0xf1
 800a638:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800a63a:	2303      	movs	r3, #3
 800a63c:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a63e:	2300      	movs	r3, #0
 800a640:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800a642:	1d3b      	adds	r3, r7, #4
 800a644:	4619      	mov	r1, r3
 800a646:	484e      	ldr	r0, [pc, #312]	; (800a780 <dsp7_ADC_Init+0x1e0>)
 800a648:	f7ff f938 	bl	80098bc <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800a64c:	2303      	movs	r3, #3
 800a64e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800a650:	2303      	movs	r3, #3
 800a652:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a654:	2300      	movs	r3, #0
 800a656:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800a658:	1d3b      	adds	r3, r7, #4
 800a65a:	4619      	mov	r1, r3
 800a65c:	4849      	ldr	r0, [pc, #292]	; (800a784 <dsp7_ADC_Init+0x1e4>)
 800a65e:	f7ff f92d 	bl	80098bc <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_3;
 800a662:	230d      	movs	r3, #13
 800a664:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800a666:	2303      	movs	r3, #3
 800a668:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800a66e:	1d3b      	adds	r3, r7, #4
 800a670:	4619      	mov	r1, r3
 800a672:	4845      	ldr	r0, [pc, #276]	; (800a788 <dsp7_ADC_Init+0x1e8>)
 800a674:	f7ff f922 	bl	80098bc <GPIO_Init>

  // ADC Common Init
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 800a678:	2300      	movs	r3, #0
 800a67a:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 800a67c:	2300      	movs	r3, #0
 800a67e:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled; //nur für Multi-ADC mode
 800a680:	2300      	movs	r3, #0
 800a682:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800a684:	2300      	movs	r3, #0
 800a686:	657b      	str	r3, [r7, #84]	; 0x54
  ADC_CommonInit(&ADC_CommonInitStructure);
 800a688:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe fc4b 	bl	8008f28 <ADC_CommonInit>

  // ADC1 Init
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800a692:	2300      	movs	r3, #0
 800a694:	65bb      	str	r3, [r7, #88]	; 0x58
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 800a696:	2301      	movs	r3, #1
 800a698:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	66bb      	str	r3, [r7, #104]	; 0x68
  ADC_InitStructure.ADC_NbrOfConversion = ADCCHANNELS;
 800a6aa:	230a      	movs	r3, #10
 800a6ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  ADC_Init(ADC1, &ADC_InitStructure);
 800a6b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4835      	ldr	r0, [pc, #212]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a6b8:	f7fe fbe0 	bl	8008e7c <ADC_Init>

  // ADC1 regular channel0 configuration
  ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, st);
 800a6bc:	4b34      	ldr	r3, [pc, #208]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	4831      	ldr	r0, [pc, #196]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a6c6:	f7fe fc73 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, st);
 800a6ca:	4b31      	ldr	r3, [pc, #196]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	2104      	movs	r1, #4
 800a6d2:	482e      	ldr	r0, [pc, #184]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a6d4:	f7fe fc6c 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 3, st);
 800a6d8:	4b2d      	ldr	r3, [pc, #180]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2203      	movs	r2, #3
 800a6de:	2106      	movs	r1, #6
 800a6e0:	482a      	ldr	r0, [pc, #168]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a6e2:	f7fe fc65 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 4, st);
 800a6e6:	4b2a      	ldr	r3, [pc, #168]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	2107      	movs	r1, #7
 800a6ee:	4827      	ldr	r0, [pc, #156]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a6f0:	f7fe fc5e 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 5, st);
 800a6f4:	4b26      	ldr	r3, [pc, #152]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2205      	movs	r2, #5
 800a6fa:	2108      	movs	r1, #8
 800a6fc:	4823      	ldr	r0, [pc, #140]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a6fe:	f7fe fc57 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 6, st);
 800a702:	4b23      	ldr	r3, [pc, #140]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2206      	movs	r2, #6
 800a708:	2109      	movs	r1, #9
 800a70a:	4820      	ldr	r0, [pc, #128]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a70c:	f7fe fc50 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 7, st);
 800a710:	4b1f      	ldr	r3, [pc, #124]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2207      	movs	r2, #7
 800a716:	210a      	movs	r1, #10
 800a718:	481c      	ldr	r0, [pc, #112]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a71a:	f7fe fc49 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 8, st);
 800a71e:	4b1c      	ldr	r3, [pc, #112]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2208      	movs	r2, #8
 800a724:	210c      	movs	r1, #12
 800a726:	4819      	ldr	r0, [pc, #100]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a728:	f7fe fc42 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 9, st);
 800a72c:	4b18      	ldr	r3, [pc, #96]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	2209      	movs	r2, #9
 800a732:	210d      	movs	r1, #13
 800a734:	4815      	ldr	r0, [pc, #84]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a736:	f7fe fc3b 	bl	8008fb0 <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 10, st);
 800a73a:	4b15      	ldr	r3, [pc, #84]	; (800a790 <dsp7_ADC_Init+0x1f0>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	220a      	movs	r2, #10
 800a740:	2105      	movs	r1, #5
 800a742:	4812      	ldr	r0, [pc, #72]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a744:	f7fe fc34 	bl	8008fb0 <ADC_RegularChannelConfig>

 // Enable DMA request after last transfer (Single-ADC mode) */
  ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 800a748:	2101      	movs	r1, #1
 800a74a:	4810      	ldr	r0, [pc, #64]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a74c:	f7fe fd26 	bl	800919c <ADC_DMARequestAfterLastTransferCmd>

  // Enable ADC1 DMA
  ADC_DMACmd(ADC1, ENABLE);
 800a750:	2101      	movs	r1, #1
 800a752:	480e      	ldr	r0, [pc, #56]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a754:	f7fe fd06 	bl	8009164 <ADC_DMACmd>

  // Enable ADC1
  ADC_Cmd(ADC1, ENABLE);
 800a758:	2101      	movs	r1, #1
 800a75a:	480c      	ldr	r0, [pc, #48]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a75c:	f7fe fc0c 	bl	8008f78 <ADC_Cmd>

  ADC_SoftwareStartConv(ADC1);   // A/D convert start
 800a760:	480a      	ldr	r0, [pc, #40]	; (800a78c <dsp7_ADC_Init+0x1ec>)
 800a762:	f7fe fcef 	bl	8009144 <ADC_SoftwareStartConv>
}
 800a766:	bf00      	nop
 800a768:	3770      	adds	r7, #112	; 0x70
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	00400007 	.word	0x00400007
 800a774:	4001204c 	.word	0x4001204c
 800a778:	20002c58 	.word	0x20002c58
 800a77c:	40026410 	.word	0x40026410
 800a780:	40020000 	.word	0x40020000
 800a784:	40020400 	.word	0x40020400
 800a788:	40020800 	.word	0x40020800
 800a78c:	40012000 	.word	0x40012000
 800a790:	20000014 	.word	0x20000014

0800a794 <ui16_Read_ADC1_ConvertedValue>:

// es werden per DMA genau ADCMITTELANZ Messungen pro ADC gemacht
// und im Array ADC1ConvertedValue abgelegt
// dann wird hier aus diesen Messungen der Mittelwert gebildet
int ui16_Read_ADC1_ConvertedValue(int channel)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	unsigned long v=0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]
	static unsigned long lastv[ADCCHANNELS];

	for(unsigned long i=0; i<ADCMITTELANZ; i++)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60bb      	str	r3, [r7, #8]
 800a7a4:	e012      	b.n	800a7cc <ui16_Read_ADC1_ConvertedValue+0x38>
		v += ADC1ConvertedValue[i * ADCCHANNELS +channel];
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	4a1d      	ldr	r2, [pc, #116]	; (800a82c <ui16_Read_ADC1_ConvertedValue+0x98>)
 800a7b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
	for(unsigned long i=0; i<ADCMITTELANZ; i++)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	60bb      	str	r3, [r7, #8]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2b3b      	cmp	r3, #59	; 0x3b
 800a7d0:	d9e9      	bls.n	800a7a6 <ui16_Read_ADC1_ConvertedValue+0x12>

	v /= ADCMITTELANZ;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	4a16      	ldr	r2, [pc, #88]	; (800a830 <ui16_Read_ADC1_ConvertedValue+0x9c>)
 800a7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7da:	095b      	lsrs	r3, r3, #5
 800a7dc:	60fb      	str	r3, [r7, #12]

	// beruhige zitterndes Digit 0
	if(v == (lastv[channel]-1) || v == (lastv[channel]+1))
 800a7de:	4a15      	ldr	r2, [pc, #84]	; (800a834 <ui16_Read_ADC1_ConvertedValue+0xa0>)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d007      	beq.n	800a7fe <ui16_Read_ADC1_ConvertedValue+0x6a>
 800a7ee:	4a11      	ldr	r2, [pc, #68]	; (800a834 <ui16_Read_ADC1_ConvertedValue+0xa0>)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d105      	bne.n	800a80a <ui16_Read_ADC1_ConvertedValue+0x76>
	{
		// nur eine unbedeutende Änderung, nehme letzten Wert
		v = lastv[channel];
 800a7fe:	4a0d      	ldr	r2, [pc, #52]	; (800a834 <ui16_Read_ADC1_ConvertedValue+0xa0>)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	e004      	b.n	800a814 <ui16_Read_ADC1_ConvertedValue+0x80>
	}
	else
		lastv[channel] = v;
 800a80a:	490a      	ldr	r1, [pc, #40]	; (800a834 <ui16_Read_ADC1_ConvertedValue+0xa0>)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return (int)((v*2500)/4096);      // Read and return conversion result
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a81a:	fb02 f303 	mul.w	r3, r2, r3
 800a81e:	0b1b      	lsrs	r3, r3, #12
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	20002c58 	.word	0x20002c58
 800a830:	88888889 	.word	0x88888889
 800a834:	20002674 	.word	0x20002674

0800a838 <ui16_Read_ADC1_ConvertedValueSmooth>:

// Bilde Mittelwert über die letzten SMOOTHLEN Messungen
uint16_t smoothbuf[ADCCHANNELS][SMOOTHLEN];
int ui16_Read_ADC1_ConvertedValueSmooth(int channel)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
	for(int i=(SMOOTHLEN-1); i>0; i--)
 800a840:	2313      	movs	r3, #19
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	e018      	b.n	800a878 <ui16_Read_ADC1_ConvertedValueSmooth+0x40>
	{
		smoothbuf[channel][i] = smoothbuf[channel][i-1];
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	1e59      	subs	r1, r3, #1
 800a84a:	481d      	ldr	r0, [pc, #116]	; (800a8c0 <ui16_Read_ADC1_ConvertedValueSmooth+0x88>)
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	4613      	mov	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	440b      	add	r3, r1
 800a858:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800a85c:	4918      	ldr	r1, [pc, #96]	; (800a8c0 <ui16_Read_ADC1_ConvertedValueSmooth+0x88>)
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	4613      	mov	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	4413      	add	r3, r2
 800a86c:	4602      	mov	r2, r0
 800a86e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i=(SMOOTHLEN-1); i>0; i--)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b01      	subs	r3, #1
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dce3      	bgt.n	800a846 <ui16_Read_ADC1_ConvertedValueSmooth+0xe>
	}
	smoothbuf[channel][0] = ui16_Read_ADC1_ConvertedValue(channel);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff ff88 	bl	800a794 <ui16_Read_ADC1_ConvertedValue>
 800a884:	4603      	mov	r3, r0
 800a886:	b298      	uxth	r0, r3
 800a888:	490d      	ldr	r1, [pc, #52]	; (800a8c0 <ui16_Read_ADC1_ConvertedValueSmooth+0x88>)
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	4613      	mov	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	440b      	add	r3, r1
 800a896:	4602      	mov	r2, r0
 800a898:	801a      	strh	r2, [r3, #0]

	// entferne höchsten und niedrigsten Wert
	// und bilde vom Rest den Mittelwert
	uint16_t midval = removeu16Peaks(smoothbuf[channel],SMOOTHLEN);
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	4a06      	ldr	r2, [pc, #24]	; (800a8c0 <ui16_Read_ADC1_ConvertedValueSmooth+0x88>)
 800a8a6:	4413      	add	r3, r2
 800a8a8:	2114      	movs	r1, #20
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 f8d8 	bl	800aa60 <removeu16Peaks>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	817b      	strh	r3, [r7, #10]

	return midval;
 800a8b4:	897b      	ldrh	r3, [r7, #10]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20002ac8 	.word	0x20002ac8

0800a8c4 <ui16_Read_ADC_ConvertedPeakValue>:
unsigned long peakval_ant = 0;
unsigned long peakval_flt = 0;
unsigned long peakval_drv = 0;

int ui16_Read_ADC_ConvertedPeakValue(int channel)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
unsigned long *ppeakval = &peakval_flt;
 800a8cc:	4b22      	ldr	r3, [pc, #136]	; (800a958 <ui16_Read_ADC_ConvertedPeakValue+0x94>)
 800a8ce:	60fb      	str	r3, [r7, #12]

	if(channel == UFWDFLT) ppeakval = &peakval_flt;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b06      	cmp	r3, #6
 800a8d4:	d101      	bne.n	800a8da <ui16_Read_ADC_ConvertedPeakValue+0x16>
 800a8d6:	4b20      	ldr	r3, [pc, #128]	; (800a958 <ui16_Read_ADC_ConvertedPeakValue+0x94>)
 800a8d8:	60fb      	str	r3, [r7, #12]
	if(channel == UFWDIN) ppeakval = &peakval_drv;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b05      	cmp	r3, #5
 800a8de:	d101      	bne.n	800a8e4 <ui16_Read_ADC_ConvertedPeakValue+0x20>
 800a8e0:	4b1e      	ldr	r3, [pc, #120]	; (800a95c <ui16_Read_ADC_ConvertedPeakValue+0x98>)
 800a8e2:	60fb      	str	r3, [r7, #12]
	if(channel == UFWDANT) ppeakval = &peakval_ant;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b09      	cmp	r3, #9
 800a8e8:	d101      	bne.n	800a8ee <ui16_Read_ADC_ConvertedPeakValue+0x2a>
 800a8ea:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <ui16_Read_ADC_ConvertedPeakValue+0x9c>)
 800a8ec:	60fb      	str	r3, [r7, #12]

	// Peakvalue mit Haltezeit für den blauen Balken
	for(int i=0; i<ADCMITTELANZ; i++)
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	e021      	b.n	800a938 <ui16_Read_ADC_ConvertedPeakValue+0x74>
	{
		if(*ppeakval < ADC1ConvertedValue[i * ADCCHANNELS +channel])
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6819      	ldr	r1, [r3, #0]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	461a      	mov	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4413      	add	r3, r2
 800a908:	4a16      	ldr	r2, [pc, #88]	; (800a964 <ui16_Read_ADC_ConvertedPeakValue+0xa0>)
 800a90a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a90e:	b29b      	uxth	r3, r3
 800a910:	4299      	cmp	r1, r3
 800a912:	d20e      	bcs.n	800a932 <ui16_Read_ADC_ConvertedPeakValue+0x6e>
			*ppeakval = ADC1ConvertedValue[i * ADCCHANNELS +channel];
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	005b      	lsls	r3, r3, #1
 800a91e:	461a      	mov	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4413      	add	r3, r2
 800a924:	4a0f      	ldr	r2, [pc, #60]	; (800a964 <ui16_Read_ADC_ConvertedPeakValue+0xa0>)
 800a926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	461a      	mov	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	601a      	str	r2, [r3, #0]
	for(int i=0; i<ADCMITTELANZ; i++)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	3301      	adds	r3, #1
 800a936:	60bb      	str	r3, [r7, #8]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b3b      	cmp	r3, #59	; 0x3b
 800a93c:	ddda      	ble.n	800a8f4 <ui16_Read_ADC_ConvertedPeakValue+0x30>
	}

	return (int)((*ppeakval*2500)/4096);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a946:	fb02 f303 	mul.w	r3, r2, r3
 800a94a:	0b1b      	lsrs	r3, r3, #12
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	20002668 	.word	0x20002668
 800a95c:	2000266c 	.word	0x2000266c
 800a960:	20002664 	.word	0x20002664
 800a964:	20002c58 	.word	0x20002c58

0800a968 <ui16_Read_ADC_ConvertedPeakValue_noHold>:

// Peakvalue ohne Haltezeit für die normale Anzeige, falls das
// anstelle des normalen Mittelwerts gewünscht ist (z.B. für SSB)
int ui16_Read_ADC_ConvertedPeakValue_noHold(int channel)
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
unsigned long v = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<ADCMITTELANZ; i++)
 800a974:	2300      	movs	r3, #0
 800a976:	60bb      	str	r3, [r7, #8]
 800a978:	e01f      	b.n	800a9ba <ui16_Read_ADC_ConvertedPeakValue_noHold+0x52>
	{
		if(v < ADC1ConvertedValue[i * ADCCHANNELS +channel])
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	4613      	mov	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	461a      	mov	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4413      	add	r3, r2
 800a98a:	4a13      	ldr	r2, [pc, #76]	; (800a9d8 <ui16_Read_ADC_ConvertedPeakValue_noHold+0x70>)
 800a98c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a990:	b29b      	uxth	r3, r3
 800a992:	461a      	mov	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4293      	cmp	r3, r2
 800a998:	d20c      	bcs.n	800a9b4 <ui16_Read_ADC_ConvertedPeakValue_noHold+0x4c>
			v = ADC1ConvertedValue[i * ADCCHANNELS +channel];
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	4613      	mov	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	4a0b      	ldr	r2, [pc, #44]	; (800a9d8 <ui16_Read_ADC_ConvertedPeakValue_noHold+0x70>)
 800a9ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<ADCMITTELANZ; i++)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	60bb      	str	r3, [r7, #8]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b3b      	cmp	r3, #59	; 0x3b
 800a9be:	dddc      	ble.n	800a97a <ui16_Read_ADC_ConvertedPeakValue_noHold+0x12>
	}

	return (int)((v*2500)/4096);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a9c6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ca:	0b1b      	lsrs	r3, r3, #12
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	20002c58 	.word	0x20002c58

0800a9dc <clear_peakvals>:

void clear_peakvals()
{
 800a9dc:	b480      	push	{r7}
 800a9de:	af00      	add	r7, sp, #0
	peakval_flt = 0;
 800a9e0:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <clear_peakvals+0x20>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]
	peakval_drv = 0;
 800a9e6:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <clear_peakvals+0x24>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
	peakval_ant = 0;
 800a9ec:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <clear_peakvals+0x28>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]
}
 800a9f2:	bf00      	nop
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	20002668 	.word	0x20002668
 800aa00:	2000266c 	.word	0x2000266c
 800aa04:	20002664 	.word	0x20002664

0800aa08 <DMA2_Stream0_IRQHandler>:

volatile int adccnv_ready = 0;

void DMA2_Stream0_IRQHandler()
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream0,DMA_IT_TCIF0) == SET)
 800aa0c:	4907      	ldr	r1, [pc, #28]	; (800aa2c <DMA2_Stream0_IRQHandler+0x24>)
 800aa0e:	4808      	ldr	r0, [pc, #32]	; (800aa30 <DMA2_Stream0_IRQHandler+0x28>)
 800aa10:	f7fe fca6 	bl	8009360 <DMA_GetITStatus>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d106      	bne.n	800aa28 <DMA2_Stream0_IRQHandler+0x20>
	{
		adccnv_ready = 1;
 800aa1a:	4b06      	ldr	r3, [pc, #24]	; (800aa34 <DMA2_Stream0_IRQHandler+0x2c>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	601a      	str	r2, [r3, #0]
		DMA_ClearITPendingBit(DMA2_Stream0,DMA_IT_TCIF0);
 800aa20:	4902      	ldr	r1, [pc, #8]	; (800aa2c <DMA2_Stream0_IRQHandler+0x24>)
 800aa22:	4803      	ldr	r0, [pc, #12]	; (800aa30 <DMA2_Stream0_IRQHandler+0x28>)
 800aa24:	f7fe fcf4 	bl	8009410 <DMA_ClearITPendingBit>
	}
}
 800aa28:	bf00      	nop
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	10008020 	.word	0x10008020
 800aa30:	40026410 	.word	0x40026410
 800aa34:	20002670 	.word	0x20002670

0800aa38 <isAdcConvReady>:

int isAdcConvReady()
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
	if(adccnv_ready == 1)
 800aa3c:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <isAdcConvReady+0x24>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d104      	bne.n	800aa4e <isAdcConvReady+0x16>
	{
		adccnv_ready = 0;
 800aa44:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <isAdcConvReady+0x24>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]
		return 1;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e000      	b.n	800aa50 <isAdcConvReady+0x18>
	}

	return 0;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	20002670 	.word	0x20002670

0800aa60 <removeu16Peaks>:

// entferne höchste und niedrigste Werte aus einem uint16_t Array
uint16_t removeu16Peaks(uint16_t buf[], int len)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b08d      	sub	sp, #52	; 0x34
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
	// bestimme die max und min Werte
	uint16_t min = 65000, max = 0;
 800aa6a:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 800aa6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800aa70:	2300      	movs	r3, #0
 800aa72:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for(int i=0; i<len; i++)
 800aa74:	2300      	movs	r3, #0
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa78:	e01e      	b.n	800aab8 <removeu16Peaks+0x58>
	{
		if(buf[i] > max) max = buf[i];
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	4413      	add	r3, r2
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d205      	bcs.n	800aa96 <removeu16Peaks+0x36>
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	005b      	lsls	r3, r3, #1
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	4413      	add	r3, r2
 800aa92:	881b      	ldrh	r3, [r3, #0]
 800aa94:	85bb      	strh	r3, [r7, #44]	; 0x2c
		if(buf[i] < min) min = buf[i];
 800aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa98:	005b      	lsls	r3, r3, #1
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d905      	bls.n	800aab2 <removeu16Peaks+0x52>
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	4413      	add	r3, r2
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(int i=0; i<len; i++)
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	3301      	adds	r3, #1
 800aab6:	62bb      	str	r3, [r7, #40]	; 0x28
 800aab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	dbdc      	blt.n	800aa7a <removeu16Peaks+0x1a>
	}

	// gibt es einen Wert, der zwischen min und max liegt ?
	// wenn nicht, dann gibt es nur min/max Werte, in dem Fall entferne keine
	int valfound = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i<len; i++)
 800aac4:	2300      	movs	r3, #0
 800aac6:	623b      	str	r3, [r7, #32]
 800aac8:	e015      	b.n	800aaf6 <removeu16Peaks+0x96>
	{
		if(buf[i] < max && buf[i] > min)
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	4413      	add	r3, r2
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d90a      	bls.n	800aaf0 <removeu16Peaks+0x90>
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	4413      	add	r3, r2
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d202      	bcs.n	800aaf0 <removeu16Peaks+0x90>
		{
			valfound = 1;
 800aaea:	2301      	movs	r3, #1
 800aaec:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800aaee:	e006      	b.n	800aafe <removeu16Peaks+0x9e>
	for(int i=0; i<len; i++)
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	623b      	str	r3, [r7, #32]
 800aaf6:	6a3a      	ldr	r2, [r7, #32]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	dbe5      	blt.n	800aaca <removeu16Peaks+0x6a>
		}
	}

	if(valfound)
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d020      	beq.n	800ab46 <removeu16Peaks+0xe6>
	{
		// markiere die min und max Werte Werte
		for(int i=0; i<len; i++)
 800ab04:	2300      	movs	r3, #0
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	e019      	b.n	800ab3e <removeu16Peaks+0xde>
		{
			if(buf[i] == max || buf[i] == min)
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	4413      	add	r3, r2
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d007      	beq.n	800ab2a <removeu16Peaks+0xca>
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	4413      	add	r3, r2
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d106      	bne.n	800ab38 <removeu16Peaks+0xd8>
				buf[i] = 65000;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	005b      	lsls	r3, r3, #1
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800ab36:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<len; i++)
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	61fb      	str	r3, [r7, #28]
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	dbe1      	blt.n	800ab0a <removeu16Peaks+0xaa>
		}
	}

	// bilde Mittelwert über den Rest
	uint32_t mid = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	61bb      	str	r3, [r7, #24]
	int anz = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	617b      	str	r3, [r7, #20]
	for(int i=0; i<len; i++)
 800ab4e:	2300      	movs	r3, #0
 800ab50:	613b      	str	r3, [r7, #16]
 800ab52:	e017      	b.n	800ab84 <removeu16Peaks+0x124>
	{
		if(buf[i] != 65000)
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00b      	beq.n	800ab7e <removeu16Peaks+0x11e>
		{
			mid += buf[i];
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	4413      	add	r3, r2
 800ab76:	61bb      	str	r3, [r7, #24]
			anz++;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	617b      	str	r3, [r7, #20]
	for(int i=0; i<len; i++)
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	3301      	adds	r3, #1
 800ab82:	613b      	str	r3, [r7, #16]
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	dbe3      	blt.n	800ab54 <removeu16Peaks+0xf4>
		}
	}
	mid /= anz;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab94:	61bb      	str	r3, [r7, #24]

	// und fülle die markierten Zellen mit dem Mittelwert
	for(int i=0; i<len; i++)
 800ab96:	2300      	movs	r3, #0
 800ab98:	60fb      	str	r3, [r7, #12]
 800ab9a:	e012      	b.n	800abc2 <removeu16Peaks+0x162>
	{
		if(buf[i] == 65000)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	4413      	add	r3, r2
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800abaa:	4293      	cmp	r3, r2
 800abac:	d106      	bne.n	800abbc <removeu16Peaks+0x15c>
			buf[i] = mid;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	4413      	add	r3, r2
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	b292      	uxth	r2, r2
 800abba:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<len; i++)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3301      	adds	r3, #1
 800abc0:	60fb      	str	r3, [r7, #12]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	dbe8      	blt.n	800ab9c <removeu16Peaks+0x13c>
	}

	return (uint16_t)mid;
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	b29b      	uxth	r3, r3
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3734      	adds	r7, #52	; 0x34
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
	...

0800abdc <adc_calculate_raw_values>:

int adc_rawvals[NUMADCVALS];
float adc_realvals[NUMADCVALS];

void adc_calculate_raw_values()
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
	if(isAdcConvReady())
 800abe2:	f7ff ff29 	bl	800aa38 <isAdcConvReady>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d043      	beq.n	800ac74 <adc_calculate_raw_values+0x98>
	{
		for(int i=0; i<=UTEMP2; i++)
 800abec:	2300      	movs	r3, #0
 800abee:	607b      	str	r3, [r7, #4]
 800abf0:	e025      	b.n	800ac3e <adc_calculate_raw_values+0x62>
		{
			if(i == UFWDIN || i == UFWDFLT)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b05      	cmp	r3, #5
 800abf6:	d002      	beq.n	800abfe <adc_calculate_raw_values+0x22>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b06      	cmp	r3, #6
 800abfc:	d108      	bne.n	800ac10 <adc_calculate_raw_values+0x34>
				adc_rawvals[i] = ui16_Read_ADC_ConvertedPeakValue_noHold(i);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7ff feb2 	bl	800a968 <ui16_Read_ADC_ConvertedPeakValue_noHold>
 800ac04:	4601      	mov	r1, r0
 800ac06:	4a22      	ldr	r2, [pc, #136]	; (800ac90 <adc_calculate_raw_values+0xb4>)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800ac0e:	e013      	b.n	800ac38 <adc_calculate_raw_values+0x5c>
			else if(i == UREVANT)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d108      	bne.n	800ac28 <adc_calculate_raw_values+0x4c>
				adc_rawvals[i] = ui16_Read_ADC1_ConvertedValue(i);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff fdbc 	bl	800a794 <ui16_Read_ADC1_ConvertedValue>
 800ac1c:	4601      	mov	r1, r0
 800ac1e:	4a1c      	ldr	r2, [pc, #112]	; (800ac90 <adc_calculate_raw_values+0xb4>)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800ac26:	e007      	b.n	800ac38 <adc_calculate_raw_values+0x5c>
			else
				adc_rawvals[i] = ui16_Read_ADC1_ConvertedValueSmooth(i);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff fe05 	bl	800a838 <ui16_Read_ADC1_ConvertedValueSmooth>
 800ac2e:	4601      	mov	r1, r0
 800ac30:	4a17      	ldr	r2, [pc, #92]	; (800ac90 <adc_calculate_raw_values+0xb4>)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<=UTEMP2; i++)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	ddd6      	ble.n	800abf2 <adc_calculate_raw_values+0x16>
		}
		adc_rawvals[UFLTFWDPEAK] = ui16_Read_ADC_ConvertedPeakValue(UFWDFLT);
 800ac44:	2006      	movs	r0, #6
 800ac46:	f7ff fe3d 	bl	800a8c4 <ui16_Read_ADC_ConvertedPeakValue>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	4b10      	ldr	r3, [pc, #64]	; (800ac90 <adc_calculate_raw_values+0xb4>)
 800ac4e:	631a      	str	r2, [r3, #48]	; 0x30
		adc_rawvals[UDRVFWDPEAK] = ui16_Read_ADC_ConvertedPeakValue(UFWDIN);
 800ac50:	2005      	movs	r0, #5
 800ac52:	f7ff fe37 	bl	800a8c4 <ui16_Read_ADC_ConvertedPeakValue>
 800ac56:	4602      	mov	r2, r0
 800ac58:	4b0d      	ldr	r3, [pc, #52]	; (800ac90 <adc_calculate_raw_values+0xb4>)
 800ac5a:	635a      	str	r2, [r3, #52]	; 0x34

		adc_rawvals[UFWDANT] = ui16_Read_ADC_ConvertedPeakValue_noHold(UFWDANT);
 800ac5c:	2009      	movs	r0, #9
 800ac5e:	f7ff fe83 	bl	800a968 <ui16_Read_ADC_ConvertedPeakValue_noHold>
 800ac62:	4602      	mov	r2, r0
 800ac64:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <adc_calculate_raw_values+0xb4>)
 800ac66:	625a      	str	r2, [r3, #36]	; 0x24
		adc_rawvals[UANTFWDPEAK] = ui16_Read_ADC_ConvertedPeakValue(UFWDANT);
 800ac68:	2009      	movs	r0, #9
 800ac6a:	f7ff fe2b 	bl	800a8c4 <ui16_Read_ADC_ConvertedPeakValue>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <adc_calculate_raw_values+0xb4>)
 800ac72:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if(isADC3ConvReady())
 800ac74:	f7ff fc82 	bl	800a57c <isADC3ConvReady>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d004      	beq.n	800ac88 <adc_calculate_raw_values+0xac>
		adc_rawvals[UREVFLT] = ui16_Read_ADC3_ConvertedValue();
 800ac7e:	f7ff fc21 	bl	800a4c4 <ui16_Read_ADC3_ConvertedValue>
 800ac82:	4602      	mov	r2, r0
 800ac84:	4b02      	ldr	r3, [pc, #8]	; (800ac90 <adc_calculate_raw_values+0xb4>)
 800ac86:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20003108 	.word	0x20003108
 800ac94:	00000000 	.word	0x00000000

0800ac98 <adc_calculate_real_values>:

void adc_calculate_real_values()
{
 800ac98:	b5b0      	push	{r4, r5, r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	// Calculate PS Voltage
	// Spannungsteiler 390k : 10k
	adc_realvals[UMESS] = (float)(adc_rawvals[UMESS] *(390+10)) / 10.0;
 800ac9e:	4b84      	ldr	r3, [pc, #528]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800aca6:	fb02 f303 	mul.w	r3, r2, r3
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800acb2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800acb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800acba:	4b7e      	ldr	r3, [pc, #504]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800acbc:	edc3 7a01 	vstr	s15, [r3, #4]
	adc_realvals[UMESS] /= 1000.0;
 800acc0:	4b7c      	ldr	r3, [pc, #496]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800acc2:	ed93 7a01 	vldr	s14, [r3, #4]
 800acc6:	eddf 6a7c 	vldr	s13, [pc, #496]	; 800aeb8 <adc_calculate_real_values+0x220>
 800acca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800acce:	4b79      	ldr	r3, [pc, #484]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800acd0:	edc3 7a01 	vstr	s15, [r3, #4]
	if(adc_realvals[UMESS] < 4.0) adc_realvals[UMESS] = 0;
 800acd4:	4b77      	ldr	r3, [pc, #476]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800acd6:	edd3 7a01 	vldr	s15, [r3, #4]
 800acda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800acde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ace2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace6:	d503      	bpl.n	800acf0 <adc_calculate_real_values+0x58>
 800ace8:	4b72      	ldr	r3, [pc, #456]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800acea:	f04f 0200 	mov.w	r2, #0
 800acee:	605a      	str	r2, [r3, #4]
	// Umess = Ilast * 0,001 * 20 = Ilast * 0,02
	// Ilast(=Ianzeige) = Umess[mV] / 20

	// der Rohwert des INA193 kann einen 0-Offset von bis zu xxx (gemessen 49mV, 19mV usw)  haben
	// dieser Offset ist bei richtigen Messungen scheinbar nicht mehr vorhanden
	if(adc_rawvals[IMESS] < 45) adc_rawvals[IMESS] = 0;	// alles unter xxx mV ignorieren (kan bei verschiedenen INAs variieren)
 800acf0:	4b6f      	ldr	r3, [pc, #444]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	2b2c      	cmp	r3, #44	; 0x2c
 800acf6:	dc02      	bgt.n	800acfe <adc_calculate_real_values+0x66>
 800acf8:	4b6d      	ldr	r3, [pc, #436]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	611a      	str	r2, [r3, #16]
	if(adc_realvals[UMESS] == 0) adc_rawvals[IMESS] = 0;// wenn keine Spannung da, dann zeige auch keinen Strom an
 800acfe:	4b6d      	ldr	r3, [pc, #436]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ad00:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad04:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ad08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0c:	d102      	bne.n	800ad14 <adc_calculate_real_values+0x7c>
 800ad0e:	4b68      	ldr	r3, [pc, #416]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	611a      	str	r2, [r3, #16]

	float R_SHUNT = shuntValue[pcfgdata->shuntR];	// mOhms
 800ad14:	4b69      	ldr	r3, [pc, #420]	; (800aebc <adc_calculate_real_values+0x224>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad1c:	4a68      	ldr	r2, [pc, #416]	; (800aec0 <adc_calculate_real_values+0x228>)
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	607b      	str	r3, [r7, #4]
	adc_realvals[IMESS] = (float)adc_rawvals[IMESS] / (20.0*R_SHUNT);
 800ad26:	4b62      	ldr	r3, [pc, #392]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad32:	ee17 0a90 	vmov	r0, s15
 800ad36:	f7fd fb3f 	bl	80083b8 <__aeabi_f2d>
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7fd fb3a 	bl	80083b8 <__aeabi_f2d>
 800ad44:	f04f 0200 	mov.w	r2, #0
 800ad48:	4b5e      	ldr	r3, [pc, #376]	; (800aec4 <adc_calculate_real_values+0x22c>)
 800ad4a:	f7fd fb8d 	bl	8008468 <__aeabi_dmul>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	4620      	mov	r0, r4
 800ad54:	4629      	mov	r1, r5
 800ad56:	f7fd fcb1 	bl	80086bc <__aeabi_ddiv>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	4618      	mov	r0, r3
 800ad60:	4621      	mov	r1, r4
 800ad62:	f7fd fe59 	bl	8008a18 <__aeabi_d2f>
 800ad66:	4602      	mov	r2, r0
 800ad68:	4b52      	ldr	r3, [pc, #328]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ad6a:	611a      	str	r2, [r3, #16]

	// Temperaturmessung
	adc_realvals[UTEMP] = calc_temp(adc_rawvals[UTEMP]);
 800ad6c:	4b50      	ldr	r3, [pc, #320]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f00a fc4d 	bl	8015610 <calc_temp>
 800ad76:	eef0 7a40 	vmov.f32	s15, s0
 800ad7a:	4b4e      	ldr	r3, [pc, #312]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ad7c:	edc3 7a03 	vstr	s15, [r3, #12]
	adc_realvals[UTEMP2] = calc_temp(adc_rawvals[UTEMP2]);
 800ad80:	4b4b      	ldr	r3, [pc, #300]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f00a fc43 	bl	8015610 <calc_temp>
 800ad8a:	eef0 7a40 	vmov.f32	s15, s0
 800ad8e:	4b49      	ldr	r3, [pc, #292]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ad90:	edc3 7a08 	vstr	s15, [r3, #32]
		11-15M .. 1,25
		15-22M .. 0,98
		22-30M .. 0,68
		> 30M ... 0,58
	*/
	if(adc_rawvals[UBAND] < 300) adc_realvals[UBAND] = 30;
 800ad94:	4b46      	ldr	r3, [pc, #280]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad9c:	da03      	bge.n	800ada6 <adc_calculate_real_values+0x10e>
 800ad9e:	4b45      	ldr	r3, [pc, #276]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ada0:	4a49      	ldr	r2, [pc, #292]	; (800aec8 <adc_calculate_real_values+0x230>)
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e03e      	b.n	800ae24 <adc_calculate_real_values+0x18c>
	else if(adc_rawvals[UBAND] < 630) adc_realvals[UBAND] = 6;
 800ada6:	4b42      	ldr	r3, [pc, #264]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f240 2275 	movw	r2, #629	; 0x275
 800adae:	4293      	cmp	r3, r2
 800adb0:	dc03      	bgt.n	800adba <adc_calculate_real_values+0x122>
 800adb2:	4b40      	ldr	r3, [pc, #256]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800adb4:	4a45      	ldr	r2, [pc, #276]	; (800aecc <adc_calculate_real_values+0x234>)
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	e034      	b.n	800ae24 <adc_calculate_real_values+0x18c>
	else if(adc_rawvals[UBAND] < 830) adc_realvals[UBAND] = 1210;
 800adba:	4b3d      	ldr	r3, [pc, #244]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f240 323d 	movw	r2, #829	; 0x33d
 800adc2:	4293      	cmp	r3, r2
 800adc4:	dc03      	bgt.n	800adce <adc_calculate_real_values+0x136>
 800adc6:	4b3b      	ldr	r3, [pc, #236]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800adc8:	4a41      	ldr	r2, [pc, #260]	; (800aed0 <adc_calculate_real_values+0x238>)
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	e02a      	b.n	800ae24 <adc_calculate_real_values+0x18c>
	else if(adc_rawvals[UBAND] < 1115) adc_realvals[UBAND] = 1715;
 800adce:	4b38      	ldr	r3, [pc, #224]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f240 425a 	movw	r2, #1114	; 0x45a
 800add6:	4293      	cmp	r3, r2
 800add8:	dc03      	bgt.n	800ade2 <adc_calculate_real_values+0x14a>
 800adda:	4b36      	ldr	r3, [pc, #216]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800addc:	4a3d      	ldr	r2, [pc, #244]	; (800aed4 <adc_calculate_real_values+0x23c>)
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	e020      	b.n	800ae24 <adc_calculate_real_values+0x18c>
	else if(adc_rawvals[UBAND] < 1405) adc_realvals[UBAND] = 20;
 800ade2:	4b33      	ldr	r3, [pc, #204]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f240 527c 	movw	r2, #1404	; 0x57c
 800adea:	4293      	cmp	r3, r2
 800adec:	dc03      	bgt.n	800adf6 <adc_calculate_real_values+0x15e>
 800adee:	4b31      	ldr	r3, [pc, #196]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800adf0:	4a39      	ldr	r2, [pc, #228]	; (800aed8 <adc_calculate_real_values+0x240>)
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	e016      	b.n	800ae24 <adc_calculate_real_values+0x18c>
	else if(adc_rawvals[UBAND] < 1715) adc_realvals[UBAND] = 6040;
 800adf6:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f240 62b2 	movw	r2, #1714	; 0x6b2
 800adfe:	4293      	cmp	r3, r2
 800ae00:	dc03      	bgt.n	800ae0a <adc_calculate_real_values+0x172>
 800ae02:	4b2c      	ldr	r3, [pc, #176]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae04:	4a35      	ldr	r2, [pc, #212]	; (800aedc <adc_calculate_real_values+0x244>)
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	e00c      	b.n	800ae24 <adc_calculate_real_values+0x18c>
	else if(adc_rawvals[UBAND] < 2085) adc_realvals[UBAND] = 80;
 800ae0a:	4b29      	ldr	r3, [pc, #164]	; (800aeb0 <adc_calculate_real_values+0x218>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f640 0224 	movw	r2, #2084	; 0x824
 800ae12:	4293      	cmp	r3, r2
 800ae14:	dc03      	bgt.n	800ae1e <adc_calculate_real_values+0x186>
 800ae16:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae18:	4a31      	ldr	r2, [pc, #196]	; (800aee0 <adc_calculate_real_values+0x248>)
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	e002      	b.n	800ae24 <adc_calculate_real_values+0x18c>
	else adc_realvals[UBAND] = 160;
 800ae1e:	4b25      	ldr	r3, [pc, #148]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae20:	4a30      	ldr	r2, [pc, #192]	; (800aee4 <adc_calculate_real_values+0x24c>)
 800ae22:	601a      	str	r2, [r3, #0]

	calc_PwrBridges();	// die Ergebnisse stehen in dent_pwrswr Strukturen
 800ae24:	f00a fd46 	bl	80158b4 <calc_PwrBridges>

	// nicht gemessene sondern berechnete Werte
	adc_realvals[CALC_POWER] = adc_realvals[IMESS] * adc_realvals[UMESS];
 800ae28:	4b22      	ldr	r3, [pc, #136]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae2a:	ed93 7a04 	vldr	s14, [r3, #16]
 800ae2e:	4b21      	ldr	r3, [pc, #132]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae30:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae38:	4b1e      	ldr	r3, [pc, #120]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae3a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	if(adc_realvals[CALC_POWER] < 0.01)
 800ae3e:	4b1d      	ldr	r3, [pc, #116]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fd fab8 	bl	80083b8 <__aeabi_f2d>
 800ae48:	a317      	add	r3, pc, #92	; (adr r3, 800aea8 <adc_calculate_real_values+0x210>)
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	f7fd fd7d 	bl	800894c <__aeabi_dcmplt>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d004      	beq.n	800ae62 <adc_calculate_real_values+0x1ca>
		adc_realvals[CALC_EFF] = 0;
 800ae58:	4b16      	ldr	r3, [pc, #88]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae5a:	f04f 0200 	mov.w	r2, #0
 800ae5e:	63da      	str	r2, [r3, #60]	; 0x3c
 800ae60:	e00e      	b.n	800ae80 <adc_calculate_real_values+0x1e8>
	else
		adc_realvals[CALC_EFF] = 100 * pwrswr_antenna.fwd_watt / adc_realvals[CALC_POWER];
 800ae62:	4b21      	ldr	r3, [pc, #132]	; (800aee8 <adc_calculate_real_values+0x250>)
 800ae64:	edd3 7a02 	vldr	s15, [r3, #8]
 800ae68:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800aeec <adc_calculate_real_values+0x254>
 800ae6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ae70:	4b10      	ldr	r3, [pc, #64]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae72:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ae76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae7a:	4b0e      	ldr	r3, [pc, #56]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae7c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	if(adc_realvals[CALC_EFF] > 100.0) adc_realvals[CALC_EFF] = 100.0;
 800ae80:	4b0c      	ldr	r3, [pc, #48]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae82:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ae86:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800aeec <adc_calculate_real_values+0x254>
 800ae8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae92:	dc00      	bgt.n	800ae96 <adc_calculate_real_values+0x1fe>

}
 800ae94:	e002      	b.n	800ae9c <adc_calculate_real_values+0x204>
	if(adc_realvals[CALC_EFF] > 100.0) adc_realvals[CALC_EFF] = 100.0;
 800ae96:	4b07      	ldr	r3, [pc, #28]	; (800aeb4 <adc_calculate_real_values+0x21c>)
 800ae98:	4a15      	ldr	r2, [pc, #84]	; (800aef0 <adc_calculate_real_values+0x258>)
 800ae9a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ae9c:	bf00      	nop
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bdb0      	pop	{r4, r5, r7, pc}
 800aea4:	f3af 8000 	nop.w
 800aea8:	47ae147b 	.word	0x47ae147b
 800aeac:	3f847ae1 	.word	0x3f847ae1
 800aeb0:	20003108 	.word	0x20003108
 800aeb4:	2000314c 	.word	0x2000314c
 800aeb8:	447a0000 	.word	0x447a0000
 800aebc:	20000bf0 	.word	0x20000bf0
 800aec0:	200019c8 	.word	0x200019c8
 800aec4:	40340000 	.word	0x40340000
 800aec8:	41f00000 	.word	0x41f00000
 800aecc:	40c00000 	.word	0x40c00000
 800aed0:	44974000 	.word	0x44974000
 800aed4:	44d66000 	.word	0x44d66000
 800aed8:	41a00000 	.word	0x41a00000
 800aedc:	45bcc000 	.word	0x45bcc000
 800aee0:	42a00000 	.word	0x42a00000
 800aee4:	43200000 	.word	0x43200000
 800aee8:	20005684 	.word	0x20005684
 800aeec:	42c80000 	.word	0x42c80000
 800aef0:	42c80000 	.word	0x42c80000

0800aef4 <adc_calculate_values>:

void adc_calculate_values()
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	af00      	add	r7, sp, #0
	adc_calculate_raw_values();
 800aef8:	f7ff fe70 	bl	800abdc <adc_calculate_raw_values>
	adc_calculate_real_values();
 800aefc:	f7ff fecc 	bl	800ac98 <adc_calculate_real_values>
}
 800af00:	bf00      	nop
 800af02:	bd80      	pop	{r7, pc}

0800af04 <do_button_antsw>:
	"dann aktiviere die Baender",
	"fuer diese Antenne"
};

int do_button_antsw(int touchbutton)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af02      	add	r7, sp, #8
 800af0a:	6078      	str	r0, [r7, #4]
	if(touchbutton == 9999) return 1;	// nicht benötigter Button
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f242 720f 	movw	r2, #9999	; 0x270f
 800af12:	4293      	cmp	r3, r2
 800af14:	d101      	bne.n	800af1a <do_button_antsw+0x16>
 800af16:	2301      	movs	r3, #1
 800af18:	e0a6      	b.n	800b068 <do_button_antsw+0x164>

	if(touchbutton >= TB_ANTSW1 && touchbutton <= TB_ANTSW3)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b38      	cmp	r3, #56	; 0x38
 800af1e:	dd5e      	ble.n	800afde <do_button_antsw+0xda>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b3b      	cmp	r3, #59	; 0x3b
 800af24:	dc5b      	bgt.n	800afde <do_button_antsw+0xda>
	{
		tb_buttons[TB_ANTSW1].pressed = 0;
 800af26:	4b52      	ldr	r3, [pc, #328]	; (800b070 <do_button_antsw+0x16c>)
 800af28:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 800af2c:	331c      	adds	r3, #28
 800af2e:	2200      	movs	r2, #0
 800af30:	701a      	strb	r2, [r3, #0]
		tb_buttons[TB_ANTSW2].pressed = 0;
 800af32:	4b4f      	ldr	r3, [pc, #316]	; (800b070 <do_button_antsw+0x16c>)
 800af34:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800af38:	331c      	adds	r3, #28
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
		tb_buttons[TB_ANTSW3].pressed = 0;
 800af3e:	4b4c      	ldr	r3, [pc, #304]	; (800b070 <do_button_antsw+0x16c>)
 800af40:	f503 53b3 	add.w	r3, r3, #5728	; 0x1660
 800af44:	331c      	adds	r3, #28
 800af46:	2200      	movs	r2, #0
 800af48:	701a      	strb	r2, [r3, #0]

		tb_buttons[touchbutton].pressed = 1;
 800af4a:	4949      	ldr	r1, [pc, #292]	; (800b070 <do_button_antsw+0x16c>)
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	4613      	mov	r3, r2
 800af50:	005b      	lsls	r3, r3, #1
 800af52:	4413      	add	r3, r2
 800af54:	015b      	lsls	r3, r3, #5
 800af56:	440b      	add	r3, r1
 800af58:	335c      	adds	r3, #92	; 0x5c
 800af5a:	2201      	movs	r2, #1
 800af5c:	701a      	strb	r2, [r3, #0]
		draw_touchbutton(&tb_buttons[TB_ANTSW1]);
 800af5e:	4845      	ldr	r0, [pc, #276]	; (800b074 <do_button_antsw+0x170>)
 800af60:	f00f f854 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_ANTSW2]);
 800af64:	4844      	ldr	r0, [pc, #272]	; (800b078 <do_button_antsw+0x174>)
 800af66:	f00f f851 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_ANTSW3]);
 800af6a:	4844      	ldr	r0, [pc, #272]	; (800b07c <do_button_antsw+0x178>)
 800af6c:	f00f f84e 	bl	801a00c <draw_touchbutton>

		pcfgdata->antsw = touchbutton - TB_ANTSW1;	// merke aktuelle Schaltstellung
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	b2da      	uxtb	r2, r3
 800af74:	4b42      	ldr	r3, [pc, #264]	; (800b080 <do_button_antsw+0x17c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3a39      	subs	r2, #57	; 0x39
 800af7a:	b2d2      	uxtb	r2, r2
 800af7c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

		int px = 10;
 800af80:	230a      	movs	r3, #10
 800af82:	60fb      	str	r3, [r7, #12]
		int py = 200;
 800af84:	23c8      	movs	r3, #200	; 0xc8
 800af86:	60bb      	str	r3, [r7, #8]

		if(touchbutton == TB_ANTSW1) TFT_DrawFlash("a1",px,py);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b39      	cmp	r3, #57	; 0x39
 800af8c:	d104      	bne.n	800af98 <do_button_antsw+0x94>
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	68f9      	ldr	r1, [r7, #12]
 800af92:	483c      	ldr	r0, [pc, #240]	; (800b084 <do_button_antsw+0x180>)
 800af94:	f00d faf2 	bl	801857c <TFT_DrawFlash>
		if(touchbutton == TB_ANTSW2) TFT_DrawFlash("a2",px,py);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b3a      	cmp	r3, #58	; 0x3a
 800af9c:	d104      	bne.n	800afa8 <do_button_antsw+0xa4>
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	68f9      	ldr	r1, [r7, #12]
 800afa2:	4839      	ldr	r0, [pc, #228]	; (800b088 <do_button_antsw+0x184>)
 800afa4:	f00d faea 	bl	801857c <TFT_DrawFlash>
		if(touchbutton == TB_ANTSW3) TFT_DrawFlash("a3",px,py);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b3b      	cmp	r3, #59	; 0x3b
 800afac:	d104      	bne.n	800afb8 <do_button_antsw+0xb4>
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	68f9      	ldr	r1, [r7, #12]
 800afb2:	4836      	ldr	r0, [pc, #216]	; (800b08c <do_button_antsw+0x188>)
 800afb4:	f00d fae2 	bl	801857c <TFT_DrawFlash>

		TFT_Fill_Rectangle(px+309, py,px+320,py+120,BLACK);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f203 1035 	addw	r0, r3, #309	; 0x135
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800afca:	2300      	movs	r3, #0
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	460b      	mov	r3, r1
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	f00c fc31 	bl	8017838 <TFT_Fill_Rectangle>

		showSelectedBandsForAntenna();
 800afd6:	f000 f88d 	bl	800b0f4 <showSelectedBandsForAntenna>

		return 1;
 800afda:	2301      	movs	r3, #1
 800afdc:	e044      	b.n	800b068 <do_button_antsw+0x164>
	}

	// und die Bandselection
	if(touchbutton == TB_BAND12) return 1; // ignorieren
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2b0f      	cmp	r3, #15
 800afe2:	d101      	bne.n	800afe8 <do_button_antsw+0xe4>
 800afe4:	2301      	movs	r3, #1
 800afe6:	e03f      	b.n	800b068 <do_button_antsw+0x164>

	if(touchbutton >= TB_BAND1 && touchbutton <= TB_BAND11)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b03      	cmp	r3, #3
 800afec:	dd3b      	ble.n	800b066 <do_button_antsw+0x162>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b0e      	cmp	r3, #14
 800aff2:	dc38      	bgt.n	800b066 <do_button_antsw+0x162>
	{
		if(tb_buttons[touchbutton].pressed == 1)
 800aff4:	491e      	ldr	r1, [pc, #120]	; (800b070 <do_button_antsw+0x16c>)
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	4613      	mov	r3, r2
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	4413      	add	r3, r2
 800affe:	015b      	lsls	r3, r3, #5
 800b000:	440b      	add	r3, r1
 800b002:	335c      	adds	r3, #92	; 0x5c
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d113      	bne.n	800b032 <do_button_antsw+0x12e>
		{
			// Band wird deaktiviert für diese Antenne
			pcfgdata->antsw_bandsel[pcfgdata->antsw][touchbutton-TB_BAND1] = 0;
 800b00a:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <do_button_antsw+0x17c>)
 800b00c:	6818      	ldr	r0, [r3, #0]
 800b00e:	4b1c      	ldr	r3, [pc, #112]	; (800b080 <do_button_antsw+0x17c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b016:	461a      	mov	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	1f19      	subs	r1, r3, #4
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	4413      	add	r3, r2
 800b026:	4403      	add	r3, r0
 800b028:	440b      	add	r3, r1
 800b02a:	33a9      	adds	r3, #169	; 0xa9
 800b02c:	2200      	movs	r2, #0
 800b02e:	701a      	strb	r2, [r3, #0]
 800b030:	e012      	b.n	800b058 <do_button_antsw+0x154>
		}
		else
		{
			// Band wird aktiviert für diese Antenne
			pcfgdata->antsw_bandsel[pcfgdata->antsw][touchbutton-TB_BAND1] = 1;
 800b032:	4b13      	ldr	r3, [pc, #76]	; (800b080 <do_button_antsw+0x17c>)
 800b034:	6818      	ldr	r0, [r3, #0]
 800b036:	4b12      	ldr	r3, [pc, #72]	; (800b080 <do_button_antsw+0x17c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	1f19      	subs	r1, r3, #4
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	4413      	add	r3, r2
 800b04e:	4403      	add	r3, r0
 800b050:	440b      	add	r3, r1
 800b052:	33a9      	adds	r3, #169	; 0xa9
 800b054:	2201      	movs	r2, #1
 800b056:	701a      	strb	r2, [r3, #0]
		}
		showSelectedBandsForAntenna();
 800b058:	f000 f84c 	bl	800b0f4 <showSelectedBandsForAntenna>

		setup_modified = 1;
 800b05c:	4b0c      	ldr	r3, [pc, #48]	; (800b090 <do_button_antsw+0x18c>)
 800b05e:	2201      	movs	r2, #1
 800b060:	601a      	str	r2, [r3, #0]
		return 1;
 800b062:	2301      	movs	r3, #1
 800b064:	e000      	b.n	800b068 <do_button_antsw+0x164>
	}

	return 0;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20007078 	.word	0x20007078
 800b074:	200085d8 	.word	0x200085d8
 800b078:	20008638 	.word	0x20008638
 800b07c:	20008698 	.word	0x20008698
 800b080:	20000bf0 	.word	0x20000bf0
 800b084:	08024808 	.word	0x08024808
 800b088:	0802480c 	.word	0x0802480c
 800b08c:	08024810 	.word	0x08024810
 800b090:	2000277c 	.word	0x2000277c

0800b094 <draw_touchbuttons_antswitch>:

void draw_touchbuttons_antswitch()
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
	for(int i=0; i<(BANDBUTTONS_ANZ-1); i++)
 800b09a:	2300      	movs	r3, #0
 800b09c:	607b      	str	r3, [r7, #4]
 800b09e:	e00d      	b.n	800b0bc <draw_touchbuttons_antswitch+0x28>
	{
		 draw_touchbutton(&tb_buttons[TB_BAND1+i]);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	1d1a      	adds	r2, r3, #4
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	4413      	add	r3, r2
 800b0aa:	015b      	lsls	r3, r3, #5
 800b0ac:	4a10      	ldr	r2, [pc, #64]	; (800b0f0 <draw_touchbuttons_antswitch+0x5c>)
 800b0ae:	4413      	add	r3, r2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f00e ffab 	bl	801a00c <draw_touchbutton>
	for(int i=0; i<(BANDBUTTONS_ANZ-1); i++)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	607b      	str	r3, [r7, #4]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b0a      	cmp	r3, #10
 800b0c0:	ddee      	ble.n	800b0a0 <draw_touchbuttons_antswitch+0xc>
	}
	for(int i=TB_ANTSW1; i<=TB_ANTSW3; i++)
 800b0c2:	2339      	movs	r3, #57	; 0x39
 800b0c4:	603b      	str	r3, [r7, #0]
 800b0c6:	e00c      	b.n	800b0e2 <draw_touchbuttons_antswitch+0x4e>
	{
		 draw_touchbutton(&tb_buttons[i]);
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	4413      	add	r3, r2
 800b0d0:	015b      	lsls	r3, r3, #5
 800b0d2:	4a07      	ldr	r2, [pc, #28]	; (800b0f0 <draw_touchbuttons_antswitch+0x5c>)
 800b0d4:	4413      	add	r3, r2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f00e ff98 	bl	801a00c <draw_touchbutton>
	for(int i=TB_ANTSW1; i<=TB_ANTSW3; i++)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	603b      	str	r3, [r7, #0]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b3b      	cmp	r3, #59	; 0x3b
 800b0e6:	ddef      	ble.n	800b0c8 <draw_touchbuttons_antswitch+0x34>
	}
}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20007078 	.word	0x20007078

0800b0f4 <showSelectedBandsForAntenna>:

void showSelectedBandsForAntenna()
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b0a0      	sub	sp, #128	; 0x80
 800b0f8:	af04      	add	r7, sp, #16
	// aktiviere die entsprechenden Buttons
	for(int i=0; i<(BANDBUTTONS_ANZ-1); i++)
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0fe:	e037      	b.n	800b170 <showSelectedBandsForAntenna+0x7c>
	{
		if(pcfgdata->antsw_bandsel[pcfgdata->antsw][i])
 800b100:	4b51      	ldr	r3, [pc, #324]	; (800b248 <showSelectedBandsForAntenna+0x154>)
 800b102:	6819      	ldr	r1, [r3, #0]
 800b104:	4b50      	ldr	r3, [pc, #320]	; (800b248 <showSelectedBandsForAntenna+0x154>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b10c:	461a      	mov	r2, r3
 800b10e:	4613      	mov	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	4413      	add	r3, r2
 800b118:	18ca      	adds	r2, r1, r3
 800b11a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b11c:	4413      	add	r3, r2
 800b11e:	33a9      	adds	r3, #169	; 0xa9
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00b      	beq.n	800b13e <showSelectedBandsForAntenna+0x4a>
			tb_buttons[TB_BAND1+i].pressed = 1;
 800b126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b128:	1d1a      	adds	r2, r3, #4
 800b12a:	4948      	ldr	r1, [pc, #288]	; (800b24c <showSelectedBandsForAntenna+0x158>)
 800b12c:	4613      	mov	r3, r2
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	4413      	add	r3, r2
 800b132:	015b      	lsls	r3, r3, #5
 800b134:	440b      	add	r3, r1
 800b136:	335c      	adds	r3, #92	; 0x5c
 800b138:	2201      	movs	r2, #1
 800b13a:	701a      	strb	r2, [r3, #0]
 800b13c:	e00a      	b.n	800b154 <showSelectedBandsForAntenna+0x60>
		else
			tb_buttons[TB_BAND1+i].pressed = 0;
 800b13e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b140:	1d1a      	adds	r2, r3, #4
 800b142:	4942      	ldr	r1, [pc, #264]	; (800b24c <showSelectedBandsForAntenna+0x158>)
 800b144:	4613      	mov	r3, r2
 800b146:	005b      	lsls	r3, r3, #1
 800b148:	4413      	add	r3, r2
 800b14a:	015b      	lsls	r3, r3, #5
 800b14c:	440b      	add	r3, r1
 800b14e:	335c      	adds	r3, #92	; 0x5c
 800b150:	2200      	movs	r2, #0
 800b152:	701a      	strb	r2, [r3, #0]

		draw_touchbutton(&tb_buttons[TB_BAND1+i]);
 800b154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b156:	1d1a      	adds	r2, r3, #4
 800b158:	4613      	mov	r3, r2
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	4413      	add	r3, r2
 800b15e:	015b      	lsls	r3, r3, #5
 800b160:	4a3a      	ldr	r2, [pc, #232]	; (800b24c <showSelectedBandsForAntenna+0x158>)
 800b162:	4413      	add	r3, r2
 800b164:	4618      	mov	r0, r3
 800b166:	f00e ff51 	bl	801a00c <draw_touchbutton>
	for(int i=0; i<(BANDBUTTONS_ANZ-1); i++)
 800b16a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b16c:	3301      	adds	r3, #1
 800b16e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b172:	2b0a      	cmp	r3, #10
 800b174:	ddc4      	ble.n	800b100 <showSelectedBandsForAntenna+0xc>
	}

	// und schreibe es zur Grafik
	TFT_Fill_Rectangle(320, 200,TFT_WIDTH-152,320,BLACK);
 800b176:	2300      	movs	r3, #0
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800b17e:	f44f 7222 	mov.w	r2, #648	; 0x288
 800b182:	21c8      	movs	r1, #200	; 0xc8
 800b184:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800b188:	f00c fb56 	bl	8017838 <TFT_Fill_Rectangle>
	char s[100] = {0};
 800b18c:	463b      	mov	r3, r7
 800b18e:	2264      	movs	r2, #100	; 0x64
 800b190:	2100      	movs	r1, #0
 800b192:	4618      	mov	r0, r3
 800b194:	f014 f82c 	bl	801f1f0 <memset>
	for(int i=0; i<3; i++)
 800b198:	2300      	movs	r3, #0
 800b19a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b19c:	e04d      	b.n	800b23a <showSelectedBandsForAntenna+0x146>
	{
		for(int j=0; j<(BANDBUTTONS_ANZ-1); j++)
 800b19e:	2300      	movs	r3, #0
 800b1a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b1a2:	e02e      	b.n	800b202 <showSelectedBandsForAntenna+0x10e>
		{
			if(pcfgdata->antsw_bandsel[i][j]) sprintf(s+strlen(s),"%s ",bandbuttons_text[pcfgdata->bandmode][j]);
 800b1a4:	4b28      	ldr	r3, [pc, #160]	; (800b248 <showSelectedBandsForAntenna+0x154>)
 800b1a6:	6819      	ldr	r1, [r3, #0]
 800b1a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	4413      	add	r3, r2
 800b1b4:	18ca      	adds	r2, r1, r3
 800b1b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1b8:	4413      	add	r3, r2
 800b1ba:	33a9      	adds	r3, #169	; 0xa9
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d01c      	beq.n	800b1fc <showSelectedBandsForAntenna+0x108>
 800b1c2:	463b      	mov	r3, r7
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fc ff3b 	bl	8008040 <strlen>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	463b      	mov	r3, r7
 800b1ce:	1898      	adds	r0, r3, r2
 800b1d0:	4b1d      	ldr	r3, [pc, #116]	; (800b248 <showSelectedBandsForAntenna+0x154>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1dc:	461a      	mov	r2, r3
 800b1de:	0092      	lsls	r2, r2, #2
 800b1e0:	441a      	add	r2, r3
 800b1e2:	0053      	lsls	r3, r2, #1
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	011b      	lsls	r3, r3, #4
 800b1ea:	1a5b      	subs	r3, r3, r1
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	4a17      	ldr	r2, [pc, #92]	; (800b250 <showSelectedBandsForAntenna+0x15c>)
 800b1f2:	4413      	add	r3, r2
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	4917      	ldr	r1, [pc, #92]	; (800b254 <showSelectedBandsForAntenna+0x160>)
 800b1f8:	f014 f81e 	bl	801f238 <sprintf>
		for(int j=0; j<(BANDBUTTONS_ANZ-1); j++)
 800b1fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1fe:	3301      	adds	r3, #1
 800b200:	667b      	str	r3, [r7, #100]	; 0x64
 800b202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b204:	2b0a      	cmp	r3, #10
 800b206:	ddcd      	ble.n	800b1a4 <showSelectedBandsForAntenna+0xb0>
		}

		tft_print(&verdana_10ptFontInfo, s, 330, 207 + i*46, 2, WHITE , BLACK);
 800b208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b20a:	222e      	movs	r2, #46	; 0x2e
 800b20c:	fb02 f303 	mul.w	r3, r2, r3
 800b210:	f103 02cf 	add.w	r2, r3, #207	; 0xcf
 800b214:	4639      	mov	r1, r7
 800b216:	2300      	movs	r3, #0
 800b218:	9302      	str	r3, [sp, #8]
 800b21a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b21e:	9301      	str	r3, [sp, #4]
 800b220:	2302      	movs	r3, #2
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	4613      	mov	r3, r2
 800b226:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b22a:	480b      	ldr	r0, [pc, #44]	; (800b258 <showSelectedBandsForAntenna+0x164>)
 800b22c:	f013 fcba 	bl	801eba4 <tft_print>
		*s = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	703b      	strb	r3, [r7, #0]
	for(int i=0; i<3; i++)
 800b234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b236:	3301      	adds	r3, #1
 800b238:	66bb      	str	r3, [r7, #104]	; 0x68
 800b23a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	ddae      	ble.n	800b19e <showSelectedBandsForAntenna+0xaa>
	}
}
 800b240:	bf00      	nop
 800b242:	3770      	adds	r7, #112	; 0x70
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	20000bf0 	.word	0x20000bf0
 800b24c:	20007078 	.word	0x20007078
 800b250:	20000108 	.word	0x20000108
 800b254:	08024814 	.word	0x08024814
 800b258:	20001c58 	.word	0x20001c58

0800b25c <draw_antswmenu>:

// Grundmenü
void draw_antswmenu()
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b08a      	sub	sp, #40	; 0x28
 800b260:	af04      	add	r7, sp, #16
	char *p1 = ant_etxt[0];
 800b262:	4b29      	ldr	r3, [pc, #164]	; (800b308 <draw_antswmenu+0xac>)
 800b264:	617b      	str	r3, [r7, #20]
	char *p2 = ant_etxt[1];
 800b266:	4b29      	ldr	r3, [pc, #164]	; (800b30c <draw_antswmenu+0xb0>)
 800b268:	613b      	str	r3, [r7, #16]
	char *p3 = ant_etxt[2];
 800b26a:	4b29      	ldr	r3, [pc, #164]	; (800b310 <draw_antswmenu+0xb4>)
 800b26c:	60fb      	str	r3, [r7, #12]

	if(pcfgdata->language == 1)
 800b26e:	4b29      	ldr	r3, [pc, #164]	; (800b314 <draw_antswmenu+0xb8>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b276:	2b01      	cmp	r3, #1
 800b278:	d105      	bne.n	800b286 <draw_antswmenu+0x2a>
	{
		p1 = ant_dtxt[0];
 800b27a:	4b27      	ldr	r3, [pc, #156]	; (800b318 <draw_antswmenu+0xbc>)
 800b27c:	617b      	str	r3, [r7, #20]
		p2 = ant_dtxt[1];
 800b27e:	4b27      	ldr	r3, [pc, #156]	; (800b31c <draw_antswmenu+0xc0>)
 800b280:	613b      	str	r3, [r7, #16]
		p3 = ant_dtxt[2];
 800b282:	4b27      	ldr	r3, [pc, #156]	; (800b320 <draw_antswmenu+0xc4>)
 800b284:	60fb      	str	r3, [r7, #12]
	}

	int tx = 20;
 800b286:	2314      	movs	r3, #20
 800b288:	60bb      	str	r3, [r7, #8]
	int ty = 80;
 800b28a:	2350      	movs	r3, #80	; 0x50
 800b28c:	607b      	str	r3, [r7, #4]
	int dy = 30;
 800b28e:	231e      	movs	r3, #30
 800b290:	603b      	str	r3, [r7, #0]

	tft_print(&lucidaConsole_18ptFontInfo, p1, tx, ty, 1, YELLOW, BLACK);
 800b292:	2300      	movs	r3, #0
 800b294:	9302      	str	r3, [sp, #8]
 800b296:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	2301      	movs	r3, #1
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	6979      	ldr	r1, [r7, #20]
 800b2a6:	481f      	ldr	r0, [pc, #124]	; (800b324 <draw_antswmenu+0xc8>)
 800b2a8:	f013 fc7c 	bl	801eba4 <tft_print>
	tft_print(&lucidaConsole_18ptFontInfo, p2, tx, ty+dy*1, 1, YELLOW, BLACK);
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	441a      	add	r2, r3
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9302      	str	r3, [sp, #8]
 800b2b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	2301      	movs	r3, #1
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	6939      	ldr	r1, [r7, #16]
 800b2c6:	4817      	ldr	r0, [pc, #92]	; (800b324 <draw_antswmenu+0xc8>)
 800b2c8:	f013 fc6c 	bl	801eba4 <tft_print>
	tft_print(&lucidaConsole_18ptFontInfo, p3, tx, ty+dy*2, 1, YELLOW, BLACK);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	005a      	lsls	r2, r3, #1
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	441a      	add	r2, r3
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9302      	str	r3, [sp, #8]
 800b2d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	2301      	movs	r3, #1
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	68f9      	ldr	r1, [r7, #12]
 800b2e8:	480e      	ldr	r0, [pc, #56]	; (800b324 <draw_antswmenu+0xc8>)
 800b2ea:	f013 fc5b 	bl	801eba4 <tft_print>

	do_button_antsw(pcfgdata->antsw + TB_ANTSW1);	// zeige aktivierte Antenne
 800b2ee:	4b09      	ldr	r3, [pc, #36]	; (800b314 <draw_antswmenu+0xb8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b2f6:	3339      	adds	r3, #57	; 0x39
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7ff fe03 	bl	800af04 <do_button_antsw>
}
 800b2fe:	bf00      	nop
 800b300:	3718      	adds	r7, #24
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	20000018 	.word	0x20000018
 800b30c:	20000040 	.word	0x20000040
 800b310:	20000068 	.word	0x20000068
 800b314:	20000bf0 	.word	0x20000bf0
 800b318:	20000090 	.word	0x20000090
 800b31c:	200000b8 	.word	0x200000b8
 800b320:	200000e0 	.word	0x200000e0
 800b324:	20001c34 	.word	0x20001c34

0800b328 <antennaswitch>:

// wird aus der Mainloop aufgerufen und schaltet die Antennen
void antennaswitch()
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
	 * Antennenauswahl je nach Bandzuweisung
	 * _selected_band hat das aktuell mit den Buttons ausgewählte Band
	 */

	// durchsuche die Antenne nach diesem AntBandbutton
	for(int ant=0; ant<3; ant++)
 800b32e:	2300      	movs	r3, #0
 800b330:	607b      	str	r3, [r7, #4]
 800b332:	e018      	b.n	800b366 <antennaswitch+0x3e>
	{
		if(pcfgdata->antsw_bandsel[ant][_selected_band] == 1)
 800b334:	4b23      	ldr	r3, [pc, #140]	; (800b3c4 <antennaswitch+0x9c>)
 800b336:	6818      	ldr	r0, [r3, #0]
 800b338:	4b23      	ldr	r3, [pc, #140]	; (800b3c8 <antennaswitch+0xa0>)
 800b33a:	6819      	ldr	r1, [r3, #0]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	4413      	add	r3, r2
 800b348:	4403      	add	r3, r0
 800b34a:	440b      	add	r3, r1
 800b34c:	33a9      	adds	r3, #169	; 0xa9
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d105      	bne.n	800b360 <antennaswitch+0x38>
		{
			// es soll Antenne ant benutzt werden, aktiviere diese
			pcfgdata->antsw = ant;
 800b354:	4b1b      	ldr	r3, [pc, #108]	; (800b3c4 <antennaswitch+0x9c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	b2d2      	uxtb	r2, r2
 800b35c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	for(int ant=0; ant<3; ant++)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3301      	adds	r3, #1
 800b364:	607b      	str	r3, [r7, #4]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b02      	cmp	r3, #2
 800b36a:	dde3      	ble.n	800b334 <antennaswitch+0xc>
		}
	}

	if(pcfgdata->antsw == 0)
 800b36c:	4b15      	ldr	r3, [pc, #84]	; (800b3c4 <antennaswitch+0x9c>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b374:	2b00      	cmp	r3, #0
 800b376:	d106      	bne.n	800b386 <antennaswitch+0x5e>
	{
		// alle Relais ein -> Antenne-1 (diese ist bei abgefallenen Relais aktiv)
		gpio_stat[ANTSEL1] = 0;
 800b378:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <antennaswitch+0xa4>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	739a      	strb	r2, [r3, #14]
		gpio_stat[ANTSEL2] = 0;
 800b37e:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <antennaswitch+0xa4>)
 800b380:	2200      	movs	r2, #0
 800b382:	73da      	strb	r2, [r3, #15]
	{
		// beide Relais aus -> Antenne-3
		gpio_stat[ANTSEL1] = 1;
		gpio_stat[ANTSEL2] = 1;
	}
}
 800b384:	e018      	b.n	800b3b8 <antennaswitch+0x90>
	else if(pcfgdata->antsw == 1)
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <antennaswitch+0x9c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d106      	bne.n	800b3a0 <antennaswitch+0x78>
		gpio_stat[ANTSEL1] = 0;
 800b392:	4b0e      	ldr	r3, [pc, #56]	; (800b3cc <antennaswitch+0xa4>)
 800b394:	2200      	movs	r2, #0
 800b396:	739a      	strb	r2, [r3, #14]
		gpio_stat[ANTSEL2] = 1;
 800b398:	4b0c      	ldr	r3, [pc, #48]	; (800b3cc <antennaswitch+0xa4>)
 800b39a:	2201      	movs	r2, #1
 800b39c:	73da      	strb	r2, [r3, #15]
}
 800b39e:	e00b      	b.n	800b3b8 <antennaswitch+0x90>
	else if(pcfgdata->antsw == 2)
 800b3a0:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <antennaswitch+0x9c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d105      	bne.n	800b3b8 <antennaswitch+0x90>
		gpio_stat[ANTSEL1] = 1;
 800b3ac:	4b07      	ldr	r3, [pc, #28]	; (800b3cc <antennaswitch+0xa4>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	739a      	strb	r2, [r3, #14]
		gpio_stat[ANTSEL2] = 1;
 800b3b2:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <antennaswitch+0xa4>)
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	73da      	strb	r2, [r3, #15]
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	20000bf0 	.word	0x20000bf0
 800b3c8:	20000720 	.word	0x20000720
 800b3cc:	2000498c 	.word	0x2000498c

0800b3d0 <select_band>:
};

// wird aufgerufen sobald ein Band Touch gedrückt wurde,
// aber nur wenn kein ext. Drehschalter vorhanden ist
void select_band(int button)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	if(button == TB_BAND12)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b0f      	cmp	r3, #15
 800b3dc:	d107      	bne.n	800b3ee <select_band+0x1e>
	{
		store_autoband(1);
 800b3de:	2001      	movs	r0, #1
 800b3e0:	f00b f928 	bl	8016634 <store_autoband>
		oldband = -1;
 800b3e4:	4b07      	ldr	r3, [pc, #28]	; (800b404 <select_band+0x34>)
 800b3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ea:	601a      	str	r2, [r3, #0]
	else
	{
		store_autoband(0);
		_selected_band = button - TB_BAND1;
	}
}
 800b3ec:	e006      	b.n	800b3fc <select_band+0x2c>
		store_autoband(0);
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	f00b f920 	bl	8016634 <store_autoband>
		_selected_band = button - TB_BAND1;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	3b04      	subs	r3, #4
 800b3f8:	4a03      	ldr	r2, [pc, #12]	; (800b408 <select_band+0x38>)
 800b3fa:	6013      	str	r3, [r2, #0]
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	20000724 	.word	0x20000724
 800b408:	20000720 	.word	0x20000720

0800b40c <activate_bandtouchbutton>:

void activate_bandtouchbutton()
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
	for(int i=TB_BAND1; i<=TB_BAND11; i++)
 800b412:	2304      	movs	r3, #4
 800b414:	607b      	str	r3, [r7, #4]
 800b416:	e00c      	b.n	800b432 <activate_bandtouchbutton+0x26>
		tb_buttons[i].pressed = 0;
 800b418:	4925      	ldr	r1, [pc, #148]	; (800b4b0 <activate_bandtouchbutton+0xa4>)
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	4613      	mov	r3, r2
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	4413      	add	r3, r2
 800b422:	015b      	lsls	r3, r3, #5
 800b424:	440b      	add	r3, r1
 800b426:	335c      	adds	r3, #92	; 0x5c
 800b428:	2200      	movs	r2, #0
 800b42a:	701a      	strb	r2, [r3, #0]
	for(int i=TB_BAND1; i<=TB_BAND11; i++)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3301      	adds	r3, #1
 800b430:	607b      	str	r3, [r7, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b0e      	cmp	r3, #14
 800b436:	ddef      	ble.n	800b418 <activate_bandtouchbutton+0xc>

	tb_buttons[TB_BAND1 + _selected_band].pressed = 1;
 800b438:	4b1e      	ldr	r3, [pc, #120]	; (800b4b4 <activate_bandtouchbutton+0xa8>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	1d1a      	adds	r2, r3, #4
 800b43e:	491c      	ldr	r1, [pc, #112]	; (800b4b0 <activate_bandtouchbutton+0xa4>)
 800b440:	4613      	mov	r3, r2
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	4413      	add	r3, r2
 800b446:	015b      	lsls	r3, r3, #5
 800b448:	440b      	add	r3, r1
 800b44a:	335c      	adds	r3, #92	; 0x5c
 800b44c:	2201      	movs	r2, #1
 800b44e:	701a      	strb	r2, [r3, #0]

	for(int i=TB_BAND1; i<=TB_BAND11; i++)
 800b450:	2304      	movs	r3, #4
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	e014      	b.n	800b480 <activate_bandtouchbutton+0x74>
		if(menunum >= MENU_OVERVIEW && menunum < MENU_SWITCH) draw_touchbutton(&tb_buttons[i]);
 800b456:	4b18      	ldr	r3, [pc, #96]	; (800b4b8 <activate_bandtouchbutton+0xac>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	dd0d      	ble.n	800b47a <activate_bandtouchbutton+0x6e>
 800b45e:	4b16      	ldr	r3, [pc, #88]	; (800b4b8 <activate_bandtouchbutton+0xac>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b08      	cmp	r3, #8
 800b464:	dc09      	bgt.n	800b47a <activate_bandtouchbutton+0x6e>
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	4613      	mov	r3, r2
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	4413      	add	r3, r2
 800b46e:	015b      	lsls	r3, r3, #5
 800b470:	4a0f      	ldr	r2, [pc, #60]	; (800b4b0 <activate_bandtouchbutton+0xa4>)
 800b472:	4413      	add	r3, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f00e fdc9 	bl	801a00c <draw_touchbutton>
	for(int i=TB_BAND1; i<=TB_BAND11; i++)
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	3301      	adds	r3, #1
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2b0e      	cmp	r3, #14
 800b484:	dde7      	ble.n	800b456 <activate_bandtouchbutton+0x4a>

	tb_buttons[TB_BAND12].pressed = sf_autoband;
 800b486:	4b0d      	ldr	r3, [pc, #52]	; (800b4bc <activate_bandtouchbutton+0xb0>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	4b08      	ldr	r3, [pc, #32]	; (800b4b0 <activate_bandtouchbutton+0xa4>)
 800b48e:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
	if(menunum >= MENU_OVERVIEW && menunum < MENU_SWITCH) draw_touchbutton(&tb_buttons[TB_BAND12]);
 800b492:	4b09      	ldr	r3, [pc, #36]	; (800b4b8 <activate_bandtouchbutton+0xac>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	dd06      	ble.n	800b4a8 <activate_bandtouchbutton+0x9c>
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <activate_bandtouchbutton+0xac>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	dc02      	bgt.n	800b4a8 <activate_bandtouchbutton+0x9c>
 800b4a2:	4807      	ldr	r0, [pc, #28]	; (800b4c0 <activate_bandtouchbutton+0xb4>)
 800b4a4:	f00e fdb2 	bl	801a00c <draw_touchbutton>
}
 800b4a8:	bf00      	nop
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	20007078 	.word	0x20007078
 800b4b4:	20000720 	.word	0x20000720
 800b4b8:	20000c24 	.word	0x20000c24
 800b4bc:	20001744 	.word	0x20001744
 800b4c0:	20007618 	.word	0x20007618

0800b4c4 <autoband_off>:

void autoband_off()
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	af00      	add	r7, sp, #0
	store_autoband(0);
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	f00b f8b3 	bl	8016634 <store_autoband>
	activate_bandtouchbutton();
 800b4ce:	f7ff ff9d 	bl	800b40c <activate_bandtouchbutton>
}
 800b4d2:	bf00      	nop
 800b4d4:	bd80      	pop	{r7, pc}
	...

0800b4d8 <getBandindex>:

// ermittle Index der BandButtons entsprechend der Frequenz
int getBandindex(float freq)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pcfgdata->bandmode <= 4)
 800b4e2:	4b93      	ldr	r3, [pc, #588]	; (800b730 <getBandindex+0x258>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	d871      	bhi.n	800b5d2 <getBandindex+0xfa>
	{
		// Kurzwelle
		if(freq < 2.1) return 0;// 160m
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7fc ff62 	bl	80083b8 <__aeabi_f2d>
 800b4f4:	a386      	add	r3, pc, #536	; (adr r3, 800b710 <getBandindex+0x238>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7fd fa27 	bl	800894c <__aeabi_dcmplt>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d001      	beq.n	800b508 <getBandindex+0x30>
 800b504:	2300      	movs	r3, #0
 800b506:	e0ff      	b.n	800b708 <getBandindex+0x230>
		if(freq < 4) return 1;	// 80m
 800b508:	edd7 7a01 	vldr	s15, [r7, #4]
 800b50c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b510:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b518:	d501      	bpl.n	800b51e <getBandindex+0x46>
 800b51a:	2301      	movs	r3, #1
 800b51c:	e0f4      	b.n	800b708 <getBandindex+0x230>
		if(freq < 6) return 2;	// 60m
 800b51e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b522:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800b526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b52e:	d501      	bpl.n	800b534 <getBandindex+0x5c>
 800b530:	2302      	movs	r3, #2
 800b532:	e0e9      	b.n	800b708 <getBandindex+0x230>
		if(freq < 8) return 3;	// 40m
 800b534:	edd7 7a01 	vldr	s15, [r7, #4]
 800b538:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800b53c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b544:	d501      	bpl.n	800b54a <getBandindex+0x72>
 800b546:	2303      	movs	r3, #3
 800b548:	e0de      	b.n	800b708 <getBandindex+0x230>
		if(freq < 11) return 4;	// 30m
 800b54a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b54e:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800b552:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55a:	d501      	bpl.n	800b560 <getBandindex+0x88>
 800b55c:	2304      	movs	r3, #4
 800b55e:	e0d3      	b.n	800b708 <getBandindex+0x230>
		if(freq < 15) return 5;	// 20m
 800b560:	edd7 7a01 	vldr	s15, [r7, #4]
 800b564:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800b568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b570:	d501      	bpl.n	800b576 <getBandindex+0x9e>
 800b572:	2305      	movs	r3, #5
 800b574:	e0c8      	b.n	800b708 <getBandindex+0x230>
		if(freq < 19) return 6;	// 17m
 800b576:	edd7 7a01 	vldr	s15, [r7, #4]
 800b57a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800b57e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b586:	d501      	bpl.n	800b58c <getBandindex+0xb4>
 800b588:	2306      	movs	r3, #6
 800b58a:	e0bd      	b.n	800b708 <getBandindex+0x230>
		if(freq < 22) return 7;	// 15m
 800b58c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b590:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800b594:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	d501      	bpl.n	800b5a2 <getBandindex+0xca>
 800b59e:	2307      	movs	r3, #7
 800b5a0:	e0b2      	b.n	800b708 <getBandindex+0x230>
		if(freq < 26) return 8;	// 12m
 800b5a2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5a6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800b5aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b2:	d501      	bpl.n	800b5b8 <getBandindex+0xe0>
 800b5b4:	2308      	movs	r3, #8
 800b5b6:	e0a7      	b.n	800b708 <getBandindex+0x230>
		if(freq < 31) return 9;	// 10m
 800b5b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5bc:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800b5c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c8:	d501      	bpl.n	800b5ce <getBandindex+0xf6>
 800b5ca:	2309      	movs	r3, #9
 800b5cc:	e09c      	b.n	800b708 <getBandindex+0x230>
		return 10;				// 6m
 800b5ce:	230a      	movs	r3, #10
 800b5d0:	e09a      	b.n	800b708 <getBandindex+0x230>
	}
	if(pcfgdata->bandmode == 5)
 800b5d2:	4b57      	ldr	r3, [pc, #348]	; (800b730 <getBandindex+0x258>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5da:	2b05      	cmp	r3, #5
 800b5dc:	d145      	bne.n	800b66a <getBandindex+0x192>
	{
		if(freq < 145) return 0;
 800b5de:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5e2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800b734 <getBandindex+0x25c>
 800b5e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ee:	d501      	bpl.n	800b5f4 <getBandindex+0x11c>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e089      	b.n	800b708 <getBandindex+0x230>
		if(freq < 145.8) return 1;
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7fc fedf 	bl	80083b8 <__aeabi_f2d>
 800b5fa:	a347      	add	r3, pc, #284	; (adr r3, 800b718 <getBandindex+0x240>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7fd f9a4 	bl	800894c <__aeabi_dcmplt>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <getBandindex+0x136>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e07c      	b.n	800b708 <getBandindex+0x230>
		if(freq < 219) return 2;
 800b60e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b612:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b738 <getBandindex+0x260>
 800b616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61e:	d501      	bpl.n	800b624 <getBandindex+0x14c>
 800b620:	2302      	movs	r3, #2
 800b622:	e071      	b.n	800b708 <getBandindex+0x230>
		if(freq < 420) return 3;
 800b624:	edd7 7a01 	vldr	s15, [r7, #4]
 800b628:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b73c <getBandindex+0x264>
 800b62c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b634:	d501      	bpl.n	800b63a <getBandindex+0x162>
 800b636:	2303      	movs	r3, #3
 800b638:	e066      	b.n	800b708 <getBandindex+0x230>
		if(freq < 435) return 4;
 800b63a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b63e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b740 <getBandindex+0x268>
 800b642:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64a:	d501      	bpl.n	800b650 <getBandindex+0x178>
 800b64c:	2304      	movs	r3, #4
 800b64e:	e05b      	b.n	800b708 <getBandindex+0x230>
		if(freq < 438) return 5;
 800b650:	edd7 7a01 	vldr	s15, [r7, #4]
 800b654:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800b744 <getBandindex+0x26c>
 800b658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b660:	d501      	bpl.n	800b666 <getBandindex+0x18e>
 800b662:	2305      	movs	r3, #5
 800b664:	e050      	b.n	800b708 <getBandindex+0x230>
		return 6;
 800b666:	2306      	movs	r3, #6
 800b668:	e04e      	b.n	800b708 <getBandindex+0x230>
	}
	if(pcfgdata->bandmode == 6)
 800b66a:	4b31      	ldr	r3, [pc, #196]	; (800b730 <getBandindex+0x258>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b672:	2b06      	cmp	r3, #6
 800b674:	d147      	bne.n	800b706 <getBandindex+0x22e>
	{
		if(freq < 0.4) return 0; // 2200m
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7fc fe9e 	bl	80083b8 <__aeabi_f2d>
 800b67c:	a328      	add	r3, pc, #160	; (adr r3, 800b720 <getBandindex+0x248>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7fd f963 	bl	800894c <__aeabi_dcmplt>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <getBandindex+0x1b8>
 800b68c:	2300      	movs	r3, #0
 800b68e:	e03b      	b.n	800b708 <getBandindex+0x230>
		if(freq < 0.475) return 1; // 630-1
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7fc fe91 	bl	80083b8 <__aeabi_f2d>
 800b696:	a324      	add	r3, pc, #144	; (adr r3, 800b728 <getBandindex+0x250>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f7fd f956 	bl	800894c <__aeabi_dcmplt>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <getBandindex+0x1d2>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e02e      	b.n	800b708 <getBandindex+0x230>
		if(freq < 0.5) return 2; // 630-2
 800b6aa:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b6b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ba:	d501      	bpl.n	800b6c0 <getBandindex+0x1e8>
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e023      	b.n	800b708 <getBandindex+0x230>
		if(freq < 2) return 3;   // 160
 800b6c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b6c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d0:	d501      	bpl.n	800b6d6 <getBandindex+0x1fe>
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e018      	b.n	800b708 <getBandindex+0x230>
		if(freq < 4) return 4;	 // 80
 800b6d6:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6da:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b6de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e6:	d501      	bpl.n	800b6ec <getBandindex+0x214>
 800b6e8:	2304      	movs	r3, #4
 800b6ea:	e00d      	b.n	800b708 <getBandindex+0x230>
		if(freq < 6) return 5;	 // 60
 800b6ec:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6f0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800b6f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fc:	d501      	bpl.n	800b702 <getBandindex+0x22a>
 800b6fe:	2305      	movs	r3, #5
 800b700:	e002      	b.n	800b708 <getBandindex+0x230>
		return 6;				 // 40
 800b702:	2306      	movs	r3, #6
 800b704:	e000      	b.n	800b708 <getBandindex+0x230>
	}
	return 10;
 800b706:	230a      	movs	r3, #10
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	cccccccd 	.word	0xcccccccd
 800b714:	4000cccc 	.word	0x4000cccc
 800b718:	9999999a 	.word	0x9999999a
 800b71c:	40623999 	.word	0x40623999
 800b720:	9999999a 	.word	0x9999999a
 800b724:	3fd99999 	.word	0x3fd99999
 800b728:	66666666 	.word	0x66666666
 800b72c:	3fde6666 	.word	0x3fde6666
 800b730:	20000bf0 	.word	0x20000bf0
 800b734:	43110000 	.word	0x43110000
 800b738:	435b0000 	.word	0x435b0000
 800b73c:	43d20000 	.word	0x43d20000
 800b740:	43d98000 	.word	0x43d98000
 800b744:	43db0000 	.word	0x43db0000

0800b748 <bandselection>:


// wird laufend aufgerufen, schaltet auf das gewünschte Band
void bandselection()
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
static char f = 1;
static uint32_t oldcivfreq = 0;
static int rot_autoband = -1;

	// Falls ein Drehschalter installiert ist, frage diesen ab
	int rbandsel = rotaryswitch_installed();
 800b74e:	f004 f96f 	bl	800fa30 <rotaryswitch_installed>
 800b752:	4603      	mov	r3, r0
 800b754:	60fb      	str	r3, [r7, #12]

	if(rbandsel)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 80be 	beq.w	800b8da <bandselection+0x192>
	{
		if(rot_autoband != rbandsel)
 800b75e:	4b7d      	ldr	r3, [pc, #500]	; (800b954 <bandselection+0x20c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	429a      	cmp	r2, r3
 800b766:	d03e      	beq.n	800b7e6 <bandselection+0x9e>
		{
			if(rbandsel != ROTS_AUTO && sf_autoband == 1)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2b0a      	cmp	r3, #10
 800b76c:	d018      	beq.n	800b7a0 <bandselection+0x58>
 800b76e:	4b7a      	ldr	r3, [pc, #488]	; (800b958 <bandselection+0x210>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d114      	bne.n	800b7a0 <bandselection+0x58>
			{
				store_autoband(0);
 800b776:	2000      	movs	r0, #0
 800b778:	f00a ff5c 	bl	8016634 <store_autoband>
				oldcivfreq = 0;
 800b77c:	4b77      	ldr	r3, [pc, #476]	; (800b95c <bandselection+0x214>)
 800b77e:	2200      	movs	r2, #0
 800b780:	601a      	str	r2, [r3, #0]
				tb_buttons[TB_BAND12].pressed = 0;
 800b782:	4b77      	ldr	r3, [pc, #476]	; (800b960 <bandselection+0x218>)
 800b784:	2200      	movs	r2, #0
 800b786:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
				if(menunum >= MENU_OVERVIEW && menunum < MENU_SWITCH)
 800b78a:	4b76      	ldr	r3, [pc, #472]	; (800b964 <bandselection+0x21c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	dd06      	ble.n	800b7a0 <bandselection+0x58>
 800b792:	4b74      	ldr	r3, [pc, #464]	; (800b964 <bandselection+0x21c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b08      	cmp	r3, #8
 800b798:	dc02      	bgt.n	800b7a0 <bandselection+0x58>
					draw_touchbutton(&tb_buttons[TB_BAND12]);
 800b79a:	4873      	ldr	r0, [pc, #460]	; (800b968 <bandselection+0x220>)
 800b79c:	f00e fc36 	bl	801a00c <draw_touchbutton>
			}

			if(rbandsel == ROTS_AUTO && sf_autoband == 0)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b0a      	cmp	r3, #10
 800b7a4:	d11c      	bne.n	800b7e0 <bandselection+0x98>
 800b7a6:	4b6c      	ldr	r3, [pc, #432]	; (800b958 <bandselection+0x210>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d118      	bne.n	800b7e0 <bandselection+0x98>
			{
				store_autoband(1);
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	f00a ff40 	bl	8016634 <store_autoband>
				oldcivfreq = 0;
 800b7b4:	4b69      	ldr	r3, [pc, #420]	; (800b95c <bandselection+0x214>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]
				oldband = -1;
 800b7ba:	4b6c      	ldr	r3, [pc, #432]	; (800b96c <bandselection+0x224>)
 800b7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c0:	601a      	str	r2, [r3, #0]
				tb_buttons[TB_BAND12].pressed = 1;
 800b7c2:	4b67      	ldr	r3, [pc, #412]	; (800b960 <bandselection+0x218>)
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
				if(menunum >= MENU_OVERVIEW && menunum < MENU_SWITCH)
 800b7ca:	4b66      	ldr	r3, [pc, #408]	; (800b964 <bandselection+0x21c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	dd06      	ble.n	800b7e0 <bandselection+0x98>
 800b7d2:	4b64      	ldr	r3, [pc, #400]	; (800b964 <bandselection+0x21c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b08      	cmp	r3, #8
 800b7d8:	dc02      	bgt.n	800b7e0 <bandselection+0x98>
					draw_touchbutton(&tb_buttons[TB_BAND12]);
 800b7da:	4863      	ldr	r0, [pc, #396]	; (800b968 <bandselection+0x220>)
 800b7dc:	f00e fc16 	bl	801a00c <draw_touchbutton>
			}

			rot_autoband = rbandsel;
 800b7e0:	4a5c      	ldr	r2, [pc, #368]	; (800b954 <bandselection+0x20c>)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6013      	str	r3, [r2, #0]
		}

		if(rbandsel == ROTS_AUTO) rbandsel = 0;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b0a      	cmp	r3, #10
 800b7ea:	d101      	bne.n	800b7f0 <bandselection+0xa8>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]

		if(pcfgdata->bandmode <= 4)
 800b7f0:	4b5f      	ldr	r3, [pc, #380]	; (800b970 <bandselection+0x228>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d832      	bhi.n	800b862 <bandselection+0x11a>
		{
			switch(rbandsel)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3b03      	subs	r3, #3
 800b800:	2b06      	cmp	r3, #6
 800b802:	d85f      	bhi.n	800b8c4 <bandselection+0x17c>
 800b804:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <bandselection+0xc4>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b829 	.word	0x0800b829
 800b810:	0800b831 	.word	0x0800b831
 800b814:	0800b839 	.word	0x0800b839
 800b818:	0800b841 	.word	0x0800b841
 800b81c:	0800b849 	.word	0x0800b849
 800b820:	0800b851 	.word	0x0800b851
 800b824:	0800b859 	.word	0x0800b859
			{
			case ROTS_B1:  	_selected_band = 0; break;
 800b828:	4b52      	ldr	r3, [pc, #328]	; (800b974 <bandselection+0x22c>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	e049      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B2:   _selected_band = 1; break;
 800b830:	4b50      	ldr	r3, [pc, #320]	; (800b974 <bandselection+0x22c>)
 800b832:	2201      	movs	r2, #1
 800b834:	601a      	str	r2, [r3, #0]
 800b836:	e045      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B3: 	_selected_band = 3; break;
 800b838:	4b4e      	ldr	r3, [pc, #312]	; (800b974 <bandselection+0x22c>)
 800b83a:	2203      	movs	r2, #3
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	e041      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B4: 	_selected_band = 5; break;
 800b840:	4b4c      	ldr	r3, [pc, #304]	; (800b974 <bandselection+0x22c>)
 800b842:	2205      	movs	r2, #5
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	e03d      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B5: 	_selected_band = 7; break;
 800b848:	4b4a      	ldr	r3, [pc, #296]	; (800b974 <bandselection+0x22c>)
 800b84a:	2207      	movs	r2, #7
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	e039      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B6: 	_selected_band = 9; break;
 800b850:	4b48      	ldr	r3, [pc, #288]	; (800b974 <bandselection+0x22c>)
 800b852:	2209      	movs	r2, #9
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	e035      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B7: 	_selected_band = 10; break;
 800b858:	4b46      	ldr	r3, [pc, #280]	; (800b974 <bandselection+0x22c>)
 800b85a:	220a      	movs	r2, #10
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	bf00      	nop
 800b860:	e030      	b.n	800b8c4 <bandselection+0x17c>
			}
		}
		else
		{
			switch(rbandsel)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3b03      	subs	r3, #3
 800b866:	2b06      	cmp	r3, #6
 800b868:	d82c      	bhi.n	800b8c4 <bandselection+0x17c>
 800b86a:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <bandselection+0x128>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b88d 	.word	0x0800b88d
 800b874:	0800b895 	.word	0x0800b895
 800b878:	0800b89d 	.word	0x0800b89d
 800b87c:	0800b8a5 	.word	0x0800b8a5
 800b880:	0800b8ad 	.word	0x0800b8ad
 800b884:	0800b8b5 	.word	0x0800b8b5
 800b888:	0800b8bd 	.word	0x0800b8bd
			{
			case ROTS_B1:  	_selected_band = 0; break;
 800b88c:	4b39      	ldr	r3, [pc, #228]	; (800b974 <bandselection+0x22c>)
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	e017      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B2:   _selected_band = 1; break;
 800b894:	4b37      	ldr	r3, [pc, #220]	; (800b974 <bandselection+0x22c>)
 800b896:	2201      	movs	r2, #1
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	e013      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B3: 	_selected_band = 2; break;
 800b89c:	4b35      	ldr	r3, [pc, #212]	; (800b974 <bandselection+0x22c>)
 800b89e:	2202      	movs	r2, #2
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	e00f      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B4: 	_selected_band = 3; break;
 800b8a4:	4b33      	ldr	r3, [pc, #204]	; (800b974 <bandselection+0x22c>)
 800b8a6:	2203      	movs	r2, #3
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	e00b      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B5: 	_selected_band = 4; break;
 800b8ac:	4b31      	ldr	r3, [pc, #196]	; (800b974 <bandselection+0x22c>)
 800b8ae:	2204      	movs	r2, #4
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	e007      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B6: 	_selected_band = 5; break;
 800b8b4:	4b2f      	ldr	r3, [pc, #188]	; (800b974 <bandselection+0x22c>)
 800b8b6:	2205      	movs	r2, #5
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	e003      	b.n	800b8c4 <bandselection+0x17c>
			case ROTS_B7: 	_selected_band = 6; break;
 800b8bc:	4b2d      	ldr	r3, [pc, #180]	; (800b974 <bandselection+0x22c>)
 800b8be:	2206      	movs	r2, #6
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	bf00      	nop
			}
		}

		// wenn sich der Rot.Schalter gedreht hat, so passe auch die Darstellung der Band Touchbuttons an
		if(oldrbsel != rbandsel)
 800b8c4:	4b2c      	ldr	r3, [pc, #176]	; (800b978 <bandselection+0x230>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d012      	beq.n	800b8f4 <bandselection+0x1ac>
		{
			oldrbsel = rbandsel;
 800b8ce:	4a2a      	ldr	r2, [pc, #168]	; (800b978 <bandselection+0x230>)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6013      	str	r3, [r2, #0]
			activate_bandtouchbutton();
 800b8d4:	f7ff fd9a 	bl	800b40c <activate_bandtouchbutton>
 800b8d8:	e00c      	b.n	800b8f4 <bandselection+0x1ac>
		}
	}
	else
	{
		oldrbsel = -1;
 800b8da:	4b27      	ldr	r3, [pc, #156]	; (800b978 <bandselection+0x230>)
 800b8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e0:	601a      	str	r2, [r3, #0]
		// beim ersten Mal nach dem Start aktiviere den Touchbutton
		if(f)
 800b8e2:	4b26      	ldr	r3, [pc, #152]	; (800b97c <bandselection+0x234>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <bandselection+0x1ac>
		{
			f = 0;
 800b8ea:	4b24      	ldr	r3, [pc, #144]	; (800b97c <bandselection+0x234>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	701a      	strb	r2, [r3, #0]
			activate_bandtouchbutton();
 800b8f0:	f7ff fd8c 	bl	800b40c <activate_bandtouchbutton>
		}
	}

	// beim ersten Mal nach dem Start aktiviere den Touchbutton
	if(f)
 800b8f4:	4b21      	ldr	r3, [pc, #132]	; (800b97c <bandselection+0x234>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d004      	beq.n	800b906 <bandselection+0x1be>
	{
		f = 0;
 800b8fc:	4b1f      	ldr	r3, [pc, #124]	; (800b97c <bandselection+0x234>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	701a      	strb	r2, [r3, #0]
		activate_bandtouchbutton();
 800b902:	f7ff fd83 	bl	800b40c <activate_bandtouchbutton>
	}

	uint32_t civfreq = getCIVfreq(); // immer aufrufen, auch ohne Automode, da es von der Statuszeile gebraucht wird
 800b906:	f00f f8bd 	bl	801aa84 <getCIVfreq>
 800b90a:	6078      	str	r0, [r7, #4]

	if(sf_autoband && !rbandsel)
 800b90c:	4b12      	ldr	r3, [pc, #72]	; (800b958 <bandselection+0x210>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 808d 	beq.w	800ba30 <bandselection+0x2e8>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f040 8089 	bne.w	800ba30 <bandselection+0x2e8>
	{
		float frequency = 0;	// Icom Frequenz in MHz
 800b91e:	f04f 0300 	mov.w	r3, #0
 800b922:	60bb      	str	r3, [r7, #8]

		// wenn von CIV Banddaten kommen so haben diese Priorität vor der Bandspannung
		if(civfreq == 0 && oldcivfreq != 0)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d104      	bne.n	800b934 <bandselection+0x1ec>
 800b92a:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <bandselection+0x214>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f040 82b6 	bne.w	800bea0 <bandselection+0x758>
			tb_buttons[TB_BAND12].pressed = 0;
			if(menunum >= MENU_OVERVIEW && menunum < MENU_SWITCH) draw_touchbutton(&tb_buttons[TB_BAND12]);
			*/
			return;	// keine Frequenz, lasse alles so wie es ist
		}
		else if(civfreq != 0)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d024      	beq.n	800b984 <bandselection+0x23c>
		{
			// CI/V Frequenz
			frequency = civfreq / 1000000;	// eingestellte MHz
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a10      	ldr	r2, [pc, #64]	; (800b980 <bandselection+0x238>)
 800b93e:	fba2 2303 	umull	r2, r3, r2, r3
 800b942:	0c9b      	lsrs	r3, r3, #18
 800b944:	ee07 3a90 	vmov	s15, r3
 800b948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b94c:	edc7 7a02 	vstr	s15, [r7, #8]
 800b950:	e054      	b.n	800b9fc <bandselection+0x2b4>
 800b952:	bf00      	nop
 800b954:	20000b3c 	.word	0x20000b3c
 800b958:	20001744 	.word	0x20001744
 800b95c:	2000269c 	.word	0x2000269c
 800b960:	20007078 	.word	0x20007078
 800b964:	20000c24 	.word	0x20000c24
 800b968:	20007618 	.word	0x20007618
 800b96c:	20000724 	.word	0x20000724
 800b970:	20000bf0 	.word	0x20000bf0
 800b974:	20000720 	.word	0x20000720
 800b978:	20000b40 	.word	0x20000b40
 800b97c:	20000b44 	.word	0x20000b44
 800b980:	431bde83 	.word	0x431bde83
		}
		else
		{
			if(pcfgdata->bandmode <= 4)
 800b984:	4b9c      	ldr	r3, [pc, #624]	; (800bbf8 <bandselection+0x4b0>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d835      	bhi.n	800b9fc <bandselection+0x2b4>
			{
				// Band Eingang nehmen und Frequenz simulieren, favorisiere Standardbänder
				int autoBand = (int)adc_realvals[UBAND];
 800b990:	4b9a      	ldr	r3, [pc, #616]	; (800bbfc <bandselection+0x4b4>)
 800b992:	edd3 7a00 	vldr	s15, [r3]
 800b996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b99a:	ee17 3a90 	vmov	r3, s15
 800b99e:	603b      	str	r3, [r7, #0]

				if(autoBand == 160) 	frequency = 1.9;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	2ba0      	cmp	r3, #160	; 0xa0
 800b9a4:	d101      	bne.n	800b9aa <bandselection+0x262>
 800b9a6:	4b96      	ldr	r3, [pc, #600]	; (800bc00 <bandselection+0x4b8>)
 800b9a8:	60bb      	str	r3, [r7, #8]
				if(autoBand == 80) 		frequency = 3.6;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b50      	cmp	r3, #80	; 0x50
 800b9ae:	d101      	bne.n	800b9b4 <bandselection+0x26c>
 800b9b0:	4b94      	ldr	r3, [pc, #592]	; (800bc04 <bandselection+0x4bc>)
 800b9b2:	60bb      	str	r3, [r7, #8]
				if(autoBand == 6040) 	frequency = 7.1;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	f241 7298 	movw	r2, #6040	; 0x1798
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d101      	bne.n	800b9c2 <bandselection+0x27a>
 800b9be:	4b92      	ldr	r3, [pc, #584]	; (800bc08 <bandselection+0x4c0>)
 800b9c0:	60bb      	str	r3, [r7, #8]
				if(autoBand == 30) 		frequency = 10.05;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b1e      	cmp	r3, #30
 800b9c6:	d101      	bne.n	800b9cc <bandselection+0x284>
 800b9c8:	4b90      	ldr	r3, [pc, #576]	; (800bc0c <bandselection+0x4c4>)
 800b9ca:	60bb      	str	r3, [r7, #8]
				if(autoBand == 20) 		frequency = 14.1;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2b14      	cmp	r3, #20
 800b9d0:	d101      	bne.n	800b9d6 <bandselection+0x28e>
 800b9d2:	4b8f      	ldr	r3, [pc, #572]	; (800bc10 <bandselection+0x4c8>)
 800b9d4:	60bb      	str	r3, [r7, #8]
				if(autoBand == 1715) 	frequency = 21.1;
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	f240 62b3 	movw	r2, #1715	; 0x6b3
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d101      	bne.n	800b9e4 <bandselection+0x29c>
 800b9e0:	4b8c      	ldr	r3, [pc, #560]	; (800bc14 <bandselection+0x4cc>)
 800b9e2:	60bb      	str	r3, [r7, #8]
				if(autoBand == 1210) 	frequency = 28.1;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	f240 42ba 	movw	r2, #1210	; 0x4ba
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d101      	bne.n	800b9f2 <bandselection+0x2aa>
 800b9ee:	4b8a      	ldr	r3, [pc, #552]	; (800bc18 <bandselection+0x4d0>)
 800b9f0:	60bb      	str	r3, [r7, #8]
				if(autoBand == 6) 		frequency = 50.5;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b06      	cmp	r3, #6
 800b9f6:	d101      	bne.n	800b9fc <bandselection+0x2b4>
 800b9f8:	4b88      	ldr	r3, [pc, #544]	; (800bc1c <bandselection+0x4d4>)
 800b9fa:	60bb      	str	r3, [r7, #8]
			}
		}

		if(sf_autoband)
 800b9fc:	4b88      	ldr	r3, [pc, #544]	; (800bc20 <bandselection+0x4d8>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d015      	beq.n	800ba30 <bandselection+0x2e8>
		{
			oldcivfreq = civfreq;
 800ba04:	4a87      	ldr	r2, [pc, #540]	; (800bc24 <bandselection+0x4dc>)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6013      	str	r3, [r2, #0]

			// frequency hat die eingestellte Frequenz
			// ermittle jetzt den zu aktivierenden Button
			_selected_band = getBandindex(frequency);
 800ba0a:	ed97 0a02 	vldr	s0, [r7, #8]
 800ba0e:	f7ff fd63 	bl	800b4d8 <getBandindex>
 800ba12:	4602      	mov	r2, r0
 800ba14:	4b84      	ldr	r3, [pc, #528]	; (800bc28 <bandselection+0x4e0>)
 800ba16:	601a      	str	r2, [r3, #0]

			// und aktiviere diesen
			if(_selected_band != oldband)
 800ba18:	4b83      	ldr	r3, [pc, #524]	; (800bc28 <bandselection+0x4e0>)
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	4b83      	ldr	r3, [pc, #524]	; (800bc2c <bandselection+0x4e4>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d005      	beq.n	800ba30 <bandselection+0x2e8>
			{
				oldband = _selected_band;
 800ba24:	4b80      	ldr	r3, [pc, #512]	; (800bc28 <bandselection+0x4e0>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a80      	ldr	r2, [pc, #512]	; (800bc2c <bandselection+0x4e4>)
 800ba2a:	6013      	str	r3, [r2, #0]
				activate_bandtouchbutton();
 800ba2c:	f7ff fcee 	bl	800b40c <activate_bandtouchbutton>
		}
	}

	// _selected_band hat hier den Index der 11 Bänder
	// wähle entsprechend der Bandbetriebsart das Bandrelais
	if(pcfgdata->bandmode == 0)
 800ba30:	4b71      	ldr	r3, [pc, #452]	; (800bbf8 <bandselection+0x4b0>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d158      	bne.n	800baee <bandselection+0x3a6>
		"30/20m",
		"17/15m",
		"12/10m",
		"6m"
		*/
		if(_selected_band == 0 /*160m*/) 	 selected_bandrelais = BANDRELAIS_OFF;
 800ba3c:	4b7a      	ldr	r3, [pc, #488]	; (800bc28 <bandselection+0x4e0>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d103      	bne.n	800ba4c <bandselection+0x304>
 800ba44:	4b7a      	ldr	r3, [pc, #488]	; (800bc30 <bandselection+0x4e8>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	701a      	strb	r2, [r3, #0]
 800ba4a:	e226      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 1 /*80m*/) selected_bandrelais = BANDRELAIS_1;
 800ba4c:	4b76      	ldr	r3, [pc, #472]	; (800bc28 <bandselection+0x4e0>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d103      	bne.n	800ba5c <bandselection+0x314>
 800ba54:	4b76      	ldr	r3, [pc, #472]	; (800bc30 <bandselection+0x4e8>)
 800ba56:	2201      	movs	r2, #1
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	e21e      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 2 /*60m*/) selected_bandrelais = BANDRELAIS_2;
 800ba5c:	4b72      	ldr	r3, [pc, #456]	; (800bc28 <bandselection+0x4e0>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d103      	bne.n	800ba6c <bandselection+0x324>
 800ba64:	4b72      	ldr	r3, [pc, #456]	; (800bc30 <bandselection+0x4e8>)
 800ba66:	2202      	movs	r2, #2
 800ba68:	701a      	strb	r2, [r3, #0]
 800ba6a:	e216      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 3 /*40m*/) selected_bandrelais = BANDRELAIS_2;
 800ba6c:	4b6e      	ldr	r3, [pc, #440]	; (800bc28 <bandselection+0x4e0>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d103      	bne.n	800ba7c <bandselection+0x334>
 800ba74:	4b6e      	ldr	r3, [pc, #440]	; (800bc30 <bandselection+0x4e8>)
 800ba76:	2202      	movs	r2, #2
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	e20e      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 4 /*30m*/) selected_bandrelais = BANDRELAIS_3;
 800ba7c:	4b6a      	ldr	r3, [pc, #424]	; (800bc28 <bandselection+0x4e0>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	d103      	bne.n	800ba8c <bandselection+0x344>
 800ba84:	4b6a      	ldr	r3, [pc, #424]	; (800bc30 <bandselection+0x4e8>)
 800ba86:	2203      	movs	r2, #3
 800ba88:	701a      	strb	r2, [r3, #0]
 800ba8a:	e206      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 5 /*20m*/) selected_bandrelais = BANDRELAIS_3;
 800ba8c:	4b66      	ldr	r3, [pc, #408]	; (800bc28 <bandselection+0x4e0>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b05      	cmp	r3, #5
 800ba92:	d103      	bne.n	800ba9c <bandselection+0x354>
 800ba94:	4b66      	ldr	r3, [pc, #408]	; (800bc30 <bandselection+0x4e8>)
 800ba96:	2203      	movs	r2, #3
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	e1fe      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 6 /*17m*/) selected_bandrelais = BANDRELAIS_4;
 800ba9c:	4b62      	ldr	r3, [pc, #392]	; (800bc28 <bandselection+0x4e0>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b06      	cmp	r3, #6
 800baa2:	d103      	bne.n	800baac <bandselection+0x364>
 800baa4:	4b62      	ldr	r3, [pc, #392]	; (800bc30 <bandselection+0x4e8>)
 800baa6:	2204      	movs	r2, #4
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	e1f6      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 7 /*15m*/) selected_bandrelais = BANDRELAIS_4;
 800baac:	4b5e      	ldr	r3, [pc, #376]	; (800bc28 <bandselection+0x4e0>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b07      	cmp	r3, #7
 800bab2:	d103      	bne.n	800babc <bandselection+0x374>
 800bab4:	4b5e      	ldr	r3, [pc, #376]	; (800bc30 <bandselection+0x4e8>)
 800bab6:	2204      	movs	r2, #4
 800bab8:	701a      	strb	r2, [r3, #0]
 800baba:	e1ee      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 8 /*12m*/) selected_bandrelais = BANDRELAIS_5;
 800babc:	4b5a      	ldr	r3, [pc, #360]	; (800bc28 <bandselection+0x4e0>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b08      	cmp	r3, #8
 800bac2:	d103      	bne.n	800bacc <bandselection+0x384>
 800bac4:	4b5a      	ldr	r3, [pc, #360]	; (800bc30 <bandselection+0x4e8>)
 800bac6:	2205      	movs	r2, #5
 800bac8:	701a      	strb	r2, [r3, #0]
 800baca:	e1e6      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 9 /*10m*/) selected_bandrelais = BANDRELAIS_5;
 800bacc:	4b56      	ldr	r3, [pc, #344]	; (800bc28 <bandselection+0x4e0>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b09      	cmp	r3, #9
 800bad2:	d103      	bne.n	800badc <bandselection+0x394>
 800bad4:	4b56      	ldr	r3, [pc, #344]	; (800bc30 <bandselection+0x4e8>)
 800bad6:	2205      	movs	r2, #5
 800bad8:	701a      	strb	r2, [r3, #0]
 800bada:	e1de      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 10 /*6m*/) selected_bandrelais = BANDRELAIS_6;
 800badc:	4b52      	ldr	r3, [pc, #328]	; (800bc28 <bandselection+0x4e0>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b0a      	cmp	r3, #10
 800bae2:	f040 81da 	bne.w	800be9a <bandselection+0x752>
 800bae6:	4b52      	ldr	r3, [pc, #328]	; (800bc30 <bandselection+0x4e8>)
 800bae8:	2206      	movs	r2, #6
 800baea:	701a      	strb	r2, [r3, #0]
 800baec:	e1d5      	b.n	800be9a <bandselection+0x752>
	}
	else if(pcfgdata->bandmode == 1)
 800baee:	4b42      	ldr	r3, [pc, #264]	; (800bbf8 <bandselection+0x4b0>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d158      	bne.n	800bbac <bandselection+0x464>
		"20/17m",
		"15m",
		"12/10m",
		"6m"
		*/
		if(_selected_band == 0 /*160m*/) 	 selected_bandrelais = BANDRELAIS_OFF;
 800bafa:	4b4b      	ldr	r3, [pc, #300]	; (800bc28 <bandselection+0x4e0>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d103      	bne.n	800bb0a <bandselection+0x3c2>
 800bb02:	4b4b      	ldr	r3, [pc, #300]	; (800bc30 <bandselection+0x4e8>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	701a      	strb	r2, [r3, #0]
 800bb08:	e1c7      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 1 /*80m*/) selected_bandrelais = BANDRELAIS_1;
 800bb0a:	4b47      	ldr	r3, [pc, #284]	; (800bc28 <bandselection+0x4e0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d103      	bne.n	800bb1a <bandselection+0x3d2>
 800bb12:	4b47      	ldr	r3, [pc, #284]	; (800bc30 <bandselection+0x4e8>)
 800bb14:	2201      	movs	r2, #1
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	e1bf      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 2 /*60m*/) selected_bandrelais = BANDRELAIS_1;
 800bb1a:	4b43      	ldr	r3, [pc, #268]	; (800bc28 <bandselection+0x4e0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d103      	bne.n	800bb2a <bandselection+0x3e2>
 800bb22:	4b43      	ldr	r3, [pc, #268]	; (800bc30 <bandselection+0x4e8>)
 800bb24:	2201      	movs	r2, #1
 800bb26:	701a      	strb	r2, [r3, #0]
 800bb28:	e1b7      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 3 /*40m*/) selected_bandrelais = BANDRELAIS_2;
 800bb2a:	4b3f      	ldr	r3, [pc, #252]	; (800bc28 <bandselection+0x4e0>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d103      	bne.n	800bb3a <bandselection+0x3f2>
 800bb32:	4b3f      	ldr	r3, [pc, #252]	; (800bc30 <bandselection+0x4e8>)
 800bb34:	2202      	movs	r2, #2
 800bb36:	701a      	strb	r2, [r3, #0]
 800bb38:	e1af      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 4 /*30m*/) selected_bandrelais = BANDRELAIS_2;
 800bb3a:	4b3b      	ldr	r3, [pc, #236]	; (800bc28 <bandselection+0x4e0>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d103      	bne.n	800bb4a <bandselection+0x402>
 800bb42:	4b3b      	ldr	r3, [pc, #236]	; (800bc30 <bandselection+0x4e8>)
 800bb44:	2202      	movs	r2, #2
 800bb46:	701a      	strb	r2, [r3, #0]
 800bb48:	e1a7      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 5 /*20m*/) selected_bandrelais = BANDRELAIS_3;
 800bb4a:	4b37      	ldr	r3, [pc, #220]	; (800bc28 <bandselection+0x4e0>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b05      	cmp	r3, #5
 800bb50:	d103      	bne.n	800bb5a <bandselection+0x412>
 800bb52:	4b37      	ldr	r3, [pc, #220]	; (800bc30 <bandselection+0x4e8>)
 800bb54:	2203      	movs	r2, #3
 800bb56:	701a      	strb	r2, [r3, #0]
 800bb58:	e19f      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 6 /*17m*/) selected_bandrelais = BANDRELAIS_3;
 800bb5a:	4b33      	ldr	r3, [pc, #204]	; (800bc28 <bandselection+0x4e0>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b06      	cmp	r3, #6
 800bb60:	d103      	bne.n	800bb6a <bandselection+0x422>
 800bb62:	4b33      	ldr	r3, [pc, #204]	; (800bc30 <bandselection+0x4e8>)
 800bb64:	2203      	movs	r2, #3
 800bb66:	701a      	strb	r2, [r3, #0]
 800bb68:	e197      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 7 /*15m*/) selected_bandrelais = BANDRELAIS_4;
 800bb6a:	4b2f      	ldr	r3, [pc, #188]	; (800bc28 <bandselection+0x4e0>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b07      	cmp	r3, #7
 800bb70:	d103      	bne.n	800bb7a <bandselection+0x432>
 800bb72:	4b2f      	ldr	r3, [pc, #188]	; (800bc30 <bandselection+0x4e8>)
 800bb74:	2204      	movs	r2, #4
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	e18f      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 8 /*12m*/) selected_bandrelais = BANDRELAIS_5;
 800bb7a:	4b2b      	ldr	r3, [pc, #172]	; (800bc28 <bandselection+0x4e0>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b08      	cmp	r3, #8
 800bb80:	d103      	bne.n	800bb8a <bandselection+0x442>
 800bb82:	4b2b      	ldr	r3, [pc, #172]	; (800bc30 <bandselection+0x4e8>)
 800bb84:	2205      	movs	r2, #5
 800bb86:	701a      	strb	r2, [r3, #0]
 800bb88:	e187      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 9 /*10m*/) selected_bandrelais = BANDRELAIS_5;
 800bb8a:	4b27      	ldr	r3, [pc, #156]	; (800bc28 <bandselection+0x4e0>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b09      	cmp	r3, #9
 800bb90:	d103      	bne.n	800bb9a <bandselection+0x452>
 800bb92:	4b27      	ldr	r3, [pc, #156]	; (800bc30 <bandselection+0x4e8>)
 800bb94:	2205      	movs	r2, #5
 800bb96:	701a      	strb	r2, [r3, #0]
 800bb98:	e17f      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 10 /*6m*/) selected_bandrelais = BANDRELAIS_6;
 800bb9a:	4b23      	ldr	r3, [pc, #140]	; (800bc28 <bandselection+0x4e0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b0a      	cmp	r3, #10
 800bba0:	f040 817b 	bne.w	800be9a <bandselection+0x752>
 800bba4:	4b22      	ldr	r3, [pc, #136]	; (800bc30 <bandselection+0x4e8>)
 800bba6:	2206      	movs	r2, #6
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	e176      	b.n	800be9a <bandselection+0x752>
	}
	else if(pcfgdata->bandmode == 2)
 800bbac:	4b12      	ldr	r3, [pc, #72]	; (800bbf8 <bandselection+0x4b0>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d176      	bne.n	800bca6 <bandselection+0x55e>
		"30m",
		"20-15m",
		"12-10m",
		"6m"
		*/
		if(_selected_band == 0 /*160m*/) 	 selected_bandrelais = BANDRELAIS_OFF;
 800bbb8:	4b1b      	ldr	r3, [pc, #108]	; (800bc28 <bandselection+0x4e0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d103      	bne.n	800bbc8 <bandselection+0x480>
 800bbc0:	4b1b      	ldr	r3, [pc, #108]	; (800bc30 <bandselection+0x4e8>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	701a      	strb	r2, [r3, #0]
 800bbc6:	e168      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 1 /*80m*/) selected_bandrelais = BANDRELAIS_1;
 800bbc8:	4b17      	ldr	r3, [pc, #92]	; (800bc28 <bandselection+0x4e0>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d103      	bne.n	800bbd8 <bandselection+0x490>
 800bbd0:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <bandselection+0x4e8>)
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	e160      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 2 /*60m*/) selected_bandrelais = BANDRELAIS_2;
 800bbd8:	4b13      	ldr	r3, [pc, #76]	; (800bc28 <bandselection+0x4e0>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d103      	bne.n	800bbe8 <bandselection+0x4a0>
 800bbe0:	4b13      	ldr	r3, [pc, #76]	; (800bc30 <bandselection+0x4e8>)
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	701a      	strb	r2, [r3, #0]
 800bbe6:	e158      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 3 /*40m*/) selected_bandrelais = BANDRELAIS_2;
 800bbe8:	4b0f      	ldr	r3, [pc, #60]	; (800bc28 <bandselection+0x4e0>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d121      	bne.n	800bc34 <bandselection+0x4ec>
 800bbf0:	4b0f      	ldr	r3, [pc, #60]	; (800bc30 <bandselection+0x4e8>)
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	e150      	b.n	800be9a <bandselection+0x752>
 800bbf8:	20000bf0 	.word	0x20000bf0
 800bbfc:	2000314c 	.word	0x2000314c
 800bc00:	3ff33333 	.word	0x3ff33333
 800bc04:	40666666 	.word	0x40666666
 800bc08:	40e33333 	.word	0x40e33333
 800bc0c:	4120cccd 	.word	0x4120cccd
 800bc10:	4161999a 	.word	0x4161999a
 800bc14:	41a8cccd 	.word	0x41a8cccd
 800bc18:	41e0cccd 	.word	0x41e0cccd
 800bc1c:	424a0000 	.word	0x424a0000
 800bc20:	20001744 	.word	0x20001744
 800bc24:	2000269c 	.word	0x2000269c
 800bc28:	20000720 	.word	0x20000720
 800bc2c:	20000724 	.word	0x20000724
 800bc30:	20003190 	.word	0x20003190
		else if(_selected_band == 4 /*30m*/) selected_bandrelais = BANDRELAIS_3;
 800bc34:	4b9c      	ldr	r3, [pc, #624]	; (800bea8 <bandselection+0x760>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	d103      	bne.n	800bc44 <bandselection+0x4fc>
 800bc3c:	4b9b      	ldr	r3, [pc, #620]	; (800beac <bandselection+0x764>)
 800bc3e:	2203      	movs	r2, #3
 800bc40:	701a      	strb	r2, [r3, #0]
 800bc42:	e12a      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 5 /*20m*/) selected_bandrelais = BANDRELAIS_4;
 800bc44:	4b98      	ldr	r3, [pc, #608]	; (800bea8 <bandselection+0x760>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b05      	cmp	r3, #5
 800bc4a:	d103      	bne.n	800bc54 <bandselection+0x50c>
 800bc4c:	4b97      	ldr	r3, [pc, #604]	; (800beac <bandselection+0x764>)
 800bc4e:	2204      	movs	r2, #4
 800bc50:	701a      	strb	r2, [r3, #0]
 800bc52:	e122      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 6 /*17m*/) selected_bandrelais = BANDRELAIS_4;
 800bc54:	4b94      	ldr	r3, [pc, #592]	; (800bea8 <bandselection+0x760>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b06      	cmp	r3, #6
 800bc5a:	d103      	bne.n	800bc64 <bandselection+0x51c>
 800bc5c:	4b93      	ldr	r3, [pc, #588]	; (800beac <bandselection+0x764>)
 800bc5e:	2204      	movs	r2, #4
 800bc60:	701a      	strb	r2, [r3, #0]
 800bc62:	e11a      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 7 /*15m*/) selected_bandrelais = BANDRELAIS_4;
 800bc64:	4b90      	ldr	r3, [pc, #576]	; (800bea8 <bandselection+0x760>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b07      	cmp	r3, #7
 800bc6a:	d103      	bne.n	800bc74 <bandselection+0x52c>
 800bc6c:	4b8f      	ldr	r3, [pc, #572]	; (800beac <bandselection+0x764>)
 800bc6e:	2204      	movs	r2, #4
 800bc70:	701a      	strb	r2, [r3, #0]
 800bc72:	e112      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 8 /*12m*/) selected_bandrelais = BANDRELAIS_5;
 800bc74:	4b8c      	ldr	r3, [pc, #560]	; (800bea8 <bandselection+0x760>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b08      	cmp	r3, #8
 800bc7a:	d103      	bne.n	800bc84 <bandselection+0x53c>
 800bc7c:	4b8b      	ldr	r3, [pc, #556]	; (800beac <bandselection+0x764>)
 800bc7e:	2205      	movs	r2, #5
 800bc80:	701a      	strb	r2, [r3, #0]
 800bc82:	e10a      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 9 /*10m*/) selected_bandrelais = BANDRELAIS_5;
 800bc84:	4b88      	ldr	r3, [pc, #544]	; (800bea8 <bandselection+0x760>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b09      	cmp	r3, #9
 800bc8a:	d103      	bne.n	800bc94 <bandselection+0x54c>
 800bc8c:	4b87      	ldr	r3, [pc, #540]	; (800beac <bandselection+0x764>)
 800bc8e:	2205      	movs	r2, #5
 800bc90:	701a      	strb	r2, [r3, #0]
 800bc92:	e102      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 10 /*6m*/) selected_bandrelais = BANDRELAIS_6;
 800bc94:	4b84      	ldr	r3, [pc, #528]	; (800bea8 <bandselection+0x760>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b0a      	cmp	r3, #10
 800bc9a:	f040 80fe 	bne.w	800be9a <bandselection+0x752>
 800bc9e:	4b83      	ldr	r3, [pc, #524]	; (800beac <bandselection+0x764>)
 800bca0:	2206      	movs	r2, #6
 800bca2:	701a      	strb	r2, [r3, #0]
 800bca4:	e0f9      	b.n	800be9a <bandselection+0x752>
	}
	else if(pcfgdata->bandmode == 3)
 800bca6:	4b82      	ldr	r3, [pc, #520]	; (800beb0 <bandselection+0x768>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d158      	bne.n	800bd64 <bandselection+0x61c>
		"20m",
		"17/15m",
		"10/12m",
		"6m"
		*/
		if(_selected_band == 0 /*160m*/) 	 selected_bandrelais = BANDRELAIS_OFF;
 800bcb2:	4b7d      	ldr	r3, [pc, #500]	; (800bea8 <bandselection+0x760>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d103      	bne.n	800bcc2 <bandselection+0x57a>
 800bcba:	4b7c      	ldr	r3, [pc, #496]	; (800beac <bandselection+0x764>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	701a      	strb	r2, [r3, #0]
 800bcc0:	e0eb      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 1 /*80m*/) selected_bandrelais = BANDRELAIS_1;
 800bcc2:	4b79      	ldr	r3, [pc, #484]	; (800bea8 <bandselection+0x760>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d103      	bne.n	800bcd2 <bandselection+0x58a>
 800bcca:	4b78      	ldr	r3, [pc, #480]	; (800beac <bandselection+0x764>)
 800bccc:	2201      	movs	r2, #1
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	e0e3      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 2 /*60m*/) selected_bandrelais = BANDRELAIS_1;
 800bcd2:	4b75      	ldr	r3, [pc, #468]	; (800bea8 <bandselection+0x760>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d103      	bne.n	800bce2 <bandselection+0x59a>
 800bcda:	4b74      	ldr	r3, [pc, #464]	; (800beac <bandselection+0x764>)
 800bcdc:	2201      	movs	r2, #1
 800bcde:	701a      	strb	r2, [r3, #0]
 800bce0:	e0db      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 3 /*40m*/) selected_bandrelais = BANDRELAIS_1;
 800bce2:	4b71      	ldr	r3, [pc, #452]	; (800bea8 <bandselection+0x760>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b03      	cmp	r3, #3
 800bce8:	d103      	bne.n	800bcf2 <bandselection+0x5aa>
 800bcea:	4b70      	ldr	r3, [pc, #448]	; (800beac <bandselection+0x764>)
 800bcec:	2201      	movs	r2, #1
 800bcee:	701a      	strb	r2, [r3, #0]
 800bcf0:	e0d3      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 4 /*30m*/) selected_bandrelais = BANDRELAIS_2;
 800bcf2:	4b6d      	ldr	r3, [pc, #436]	; (800bea8 <bandselection+0x760>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	d103      	bne.n	800bd02 <bandselection+0x5ba>
 800bcfa:	4b6c      	ldr	r3, [pc, #432]	; (800beac <bandselection+0x764>)
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	701a      	strb	r2, [r3, #0]
 800bd00:	e0cb      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 5 /*20m*/) selected_bandrelais = BANDRELAIS_3;
 800bd02:	4b69      	ldr	r3, [pc, #420]	; (800bea8 <bandselection+0x760>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	d103      	bne.n	800bd12 <bandselection+0x5ca>
 800bd0a:	4b68      	ldr	r3, [pc, #416]	; (800beac <bandselection+0x764>)
 800bd0c:	2203      	movs	r2, #3
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	e0c3      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 6 /*17m*/) selected_bandrelais = BANDRELAIS_4;
 800bd12:	4b65      	ldr	r3, [pc, #404]	; (800bea8 <bandselection+0x760>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b06      	cmp	r3, #6
 800bd18:	d103      	bne.n	800bd22 <bandselection+0x5da>
 800bd1a:	4b64      	ldr	r3, [pc, #400]	; (800beac <bandselection+0x764>)
 800bd1c:	2204      	movs	r2, #4
 800bd1e:	701a      	strb	r2, [r3, #0]
 800bd20:	e0bb      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 7 /*15m*/) selected_bandrelais = BANDRELAIS_4;
 800bd22:	4b61      	ldr	r3, [pc, #388]	; (800bea8 <bandselection+0x760>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b07      	cmp	r3, #7
 800bd28:	d103      	bne.n	800bd32 <bandselection+0x5ea>
 800bd2a:	4b60      	ldr	r3, [pc, #384]	; (800beac <bandselection+0x764>)
 800bd2c:	2204      	movs	r2, #4
 800bd2e:	701a      	strb	r2, [r3, #0]
 800bd30:	e0b3      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 8 /*12m*/) selected_bandrelais = BANDRELAIS_5;
 800bd32:	4b5d      	ldr	r3, [pc, #372]	; (800bea8 <bandselection+0x760>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b08      	cmp	r3, #8
 800bd38:	d103      	bne.n	800bd42 <bandselection+0x5fa>
 800bd3a:	4b5c      	ldr	r3, [pc, #368]	; (800beac <bandselection+0x764>)
 800bd3c:	2205      	movs	r2, #5
 800bd3e:	701a      	strb	r2, [r3, #0]
 800bd40:	e0ab      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 9 /*10m*/) selected_bandrelais = BANDRELAIS_5;
 800bd42:	4b59      	ldr	r3, [pc, #356]	; (800bea8 <bandselection+0x760>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b09      	cmp	r3, #9
 800bd48:	d103      	bne.n	800bd52 <bandselection+0x60a>
 800bd4a:	4b58      	ldr	r3, [pc, #352]	; (800beac <bandselection+0x764>)
 800bd4c:	2205      	movs	r2, #5
 800bd4e:	701a      	strb	r2, [r3, #0]
 800bd50:	e0a3      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 10 /*6m*/) selected_bandrelais = BANDRELAIS_6;
 800bd52:	4b55      	ldr	r3, [pc, #340]	; (800bea8 <bandselection+0x760>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b0a      	cmp	r3, #10
 800bd58:	f040 809f 	bne.w	800be9a <bandselection+0x752>
 800bd5c:	4b53      	ldr	r3, [pc, #332]	; (800beac <bandselection+0x764>)
 800bd5e:	2206      	movs	r2, #6
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	e09a      	b.n	800be9a <bandselection+0x752>
	}
	else if(pcfgdata->bandmode == 4)
 800bd64:	4b52      	ldr	r3, [pc, #328]	; (800beb0 <bandselection+0x768>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	d157      	bne.n	800be20 <bandselection+0x6d8>
		"30/20m",
		"17/15m",
		"12/10m",
		"6m"
		*/
		if(_selected_band == 0 /*160m*/) 	 selected_bandrelais = BANDRELAIS_1;
 800bd70:	4b4d      	ldr	r3, [pc, #308]	; (800bea8 <bandselection+0x760>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d103      	bne.n	800bd80 <bandselection+0x638>
 800bd78:	4b4c      	ldr	r3, [pc, #304]	; (800beac <bandselection+0x764>)
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	701a      	strb	r2, [r3, #0]
 800bd7e:	e08c      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 1 /*80m*/) selected_bandrelais = BANDRELAIS_1;
 800bd80:	4b49      	ldr	r3, [pc, #292]	; (800bea8 <bandselection+0x760>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d103      	bne.n	800bd90 <bandselection+0x648>
 800bd88:	4b48      	ldr	r3, [pc, #288]	; (800beac <bandselection+0x764>)
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	701a      	strb	r2, [r3, #0]
 800bd8e:	e084      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 2 /*60m*/) selected_bandrelais = BANDRELAIS_2;
 800bd90:	4b45      	ldr	r3, [pc, #276]	; (800bea8 <bandselection+0x760>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d103      	bne.n	800bda0 <bandselection+0x658>
 800bd98:	4b44      	ldr	r3, [pc, #272]	; (800beac <bandselection+0x764>)
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	e07c      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 3 /*40m*/) selected_bandrelais = BANDRELAIS_2;
 800bda0:	4b41      	ldr	r3, [pc, #260]	; (800bea8 <bandselection+0x760>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d103      	bne.n	800bdb0 <bandselection+0x668>
 800bda8:	4b40      	ldr	r3, [pc, #256]	; (800beac <bandselection+0x764>)
 800bdaa:	2202      	movs	r2, #2
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	e074      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 4 /*30m*/) selected_bandrelais = BANDRELAIS_3;
 800bdb0:	4b3d      	ldr	r3, [pc, #244]	; (800bea8 <bandselection+0x760>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	d103      	bne.n	800bdc0 <bandselection+0x678>
 800bdb8:	4b3c      	ldr	r3, [pc, #240]	; (800beac <bandselection+0x764>)
 800bdba:	2203      	movs	r2, #3
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	e06c      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 5 /*20m*/) selected_bandrelais = BANDRELAIS_3;
 800bdc0:	4b39      	ldr	r3, [pc, #228]	; (800bea8 <bandselection+0x760>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b05      	cmp	r3, #5
 800bdc6:	d103      	bne.n	800bdd0 <bandselection+0x688>
 800bdc8:	4b38      	ldr	r3, [pc, #224]	; (800beac <bandselection+0x764>)
 800bdca:	2203      	movs	r2, #3
 800bdcc:	701a      	strb	r2, [r3, #0]
 800bdce:	e064      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 6 /*17m*/) selected_bandrelais = BANDRELAIS_4;
 800bdd0:	4b35      	ldr	r3, [pc, #212]	; (800bea8 <bandselection+0x760>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b06      	cmp	r3, #6
 800bdd6:	d103      	bne.n	800bde0 <bandselection+0x698>
 800bdd8:	4b34      	ldr	r3, [pc, #208]	; (800beac <bandselection+0x764>)
 800bdda:	2204      	movs	r2, #4
 800bddc:	701a      	strb	r2, [r3, #0]
 800bdde:	e05c      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 7 /*15m*/) selected_bandrelais = BANDRELAIS_4;
 800bde0:	4b31      	ldr	r3, [pc, #196]	; (800bea8 <bandselection+0x760>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b07      	cmp	r3, #7
 800bde6:	d103      	bne.n	800bdf0 <bandselection+0x6a8>
 800bde8:	4b30      	ldr	r3, [pc, #192]	; (800beac <bandselection+0x764>)
 800bdea:	2204      	movs	r2, #4
 800bdec:	701a      	strb	r2, [r3, #0]
 800bdee:	e054      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 8 /*12m*/) selected_bandrelais = BANDRELAIS_5;
 800bdf0:	4b2d      	ldr	r3, [pc, #180]	; (800bea8 <bandselection+0x760>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b08      	cmp	r3, #8
 800bdf6:	d103      	bne.n	800be00 <bandselection+0x6b8>
 800bdf8:	4b2c      	ldr	r3, [pc, #176]	; (800beac <bandselection+0x764>)
 800bdfa:	2205      	movs	r2, #5
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	e04c      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 9 /*10m*/) selected_bandrelais = BANDRELAIS_5;
 800be00:	4b29      	ldr	r3, [pc, #164]	; (800bea8 <bandselection+0x760>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b09      	cmp	r3, #9
 800be06:	d103      	bne.n	800be10 <bandselection+0x6c8>
 800be08:	4b28      	ldr	r3, [pc, #160]	; (800beac <bandselection+0x764>)
 800be0a:	2205      	movs	r2, #5
 800be0c:	701a      	strb	r2, [r3, #0]
 800be0e:	e044      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 10 /*6m*/) selected_bandrelais = BANDRELAIS_6;
 800be10:	4b25      	ldr	r3, [pc, #148]	; (800bea8 <bandselection+0x760>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b0a      	cmp	r3, #10
 800be16:	d140      	bne.n	800be9a <bandselection+0x752>
 800be18:	4b24      	ldr	r3, [pc, #144]	; (800beac <bandselection+0x764>)
 800be1a:	2206      	movs	r2, #6
 800be1c:	701a      	strb	r2, [r3, #0]
 800be1e:	e03c      	b.n	800be9a <bandselection+0x752>
	}
	else if(pcfgdata->bandmode >= 5)
 800be20:	4b23      	ldr	r3, [pc, #140]	; (800beb0 <bandselection+0x768>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be28:	2b04      	cmp	r3, #4
 800be2a:	d936      	bls.n	800be9a <bandselection+0x752>
	{
		// LF und UKW
		if(_selected_band == 0) 	 selected_bandrelais = BANDRELAIS_OFF;
 800be2c:	4b1e      	ldr	r3, [pc, #120]	; (800bea8 <bandselection+0x760>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <bandselection+0x6f4>
 800be34:	4b1d      	ldr	r3, [pc, #116]	; (800beac <bandselection+0x764>)
 800be36:	2200      	movs	r2, #0
 800be38:	701a      	strb	r2, [r3, #0]
 800be3a:	e02e      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 1) selected_bandrelais = BANDRELAIS_1;
 800be3c:	4b1a      	ldr	r3, [pc, #104]	; (800bea8 <bandselection+0x760>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d103      	bne.n	800be4c <bandselection+0x704>
 800be44:	4b19      	ldr	r3, [pc, #100]	; (800beac <bandselection+0x764>)
 800be46:	2201      	movs	r2, #1
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	e026      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 2) selected_bandrelais = BANDRELAIS_2;
 800be4c:	4b16      	ldr	r3, [pc, #88]	; (800bea8 <bandselection+0x760>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b02      	cmp	r3, #2
 800be52:	d103      	bne.n	800be5c <bandselection+0x714>
 800be54:	4b15      	ldr	r3, [pc, #84]	; (800beac <bandselection+0x764>)
 800be56:	2202      	movs	r2, #2
 800be58:	701a      	strb	r2, [r3, #0]
 800be5a:	e01e      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 3) selected_bandrelais = BANDRELAIS_3;
 800be5c:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <bandselection+0x760>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b03      	cmp	r3, #3
 800be62:	d103      	bne.n	800be6c <bandselection+0x724>
 800be64:	4b11      	ldr	r3, [pc, #68]	; (800beac <bandselection+0x764>)
 800be66:	2203      	movs	r2, #3
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	e016      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 4) selected_bandrelais = BANDRELAIS_4;
 800be6c:	4b0e      	ldr	r3, [pc, #56]	; (800bea8 <bandselection+0x760>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b04      	cmp	r3, #4
 800be72:	d103      	bne.n	800be7c <bandselection+0x734>
 800be74:	4b0d      	ldr	r3, [pc, #52]	; (800beac <bandselection+0x764>)
 800be76:	2204      	movs	r2, #4
 800be78:	701a      	strb	r2, [r3, #0]
 800be7a:	e00e      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 5) selected_bandrelais = BANDRELAIS_5;
 800be7c:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <bandselection+0x760>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2b05      	cmp	r3, #5
 800be82:	d103      	bne.n	800be8c <bandselection+0x744>
 800be84:	4b09      	ldr	r3, [pc, #36]	; (800beac <bandselection+0x764>)
 800be86:	2205      	movs	r2, #5
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	e006      	b.n	800be9a <bandselection+0x752>
		else if(_selected_band == 6) selected_bandrelais = BANDRELAIS_6;
 800be8c:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <bandselection+0x760>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b06      	cmp	r3, #6
 800be92:	d102      	bne.n	800be9a <bandselection+0x752>
 800be94:	4b05      	ldr	r3, [pc, #20]	; (800beac <bandselection+0x764>)
 800be96:	2206      	movs	r2, #6
 800be98:	701a      	strb	r2, [r3, #0]
	}

	// und schalte die Relais
	switch_bandrel();
 800be9a:	f000 f80b 	bl	800beb4 <switch_bandrel>
 800be9e:	e000      	b.n	800bea2 <bandselection+0x75a>
			return;	// keine Frequenz, lasse alles so wie es ist
 800bea0:	bf00      	nop
}
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	20000720 	.word	0x20000720
 800beac:	20003190 	.word	0x20003190
 800beb0:	20000bf0 	.word	0x20000bf0

0800beb4 <switch_bandrel>:

void switch_bandrel()
{
 800beb4:	b480      	push	{r7}
 800beb6:	af00      	add	r7, sp, #0
	gpio_stat[BANDREL_1] = 0;
 800beb8:	4b22      	ldr	r3, [pc, #136]	; (800bf44 <switch_bandrel+0x90>)
 800beba:	2200      	movs	r2, #0
 800bebc:	755a      	strb	r2, [r3, #21]
	gpio_stat[BANDREL_2] = 0;
 800bebe:	4b21      	ldr	r3, [pc, #132]	; (800bf44 <switch_bandrel+0x90>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	759a      	strb	r2, [r3, #22]
	gpio_stat[BANDREL_3] = 0;
 800bec4:	4b1f      	ldr	r3, [pc, #124]	; (800bf44 <switch_bandrel+0x90>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	75da      	strb	r2, [r3, #23]
	gpio_stat[BANDREL_4] = 0;
 800beca:	4b1e      	ldr	r3, [pc, #120]	; (800bf44 <switch_bandrel+0x90>)
 800becc:	2200      	movs	r2, #0
 800bece:	761a      	strb	r2, [r3, #24]
	gpio_stat[BANDREL_5] = 0;
 800bed0:	4b1c      	ldr	r3, [pc, #112]	; (800bf44 <switch_bandrel+0x90>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	765a      	strb	r2, [r3, #25]
	gpio_stat[BANDREL_6] = 0;
 800bed6:	4b1b      	ldr	r3, [pc, #108]	; (800bf44 <switch_bandrel+0x90>)
 800bed8:	2200      	movs	r2, #0
 800beda:	769a      	strb	r2, [r3, #26]

	switch(selected_bandrelais)
 800bedc:	4b1a      	ldr	r3, [pc, #104]	; (800bf48 <switch_bandrel+0x94>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b06      	cmp	r3, #6
 800bee2:	d82a      	bhi.n	800bf3a <switch_bandrel+0x86>
 800bee4:	a201      	add	r2, pc, #4	; (adr r2, 800beec <switch_bandrel+0x38>)
 800bee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beea:	bf00      	nop
 800beec:	0800bf39 	.word	0x0800bf39
 800bef0:	0800bf09 	.word	0x0800bf09
 800bef4:	0800bf11 	.word	0x0800bf11
 800bef8:	0800bf19 	.word	0x0800bf19
 800befc:	0800bf21 	.word	0x0800bf21
 800bf00:	0800bf29 	.word	0x0800bf29
 800bf04:	0800bf31 	.word	0x0800bf31
	{
	case BANDRELAIS_OFF: // lasse alle Relais ausgeschaltet, das ist dann das 160m Band
		break;
	case BANDRELAIS_1:
		gpio_stat[BANDREL_1] = 1;
 800bf08:	4b0e      	ldr	r3, [pc, #56]	; (800bf44 <switch_bandrel+0x90>)
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	755a      	strb	r2, [r3, #21]
		break;
 800bf0e:	e014      	b.n	800bf3a <switch_bandrel+0x86>
	case BANDRELAIS_2:
		gpio_stat[BANDREL_2] = 1;
 800bf10:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <switch_bandrel+0x90>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	759a      	strb	r2, [r3, #22]
		break;
 800bf16:	e010      	b.n	800bf3a <switch_bandrel+0x86>
	case BANDRELAIS_3:
		gpio_stat[BANDREL_3] = 1;
 800bf18:	4b0a      	ldr	r3, [pc, #40]	; (800bf44 <switch_bandrel+0x90>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	75da      	strb	r2, [r3, #23]
		break;
 800bf1e:	e00c      	b.n	800bf3a <switch_bandrel+0x86>
	case BANDRELAIS_4:
		gpio_stat[BANDREL_4] = 1;
 800bf20:	4b08      	ldr	r3, [pc, #32]	; (800bf44 <switch_bandrel+0x90>)
 800bf22:	2201      	movs	r2, #1
 800bf24:	761a      	strb	r2, [r3, #24]
		break;
 800bf26:	e008      	b.n	800bf3a <switch_bandrel+0x86>
	case BANDRELAIS_5:
		gpio_stat[BANDREL_5] = 1;
 800bf28:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <switch_bandrel+0x90>)
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	765a      	strb	r2, [r3, #25]
		break;
 800bf2e:	e004      	b.n	800bf3a <switch_bandrel+0x86>
	case BANDRELAIS_6:
		gpio_stat[BANDREL_6] = 1;
 800bf30:	4b04      	ldr	r3, [pc, #16]	; (800bf44 <switch_bandrel+0x90>)
 800bf32:	2201      	movs	r2, #1
 800bf34:	769a      	strb	r2, [r3, #26]
		break;
 800bf36:	e000      	b.n	800bf3a <switch_bandrel+0x86>
		break;
 800bf38:	bf00      	nop
	}
}
 800bf3a:	bf00      	nop
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	2000498c 	.word	0x2000498c
 800bf48:	20003190 	.word	0x20003190

0800bf4c <show_bar>:

#include <main.h>
#include <math.h>

void show_bar(t_bargraph *bi)
{
 800bf4c:	b5b0      	push	{r4, r5, r7, lr}
 800bf4e:	b08c      	sub	sp, #48	; 0x30
 800bf50:	af04      	add	r7, sp, #16
 800bf52:	6078      	str	r0, [r7, #4]
	int pvalyellow = 0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	61fb      	str	r3, [r7, #28]
	int pvalred = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	61bb      	str	r3, [r7, #24]
	int ylabeldiff = 8;
 800bf5c:	2308      	movs	r3, #8
 800bf5e:	613b      	str	r3, [r7, #16]

	// Berechne diverse feste Referenzwerte
	if(bi->style & BARSTYLE_LOG)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf64:	f003 0308 	and.w	r3, r3, #8
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d03b      	beq.n	800bfe4 <show_bar+0x98>
	{
		if(bi->style & BARSTYLE_SWR)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf70:	f003 0310 	and.w	r3, r3, #16
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d01a      	beq.n	800bfae <show_bar+0x62>
		{
			// log Swr
			pvalyellow = lin_log_percent_swr(bi->yellow, bi->val100precent);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800bf84:	eef0 0a47 	vmov.f32	s1, s14
 800bf88:	eeb0 0a67 	vmov.f32	s0, s15
 800bf8c:	f009 fbfe 	bl	801578c <lin_log_percent_swr>
 800bf90:	61f8      	str	r0, [r7, #28]
			pvalred = lin_log_percent_swr(bi->red, bi->val100precent);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800bf9e:	eef0 0a47 	vmov.f32	s1, s14
 800bfa2:	eeb0 0a67 	vmov.f32	s0, s15
 800bfa6:	f009 fbf1 	bl	801578c <lin_log_percent_swr>
 800bfaa:	61b8      	str	r0, [r7, #24]
 800bfac:	e060      	b.n	800c070 <show_bar+0x124>
		}
		else
		{
			// log Pwr
			pvalyellow = log_percent(bi->yellow, bi->val100precent);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800bfba:	eef0 0a47 	vmov.f32	s1, s14
 800bfbe:	eeb0 0a67 	vmov.f32	s0, s15
 800bfc2:	f009 fc0b 	bl	80157dc <log_percent>
 800bfc6:	61f8      	str	r0, [r7, #28]
			pvalred = log_percent(bi->red, bi->val100precent);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800bfd4:	eef0 0a47 	vmov.f32	s1, s14
 800bfd8:	eeb0 0a67 	vmov.f32	s0, s15
 800bfdc:	f009 fbfe 	bl	80157dc <log_percent>
 800bfe0:	61b8      	str	r0, [r7, #24]
 800bfe2:	e045      	b.n	800c070 <show_bar+0x124>
		}
	}
	else
	{
		// lin
		pvalyellow = (int)(bi->yellow * 100.0 / bi->val100precent);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fc f9e4 	bl	80083b8 <__aeabi_f2d>
 800bff0:	f04f 0200 	mov.w	r2, #0
 800bff4:	4b9a      	ldr	r3, [pc, #616]	; (800c260 <show_bar+0x314>)
 800bff6:	f7fc fa37 	bl	8008468 <__aeabi_dmul>
 800bffa:	4603      	mov	r3, r0
 800bffc:	460c      	mov	r4, r1
 800bffe:	4625      	mov	r5, r4
 800c000:	461c      	mov	r4, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fc f9d5 	bl	80083b8 <__aeabi_f2d>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	4620      	mov	r0, r4
 800c014:	4629      	mov	r1, r5
 800c016:	f7fc fb51 	bl	80086bc <__aeabi_ddiv>
 800c01a:	4603      	mov	r3, r0
 800c01c:	460c      	mov	r4, r1
 800c01e:	4618      	mov	r0, r3
 800c020:	4621      	mov	r1, r4
 800c022:	f7fc fcd1 	bl	80089c8 <__aeabi_d2iz>
 800c026:	4603      	mov	r3, r0
 800c028:	61fb      	str	r3, [r7, #28]
		pvalred = (int)(bi->red * 100.0 / bi->val100precent);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c030:	4618      	mov	r0, r3
 800c032:	f7fc f9c1 	bl	80083b8 <__aeabi_f2d>
 800c036:	f04f 0200 	mov.w	r2, #0
 800c03a:	4b89      	ldr	r3, [pc, #548]	; (800c260 <show_bar+0x314>)
 800c03c:	f7fc fa14 	bl	8008468 <__aeabi_dmul>
 800c040:	4603      	mov	r3, r0
 800c042:	460c      	mov	r4, r1
 800c044:	4625      	mov	r5, r4
 800c046:	461c      	mov	r4, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fc f9b2 	bl	80083b8 <__aeabi_f2d>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	4620      	mov	r0, r4
 800c05a:	4629      	mov	r1, r5
 800c05c:	f7fc fb2e 	bl	80086bc <__aeabi_ddiv>
 800c060:	4603      	mov	r3, r0
 800c062:	460c      	mov	r4, r1
 800c064:	4618      	mov	r0, r3
 800c066:	4621      	mov	r1, r4
 800c068:	f7fc fcae 	bl	80089c8 <__aeabi_d2iz>
 800c06c:	4603      	mov	r3, r0
 800c06e:	61bb      	str	r3, [r7, #24]
	}

	bi->greenmaxx = bi->minx + (pvalyellow * (bi->maxx - bi->minx)) / 100;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6859      	ldr	r1, [r3, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	1acb      	subs	r3, r1, r3
 800c07e:	69f9      	ldr	r1, [r7, #28]
 800c080:	fb01 f303 	mul.w	r3, r1, r3
 800c084:	4977      	ldr	r1, [pc, #476]	; (800c264 <show_bar+0x318>)
 800c086:	fb81 0103 	smull	r0, r1, r1, r3
 800c08a:	1149      	asrs	r1, r1, #5
 800c08c:	17db      	asrs	r3, r3, #31
 800c08e:	1acb      	subs	r3, r1, r3
 800c090:	441a      	add	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	bi->yellowmaxx = bi->minx + (pvalred * (bi->maxx - bi->minx)) / 100;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6859      	ldr	r1, [r3, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	1acb      	subs	r3, r1, r3
 800c0a6:	69b9      	ldr	r1, [r7, #24]
 800c0a8:	fb01 f303 	mul.w	r3, r1, r3
 800c0ac:	496d      	ldr	r1, [pc, #436]	; (800c264 <show_bar+0x318>)
 800c0ae:	fb81 0103 	smull	r0, r1, r1, r3
 800c0b2:	1149      	asrs	r1, r1, #5
 800c0b4:	17db      	asrs	r3, r3, #31
 800c0b6:	1acb      	subs	r3, r1, r3
 800c0b8:	441a      	add	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

	// zeichne den Rahmen
	TFT_Rectangle(bi->minx-1, bi->miny-1, bi->maxx+1, bi->maxy+1, LIGHTGREY, 2);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	1e58      	subs	r0, r3, #1
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	1e59      	subs	r1, r3, #1
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	1c5c      	adds	r4, r3, #1
 800c0d8:	2302      	movs	r3, #2
 800c0da:	9301      	str	r3, [sp, #4]
 800c0dc:	f248 4310 	movw	r3, #33808	; 0x8410
 800c0e0:	9300      	str	r3, [sp, #0]
 800c0e2:	4623      	mov	r3, r4
 800c0e4:	f00b ff02 	bl	8017eec <TFT_Rectangle>

	// Titel
	if(bi->titlefont == &verdana_22ptFontInfo)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	4a5e      	ldr	r2, [pc, #376]	; (800c268 <show_bar+0x31c>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d113      	bne.n	800c11a <show_bar+0x1ce>
		tft_print(bi->titlefont, bi->titletext, bi->titlex, bi->titley, 4, WHITE, BLACK);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6918      	ldr	r0, [r3, #16]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f103 011c 	add.w	r1, r3, #28
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	695a      	ldr	r2, [r3, #20]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	699c      	ldr	r4, [r3, #24]
 800c104:	2300      	movs	r3, #0
 800c106:	9302      	str	r3, [sp, #8]
 800c108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c10c:	9301      	str	r3, [sp, #4]
 800c10e:	2304      	movs	r3, #4
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	4623      	mov	r3, r4
 800c114:	f012 fd46 	bl	801eba4 <tft_print>
 800c118:	e02b      	b.n	800c172 <show_bar+0x226>
	else if(bi->titlefont == &verdana_18ptFontInfo)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	4a53      	ldr	r2, [pc, #332]	; (800c26c <show_bar+0x320>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d113      	bne.n	800c14c <show_bar+0x200>
		tft_print(bi->titlefont, bi->titletext, bi->titlex, bi->titley, 3, WHITE, BLACK);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6918      	ldr	r0, [r3, #16]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f103 011c 	add.w	r1, r3, #28
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	695a      	ldr	r2, [r3, #20]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	699c      	ldr	r4, [r3, #24]
 800c136:	2300      	movs	r3, #0
 800c138:	9302      	str	r3, [sp, #8]
 800c13a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	2303      	movs	r3, #3
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	4623      	mov	r3, r4
 800c146:	f012 fd2d 	bl	801eba4 <tft_print>
 800c14a:	e012      	b.n	800c172 <show_bar+0x226>
	else
		tft_print(bi->titlefont, bi->titletext, bi->titlex, bi->titley, 1, WHITE, BLACK);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6918      	ldr	r0, [r3, #16]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f103 011c 	add.w	r1, r3, #28
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	695a      	ldr	r2, [r3, #20]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	699c      	ldr	r4, [r3, #24]
 800c15e:	2300      	movs	r3, #0
 800c160:	9302      	str	r3, [sp, #8]
 800c162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c166:	9301      	str	r3, [sp, #4]
 800c168:	2301      	movs	r3, #1
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	4623      	mov	r3, r4
 800c16e:	f012 fd19 	bl	801eba4 <tft_print>

	// Einheit
	tft_print(bi->labelfont, bi->labeltext, bi->maxx+5, bi->maxy+ylabeldiff, 1, BARLABELBLUE, BLACK);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	1d5c      	adds	r4, r3, #5
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	441a      	add	r2, r3
 800c18a:	2300      	movs	r3, #0
 800c18c:	9302      	str	r3, [sp, #8]
 800c18e:	f64c 635f 	movw	r3, #52831	; 0xce5f
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	2301      	movs	r3, #1
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	4613      	mov	r3, r2
 800c19a:	4622      	mov	r2, r4
 800c19c:	f012 fd02 	bl	801eba4 <tft_print>

	// Label
	for(int i=0; i<bi->labelanz; i++)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	617b      	str	r3, [r7, #20]
 800c1a4:	e052      	b.n	800c24c <show_bar+0x300>
	{
		int x = bi->minx + bi->barlabel[i].posx*(bi->maxx-bi->minx)/100;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6819      	ldr	r1, [r3, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	4403      	add	r3, r0
 800c1b8:	3350      	adds	r3, #80	; 0x50
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	6850      	ldr	r0, [r2, #4]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	6812      	ldr	r2, [r2, #0]
 800c1c4:	1a82      	subs	r2, r0, r2
 800c1c6:	fb02 f303 	mul.w	r3, r2, r3
 800c1ca:	4a26      	ldr	r2, [pc, #152]	; (800c264 <show_bar+0x318>)
 800c1cc:	fb82 0203 	smull	r0, r2, r2, r3
 800c1d0:	1152      	asrs	r2, r2, #5
 800c1d2:	17db      	asrs	r3, r3, #31
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	440b      	add	r3, r1
 800c1d8:	60fb      	str	r3, [r7, #12]
		tft_print(bi->labelfont, bi->barlabel[i].text, x + bi->barlabel[i].leftshift, bi->maxy+ylabeldiff, 1, BARLABELBLUE, BLACK);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	3358      	adds	r3, #88	; 0x58
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	18d4      	adds	r4, r2, r3
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	3354      	adds	r3, #84	; 0x54
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	18d1      	adds	r1, r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	441a      	add	r2, r3
 800c20c:	2300      	movs	r3, #0
 800c20e:	9302      	str	r3, [sp, #8]
 800c210:	f64c 635f 	movw	r3, #52831	; 0xce5f
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	2301      	movs	r3, #1
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	4613      	mov	r3, r2
 800c21c:	460a      	mov	r2, r1
 800c21e:	4621      	mov	r1, r4
 800c220:	f012 fcc0 	bl	801eba4 <tft_print>

		TFT_Vert_Line(x, bi->maxy+2, bi->maxy+5, BARLABELBLUE, BLACK, 4, 0);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	1c99      	adds	r1, r3, #2
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	1d5a      	adds	r2, r3, #5
 800c230:	2300      	movs	r3, #0
 800c232:	9302      	str	r3, [sp, #8]
 800c234:	2304      	movs	r3, #4
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	2300      	movs	r3, #0
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	f64c 635f 	movw	r3, #52831	; 0xce5f
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f00b fbf3 	bl	8017a2c <TFT_Vert_Line>
	for(int i=0; i<bi->labelanz; i++)
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	3301      	adds	r3, #1
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	429a      	cmp	r2, r3
 800c256:	dba6      	blt.n	800c1a6 <show_bar+0x25a>
	}
}
 800c258:	bf00      	nop
 800c25a:	3720      	adds	r7, #32
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bdb0      	pop	{r4, r5, r7, pc}
 800c260:	40590000 	.word	0x40590000
 800c264:	51eb851f 	.word	0x51eb851f
 800c268:	20001c7c 	.word	0x20001c7c
 800c26c:	20001c70 	.word	0x20001c70

0800c270 <draw_bar_rect>:

void draw_bar_rect(int xs, int ys, int xe, int ye, unsigned int rgb, int style, int maxx)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af02      	add	r7, sp, #8
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	603b      	str	r3, [r7, #0]
//int blockwidth = 8;
//int blockspace = 4;

	// nur volle Farben, ist evt schöner als Blocks
	TFT_Fill_Rectangle(xs,ys,xe,ye,rgb);
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f00b fad5 	bl	8017838 <TFT_Fill_Rectangle>

			TFT_Fill_Rectangle(i+blockwidth,ys,i+blockwidth+blockspace,ye,BLACK);
		}
	}
	*/
}
 800c28e:	bf00      	nop
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <fill_bar>:

// Zeichne den Balken mit Länge "value"
// wobei value der echte Messwert ist
// der hier mithilfe des Maximalwerts skaliert wird
void fill_bar(t_bargraph *bi, float value, float peakval)
{
 800c298:	b5b0      	push	{r4, r5, r7, lr}
 800c29a:	b092      	sub	sp, #72	; 0x48
 800c29c:	af04      	add	r7, sp, #16
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	ed87 0a02 	vstr	s0, [r7, #8]
 800c2a4:	edc7 0a01 	vstr	s1, [r7, #4]
	int pval = 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	637b      	str	r3, [r7, #52]	; 0x34
	int pkval = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	633b      	str	r3, [r7, #48]	; 0x30

	if(bi->last_value == value && bi->last_peakvalue == peakval) return;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800c2b6:	ed97 7a02 	vldr	s14, [r7, #8]
 800c2ba:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c2:	d10a      	bne.n	800c2da <fill_bar+0x42>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800c2ca:	ed97 7a01 	vldr	s14, [r7, #4]
 800c2ce:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d6:	f000 81e3 	beq.w	800c6a0 <fill_bar+0x408>

	// rechne den Messwert in % um
	if(bi->style & BARSTYLE_LOG)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2de:	f003 0308 	and.w	r3, r3, #8
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d025      	beq.n	800c332 <fill_bar+0x9a>
	{
		if(bi->style & BARSTYLE_SWR)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ea:	f003 0310 	and.w	r3, r3, #16
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00a      	beq.n	800c308 <fill_bar+0x70>
			pval = lin_log_percent_swr(value, bi->val100precent);	// log mit SWR Skalierung
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 800c2f8:	eef0 0a67 	vmov.f32	s1, s15
 800c2fc:	ed97 0a02 	vldr	s0, [r7, #8]
 800c300:	f009 fa44 	bl	801578c <lin_log_percent_swr>
 800c304:	6378      	str	r0, [r7, #52]	; 0x34
 800c306:	e034      	b.n	800c372 <fill_bar+0xda>
		else
		{
			pval = log_percent(value, bi->val100precent);			// log Power Skalierung
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 800c30e:	eef0 0a67 	vmov.f32	s1, s15
 800c312:	ed97 0a02 	vldr	s0, [r7, #8]
 800c316:	f009 fa61 	bl	80157dc <log_percent>
 800c31a:	6378      	str	r0, [r7, #52]	; 0x34
			pkval = log_percent(peakval, bi->val100precent);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 800c322:	eef0 0a67 	vmov.f32	s1, s15
 800c326:	ed97 0a01 	vldr	s0, [r7, #4]
 800c32a:	f009 fa57 	bl	80157dc <log_percent>
 800c32e:	6338      	str	r0, [r7, #48]	; 0x30
 800c330:	e01f      	b.n	800c372 <fill_bar+0xda>
		}
	}
	else
		pval = (int)(value * 100.0 / bi->val100precent);	// linear
 800c332:	68b8      	ldr	r0, [r7, #8]
 800c334:	f7fc f840 	bl	80083b8 <__aeabi_f2d>
 800c338:	f04f 0200 	mov.w	r2, #0
 800c33c:	4b9c      	ldr	r3, [pc, #624]	; (800c5b0 <fill_bar+0x318>)
 800c33e:	f7fc f893 	bl	8008468 <__aeabi_dmul>
 800c342:	4603      	mov	r3, r0
 800c344:	460c      	mov	r4, r1
 800c346:	4625      	mov	r5, r4
 800c348:	461c      	mov	r4, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c350:	4618      	mov	r0, r3
 800c352:	f7fc f831 	bl	80083b8 <__aeabi_f2d>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	4620      	mov	r0, r4
 800c35c:	4629      	mov	r1, r5
 800c35e:	f7fc f9ad 	bl	80086bc <__aeabi_ddiv>
 800c362:	4603      	mov	r3, r0
 800c364:	460c      	mov	r4, r1
 800c366:	4618      	mov	r0, r3
 800c368:	4621      	mov	r1, r4
 800c36a:	f7fc fb2d 	bl	80089c8 <__aeabi_d2iz>
 800c36e:	4603      	mov	r3, r0
 800c370:	637b      	str	r3, [r7, #52]	; 0x34

	// Skaliere auf Balkengröße
	int xsize = bi->maxx - bi->minx;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	62bb      	str	r3, [r7, #40]	; 0x28
	int xvalue = bi->minx + (pval * xsize) / 100;	// der Balken geht von 0 bis hierher
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c386:	fb01 f303 	mul.w	r3, r1, r3
 800c38a:	498a      	ldr	r1, [pc, #552]	; (800c5b4 <fill_bar+0x31c>)
 800c38c:	fb81 0103 	smull	r0, r1, r1, r3
 800c390:	1149      	asrs	r1, r1, #5
 800c392:	17db      	asrs	r3, r3, #31
 800c394:	1acb      	subs	r3, r1, r3
 800c396:	4413      	add	r3, r2
 800c398:	62fb      	str	r3, [r7, #44]	; 0x2c
	int xpkvalue = bi->minx + (pkval * xsize) / 100;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3a2:	fb01 f303 	mul.w	r3, r1, r3
 800c3a6:	4983      	ldr	r1, [pc, #524]	; (800c5b4 <fill_bar+0x31c>)
 800c3a8:	fb81 0103 	smull	r0, r1, r1, r3
 800c3ac:	1149      	asrs	r1, r1, #5
 800c3ae:	17db      	asrs	r3, r3, #31
 800c3b0:	1acb      	subs	r3, r1, r3
 800c3b2:	4413      	add	r3, r2
 800c3b4:	627b      	str	r3, [r7, #36]	; 0x24

	// begrenze Maximalwert
	if(xvalue > (bi->maxx-1))
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	dd03      	ble.n	800c3ca <fill_bar+0x132>
		xvalue = (bi->maxx-1);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Zeichne Balken

	if(xvalue > (bi->minx+1))
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	f340 80f0 	ble.w	800c5b8 <fill_bar+0x320>
	{
		if(bi->last_value != value)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800c3de:	ed97 7a02 	vldr	s14, [r7, #8]
 800c3e2:	eeb4 7a67 	vcmp.f32	s14, s15
 800c3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ea:	f000 80c1 	beq.w	800c570 <fill_bar+0x2d8>
		{
			if(value <= bi->yellow)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 800c3f4:	ed97 7a02 	vldr	s14, [r7, #8]
 800c3f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c400:	d817      	bhi.n	800c432 <fill_bar+0x19a>
				draw_bar_rect(bi->minx+1, bi->miny+1, xvalue, bi->maxy-1, GREEN, bi->style, bi->maxx-3);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	1c58      	adds	r0, r3, #1
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	1c59      	adds	r1, r3, #1
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	1e5c      	subs	r4, r3, #1
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	6852      	ldr	r2, [r2, #4]
 800c41c:	3a03      	subs	r2, #3
 800c41e:	9202      	str	r2, [sp, #8]
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	4623      	mov	r3, r4
 800c42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c42c:	f7ff ff20 	bl	800c270 <draw_bar_rect>
 800c430:	e089      	b.n	800c546 <fill_bar+0x2ae>
			else if(value <= bi->red)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 800c438:	ed97 7a02 	vldr	s14, [r7, #8]
 800c43c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c444:	d832      	bhi.n	800c4ac <fill_bar+0x214>
			{
				draw_bar_rect(bi->minx+1, bi->miny+1, bi->greenmaxx, bi->maxy-1, GREEN, bi->style, bi->maxx-3);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	1c58      	adds	r0, r3, #1
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	1c59      	adds	r1, r3, #1
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	1e5d      	subs	r5, r3, #1
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	6852      	ldr	r2, [r2, #4]
 800c466:	3a03      	subs	r2, #3
 800c468:	9202      	str	r2, [sp, #8]
 800c46a:	9301      	str	r3, [sp, #4]
 800c46c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	462b      	mov	r3, r5
 800c474:	4622      	mov	r2, r4
 800c476:	f7ff fefb 	bl	800c270 <draw_bar_rect>
				draw_bar_rect(bi->greenmaxx+1, bi->miny+1, xvalue, bi->maxy-1, YELLOW, bi->style, bi->maxx-3);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c480:	1c58      	adds	r0, r3, #1
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	1c59      	adds	r1, r3, #1
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	1e5c      	subs	r4, r3, #1
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	6852      	ldr	r2, [r2, #4]
 800c496:	3a03      	subs	r2, #3
 800c498:	9202      	str	r2, [sp, #8]
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	4623      	mov	r3, r4
 800c4a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4a6:	f7ff fee3 	bl	800c270 <draw_bar_rect>
 800c4aa:	e04c      	b.n	800c546 <fill_bar+0x2ae>
			}
			else
			{
				draw_bar_rect(bi->minx+1, bi->miny+1, bi->greenmaxx, bi->maxy-1, GREEN, bi->style, bi->maxx-3);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	1c58      	adds	r0, r3, #1
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	1c59      	adds	r1, r3, #1
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	1e5d      	subs	r5, r3, #1
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	6852      	ldr	r2, [r2, #4]
 800c4cc:	3a03      	subs	r2, #3
 800c4ce:	9202      	str	r2, [sp, #8]
 800c4d0:	9301      	str	r3, [sp, #4]
 800c4d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	462b      	mov	r3, r5
 800c4da:	4622      	mov	r2, r4
 800c4dc:	f7ff fec8 	bl	800c270 <draw_bar_rect>
				draw_bar_rect(bi->greenmaxx+1, bi->miny+1, bi->yellowmaxx, bi->maxy-1, YELLOW, bi->style, bi->maxx-3);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c4e6:	1c58      	adds	r0, r3, #1
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	1c59      	adds	r1, r3, #1
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	1e5d      	subs	r5, r3, #1
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	6852      	ldr	r2, [r2, #4]
 800c502:	3a03      	subs	r2, #3
 800c504:	9202      	str	r2, [sp, #8]
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	462b      	mov	r3, r5
 800c510:	4622      	mov	r2, r4
 800c512:	f7ff fead 	bl	800c270 <draw_bar_rect>
				draw_bar_rect(bi->yellowmaxx+1, bi->miny+1, xvalue, bi->maxy-1, RED, bi->style, bi->maxx-3);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c51c:	1c58      	adds	r0, r3, #1
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	1c59      	adds	r1, r3, #1
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	1e5c      	subs	r4, r3, #1
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	6852      	ldr	r2, [r2, #4]
 800c532:	3a03      	subs	r2, #3
 800c534:	9202      	str	r2, [sp, #8]
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	4623      	mov	r3, r4
 800c540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c542:	f7ff fe95 	bl	800c270 <draw_bar_rect>
			}

			// und lösche den Rest
			if((bi->maxx-1) > xvalue)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	3b01      	subs	r3, #1
 800c54c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c54e:	429a      	cmp	r2, r3
 800c550:	da0e      	bge.n	800c570 <fill_bar+0x2d8>
				TFT_Fill_Rectangle(xvalue, bi->miny+1, bi->maxx-1, bi->maxy-1, BLACK);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	1c59      	adds	r1, r3, #1
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	1e5a      	subs	r2, r3, #1
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	1e58      	subs	r0, r3, #1
 800c564:	2300      	movs	r3, #0
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	4603      	mov	r3, r0
 800c56a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c56c:	f00b f964 	bl	8017838 <TFT_Fill_Rectangle>
		}

		// Peak
		if(peakval > 0 && xpkvalue > 5 && xpkvalue < (bi->maxx-8))
 800c570:	edd7 7a01 	vldr	s15, [r7, #4]
 800c574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c57c:	dd2d      	ble.n	800c5da <fill_bar+0x342>
 800c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c580:	2b05      	cmp	r3, #5
 800c582:	dd2a      	ble.n	800c5da <fill_bar+0x342>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	3b08      	subs	r3, #8
 800c58a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c58c:	429a      	cmp	r2, r3
 800c58e:	da24      	bge.n	800c5da <fill_bar+0x342>
		{
			TFT_Fill_Rectangle(xpkvalue-5, bi->miny+1, xpkvalue, bi->maxy-1, BLUE);
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	1f58      	subs	r0, r3, #5
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	1c59      	adds	r1, r3, #1
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	1e5a      	subs	r2, r3, #1
 800c5a0:	231f      	movs	r3, #31
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a8:	f00b f946 	bl	8017838 <TFT_Fill_Rectangle>
 800c5ac:	e015      	b.n	800c5da <fill_bar+0x342>
 800c5ae:	bf00      	nop
 800c5b0:	40590000 	.word	0x40590000
 800c5b4:	51eb851f 	.word	0x51eb851f
		}
	}
	else
	{
		// lösche Balken
		TFT_Fill_Rectangle(bi->minx+1, bi->miny+1, bi->maxx-1, bi->maxy-1, BLACK);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	1c58      	adds	r0, r3, #1
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	1c59      	adds	r1, r3, #1
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	1e5a      	subs	r2, r3, #1
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	1e5c      	subs	r4, r3, #1
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	4623      	mov	r3, r4
 800c5d6:	f00b f92f 	bl	8017838 <TFT_Fill_Rectangle>
	}

	// Value
	char s[20];
	if(peakval < 0) peakval = value;
 800c5da:	edd7 7a01 	vldr	s15, [r7, #4]
 800c5de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e6:	d501      	bpl.n	800c5ec <fill_bar+0x354>
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	607b      	str	r3, [r7, #4]
	if(value >= 0)
 800c5ec:	edd7 7a02 	vldr	s15, [r7, #8]
 800c5f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f8:	db21      	blt.n	800c63e <fill_bar+0x3a6>
	{
		if(bi == &bar_big_swr || bi == &bar_out_swr)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	4a2a      	ldr	r2, [pc, #168]	; (800c6a8 <fill_bar+0x410>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d003      	beq.n	800c60a <fill_bar+0x372>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	4a29      	ldr	r2, [pc, #164]	; (800c6ac <fill_bar+0x414>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d10c      	bne.n	800c624 <fill_bar+0x38c>
			sprintf(s,"%7.2f",peakval);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7fb fed4 	bl	80083b8 <__aeabi_f2d>
 800c610:	4603      	mov	r3, r0
 800c612:	460c      	mov	r4, r1
 800c614:	f107 0010 	add.w	r0, r7, #16
 800c618:	461a      	mov	r2, r3
 800c61a:	4623      	mov	r3, r4
 800c61c:	4924      	ldr	r1, [pc, #144]	; (800c6b0 <fill_bar+0x418>)
 800c61e:	f012 fe0b 	bl	801f238 <sprintf>
 800c622:	e017      	b.n	800c654 <fill_bar+0x3bc>
		else
			sprintf(s,"%6.1f",peakval);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7fb fec7 	bl	80083b8 <__aeabi_f2d>
 800c62a:	4603      	mov	r3, r0
 800c62c:	460c      	mov	r4, r1
 800c62e:	f107 0010 	add.w	r0, r7, #16
 800c632:	461a      	mov	r2, r3
 800c634:	4623      	mov	r3, r4
 800c636:	491f      	ldr	r1, [pc, #124]	; (800c6b4 <fill_bar+0x41c>)
 800c638:	f012 fdfe 	bl	801f238 <sprintf>
 800c63c:	e00a      	b.n	800c654 <fill_bar+0x3bc>
	}
	else
		sprintf(s," ---  ");
 800c63e:	f107 0310 	add.w	r3, r7, #16
 800c642:	4a1d      	ldr	r2, [pc, #116]	; (800c6b8 <fill_bar+0x420>)
 800c644:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c648:	6018      	str	r0, [r3, #0]
 800c64a:	3304      	adds	r3, #4
 800c64c:	8019      	strh	r1, [r3, #0]
 800c64e:	3302      	adds	r3, #2
 800c650:	0c0a      	lsrs	r2, r1, #16
 800c652:	701a      	strb	r2, [r3, #0]

	tft_print(bi->valuefont, s, bi->maxx + bi->valuexdiff+2, bi->miny+bi->valueydiff, 1, WHITE, BLACK);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c664:	4413      	add	r3, r2
 800c666:	1c9c      	adds	r4, r3, #2
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	689a      	ldr	r2, [r3, #8]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800c672:	441a      	add	r2, r3
 800c674:	f107 0110 	add.w	r1, r7, #16
 800c678:	2300      	movs	r3, #0
 800c67a:	9302      	str	r3, [sp, #8]
 800c67c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c680:	9301      	str	r3, [sp, #4]
 800c682:	2301      	movs	r3, #1
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	4613      	mov	r3, r2
 800c688:	4622      	mov	r2, r4
 800c68a:	f012 fa8b 	bl	801eba4 <tft_print>

	bi->last_value = value;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	bi->last_peakvalue = peakval;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800c69e:	e000      	b.n	800c6a2 <fill_bar+0x40a>
	if(bi->last_value == value && bi->last_peakvalue == peakval) return;
 800c6a0:	bf00      	nop
}
 800c6a2:	3738      	adds	r7, #56	; 0x38
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bdb0      	pop	{r4, r5, r7, pc}
 800c6a8:	2000434c 	.word	0x2000434c
 800c6ac:	20003cf8 	.word	0x20003cf8
 800c6b0:	08024818 	.word	0x08024818
 800c6b4:	08024820 	.word	0x08024820
 800c6b8:	08024828 	.word	0x08024828

0800c6bc <makeLabelEntries_Power>:
t_bargraph bar_bg_fltrev;
t_bargraph bar_bg_drvfwd;
t_bargraph bar_bg_drvrev;

void makeLabelEntries_Power(t_bargraph *bg, FONT_INFO *pfi, float maxpwr, int unitidx)
{
 800c6bc:	b590      	push	{r4, r7, lr}
 800c6be:	b08f      	sub	sp, #60	; 0x3c
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	ed87 0a01 	vstr	s0, [r7, #4]
 800c6ca:	603a      	str	r2, [r7, #0]
	for(int i=0; i<5; i++)
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c6d0:	e071      	b.n	800c7b6 <makeLabelEntries_Power+0xfa>
	{
		int pwr = h_power[unitidx][i];// fünf Zwischenschritte
 800c6d2:	493c      	ldr	r1, [pc, #240]	; (800c7c4 <makeLabelEntries_Power+0x108>)
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6de:	4413      	add	r3, r2
 800c6e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		int percent = log_percent(pwr,maxpwr);		// Zwischenschritte in Prozent (Vollausschlag = 100)
 800c6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e8:	ee07 3a90 	vmov	s15, r3
 800c6ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6f0:	edd7 0a01 	vldr	s1, [r7, #4]
 800c6f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c6f8:	f009 f870 	bl	80157dc <log_percent>
 800c6fc:	62b8      	str	r0, [r7, #40]	; 0x28
		char s[10];
		//sprintf(s,"%d",pwr);
		if(pwr >= 1000)
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c704:	db36      	blt.n	800c774 <makeLabelEntries_Power+0xb8>
		{
			sprintf(s,"%dk%d",pwr/1000,pwr - (pwr/1000)*1000);
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	4a2f      	ldr	r2, [pc, #188]	; (800c7c8 <makeLabelEntries_Power+0x10c>)
 800c70a:	fb82 1203 	smull	r1, r2, r2, r3
 800c70e:	1192      	asrs	r2, r2, #6
 800c710:	17db      	asrs	r3, r3, #31
 800c712:	1ad4      	subs	r4, r2, r3
 800c714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c716:	4a2c      	ldr	r2, [pc, #176]	; (800c7c8 <makeLabelEntries_Power+0x10c>)
 800c718:	fb82 1203 	smull	r1, r2, r2, r3
 800c71c:	1191      	asrs	r1, r2, #6
 800c71e:	17da      	asrs	r2, r3, #31
 800c720:	1a8a      	subs	r2, r1, r2
 800c722:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c726:	fb01 f202 	mul.w	r2, r1, r2
 800c72a:	1a9a      	subs	r2, r3, r2
 800c72c:	f107 001c 	add.w	r0, r7, #28
 800c730:	4613      	mov	r3, r2
 800c732:	4622      	mov	r2, r4
 800c734:	4925      	ldr	r1, [pc, #148]	; (800c7cc <makeLabelEntries_Power+0x110>)
 800c736:	f012 fd7f 	bl	801f238 <sprintf>
			for(int i=strlen(s)-1; i>0; i--)
 800c73a:	f107 031c 	add.w	r3, r7, #28
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fb fc7e 	bl	8008040 <strlen>
 800c744:	4603      	mov	r3, r0
 800c746:	3b01      	subs	r3, #1
 800c748:	633b      	str	r3, [r7, #48]	; 0x30
 800c74a:	e00f      	b.n	800c76c <makeLabelEntries_Power+0xb0>
				if(s[i] == '0') s[i] = 0;
 800c74c:	f107 021c 	add.w	r2, r7, #28
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	4413      	add	r3, r2
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	2b30      	cmp	r3, #48	; 0x30
 800c758:	d114      	bne.n	800c784 <makeLabelEntries_Power+0xc8>
 800c75a:	f107 021c 	add.w	r2, r7, #28
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	4413      	add	r3, r2
 800c762:	2200      	movs	r2, #0
 800c764:	701a      	strb	r2, [r3, #0]
			for(int i=strlen(s)-1; i>0; i--)
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	3b01      	subs	r3, #1
 800c76a:	633b      	str	r3, [r7, #48]	; 0x30
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	2b00      	cmp	r3, #0
 800c770:	dcec      	bgt.n	800c74c <makeLabelEntries_Power+0x90>
 800c772:	e008      	b.n	800c786 <makeLabelEntries_Power+0xca>
				else break;
		}
		else
			sprintf(s,"%d",pwr);
 800c774:	f107 031c 	add.w	r3, r7, #28
 800c778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c77a:	4915      	ldr	r1, [pc, #84]	; (800c7d0 <makeLabelEntries_Power+0x114>)
 800c77c:	4618      	mov	r0, r3
 800c77e:	f012 fd5b 	bl	801f238 <sprintf>
 800c782:	e000      	b.n	800c786 <makeLabelEntries_Power+0xca>
				else break;
 800c784:	bf00      	nop
		int w,h;
		tft_textwidth_pixel(pfi, s, &w, &h);
 800c786:	f107 0314 	add.w	r3, r7, #20
 800c78a:	f107 0218 	add.w	r2, r7, #24
 800c78e:	f107 011c 	add.w	r1, r7, #28
 800c792:	68b8      	ldr	r0, [r7, #8]
 800c794:	f012 fa1f 	bl	801ebd6 <tft_textwidth_pixel>
		bar_labelentry(bg, percent, -w/2, s);
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	425b      	negs	r3, r3
 800c79c:	0fda      	lsrs	r2, r3, #31
 800c79e:	4413      	add	r3, r2
 800c7a0:	105b      	asrs	r3, r3, #1
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	f107 031c 	add.w	r3, r7, #28
 800c7a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f001 f98a 	bl	800dac4 <bar_labelentry>
	for(int i=0; i<5; i++)
 800c7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b8:	2b04      	cmp	r3, #4
 800c7ba:	dd8a      	ble.n	800c6d2 <makeLabelEntries_Power+0x16>
	}
}
 800c7bc:	bf00      	nop
 800c7be:	373c      	adds	r7, #60	; 0x3c
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd90      	pop	{r4, r7, pc}
 800c7c4:	20001470 	.word	0x20001470
 800c7c8:	10624dd3 	.word	0x10624dd3
 800c7cc:	08024830 	.word	0x08024830
 800c7d0:	08024838 	.word	0x08024838

0800c7d4 <makeLabelEntries_SWR>:

void makeLabelEntries_SWR(t_bargraph *bg, FONT_INFO *pfi)
{
 800c7d4:	b590      	push	{r4, r7, lr}
 800c7d6:	b08d      	sub	sp, #52	; 0x34
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
	int maxswr = 20;								// SWR bei Vollausschlag
 800c7de:	2314      	movs	r3, #20
 800c7e0:	62bb      	str	r3, [r7, #40]	; 0x28
	bg->labelanz = 0;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	for(int i=0; i<5; i++)
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7ee:	e04f      	b.n	800c890 <makeLabelEntries_SWR+0xbc>
	{
		float swr = h_swr[i];// fünf Zwischenschritte
 800c7f0:	4a2b      	ldr	r2, [pc, #172]	; (800c8a0 <makeLabelEntries_SWR+0xcc>)
 800c7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	4413      	add	r3, r2
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	627b      	str	r3, [r7, #36]	; 0x24
		int percent = lin_log_percent_swr(swr,maxswr);		// Zwischenschritte in Prozent (Vollausschlag = 100)
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	ee07 3a90 	vmov	s15, r3
 800c802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c806:	eef0 0a67 	vmov.f32	s1, s15
 800c80a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800c80e:	f008 ffbd 	bl	801578c <lin_log_percent_swr>
 800c812:	6238      	str	r0, [r7, #32]
		char s[10];
		if(swr == (float)((int)swr))
 800c814:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c81c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c820:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c824:	eeb4 7a67 	vcmp.f32	s14, s15
 800c828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c82c:	d10c      	bne.n	800c848 <makeLabelEntries_SWR+0x74>
			sprintf(s,"%d",(int)swr);
 800c82e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c836:	f107 0314 	add.w	r3, r7, #20
 800c83a:	ee17 2a90 	vmov	r2, s15
 800c83e:	4919      	ldr	r1, [pc, #100]	; (800c8a4 <makeLabelEntries_SWR+0xd0>)
 800c840:	4618      	mov	r0, r3
 800c842:	f012 fcf9 	bl	801f238 <sprintf>
 800c846:	e00b      	b.n	800c860 <makeLabelEntries_SWR+0x8c>
		else
			sprintf(s,"%.1f",swr);
 800c848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c84a:	f7fb fdb5 	bl	80083b8 <__aeabi_f2d>
 800c84e:	4603      	mov	r3, r0
 800c850:	460c      	mov	r4, r1
 800c852:	f107 0014 	add.w	r0, r7, #20
 800c856:	461a      	mov	r2, r3
 800c858:	4623      	mov	r3, r4
 800c85a:	4913      	ldr	r1, [pc, #76]	; (800c8a8 <makeLabelEntries_SWR+0xd4>)
 800c85c:	f012 fcec 	bl	801f238 <sprintf>
		int w,h;
		tft_textwidth_pixel(pfi, s, &w, &h);
 800c860:	f107 030c 	add.w	r3, r7, #12
 800c864:	f107 0210 	add.w	r2, r7, #16
 800c868:	f107 0114 	add.w	r1, r7, #20
 800c86c:	6838      	ldr	r0, [r7, #0]
 800c86e:	f012 f9b2 	bl	801ebd6 <tft_textwidth_pixel>
		bar_labelentry(bg, percent, -w/2, s);
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	425b      	negs	r3, r3
 800c876:	0fda      	lsrs	r2, r3, #31
 800c878:	4413      	add	r3, r2
 800c87a:	105b      	asrs	r3, r3, #1
 800c87c:	461a      	mov	r2, r3
 800c87e:	f107 0314 	add.w	r3, r7, #20
 800c882:	6a39      	ldr	r1, [r7, #32]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f001 f91d 	bl	800dac4 <bar_labelentry>
	for(int i=0; i<5; i++)
 800c88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88c:	3301      	adds	r3, #1
 800c88e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	2b04      	cmp	r3, #4
 800c894:	ddac      	ble.n	800c7f0 <makeLabelEntries_SWR+0x1c>
	}

}
 800c896:	bf00      	nop
 800c898:	3734      	adds	r7, #52	; 0x34
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd90      	pop	{r4, r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20001510 	.word	0x20001510
 800c8a4:	08024838 	.word	0x08024838
 800c8a8:	0802483c 	.word	0x0802483c

0800c8ac <makeLabelEntries_linear>:

void makeLabelEntries_linear(t_bargraph *bg, FONT_INFO *pfi, int maxval)
{
 800c8ac:	b590      	push	{r4, r7, lr}
 800c8ae:	b08f      	sub	sp, #60	; 0x3c
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
	bg->labelanz = 0;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	for(int i=0; i<5; i++)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c8c4:	e06e      	b.n	800c9a4 <makeLabelEntries_linear+0xf8>
	{
		int val = (i * maxval) / 5;
 800c8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	fb02 f303 	mul.w	r3, r2, r3
 800c8ce:	4a39      	ldr	r2, [pc, #228]	; (800c9b4 <makeLabelEntries_linear+0x108>)
 800c8d0:	fb82 1203 	smull	r1, r2, r2, r3
 800c8d4:	1052      	asrs	r2, r2, #1
 800c8d6:	17db      	asrs	r3, r3, #31
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	62fb      	str	r3, [r7, #44]	; 0x2c
		char s[10];
		if(val >= 1000)
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8e2:	db36      	blt.n	800c952 <makeLabelEntries_linear+0xa6>
		{
			sprintf(s,"%dk%d",val/1000,val - (val/1000)*1000);
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e6:	4a34      	ldr	r2, [pc, #208]	; (800c9b8 <makeLabelEntries_linear+0x10c>)
 800c8e8:	fb82 1203 	smull	r1, r2, r2, r3
 800c8ec:	1192      	asrs	r2, r2, #6
 800c8ee:	17db      	asrs	r3, r3, #31
 800c8f0:	1ad4      	subs	r4, r2, r3
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	4a30      	ldr	r2, [pc, #192]	; (800c9b8 <makeLabelEntries_linear+0x10c>)
 800c8f6:	fb82 1203 	smull	r1, r2, r2, r3
 800c8fa:	1191      	asrs	r1, r2, #6
 800c8fc:	17da      	asrs	r2, r3, #31
 800c8fe:	1a8a      	subs	r2, r1, r2
 800c900:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c904:	fb01 f202 	mul.w	r2, r1, r2
 800c908:	1a9a      	subs	r2, r3, r2
 800c90a:	f107 001c 	add.w	r0, r7, #28
 800c90e:	4613      	mov	r3, r2
 800c910:	4622      	mov	r2, r4
 800c912:	492a      	ldr	r1, [pc, #168]	; (800c9bc <makeLabelEntries_linear+0x110>)
 800c914:	f012 fc90 	bl	801f238 <sprintf>
			for(int i=strlen(s)-1; i>0; i--)
 800c918:	f107 031c 	add.w	r3, r7, #28
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fb fb8f 	bl	8008040 <strlen>
 800c922:	4603      	mov	r3, r0
 800c924:	3b01      	subs	r3, #1
 800c926:	633b      	str	r3, [r7, #48]	; 0x30
 800c928:	e00f      	b.n	800c94a <makeLabelEntries_linear+0x9e>
				if(s[i] == '0') s[i] = 0;
 800c92a:	f107 021c 	add.w	r2, r7, #28
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	4413      	add	r3, r2
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b30      	cmp	r3, #48	; 0x30
 800c936:	d114      	bne.n	800c962 <makeLabelEntries_linear+0xb6>
 800c938:	f107 021c 	add.w	r2, r7, #28
 800c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93e:	4413      	add	r3, r2
 800c940:	2200      	movs	r2, #0
 800c942:	701a      	strb	r2, [r3, #0]
			for(int i=strlen(s)-1; i>0; i--)
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	3b01      	subs	r3, #1
 800c948:	633b      	str	r3, [r7, #48]	; 0x30
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	dcec      	bgt.n	800c92a <makeLabelEntries_linear+0x7e>
 800c950:	e008      	b.n	800c964 <makeLabelEntries_linear+0xb8>
				else break;
		}
		else
			sprintf(s,"%d",val);
 800c952:	f107 031c 	add.w	r3, r7, #28
 800c956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c958:	4919      	ldr	r1, [pc, #100]	; (800c9c0 <makeLabelEntries_linear+0x114>)
 800c95a:	4618      	mov	r0, r3
 800c95c:	f012 fc6c 	bl	801f238 <sprintf>
 800c960:	e000      	b.n	800c964 <makeLabelEntries_linear+0xb8>
				else break;
 800c962:	bf00      	nop
		int w,h;
		tft_textwidth_pixel(pfi, s, &w, &h);
 800c964:	f107 0314 	add.w	r3, r7, #20
 800c968:	f107 0218 	add.w	r2, r7, #24
 800c96c:	f107 011c 	add.w	r1, r7, #28
 800c970:	68b8      	ldr	r0, [r7, #8]
 800c972:	f012 f930 	bl	801ebd6 <tft_textwidth_pixel>
		int percent = (100 * val) / maxval;
 800c976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c978:	2264      	movs	r2, #100	; 0x64
 800c97a:	fb02 f203 	mul.w	r2, r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	fb92 f3f3 	sdiv	r3, r2, r3
 800c984:	62bb      	str	r3, [r7, #40]	; 0x28
		bar_labelentry(bg, percent, -w/2, s);
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	425b      	negs	r3, r3
 800c98a:	0fda      	lsrs	r2, r3, #31
 800c98c:	4413      	add	r3, r2
 800c98e:	105b      	asrs	r3, r3, #1
 800c990:	461a      	mov	r2, r3
 800c992:	f107 031c 	add.w	r3, r7, #28
 800c996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f001 f893 	bl	800dac4 <bar_labelentry>
	for(int i=0; i<5; i++)
 800c99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a6:	2b04      	cmp	r3, #4
 800c9a8:	dd8d      	ble.n	800c8c6 <makeLabelEntries_linear+0x1a>
	}

}
 800c9aa:	bf00      	nop
 800c9ac:	373c      	adds	r7, #60	; 0x3c
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd90      	pop	{r4, r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	66666667 	.word	0x66666667
 800c9b8:	10624dd3 	.word	0x10624dd3
 800c9bc:	08024830 	.word	0x08024830
 800c9c0:	08024838 	.word	0x08024838

0800c9c4 <init_bars>:

void init_bars()
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b092      	sub	sp, #72	; 0x48
 800c9c8:	af02      	add	r7, sp, #8
int leftx = 10;		// linke Spalte von Bars
 800c9ca:	230a      	movs	r3, #10
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
int rightx = 350;	// rechte Spalte von Bars
 800c9ce:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800c9d2:	63bb      	str	r3, [r7, #56]	; 0x38
int width = 200;	// Breite der Bars
 800c9d4:	23c8      	movs	r3, #200	; 0xc8
 800c9d6:	637b      	str	r3, [r7, #52]	; 0x34
int height = 18;	// Höhe der Bars
 800c9d8:	2312      	movs	r3, #18
 800c9da:	633b      	str	r3, [r7, #48]	; 0x30
int starty = 50;	// ersten Y Zeile des obersten Bars
 800c9dc:	2332      	movs	r3, #50	; 0x32
 800c9de:	62fb      	str	r3, [r7, #44]	; 0x2c
int diffy = 60;		// Abstand zwischen den Bars
 800c9e0:	233c      	movs	r3, #60	; 0x3c
 800c9e2:	62bb      	str	r3, [r7, #40]	; 0x28
int textyshift = -27;// Titeltext Abstand über Balken
 800c9e4:	f06f 031a 	mvn.w	r3, #26
 800c9e8:	627b      	str	r3, [r7, #36]	; 0x24
int textxshift = 0; // Titeltext Abstand links
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	623b      	str	r3, [r7, #32]

int barynum = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	61fb      	str	r3, [r7, #28]
char s[20];

	// ========== Ubersichtsfenster =============
	// linke Spalte
	// Output Power
	bar_initstruct(&bar_out_power);
 800c9f2:	48bb      	ldr	r0, [pc, #748]	; (800cce0 <init_bars+0x31c>)
 800c9f4:	f000 fff0 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_out_power,leftx,starty + barynum++*(diffy+height), 540, height);
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	61fa      	str	r2, [r7, #28]
 800c9fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca02:	440a      	add	r2, r1
 800ca04:	fb02 f203 	mul.w	r2, r2, r3
 800ca08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0a:	441a      	add	r2, r3
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800ca14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca16:	48b2      	ldr	r0, [pc, #712]	; (800cce0 <init_bars+0x31c>)
 800ca18:	f000 ffec 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_out_power, &verdana_18ptFontInfo, textxshift, textyshift, getLang(Output_Power));
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	f004 f9e1 	bl	8010de4 <getLang>
 800ca22:	4603      	mov	r3, r0
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	6a3a      	ldr	r2, [r7, #32]
 800ca2a:	49ae      	ldr	r1, [pc, #696]	; (800cce4 <init_bars+0x320>)
 800ca2c:	48ac      	ldr	r0, [pc, #688]	; (800cce0 <init_bars+0x31c>)
 800ca2e:	f000 fffe 	bl	800da2e <bar_title>
	bar_style(&bar_out_power, BARSTYLE_FULL | BARSTYLE_LOG);
 800ca32:	210a      	movs	r1, #10
 800ca34:	48aa      	ldr	r0, [pc, #680]	; (800cce0 <init_bars+0x31c>)
 800ca36:	f001 f81f 	bl	800da78 <bar_style>
	bar_labelunit(&bar_out_power, &verdana_12ptFontInfo, getLang(W_RFout));
 800ca3a:	2001      	movs	r0, #1
 800ca3c:	f004 f9d2 	bl	8010de4 <getLang>
 800ca40:	4603      	mov	r3, r0
 800ca42:	461a      	mov	r2, r3
 800ca44:	49a8      	ldr	r1, [pc, #672]	; (800cce8 <init_bars+0x324>)
 800ca46:	48a6      	ldr	r0, [pc, #664]	; (800cce0 <init_bars+0x31c>)
 800ca48:	f001 f824 	bl	800da94 <bar_labelunit>
	int maxpwr = getMaxPower();					// Power bei Vollausschlag
 800ca4c:	f008 feda 	bl	8015804 <getMaxPower>
 800ca50:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_out_power, &verdana_12ptFontInfo,maxpwr,pcfgdata->maxpwrunits);
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	ee07 3a90 	vmov	s15, r3
 800ca58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca5c:	4ba3      	ldr	r3, [pc, #652]	; (800ccec <init_bars+0x328>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ca64:	461a      	mov	r2, r3
 800ca66:	eeb0 0a67 	vmov.f32	s0, s15
 800ca6a:	499f      	ldr	r1, [pc, #636]	; (800cce8 <init_bars+0x324>)
 800ca6c:	489c      	ldr	r0, [pc, #624]	; (800cce0 <init_bars+0x31c>)
 800ca6e:	f7ff fe25 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_out_power, &lucidaConsole_18ptFontInfo);
 800ca72:	499f      	ldr	r1, [pc, #636]	; (800ccf0 <init_bars+0x32c>)
 800ca74:	489a      	ldr	r0, [pc, #616]	; (800cce0 <init_bars+0x31c>)
 800ca76:	f001 f86b 	bl	800db50 <bar_value>
	bar_barinfo(&bar_out_power, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	0fda      	lsrs	r2, r3, #31
 800ca7e:	4413      	add	r3, r2
 800ca80:	105b      	asrs	r3, r3, #1
 800ca82:	ee07 3a90 	vmov	s15, r3
 800ca86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	005b      	lsls	r3, r3, #1
 800ca8e:	4a99      	ldr	r2, [pc, #612]	; (800ccf4 <init_bars+0x330>)
 800ca90:	fb82 1203 	smull	r1, r2, r2, r3
 800ca94:	17db      	asrs	r3, r3, #31
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	ee07 3a10 	vmov	s14, r3
 800ca9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	ee06 3a90 	vmov	s13, r3
 800caa6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800caaa:	eeb0 1a66 	vmov.f32	s2, s13
 800caae:	eef0 0a47 	vmov.f32	s1, s14
 800cab2:	eeb0 0a67 	vmov.f32	s0, s15
 800cab6:	488a      	ldr	r0, [pc, #552]	; (800cce0 <init_bars+0x31c>)
 800cab8:	f001 f874 	bl	800dba4 <bar_barinfo>

	// Output SWR
	bar_initstruct(&bar_out_swr);
 800cabc:	488e      	ldr	r0, [pc, #568]	; (800ccf8 <init_bars+0x334>)
 800cabe:	f000 ff8b 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_out_swr,leftx,starty + barynum++*(diffy+height),width, height);
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	61fa      	str	r2, [r7, #28]
 800cac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cacc:	440a      	add	r2, r1
 800cace:	fb02 f203 	mul.w	r2, r2, r3
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	441a      	add	r2, r3
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cadc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cade:	4886      	ldr	r0, [pc, #536]	; (800ccf8 <init_bars+0x334>)
 800cae0:	f000 ff88 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_out_swr, &verdana_18ptFontInfo, textxshift, textyshift,getLang(Output_SWR));
 800cae4:	2002      	movs	r0, #2
 800cae6:	f004 f97d 	bl	8010de4 <getLang>
 800caea:	4603      	mov	r3, r0
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	6a3a      	ldr	r2, [r7, #32]
 800caf2:	497c      	ldr	r1, [pc, #496]	; (800cce4 <init_bars+0x320>)
 800caf4:	4880      	ldr	r0, [pc, #512]	; (800ccf8 <init_bars+0x334>)
 800caf6:	f000 ff9a 	bl	800da2e <bar_title>
	bar_style(&bar_out_swr, BARSTYLE_FULL | BARSTYLE_LOG | BARSTYLE_SWR);
 800cafa:	211a      	movs	r1, #26
 800cafc:	487e      	ldr	r0, [pc, #504]	; (800ccf8 <init_bars+0x334>)
 800cafe:	f000 ffbb 	bl	800da78 <bar_style>
	bar_labelunit(&bar_out_swr, &verdana_12ptFontInfo, ": 1");
 800cb02:	4a7e      	ldr	r2, [pc, #504]	; (800ccfc <init_bars+0x338>)
 800cb04:	4978      	ldr	r1, [pc, #480]	; (800cce8 <init_bars+0x324>)
 800cb06:	487c      	ldr	r0, [pc, #496]	; (800ccf8 <init_bars+0x334>)
 800cb08:	f000 ffc4 	bl	800da94 <bar_labelunit>
	makeLabelEntries_SWR(&bar_out_swr, &verdana_12ptFontInfo);
 800cb0c:	4976      	ldr	r1, [pc, #472]	; (800cce8 <init_bars+0x324>)
 800cb0e:	487a      	ldr	r0, [pc, #488]	; (800ccf8 <init_bars+0x334>)
 800cb10:	f7ff fe60 	bl	800c7d4 <makeLabelEntries_SWR>
	bar_value(&bar_out_swr, &lucidaConsole_18ptFontInfo);
 800cb14:	4976      	ldr	r1, [pc, #472]	; (800ccf0 <init_bars+0x32c>)
 800cb16:	4878      	ldr	r0, [pc, #480]	; (800ccf8 <init_bars+0x334>)
 800cb18:	f001 f81a 	bl	800db50 <bar_value>
	bar_barinfo(&bar_out_swr, 2, 3, 20);
 800cb1c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800cb20:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800cb24:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800cb28:	4873      	ldr	r0, [pc, #460]	; (800ccf8 <init_bars+0x334>)
 800cb2a:	f001 f83b 	bl	800dba4 <bar_barinfo>

	// Input Power
	bar_initstruct(&bar_in_power);
 800cb2e:	4874      	ldr	r0, [pc, #464]	; (800cd00 <init_bars+0x33c>)
 800cb30:	f000 ff52 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_in_power,leftx,starty + barynum++*(diffy+height), width, height);
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	61fa      	str	r2, [r7, #28]
 800cb3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb3e:	440a      	add	r2, r1
 800cb40:	fb02 f203 	mul.w	r2, r2, r3
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	441a      	add	r2, r3
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb50:	486b      	ldr	r0, [pc, #428]	; (800cd00 <init_bars+0x33c>)
 800cb52:	f000 ff4f 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_in_power, &verdana_18ptFontInfo, textxshift, textyshift, getLang(Drive_Power));
 800cb56:	2003      	movs	r0, #3
 800cb58:	f004 f944 	bl	8010de4 <getLang>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	6a3a      	ldr	r2, [r7, #32]
 800cb64:	495f      	ldr	r1, [pc, #380]	; (800cce4 <init_bars+0x320>)
 800cb66:	4866      	ldr	r0, [pc, #408]	; (800cd00 <init_bars+0x33c>)
 800cb68:	f000 ff61 	bl	800da2e <bar_title>
	bar_style(&bar_in_power, BARSTYLE_FULL | BARSTYLE_LOG);
 800cb6c:	210a      	movs	r1, #10
 800cb6e:	4864      	ldr	r0, [pc, #400]	; (800cd00 <init_bars+0x33c>)
 800cb70:	f000 ff82 	bl	800da78 <bar_style>
	bar_labelunit(&bar_in_power, &verdana_12ptFontInfo, getLang(W_RFin));
 800cb74:	2004      	movs	r0, #4
 800cb76:	f004 f935 	bl	8010de4 <getLang>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	495a      	ldr	r1, [pc, #360]	; (800cce8 <init_bars+0x324>)
 800cb80:	485f      	ldr	r0, [pc, #380]	; (800cd00 <init_bars+0x33c>)
 800cb82:	f000 ff87 	bl	800da94 <bar_labelunit>
	maxpwr = getMaxDrvPower();					// Power bei Vollausschlag
 800cb86:	f008 fe51 	bl	801582c <getMaxDrvPower>
 800cb8a:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_in_power, &verdana_12ptFontInfo,maxpwr,pcfgdata->maxdrvpwrunits+4);
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	ee07 3a90 	vmov	s15, r3
 800cb92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb96:	4b55      	ldr	r3, [pc, #340]	; (800ccec <init_bars+0x328>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cb9e:	3304      	adds	r3, #4
 800cba0:	461a      	mov	r2, r3
 800cba2:	eeb0 0a67 	vmov.f32	s0, s15
 800cba6:	4950      	ldr	r1, [pc, #320]	; (800cce8 <init_bars+0x324>)
 800cba8:	4855      	ldr	r0, [pc, #340]	; (800cd00 <init_bars+0x33c>)
 800cbaa:	f7ff fd87 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_in_power, &lucidaConsole_18ptFontInfo);
 800cbae:	4950      	ldr	r1, [pc, #320]	; (800ccf0 <init_bars+0x32c>)
 800cbb0:	4853      	ldr	r0, [pc, #332]	; (800cd00 <init_bars+0x33c>)
 800cbb2:	f000 ffcd 	bl	800db50 <bar_value>
	bar_barinfo(&bar_in_power, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	0fda      	lsrs	r2, r3, #31
 800cbba:	4413      	add	r3, r2
 800cbbc:	105b      	asrs	r3, r3, #1
 800cbbe:	ee07 3a90 	vmov	s15, r3
 800cbc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	4a4a      	ldr	r2, [pc, #296]	; (800ccf4 <init_bars+0x330>)
 800cbcc:	fb82 1203 	smull	r1, r2, r2, r3
 800cbd0:	17db      	asrs	r3, r3, #31
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	ee07 3a10 	vmov	s14, r3
 800cbd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	ee06 3a90 	vmov	s13, r3
 800cbe2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cbe6:	eeb0 1a66 	vmov.f32	s2, s13
 800cbea:	eef0 0a47 	vmov.f32	s1, s14
 800cbee:	eeb0 0a67 	vmov.f32	s0, s15
 800cbf2:	4843      	ldr	r0, [pc, #268]	; (800cd00 <init_bars+0x33c>)
 800cbf4:	f000 ffd6 	bl	800dba4 <bar_barinfo>

	// Efficiency
	bar_initstruct(&bar_efficiency);
 800cbf8:	4842      	ldr	r0, [pc, #264]	; (800cd04 <init_bars+0x340>)
 800cbfa:	f000 feed 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_efficiency,leftx,starty + barynum++*(diffy+height), width, height);
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	61fa      	str	r2, [r7, #28]
 800cc04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc08:	440a      	add	r2, r1
 800cc0a:	fb02 f203 	mul.w	r2, r2, r3
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	441a      	add	r2, r3
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc1a:	483a      	ldr	r0, [pc, #232]	; (800cd04 <init_bars+0x340>)
 800cc1c:	f000 feea 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_efficiency, &verdana_18ptFontInfo, textxshift, textyshift, getLang(Efficiency));
 800cc20:	2005      	movs	r0, #5
 800cc22:	f004 f8df 	bl	8010de4 <getLang>
 800cc26:	4603      	mov	r3, r0
 800cc28:	9300      	str	r3, [sp, #0]
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	6a3a      	ldr	r2, [r7, #32]
 800cc2e:	492d      	ldr	r1, [pc, #180]	; (800cce4 <init_bars+0x320>)
 800cc30:	4834      	ldr	r0, [pc, #208]	; (800cd04 <init_bars+0x340>)
 800cc32:	f000 fefc 	bl	800da2e <bar_title>
	bar_style(&bar_efficiency, BARSTYLE_FULL);
 800cc36:	2102      	movs	r1, #2
 800cc38:	4832      	ldr	r0, [pc, #200]	; (800cd04 <init_bars+0x340>)
 800cc3a:	f000 ff1d 	bl	800da78 <bar_style>
	bar_labelunit(&bar_efficiency, &verdana_12ptFontInfo, "%");
 800cc3e:	4a32      	ldr	r2, [pc, #200]	; (800cd08 <init_bars+0x344>)
 800cc40:	4929      	ldr	r1, [pc, #164]	; (800cce8 <init_bars+0x324>)
 800cc42:	4830      	ldr	r0, [pc, #192]	; (800cd04 <init_bars+0x340>)
 800cc44:	f000 ff26 	bl	800da94 <bar_labelunit>
	makeLabelEntries_linear(&bar_efficiency, &verdana_12ptFontInfo, 100);
 800cc48:	2264      	movs	r2, #100	; 0x64
 800cc4a:	4927      	ldr	r1, [pc, #156]	; (800cce8 <init_bars+0x324>)
 800cc4c:	482d      	ldr	r0, [pc, #180]	; (800cd04 <init_bars+0x340>)
 800cc4e:	f7ff fe2d 	bl	800c8ac <makeLabelEntries_linear>
	bar_value(&bar_efficiency, &lucidaConsole_18ptFontInfo);
 800cc52:	4927      	ldr	r1, [pc, #156]	; (800ccf0 <init_bars+0x32c>)
 800cc54:	482b      	ldr	r0, [pc, #172]	; (800cd04 <init_bars+0x340>)
 800cc56:	f000 ff7b 	bl	800db50 <bar_value>
	bar_barinfo(&bar_efficiency, 100, 100, 100);
 800cc5a:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800cd0c <init_bars+0x348>
 800cc5e:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800cd0c <init_bars+0x348>
 800cc62:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800cd0c <init_bars+0x348>
 800cc66:	4827      	ldr	r0, [pc, #156]	; (800cd04 <init_bars+0x340>)
 800cc68:	f000 ff9c 	bl	800dba4 <bar_barinfo>

	// Temperatur-1
	bar_initstruct(&bar_temperature1);
 800cc6c:	4828      	ldr	r0, [pc, #160]	; (800cd10 <init_bars+0x34c>)
 800cc6e:	f000 feb3 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_temperature1,leftx,starty + barynum++*(diffy+height), width, height);
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	61fa      	str	r2, [r7, #28]
 800cc78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc7c:	440a      	add	r2, r1
 800cc7e:	fb02 f203 	mul.w	r2, r2, r3
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	441a      	add	r2, r3
 800cc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc8e:	4820      	ldr	r0, [pc, #128]	; (800cd10 <init_bars+0x34c>)
 800cc90:	f000 feb0 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_temperature1, &verdana_18ptFontInfo, textxshift, textyshift, getLang(Temperature1));
 800cc94:	2006      	movs	r0, #6
 800cc96:	f004 f8a5 	bl	8010de4 <getLang>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	6a3a      	ldr	r2, [r7, #32]
 800cca2:	4910      	ldr	r1, [pc, #64]	; (800cce4 <init_bars+0x320>)
 800cca4:	481a      	ldr	r0, [pc, #104]	; (800cd10 <init_bars+0x34c>)
 800cca6:	f000 fec2 	bl	800da2e <bar_title>
	bar_style(&bar_temperature1, BARSTYLE_FULL);
 800ccaa:	2102      	movs	r1, #2
 800ccac:	4818      	ldr	r0, [pc, #96]	; (800cd10 <init_bars+0x34c>)
 800ccae:	f000 fee3 	bl	800da78 <bar_style>
	bar_value(&bar_temperature1, &lucidaConsole_18ptFontInfo);
 800ccb2:	490f      	ldr	r1, [pc, #60]	; (800ccf0 <init_bars+0x32c>)
 800ccb4:	4816      	ldr	r0, [pc, #88]	; (800cd10 <init_bars+0x34c>)
 800ccb6:	f000 ff4b 	bl	800db50 <bar_value>
	strcpy(s,getLang(Degree));
 800ccba:	2007      	movs	r0, #7
 800ccbc:	f004 f892 	bl	8010de4 <getLang>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	463b      	mov	r3, r7
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f012 fad6 	bl	801f278 <strcpy>
	strcat(s," ");
 800cccc:	463b      	mov	r3, r7
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fb f9b6 	bl	8008040 <strlen>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	463b      	mov	r3, r7
 800ccda:	4413      	add	r3, r2
 800ccdc:	e01a      	b.n	800cd14 <init_bars+0x350>
 800ccde:	bf00      	nop
 800cce0:	200036a4 	.word	0x200036a4
 800cce4:	20001c70 	.word	0x20001c70
 800cce8:	20001c64 	.word	0x20001c64
 800ccec:	20000bf0 	.word	0x20000bf0
 800ccf0:	20001c34 	.word	0x20001c34
 800ccf4:	55555556 	.word	0x55555556
 800ccf8:	20003cf8 	.word	0x20003cf8
 800ccfc:	08024844 	.word	0x08024844
 800cd00:	20003bb4 	.word	0x20003bb4
 800cd04:	20003a70 	.word	0x20003a70
 800cd08:	08024848 	.word	0x08024848
 800cd0c:	42c80000 	.word	0x42c80000
 800cd10:	2000392c 	.word	0x2000392c
 800cd14:	4912      	ldr	r1, [pc, #72]	; (800cd60 <init_bars+0x39c>)
 800cd16:	461a      	mov	r2, r3
 800cd18:	460b      	mov	r3, r1
 800cd1a:	881b      	ldrh	r3, [r3, #0]
 800cd1c:	8013      	strh	r3, [r2, #0]
	if(pcfgdata->tempunits == 0)
 800cd1e:	4b11      	ldr	r3, [pc, #68]	; (800cd64 <init_bars+0x3a0>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d12a      	bne.n	800cd80 <init_bars+0x3bc>
	{
		strcat(s,"[C]");
 800cd2a:	463b      	mov	r3, r7
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fb f987 	bl	8008040 <strlen>
 800cd32:	4603      	mov	r3, r0
 800cd34:	461a      	mov	r2, r3
 800cd36:	463b      	mov	r3, r7
 800cd38:	4413      	add	r3, r2
 800cd3a:	4a0b      	ldr	r2, [pc, #44]	; (800cd68 <init_bars+0x3a4>)
 800cd3c:	6810      	ldr	r0, [r2, #0]
 800cd3e:	6018      	str	r0, [r3, #0]
		makeLabelEntries_linear(&bar_temperature1, &verdana_12ptFontInfo, 125);
 800cd40:	227d      	movs	r2, #125	; 0x7d
 800cd42:	490a      	ldr	r1, [pc, #40]	; (800cd6c <init_bars+0x3a8>)
 800cd44:	480a      	ldr	r0, [pc, #40]	; (800cd70 <init_bars+0x3ac>)
 800cd46:	f7ff fdb1 	bl	800c8ac <makeLabelEntries_linear>
		bar_barinfo(&bar_temperature1, 50, 70, 125);
 800cd4a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800cd74 <init_bars+0x3b0>
 800cd4e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800cd78 <init_bars+0x3b4>
 800cd52:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800cd7c <init_bars+0x3b8>
 800cd56:	4806      	ldr	r0, [pc, #24]	; (800cd70 <init_bars+0x3ac>)
 800cd58:	f000 ff24 	bl	800dba4 <bar_barinfo>
 800cd5c:	e029      	b.n	800cdb2 <init_bars+0x3ee>
 800cd5e:	bf00      	nop
 800cd60:	0802484c 	.word	0x0802484c
 800cd64:	20000bf0 	.word	0x20000bf0
 800cd68:	08024850 	.word	0x08024850
 800cd6c:	20001c64 	.word	0x20001c64
 800cd70:	2000392c 	.word	0x2000392c
 800cd74:	42fa0000 	.word	0x42fa0000
 800cd78:	428c0000 	.word	0x428c0000
 800cd7c:	42480000 	.word	0x42480000
	}
	else
	{
		strcat(s,"[F]");
 800cd80:	463b      	mov	r3, r7
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fb f95c 	bl	8008040 <strlen>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	463b      	mov	r3, r7
 800cd8e:	4413      	add	r3, r2
 800cd90:	4abb      	ldr	r2, [pc, #748]	; (800d080 <init_bars+0x6bc>)
 800cd92:	6810      	ldr	r0, [r2, #0]
 800cd94:	6018      	str	r0, [r3, #0]
		makeLabelEntries_linear(&bar_temperature1, &verdana_12ptFontInfo, 250);
 800cd96:	22fa      	movs	r2, #250	; 0xfa
 800cd98:	49ba      	ldr	r1, [pc, #744]	; (800d084 <init_bars+0x6c0>)
 800cd9a:	48bb      	ldr	r0, [pc, #748]	; (800d088 <init_bars+0x6c4>)
 800cd9c:	f7ff fd86 	bl	800c8ac <makeLabelEntries_linear>
		bar_barinfo(&bar_temperature1, 120, 150, 250);
 800cda0:	ed9f 1aba 	vldr	s2, [pc, #744]	; 800d08c <init_bars+0x6c8>
 800cda4:	eddf 0aba 	vldr	s1, [pc, #744]	; 800d090 <init_bars+0x6cc>
 800cda8:	ed9f 0aba 	vldr	s0, [pc, #744]	; 800d094 <init_bars+0x6d0>
 800cdac:	48b6      	ldr	r0, [pc, #728]	; (800d088 <init_bars+0x6c4>)
 800cdae:	f000 fef9 	bl	800dba4 <bar_barinfo>
	}
	bar_labelunit(&bar_temperature1, &verdana_12ptFontInfo, s);
 800cdb2:	463b      	mov	r3, r7
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	49b3      	ldr	r1, [pc, #716]	; (800d084 <init_bars+0x6c0>)
 800cdb8:	48b3      	ldr	r0, [pc, #716]	; (800d088 <init_bars+0x6c4>)
 800cdba:	f000 fe6b 	bl	800da94 <bar_labelunit>

	// ==== rechte Spalte ====
	barynum = 1;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	61fb      	str	r3, [r7, #28]
	// Voltage
	bar_initstruct(&bar_voltage);
 800cdc2:	48b5      	ldr	r0, [pc, #724]	; (800d098 <init_bars+0x6d4>)
 800cdc4:	f000 fe08 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_voltage,rightx,starty + barynum++*(diffy+height),width, height);
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	61fa      	str	r2, [r7, #28]
 800cdce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd2:	440a      	add	r2, r1
 800cdd4:	fb02 f203 	mul.w	r2, r2, r3
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	441a      	add	r2, r3
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cde4:	48ac      	ldr	r0, [pc, #688]	; (800d098 <init_bars+0x6d4>)
 800cde6:	f000 fe05 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_voltage, &verdana_18ptFontInfo, textxshift, textyshift, getLang(PS_Voltage));
 800cdea:	2008      	movs	r0, #8
 800cdec:	f003 fffa 	bl	8010de4 <getLang>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	6a3a      	ldr	r2, [r7, #32]
 800cdf8:	49a8      	ldr	r1, [pc, #672]	; (800d09c <init_bars+0x6d8>)
 800cdfa:	48a7      	ldr	r0, [pc, #668]	; (800d098 <init_bars+0x6d4>)
 800cdfc:	f000 fe17 	bl	800da2e <bar_title>
	bar_style(&bar_voltage, BARSTYLE_FULL);
 800ce00:	2102      	movs	r1, #2
 800ce02:	48a5      	ldr	r0, [pc, #660]	; (800d098 <init_bars+0x6d4>)
 800ce04:	f000 fe38 	bl	800da78 <bar_style>
	bar_labelunit(&bar_voltage, &verdana_12ptFontInfo, "V [DC]");
 800ce08:	4aa5      	ldr	r2, [pc, #660]	; (800d0a0 <init_bars+0x6dc>)
 800ce0a:	499e      	ldr	r1, [pc, #632]	; (800d084 <init_bars+0x6c0>)
 800ce0c:	48a2      	ldr	r0, [pc, #648]	; (800d098 <init_bars+0x6d4>)
 800ce0e:	f000 fe41 	bl	800da94 <bar_labelunit>
	makeLabelEntries_linear(&bar_voltage, &verdana_12ptFontInfo, maxUunits[pcfgdata->maxUunits]);
 800ce12:	4ba4      	ldr	r3, [pc, #656]	; (800d0a4 <init_bars+0x6e0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ce1a:	4aa3      	ldr	r2, [pc, #652]	; (800d0a8 <init_bars+0x6e4>)
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	edd3 7a00 	vldr	s15, [r3]
 800ce24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce28:	ee17 2a90 	vmov	r2, s15
 800ce2c:	4995      	ldr	r1, [pc, #596]	; (800d084 <init_bars+0x6c0>)
 800ce2e:	489a      	ldr	r0, [pc, #616]	; (800d098 <init_bars+0x6d4>)
 800ce30:	f7ff fd3c 	bl	800c8ac <makeLabelEntries_linear>
	bar_value(&bar_voltage, &lucidaConsole_18ptFontInfo);
 800ce34:	499d      	ldr	r1, [pc, #628]	; (800d0ac <init_bars+0x6e8>)
 800ce36:	4898      	ldr	r0, [pc, #608]	; (800d098 <init_bars+0x6d4>)
 800ce38:	f000 fe8a 	bl	800db50 <bar_value>
	bar_barinfo(&bar_voltage, (maxUunits[pcfgdata->maxUunits]*2)/3, (maxUunits[pcfgdata->maxUunits]*3)/4, maxUunits[pcfgdata->maxUunits]);
 800ce3c:	4b99      	ldr	r3, [pc, #612]	; (800d0a4 <init_bars+0x6e0>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ce44:	4a98      	ldr	r2, [pc, #608]	; (800d0a8 <init_bars+0x6e4>)
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	edd3 7a00 	vldr	s15, [r3]
 800ce4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ce52:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ce56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ce5a:	4b92      	ldr	r3, [pc, #584]	; (800d0a4 <init_bars+0x6e0>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ce62:	4a91      	ldr	r2, [pc, #580]	; (800d0a8 <init_bars+0x6e4>)
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	edd3 7a00 	vldr	s15, [r3]
 800ce6c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ce70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce74:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ce78:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800ce7c:	4b89      	ldr	r3, [pc, #548]	; (800d0a4 <init_bars+0x6e0>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ce84:	4a88      	ldr	r2, [pc, #544]	; (800d0a8 <init_bars+0x6e4>)
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4413      	add	r3, r2
 800ce8a:	edd3 7a00 	vldr	s15, [r3]
 800ce8e:	eeb0 1a67 	vmov.f32	s2, s15
 800ce92:	eef0 0a46 	vmov.f32	s1, s12
 800ce96:	eeb0 0a66 	vmov.f32	s0, s13
 800ce9a:	487f      	ldr	r0, [pc, #508]	; (800d098 <init_bars+0x6d4>)
 800ce9c:	f000 fe82 	bl	800dba4 <bar_barinfo>

	// Current
	bar_initstruct(&bar_current);
 800cea0:	4883      	ldr	r0, [pc, #524]	; (800d0b0 <init_bars+0x6ec>)
 800cea2:	f000 fd99 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_current,rightx,starty + barynum++*(diffy+height),width, height);
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	1c5a      	adds	r2, r3, #1
 800ceaa:	61fa      	str	r2, [r7, #28]
 800ceac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceb0:	440a      	add	r2, r1
 800ceb2:	fb02 f203 	mul.w	r2, r2, r3
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	441a      	add	r2, r3
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cec2:	487b      	ldr	r0, [pc, #492]	; (800d0b0 <init_bars+0x6ec>)
 800cec4:	f000 fd96 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_current, &verdana_18ptFontInfo, textxshift, textyshift, getLang(PS_Current));
 800cec8:	2009      	movs	r0, #9
 800ceca:	f003 ff8b 	bl	8010de4 <getLang>
 800cece:	4603      	mov	r3, r0
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	6a3a      	ldr	r2, [r7, #32]
 800ced6:	4971      	ldr	r1, [pc, #452]	; (800d09c <init_bars+0x6d8>)
 800ced8:	4875      	ldr	r0, [pc, #468]	; (800d0b0 <init_bars+0x6ec>)
 800ceda:	f000 fda8 	bl	800da2e <bar_title>
	bar_style(&bar_current, BARSTYLE_FULL);
 800cede:	2102      	movs	r1, #2
 800cee0:	4873      	ldr	r0, [pc, #460]	; (800d0b0 <init_bars+0x6ec>)
 800cee2:	f000 fdc9 	bl	800da78 <bar_style>
	bar_labelunit(&bar_current, &verdana_12ptFontInfo, "A [DC]");
 800cee6:	4a73      	ldr	r2, [pc, #460]	; (800d0b4 <init_bars+0x6f0>)
 800cee8:	4966      	ldr	r1, [pc, #408]	; (800d084 <init_bars+0x6c0>)
 800ceea:	4871      	ldr	r0, [pc, #452]	; (800d0b0 <init_bars+0x6ec>)
 800ceec:	f000 fdd2 	bl	800da94 <bar_labelunit>
	makeLabelEntries_linear(&bar_current, &verdana_12ptFontInfo, maxIunits[pcfgdata->maxIunits]);
 800cef0:	4b6c      	ldr	r3, [pc, #432]	; (800d0a4 <init_bars+0x6e0>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cef8:	4a6f      	ldr	r2, [pc, #444]	; (800d0b8 <init_bars+0x6f4>)
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	edd3 7a00 	vldr	s15, [r3]
 800cf02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf06:	ee17 2a90 	vmov	r2, s15
 800cf0a:	495e      	ldr	r1, [pc, #376]	; (800d084 <init_bars+0x6c0>)
 800cf0c:	4868      	ldr	r0, [pc, #416]	; (800d0b0 <init_bars+0x6ec>)
 800cf0e:	f7ff fccd 	bl	800c8ac <makeLabelEntries_linear>
	bar_value(&bar_current, &lucidaConsole_18ptFontInfo);
 800cf12:	4966      	ldr	r1, [pc, #408]	; (800d0ac <init_bars+0x6e8>)
 800cf14:	4866      	ldr	r0, [pc, #408]	; (800d0b0 <init_bars+0x6ec>)
 800cf16:	f000 fe1b 	bl	800db50 <bar_value>
	bar_barinfo(&bar_current, (maxIunits[pcfgdata->maxIunits]*2)/3, (maxIunits[pcfgdata->maxIunits]*3)/4, maxIunits[pcfgdata->maxIunits]);
 800cf1a:	4b62      	ldr	r3, [pc, #392]	; (800d0a4 <init_bars+0x6e0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf22:	4a65      	ldr	r2, [pc, #404]	; (800d0b8 <init_bars+0x6f4>)
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	edd3 7a00 	vldr	s15, [r3]
 800cf2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cf30:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cf34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cf38:	4b5a      	ldr	r3, [pc, #360]	; (800d0a4 <init_bars+0x6e0>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf40:	4a5d      	ldr	r2, [pc, #372]	; (800d0b8 <init_bars+0x6f4>)
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	edd3 7a00 	vldr	s15, [r3]
 800cf4a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cf4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf52:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800cf56:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800cf5a:	4b52      	ldr	r3, [pc, #328]	; (800d0a4 <init_bars+0x6e0>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf62:	4a55      	ldr	r2, [pc, #340]	; (800d0b8 <init_bars+0x6f4>)
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	edd3 7a00 	vldr	s15, [r3]
 800cf6c:	eeb0 1a67 	vmov.f32	s2, s15
 800cf70:	eef0 0a46 	vmov.f32	s1, s12
 800cf74:	eeb0 0a66 	vmov.f32	s0, s13
 800cf78:	484d      	ldr	r0, [pc, #308]	; (800d0b0 <init_bars+0x6ec>)
 800cf7a:	f000 fe13 	bl	800dba4 <bar_barinfo>

	// DC Power
	bar_initstruct(&bar_dc_power);
 800cf7e:	484f      	ldr	r0, [pc, #316]	; (800d0bc <init_bars+0x6f8>)
 800cf80:	f000 fd2a 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_dc_power,rightx,starty + barynum++*(diffy+height),width, height);
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	1c5a      	adds	r2, r3, #1
 800cf88:	61fa      	str	r2, [r7, #28]
 800cf8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8e:	440a      	add	r2, r1
 800cf90:	fb02 f203 	mul.w	r2, r2, r3
 800cf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf96:	441a      	add	r2, r3
 800cf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfa0:	4846      	ldr	r0, [pc, #280]	; (800d0bc <init_bars+0x6f8>)
 800cfa2:	f000 fd27 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_dc_power, &verdana_18ptFontInfo, textxshift, textyshift, getLang(PS_Power));
 800cfa6:	200a      	movs	r0, #10
 800cfa8:	f003 ff1c 	bl	8010de4 <getLang>
 800cfac:	4603      	mov	r3, r0
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	6a3a      	ldr	r2, [r7, #32]
 800cfb4:	4939      	ldr	r1, [pc, #228]	; (800d09c <init_bars+0x6d8>)
 800cfb6:	4841      	ldr	r0, [pc, #260]	; (800d0bc <init_bars+0x6f8>)
 800cfb8:	f000 fd39 	bl	800da2e <bar_title>
	bar_style(&bar_dc_power, BARSTYLE_FULL);
 800cfbc:	2102      	movs	r1, #2
 800cfbe:	483f      	ldr	r0, [pc, #252]	; (800d0bc <init_bars+0x6f8>)
 800cfc0:	f000 fd5a 	bl	800da78 <bar_style>
	bar_labelunit(&bar_dc_power, &verdana_12ptFontInfo, "W [DC]");
 800cfc4:	4a3e      	ldr	r2, [pc, #248]	; (800d0c0 <init_bars+0x6fc>)
 800cfc6:	492f      	ldr	r1, [pc, #188]	; (800d084 <init_bars+0x6c0>)
 800cfc8:	483c      	ldr	r0, [pc, #240]	; (800d0bc <init_bars+0x6f8>)
 800cfca:	f000 fd63 	bl	800da94 <bar_labelunit>
	int maxdcpwr = h_power[pcfgdata->maxpwrunits][4] * 2;
 800cfce:	4b35      	ldr	r3, [pc, #212]	; (800d0a4 <init_bars+0x6e0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4a3a      	ldr	r2, [pc, #232]	; (800d0c4 <init_bars+0x700>)
 800cfda:	460b      	mov	r3, r1
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	440b      	add	r3, r1
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	3310      	adds	r3, #16
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	617b      	str	r3, [r7, #20]
	makeLabelEntries_linear(&bar_dc_power, &verdana_12ptFontInfo, maxdcpwr);
 800cfec:	697a      	ldr	r2, [r7, #20]
 800cfee:	4925      	ldr	r1, [pc, #148]	; (800d084 <init_bars+0x6c0>)
 800cff0:	4832      	ldr	r0, [pc, #200]	; (800d0bc <init_bars+0x6f8>)
 800cff2:	f7ff fc5b 	bl	800c8ac <makeLabelEntries_linear>
	bar_value(&bar_dc_power, &lucidaConsole_18ptFontInfo);
 800cff6:	492d      	ldr	r1, [pc, #180]	; (800d0ac <init_bars+0x6e8>)
 800cff8:	4830      	ldr	r0, [pc, #192]	; (800d0bc <init_bars+0x6f8>)
 800cffa:	f000 fda9 	bl	800db50 <bar_value>
	bar_barinfo(&bar_dc_power, (maxdcpwr*2)/3, (maxdcpwr*3)/4, maxdcpwr);
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	4a31      	ldr	r2, [pc, #196]	; (800d0c8 <init_bars+0x704>)
 800d004:	fb82 1203 	smull	r1, r2, r2, r3
 800d008:	17db      	asrs	r3, r3, #31
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	ee07 3a90 	vmov	s15, r3
 800d010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d014:	697a      	ldr	r2, [r7, #20]
 800d016:	4613      	mov	r3, r2
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	4413      	add	r3, r2
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	da00      	bge.n	800d022 <init_bars+0x65e>
 800d020:	3303      	adds	r3, #3
 800d022:	109b      	asrs	r3, r3, #2
 800d024:	ee07 3a10 	vmov	s14, r3
 800d028:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	ee06 3a90 	vmov	s13, r3
 800d032:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d036:	eeb0 1a66 	vmov.f32	s2, s13
 800d03a:	eef0 0a47 	vmov.f32	s1, s14
 800d03e:	eeb0 0a67 	vmov.f32	s0, s15
 800d042:	481e      	ldr	r0, [pc, #120]	; (800d0bc <init_bars+0x6f8>)
 800d044:	f000 fdae 	bl	800dba4 <bar_barinfo>


	// Temperatur-2
	bar_initstruct(&bar_temperature2);
 800d048:	4820      	ldr	r0, [pc, #128]	; (800d0cc <init_bars+0x708>)
 800d04a:	f000 fcc5 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_temperature2,rightx,starty + barynum++*(diffy+height), width, height);
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	1c5a      	adds	r2, r3, #1
 800d052:	61fa      	str	r2, [r7, #28]
 800d054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d058:	440a      	add	r2, r1
 800d05a:	fb02 f203 	mul.w	r2, r2, r3
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	441a      	add	r2, r3
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d068:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d06a:	4818      	ldr	r0, [pc, #96]	; (800d0cc <init_bars+0x708>)
 800d06c:	f000 fcc2 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_temperature2, &verdana_18ptFontInfo, textxshift, textyshift, getLang(Temperature2));
 800d070:	203f      	movs	r0, #63	; 0x3f
 800d072:	f003 feb7 	bl	8010de4 <getLang>
 800d076:	4603      	mov	r3, r0
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07c:	6a3a      	ldr	r2, [r7, #32]
 800d07e:	e027      	b.n	800d0d0 <init_bars+0x70c>
 800d080:	08024854 	.word	0x08024854
 800d084:	20001c64 	.word	0x20001c64
 800d088:	2000392c 	.word	0x2000392c
 800d08c:	437a0000 	.word	0x437a0000
 800d090:	43160000 	.word	0x43160000
 800d094:	42f00000 	.word	0x42f00000
 800d098:	200032d8 	.word	0x200032d8
 800d09c:	20001c70 	.word	0x20001c70
 800d0a0:	08024858 	.word	0x08024858
 800d0a4:	20000bf0 	.word	0x20000bf0
 800d0a8:	20001524 	.word	0x20001524
 800d0ac:	20001c34 	.word	0x20001c34
 800d0b0:	2000341c 	.word	0x2000341c
 800d0b4:	08024860 	.word	0x08024860
 800d0b8:	20001534 	.word	0x20001534
 800d0bc:	20003e3c 	.word	0x20003e3c
 800d0c0:	08024868 	.word	0x08024868
 800d0c4:	20001470 	.word	0x20001470
 800d0c8:	55555556 	.word	0x55555556
 800d0cc:	20003194 	.word	0x20003194
 800d0d0:	499d      	ldr	r1, [pc, #628]	; (800d348 <init_bars+0x984>)
 800d0d2:	489e      	ldr	r0, [pc, #632]	; (800d34c <init_bars+0x988>)
 800d0d4:	f000 fcab 	bl	800da2e <bar_title>
	bar_style(&bar_temperature2, BARSTYLE_FULL);
 800d0d8:	2102      	movs	r1, #2
 800d0da:	489c      	ldr	r0, [pc, #624]	; (800d34c <init_bars+0x988>)
 800d0dc:	f000 fccc 	bl	800da78 <bar_style>
	bar_value(&bar_temperature2, &lucidaConsole_18ptFontInfo);
 800d0e0:	499b      	ldr	r1, [pc, #620]	; (800d350 <init_bars+0x98c>)
 800d0e2:	489a      	ldr	r0, [pc, #616]	; (800d34c <init_bars+0x988>)
 800d0e4:	f000 fd34 	bl	800db50 <bar_value>
	strcpy(s,getLang(Degree));
 800d0e8:	2007      	movs	r0, #7
 800d0ea:	f003 fe7b 	bl	8010de4 <getLang>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	463b      	mov	r3, r7
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f012 f8bf 	bl	801f278 <strcpy>
	strcat(s," ");
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fa ff9f 	bl	8008040 <strlen>
 800d102:	4603      	mov	r3, r0
 800d104:	461a      	mov	r2, r3
 800d106:	463b      	mov	r3, r7
 800d108:	4413      	add	r3, r2
 800d10a:	4992      	ldr	r1, [pc, #584]	; (800d354 <init_bars+0x990>)
 800d10c:	461a      	mov	r2, r3
 800d10e:	460b      	mov	r3, r1
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	8013      	strh	r3, [r2, #0]
	if(pcfgdata->tempunits == 0)
 800d114:	4b90      	ldr	r3, [pc, #576]	; (800d358 <init_bars+0x994>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d119      	bne.n	800d154 <init_bars+0x790>
	{
		strcat(s,"[C]");
 800d120:	463b      	mov	r3, r7
 800d122:	4618      	mov	r0, r3
 800d124:	f7fa ff8c 	bl	8008040 <strlen>
 800d128:	4603      	mov	r3, r0
 800d12a:	461a      	mov	r2, r3
 800d12c:	463b      	mov	r3, r7
 800d12e:	4413      	add	r3, r2
 800d130:	4a8a      	ldr	r2, [pc, #552]	; (800d35c <init_bars+0x998>)
 800d132:	6810      	ldr	r0, [r2, #0]
 800d134:	6018      	str	r0, [r3, #0]
		makeLabelEntries_linear(&bar_temperature2, &verdana_12ptFontInfo, 125);
 800d136:	227d      	movs	r2, #125	; 0x7d
 800d138:	4989      	ldr	r1, [pc, #548]	; (800d360 <init_bars+0x99c>)
 800d13a:	4884      	ldr	r0, [pc, #528]	; (800d34c <init_bars+0x988>)
 800d13c:	f7ff fbb6 	bl	800c8ac <makeLabelEntries_linear>
		bar_barinfo(&bar_temperature2, 50, 70, 125);
 800d140:	ed9f 1a88 	vldr	s2, [pc, #544]	; 800d364 <init_bars+0x9a0>
 800d144:	eddf 0a88 	vldr	s1, [pc, #544]	; 800d368 <init_bars+0x9a4>
 800d148:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800d36c <init_bars+0x9a8>
 800d14c:	487f      	ldr	r0, [pc, #508]	; (800d34c <init_bars+0x988>)
 800d14e:	f000 fd29 	bl	800dba4 <bar_barinfo>
 800d152:	e018      	b.n	800d186 <init_bars+0x7c2>
	}
	else
	{
		strcat(s,"[F]");
 800d154:	463b      	mov	r3, r7
 800d156:	4618      	mov	r0, r3
 800d158:	f7fa ff72 	bl	8008040 <strlen>
 800d15c:	4603      	mov	r3, r0
 800d15e:	461a      	mov	r2, r3
 800d160:	463b      	mov	r3, r7
 800d162:	4413      	add	r3, r2
 800d164:	4a82      	ldr	r2, [pc, #520]	; (800d370 <init_bars+0x9ac>)
 800d166:	6810      	ldr	r0, [r2, #0]
 800d168:	6018      	str	r0, [r3, #0]
		makeLabelEntries_linear(&bar_temperature2, &verdana_12ptFontInfo, 250);
 800d16a:	22fa      	movs	r2, #250	; 0xfa
 800d16c:	497c      	ldr	r1, [pc, #496]	; (800d360 <init_bars+0x99c>)
 800d16e:	4877      	ldr	r0, [pc, #476]	; (800d34c <init_bars+0x988>)
 800d170:	f7ff fb9c 	bl	800c8ac <makeLabelEntries_linear>
		bar_barinfo(&bar_temperature2, 120, 150, 250);
 800d174:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 800d374 <init_bars+0x9b0>
 800d178:	eddf 0a7f 	vldr	s1, [pc, #508]	; 800d378 <init_bars+0x9b4>
 800d17c:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 800d37c <init_bars+0x9b8>
 800d180:	4872      	ldr	r0, [pc, #456]	; (800d34c <init_bars+0x988>)
 800d182:	f000 fd0f 	bl	800dba4 <bar_barinfo>
	}
	bar_labelunit(&bar_temperature2, &verdana_12ptFontInfo, s);
 800d186:	463b      	mov	r3, r7
 800d188:	461a      	mov	r2, r3
 800d18a:	4975      	ldr	r1, [pc, #468]	; (800d360 <init_bars+0x99c>)
 800d18c:	486f      	ldr	r0, [pc, #444]	; (800d34c <init_bars+0x988>)
 800d18e:	f000 fc81 	bl	800da94 <bar_labelunit>

	// ========== grosses Balkenfenster =============
	leftx = 50;
 800d192:	2332      	movs	r3, #50	; 0x32
 800d194:	63fb      	str	r3, [r7, #60]	; 0x3c
	starty = 50;
 800d196:	2332      	movs	r3, #50	; 0x32
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
	diffy = 80;
 800d19a:	2350      	movs	r3, #80	; 0x50
 800d19c:	62bb      	str	r3, [r7, #40]	; 0x28
	height = 50;
 800d19e:	2332      	movs	r3, #50	; 0x32
 800d1a0:	633b      	str	r3, [r7, #48]	; 0x30
	textyshift = -35;
 800d1a2:	f06f 0322 	mvn.w	r3, #34	; 0x22
 800d1a6:	627b      	str	r3, [r7, #36]	; 0x24
	barynum = 0;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	61fb      	str	r3, [r7, #28]

	// Output Power
	bar_initstruct(&bar_big_power);
 800d1ac:	4874      	ldr	r0, [pc, #464]	; (800d380 <init_bars+0x9bc>)
 800d1ae:	f000 fc13 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_big_power,leftx,starty + barynum++*(diffy+height), 450, height);
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	1c5a      	adds	r2, r3, #1
 800d1b6:	61fa      	str	r2, [r7, #28]
 800d1b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1bc:	440a      	add	r2, r1
 800d1be:	fb02 f203 	mul.w	r2, r2, r3
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	441a      	add	r2, r3
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800d1ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1d0:	486b      	ldr	r0, [pc, #428]	; (800d380 <init_bars+0x9bc>)
 800d1d2:	f000 fc0f 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_big_power, &verdana_22ptFontInfo, textxshift, textyshift, getLang(Output_Power));
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	f003 fe04 	bl	8010de4 <getLang>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e2:	6a3a      	ldr	r2, [r7, #32]
 800d1e4:	4967      	ldr	r1, [pc, #412]	; (800d384 <init_bars+0x9c0>)
 800d1e6:	4866      	ldr	r0, [pc, #408]	; (800d380 <init_bars+0x9bc>)
 800d1e8:	f000 fc21 	bl	800da2e <bar_title>
	bar_style(&bar_big_power, BARSTYLE_FULL | BARSTYLE_LOG);
 800d1ec:	210a      	movs	r1, #10
 800d1ee:	4864      	ldr	r0, [pc, #400]	; (800d380 <init_bars+0x9bc>)
 800d1f0:	f000 fc42 	bl	800da78 <bar_style>
	bar_labelunit(&bar_big_power, &lucidaConsole_14ptFontInfo, getLang(W_RFout));
 800d1f4:	2001      	movs	r0, #1
 800d1f6:	f003 fdf5 	bl	8010de4 <getLang>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	4962      	ldr	r1, [pc, #392]	; (800d388 <init_bars+0x9c4>)
 800d200:	485f      	ldr	r0, [pc, #380]	; (800d380 <init_bars+0x9bc>)
 800d202:	f000 fc47 	bl	800da94 <bar_labelunit>
	maxpwr = getMaxPower();
 800d206:	f008 fafd 	bl	8015804 <getMaxPower>
 800d20a:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_big_power, &lucidaConsole_14ptFontInfo,maxpwr,pcfgdata->maxpwrunits);
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	ee07 3a90 	vmov	s15, r3
 800d212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d216:	4b50      	ldr	r3, [pc, #320]	; (800d358 <init_bars+0x994>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d21e:	461a      	mov	r2, r3
 800d220:	eeb0 0a67 	vmov.f32	s0, s15
 800d224:	4958      	ldr	r1, [pc, #352]	; (800d388 <init_bars+0x9c4>)
 800d226:	4856      	ldr	r0, [pc, #344]	; (800d380 <init_bars+0x9bc>)
 800d228:	f7ff fa48 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_big_power, &lucidaConsole_22ptFontInfo);
 800d22c:	4957      	ldr	r1, [pc, #348]	; (800d38c <init_bars+0x9c8>)
 800d22e:	4854      	ldr	r0, [pc, #336]	; (800d380 <init_bars+0x9bc>)
 800d230:	f000 fc8e 	bl	800db50 <bar_value>
	bar_barinfo(&bar_big_power, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	0fda      	lsrs	r2, r3, #31
 800d238:	4413      	add	r3, r2
 800d23a:	105b      	asrs	r3, r3, #1
 800d23c:	ee07 3a90 	vmov	s15, r3
 800d240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	005b      	lsls	r3, r3, #1
 800d248:	4a51      	ldr	r2, [pc, #324]	; (800d390 <init_bars+0x9cc>)
 800d24a:	fb82 1203 	smull	r1, r2, r2, r3
 800d24e:	17db      	asrs	r3, r3, #31
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	ee07 3a10 	vmov	s14, r3
 800d256:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	ee06 3a90 	vmov	s13, r3
 800d260:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d264:	eeb0 1a66 	vmov.f32	s2, s13
 800d268:	eef0 0a47 	vmov.f32	s1, s14
 800d26c:	eeb0 0a67 	vmov.f32	s0, s15
 800d270:	4843      	ldr	r0, [pc, #268]	; (800d380 <init_bars+0x9bc>)
 800d272:	f000 fc97 	bl	800dba4 <bar_barinfo>

	// Output SWR
	bar_initstruct(&bar_big_swr);
 800d276:	4847      	ldr	r0, [pc, #284]	; (800d394 <init_bars+0x9d0>)
 800d278:	f000 fbae 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_big_swr,leftx,starty + barynum++*(diffy+height), 450, height);
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	61fa      	str	r2, [r7, #28]
 800d282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d286:	440a      	add	r2, r1
 800d288:	fb02 f203 	mul.w	r2, r2, r3
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	441a      	add	r2, r3
 800d290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800d298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d29a:	483e      	ldr	r0, [pc, #248]	; (800d394 <init_bars+0x9d0>)
 800d29c:	f000 fbaa 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_big_swr, &verdana_22ptFontInfo, textxshift, textyshift, getLang(Output_SWR));
 800d2a0:	2002      	movs	r0, #2
 800d2a2:	f003 fd9f 	bl	8010de4 <getLang>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ac:	6a3a      	ldr	r2, [r7, #32]
 800d2ae:	4935      	ldr	r1, [pc, #212]	; (800d384 <init_bars+0x9c0>)
 800d2b0:	4838      	ldr	r0, [pc, #224]	; (800d394 <init_bars+0x9d0>)
 800d2b2:	f000 fbbc 	bl	800da2e <bar_title>
	bar_style(&bar_big_swr, BARSTYLE_FULL | BARSTYLE_LOG | BARSTYLE_SWR);
 800d2b6:	211a      	movs	r1, #26
 800d2b8:	4836      	ldr	r0, [pc, #216]	; (800d394 <init_bars+0x9d0>)
 800d2ba:	f000 fbdd 	bl	800da78 <bar_style>
	bar_labelunit(&bar_big_swr, &lucidaConsole_14ptFontInfo, ": 1");
 800d2be:	4a36      	ldr	r2, [pc, #216]	; (800d398 <init_bars+0x9d4>)
 800d2c0:	4931      	ldr	r1, [pc, #196]	; (800d388 <init_bars+0x9c4>)
 800d2c2:	4834      	ldr	r0, [pc, #208]	; (800d394 <init_bars+0x9d0>)
 800d2c4:	f000 fbe6 	bl	800da94 <bar_labelunit>
	makeLabelEntries_SWR(&bar_big_swr, &lucidaConsole_14ptFontInfo);
 800d2c8:	492f      	ldr	r1, [pc, #188]	; (800d388 <init_bars+0x9c4>)
 800d2ca:	4832      	ldr	r0, [pc, #200]	; (800d394 <init_bars+0x9d0>)
 800d2cc:	f7ff fa82 	bl	800c7d4 <makeLabelEntries_SWR>
	bar_value(&bar_big_swr, &lucidaConsole_22ptFontInfo);
 800d2d0:	492e      	ldr	r1, [pc, #184]	; (800d38c <init_bars+0x9c8>)
 800d2d2:	4830      	ldr	r0, [pc, #192]	; (800d394 <init_bars+0x9d0>)
 800d2d4:	f000 fc3c 	bl	800db50 <bar_value>
	bar_barinfo(&bar_big_swr, 2, 3, 20);
 800d2d8:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800d2dc:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800d2e0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800d2e4:	482b      	ldr	r0, [pc, #172]	; (800d394 <init_bars+0x9d0>)
 800d2e6:	f000 fc5d 	bl	800dba4 <bar_barinfo>

	// ==================== Bridges Fenster ==============================
	// Output Power
	leftx = 250;
 800d2ea:	23fa      	movs	r3, #250	; 0xfa
 800d2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	width = 300;	// Breite der Bars
 800d2ee:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d2f2:	637b      	str	r3, [r7, #52]	; 0x34
	height = 12;	// Höhe der Bars
 800d2f4:	230c      	movs	r3, #12
 800d2f6:	633b      	str	r3, [r7, #48]	; 0x30
	starty = 25;	// ersten Y Zeile des obersten Bars
 800d2f8:	2319      	movs	r3, #25
 800d2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	diffy = 55;		// Abstand zwischen den Bars
 800d2fc:	2337      	movs	r3, #55	; 0x37
 800d2fe:	62bb      	str	r3, [r7, #40]	; 0x28
	textyshift = -20;// Titeltext Abstand über Balken
 800d300:	f06f 0313 	mvn.w	r3, #19
 800d304:	627b      	str	r3, [r7, #36]	; 0x24
	textxshift = 0; // Titeltext Abstand links
 800d306:	2300      	movs	r3, #0
 800d308:	623b      	str	r3, [r7, #32]

	barynum = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	61fb      	str	r3, [r7, #28]

	bar_initstruct(&bar_bg_antfwd);
 800d30e:	4823      	ldr	r0, [pc, #140]	; (800d39c <init_bars+0x9d8>)
 800d310:	f000 fb62 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_bg_antfwd,leftx,starty + barynum++*(diffy+height), width, height);
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	61fa      	str	r2, [r7, #28]
 800d31a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d31e:	440a      	add	r2, r1
 800d320:	fb02 f203 	mul.w	r2, r2, r3
 800d324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d326:	441a      	add	r2, r3
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d330:	481a      	ldr	r0, [pc, #104]	; (800d39c <init_bars+0x9d8>)
 800d332:	f000 fb5f 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_bg_antfwd, &lucidaConsole_14ptFontInfo, textxshift, textyshift, getLangadd(ANTFWDPWR,pcfgdata->systemMode?"":"(Ant)"));
 800d336:	4b08      	ldr	r3, [pc, #32]	; (800d358 <init_bars+0x994>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d030      	beq.n	800d3a4 <init_bars+0x9e0>
 800d342:	4b17      	ldr	r3, [pc, #92]	; (800d3a0 <init_bars+0x9dc>)
 800d344:	e02f      	b.n	800d3a6 <init_bars+0x9e2>
 800d346:	bf00      	nop
 800d348:	20001c70 	.word	0x20001c70
 800d34c:	20003194 	.word	0x20003194
 800d350:	20001c34 	.word	0x20001c34
 800d354:	0802484c 	.word	0x0802484c
 800d358:	20000bf0 	.word	0x20000bf0
 800d35c:	08024850 	.word	0x08024850
 800d360:	20001c64 	.word	0x20001c64
 800d364:	42fa0000 	.word	0x42fa0000
 800d368:	428c0000 	.word	0x428c0000
 800d36c:	42480000 	.word	0x42480000
 800d370:	08024854 	.word	0x08024854
 800d374:	437a0000 	.word	0x437a0000
 800d378:	43160000 	.word	0x43160000
 800d37c:	42f00000 	.word	0x42f00000
 800d380:	200045d4 	.word	0x200045d4
 800d384:	20001c7c 	.word	0x20001c7c
 800d388:	20001c28 	.word	0x20001c28
 800d38c:	20001c40 	.word	0x20001c40
 800d390:	55555556 	.word	0x55555556
 800d394:	2000434c 	.word	0x2000434c
 800d398:	08024844 	.word	0x08024844
 800d39c:	20003560 	.word	0x20003560
 800d3a0:	08024870 	.word	0x08024870
 800d3a4:	4ba5      	ldr	r3, [pc, #660]	; (800d63c <init_bars+0xc78>)
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	202b      	movs	r0, #43	; 0x2b
 800d3aa:	f003 fd45 	bl	8010e38 <getLangadd>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b4:	6a3a      	ldr	r2, [r7, #32]
 800d3b6:	49a2      	ldr	r1, [pc, #648]	; (800d640 <init_bars+0xc7c>)
 800d3b8:	48a2      	ldr	r0, [pc, #648]	; (800d644 <init_bars+0xc80>)
 800d3ba:	f000 fb38 	bl	800da2e <bar_title>
	bar_style(&bar_bg_antfwd, BARSTYLE_FULL | BARSTYLE_LOG);
 800d3be:	210a      	movs	r1, #10
 800d3c0:	48a0      	ldr	r0, [pc, #640]	; (800d644 <init_bars+0xc80>)
 800d3c2:	f000 fb59 	bl	800da78 <bar_style>
	bar_labelunit(&bar_bg_antfwd, &verdana_12ptFontInfo, getLang(W_RFout));
 800d3c6:	2001      	movs	r0, #1
 800d3c8:	f003 fd0c 	bl	8010de4 <getLang>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	499d      	ldr	r1, [pc, #628]	; (800d648 <init_bars+0xc84>)
 800d3d2:	489c      	ldr	r0, [pc, #624]	; (800d644 <init_bars+0xc80>)
 800d3d4:	f000 fb5e 	bl	800da94 <bar_labelunit>
	maxpwr = getMaxPower();					// Power bei Vollausschlag
 800d3d8:	f008 fa14 	bl	8015804 <getMaxPower>
 800d3dc:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_bg_antfwd, &verdana_12ptFontInfo,maxpwr,pcfgdata->maxpwrunits);
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	ee07 3a90 	vmov	s15, r3
 800d3e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3e8:	4b98      	ldr	r3, [pc, #608]	; (800d64c <init_bars+0xc88>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d3f6:	4994      	ldr	r1, [pc, #592]	; (800d648 <init_bars+0xc84>)
 800d3f8:	4892      	ldr	r0, [pc, #584]	; (800d644 <init_bars+0xc80>)
 800d3fa:	f7ff f95f 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_bg_antfwd, &lucidaConsole_18ptFontInfo);
 800d3fe:	4994      	ldr	r1, [pc, #592]	; (800d650 <init_bars+0xc8c>)
 800d400:	4890      	ldr	r0, [pc, #576]	; (800d644 <init_bars+0xc80>)
 800d402:	f000 fba5 	bl	800db50 <bar_value>
	bar_barinfo(&bar_bg_antfwd, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	0fda      	lsrs	r2, r3, #31
 800d40a:	4413      	add	r3, r2
 800d40c:	105b      	asrs	r3, r3, #1
 800d40e:	ee07 3a90 	vmov	s15, r3
 800d412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	4a8e      	ldr	r2, [pc, #568]	; (800d654 <init_bars+0xc90>)
 800d41c:	fb82 1203 	smull	r1, r2, r2, r3
 800d420:	17db      	asrs	r3, r3, #31
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	ee07 3a10 	vmov	s14, r3
 800d428:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	ee06 3a90 	vmov	s13, r3
 800d432:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d436:	eeb0 1a66 	vmov.f32	s2, s13
 800d43a:	eef0 0a47 	vmov.f32	s1, s14
 800d43e:	eeb0 0a67 	vmov.f32	s0, s15
 800d442:	4880      	ldr	r0, [pc, #512]	; (800d644 <init_bars+0xc80>)
 800d444:	f000 fbae 	bl	800dba4 <bar_barinfo>

	bar_initstruct(&bar_bg_antrev);
 800d448:	4883      	ldr	r0, [pc, #524]	; (800d658 <init_bars+0xc94>)
 800d44a:	f000 fac5 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_bg_antrev,leftx,starty + barynum++*(diffy+height), width, height);
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	61fa      	str	r2, [r7, #28]
 800d454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d458:	440a      	add	r2, r1
 800d45a:	fb02 f203 	mul.w	r2, r2, r3
 800d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d460:	441a      	add	r2, r3
 800d462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d46a:	487b      	ldr	r0, [pc, #492]	; (800d658 <init_bars+0xc94>)
 800d46c:	f000 fac2 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_bg_antrev, &lucidaConsole_14ptFontInfo, textxshift, textyshift, getLangadd(ANTREVPWR,pcfgdata->systemMode?"":"(Ant)"));
 800d470:	4b76      	ldr	r3, [pc, #472]	; (800d64c <init_bars+0xc88>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <init_bars+0xabc>
 800d47c:	4b77      	ldr	r3, [pc, #476]	; (800d65c <init_bars+0xc98>)
 800d47e:	e000      	b.n	800d482 <init_bars+0xabe>
 800d480:	4b6e      	ldr	r3, [pc, #440]	; (800d63c <init_bars+0xc78>)
 800d482:	4619      	mov	r1, r3
 800d484:	202c      	movs	r0, #44	; 0x2c
 800d486:	f003 fcd7 	bl	8010e38 <getLangadd>
 800d48a:	4603      	mov	r3, r0
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	6a3a      	ldr	r2, [r7, #32]
 800d492:	496b      	ldr	r1, [pc, #428]	; (800d640 <init_bars+0xc7c>)
 800d494:	4870      	ldr	r0, [pc, #448]	; (800d658 <init_bars+0xc94>)
 800d496:	f000 faca 	bl	800da2e <bar_title>
	bar_style(&bar_bg_antrev, BARSTYLE_FULL | BARSTYLE_LOG);
 800d49a:	210a      	movs	r1, #10
 800d49c:	486e      	ldr	r0, [pc, #440]	; (800d658 <init_bars+0xc94>)
 800d49e:	f000 faeb 	bl	800da78 <bar_style>
	bar_labelunit(&bar_bg_antrev, &verdana_12ptFontInfo, getLang(W_RFout));
 800d4a2:	2001      	movs	r0, #1
 800d4a4:	f003 fc9e 	bl	8010de4 <getLang>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4966      	ldr	r1, [pc, #408]	; (800d648 <init_bars+0xc84>)
 800d4ae:	486a      	ldr	r0, [pc, #424]	; (800d658 <init_bars+0xc94>)
 800d4b0:	f000 faf0 	bl	800da94 <bar_labelunit>
	maxpwr = getMaxPower();					// Power bei Vollausschlag
 800d4b4:	f008 f9a6 	bl	8015804 <getMaxPower>
 800d4b8:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_bg_antrev, &verdana_12ptFontInfo,maxpwr,pcfgdata->maxpwrunits);
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	ee07 3a90 	vmov	s15, r3
 800d4c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4c4:	4b61      	ldr	r3, [pc, #388]	; (800d64c <init_bars+0xc88>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	eeb0 0a67 	vmov.f32	s0, s15
 800d4d2:	495d      	ldr	r1, [pc, #372]	; (800d648 <init_bars+0xc84>)
 800d4d4:	4860      	ldr	r0, [pc, #384]	; (800d658 <init_bars+0xc94>)
 800d4d6:	f7ff f8f1 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_bg_antrev, &lucidaConsole_18ptFontInfo);
 800d4da:	495d      	ldr	r1, [pc, #372]	; (800d650 <init_bars+0xc8c>)
 800d4dc:	485e      	ldr	r0, [pc, #376]	; (800d658 <init_bars+0xc94>)
 800d4de:	f000 fb37 	bl	800db50 <bar_value>
	bar_barinfo(&bar_bg_antrev, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	0fda      	lsrs	r2, r3, #31
 800d4e6:	4413      	add	r3, r2
 800d4e8:	105b      	asrs	r3, r3, #1
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	4a57      	ldr	r2, [pc, #348]	; (800d654 <init_bars+0xc90>)
 800d4f8:	fb82 1203 	smull	r1, r2, r2, r3
 800d4fc:	17db      	asrs	r3, r3, #31
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	ee07 3a10 	vmov	s14, r3
 800d504:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	ee06 3a90 	vmov	s13, r3
 800d50e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d512:	eeb0 1a66 	vmov.f32	s2, s13
 800d516:	eef0 0a47 	vmov.f32	s1, s14
 800d51a:	eeb0 0a67 	vmov.f32	s0, s15
 800d51e:	484e      	ldr	r0, [pc, #312]	; (800d658 <init_bars+0xc94>)
 800d520:	f000 fb40 	bl	800dba4 <bar_barinfo>

	bar_initstruct(&bar_bg_fltfwd);
 800d524:	484e      	ldr	r0, [pc, #312]	; (800d660 <init_bars+0xc9c>)
 800d526:	f000 fa57 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_bg_fltfwd,leftx,starty + barynum++*(diffy+height)+5, width, height);
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	61fa      	str	r2, [r7, #28]
 800d530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d534:	440a      	add	r2, r1
 800d536:	fb02 f203 	mul.w	r2, r2, r3
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	4413      	add	r3, r2
 800d53e:	1d5a      	adds	r2, r3, #5
 800d540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d546:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d548:	4845      	ldr	r0, [pc, #276]	; (800d660 <init_bars+0xc9c>)
 800d54a:	f000 fa53 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_bg_fltfwd, &lucidaConsole_14ptFontInfo, textxshift, textyshift, getLangadd(FLTFWDPWR,pcfgdata->systemMode?"":"(Flt)"));
 800d54e:	4b3f      	ldr	r3, [pc, #252]	; (800d64c <init_bars+0xc88>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d556:	2b00      	cmp	r3, #0
 800d558:	d001      	beq.n	800d55e <init_bars+0xb9a>
 800d55a:	4b40      	ldr	r3, [pc, #256]	; (800d65c <init_bars+0xc98>)
 800d55c:	e000      	b.n	800d560 <init_bars+0xb9c>
 800d55e:	4b41      	ldr	r3, [pc, #260]	; (800d664 <init_bars+0xca0>)
 800d560:	4619      	mov	r1, r3
 800d562:	202d      	movs	r0, #45	; 0x2d
 800d564:	f003 fc68 	bl	8010e38 <getLangadd>
 800d568:	4603      	mov	r3, r0
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56e:	6a3a      	ldr	r2, [r7, #32]
 800d570:	4933      	ldr	r1, [pc, #204]	; (800d640 <init_bars+0xc7c>)
 800d572:	483b      	ldr	r0, [pc, #236]	; (800d660 <init_bars+0xc9c>)
 800d574:	f000 fa5b 	bl	800da2e <bar_title>
	bar_style(&bar_bg_fltfwd, BARSTYLE_FULL | BARSTYLE_LOG);
 800d578:	210a      	movs	r1, #10
 800d57a:	4839      	ldr	r0, [pc, #228]	; (800d660 <init_bars+0xc9c>)
 800d57c:	f000 fa7c 	bl	800da78 <bar_style>
	bar_labelunit(&bar_bg_fltfwd, &verdana_12ptFontInfo, getLang(W_RFout));
 800d580:	2001      	movs	r0, #1
 800d582:	f003 fc2f 	bl	8010de4 <getLang>
 800d586:	4603      	mov	r3, r0
 800d588:	461a      	mov	r2, r3
 800d58a:	492f      	ldr	r1, [pc, #188]	; (800d648 <init_bars+0xc84>)
 800d58c:	4834      	ldr	r0, [pc, #208]	; (800d660 <init_bars+0xc9c>)
 800d58e:	f000 fa81 	bl	800da94 <bar_labelunit>
	maxpwr = getMaxPower();					// Power bei Vollausschlag
 800d592:	f008 f937 	bl	8015804 <getMaxPower>
 800d596:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_bg_fltfwd, &verdana_12ptFontInfo,maxpwr,pcfgdata->maxpwrunits);
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	ee07 3a90 	vmov	s15, r3
 800d59e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5a2:	4b2a      	ldr	r3, [pc, #168]	; (800d64c <init_bars+0xc88>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d5b0:	4925      	ldr	r1, [pc, #148]	; (800d648 <init_bars+0xc84>)
 800d5b2:	482b      	ldr	r0, [pc, #172]	; (800d660 <init_bars+0xc9c>)
 800d5b4:	f7ff f882 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_bg_fltfwd, &lucidaConsole_18ptFontInfo);
 800d5b8:	4925      	ldr	r1, [pc, #148]	; (800d650 <init_bars+0xc8c>)
 800d5ba:	4829      	ldr	r0, [pc, #164]	; (800d660 <init_bars+0xc9c>)
 800d5bc:	f000 fac8 	bl	800db50 <bar_value>
	bar_barinfo(&bar_bg_fltfwd, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	0fda      	lsrs	r2, r3, #31
 800d5c4:	4413      	add	r3, r2
 800d5c6:	105b      	asrs	r3, r3, #1
 800d5c8:	ee07 3a90 	vmov	s15, r3
 800d5cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	4a1f      	ldr	r2, [pc, #124]	; (800d654 <init_bars+0xc90>)
 800d5d6:	fb82 1203 	smull	r1, r2, r2, r3
 800d5da:	17db      	asrs	r3, r3, #31
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	ee07 3a10 	vmov	s14, r3
 800d5e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	ee06 3a90 	vmov	s13, r3
 800d5ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d5f0:	eeb0 1a66 	vmov.f32	s2, s13
 800d5f4:	eef0 0a47 	vmov.f32	s1, s14
 800d5f8:	eeb0 0a67 	vmov.f32	s0, s15
 800d5fc:	4818      	ldr	r0, [pc, #96]	; (800d660 <init_bars+0xc9c>)
 800d5fe:	f000 fad1 	bl	800dba4 <bar_barinfo>

	bar_initstruct(&bar_bg_fltrev);
 800d602:	4819      	ldr	r0, [pc, #100]	; (800d668 <init_bars+0xca4>)
 800d604:	f000 f9e8 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_bg_fltrev,leftx,starty + barynum++*(diffy+height)+5, width, height);
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	61fa      	str	r2, [r7, #28]
 800d60e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d612:	440a      	add	r2, r1
 800d614:	fb02 f203 	mul.w	r2, r2, r3
 800d618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61a:	4413      	add	r3, r2
 800d61c:	1d5a      	adds	r2, r3, #5
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d626:	4810      	ldr	r0, [pc, #64]	; (800d668 <init_bars+0xca4>)
 800d628:	f000 f9e4 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_bg_fltrev, &lucidaConsole_14ptFontInfo, textxshift, textyshift, getLangadd(FLTREVPWR,pcfgdata->systemMode?"":"(Flt)"));
 800d62c:	4b07      	ldr	r3, [pc, #28]	; (800d64c <init_bars+0xc88>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d634:	2b00      	cmp	r3, #0
 800d636:	d019      	beq.n	800d66c <init_bars+0xca8>
 800d638:	4b08      	ldr	r3, [pc, #32]	; (800d65c <init_bars+0xc98>)
 800d63a:	e018      	b.n	800d66e <init_bars+0xcaa>
 800d63c:	08024874 	.word	0x08024874
 800d640:	20001c28 	.word	0x20001c28
 800d644:	20003560 	.word	0x20003560
 800d648:	20001c64 	.word	0x20001c64
 800d64c:	20000bf0 	.word	0x20000bf0
 800d650:	20001c34 	.word	0x20001c34
 800d654:	55555556 	.word	0x55555556
 800d658:	200037e8 	.word	0x200037e8
 800d65c:	08024870 	.word	0x08024870
 800d660:	20004208 	.word	0x20004208
 800d664:	0802487c 	.word	0x0802487c
 800d668:	20003f80 	.word	0x20003f80
 800d66c:	4b9a      	ldr	r3, [pc, #616]	; (800d8d8 <init_bars+0xf14>)
 800d66e:	4619      	mov	r1, r3
 800d670:	202e      	movs	r0, #46	; 0x2e
 800d672:	f003 fbe1 	bl	8010e38 <getLangadd>
 800d676:	4603      	mov	r3, r0
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	6a3a      	ldr	r2, [r7, #32]
 800d67e:	4997      	ldr	r1, [pc, #604]	; (800d8dc <init_bars+0xf18>)
 800d680:	4897      	ldr	r0, [pc, #604]	; (800d8e0 <init_bars+0xf1c>)
 800d682:	f000 f9d4 	bl	800da2e <bar_title>
	bar_style(&bar_bg_fltrev, BARSTYLE_FULL | BARSTYLE_LOG);
 800d686:	210a      	movs	r1, #10
 800d688:	4895      	ldr	r0, [pc, #596]	; (800d8e0 <init_bars+0xf1c>)
 800d68a:	f000 f9f5 	bl	800da78 <bar_style>
	bar_labelunit(&bar_bg_fltrev, &verdana_12ptFontInfo, getLang(W_RFout));
 800d68e:	2001      	movs	r0, #1
 800d690:	f003 fba8 	bl	8010de4 <getLang>
 800d694:	4603      	mov	r3, r0
 800d696:	461a      	mov	r2, r3
 800d698:	4992      	ldr	r1, [pc, #584]	; (800d8e4 <init_bars+0xf20>)
 800d69a:	4891      	ldr	r0, [pc, #580]	; (800d8e0 <init_bars+0xf1c>)
 800d69c:	f000 f9fa 	bl	800da94 <bar_labelunit>
	maxpwr = getMaxPower();					// Power bei Vollausschlag
 800d6a0:	f008 f8b0 	bl	8015804 <getMaxPower>
 800d6a4:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_bg_fltrev, &verdana_12ptFontInfo,maxpwr,pcfgdata->maxpwrunits);
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6b0:	4b8d      	ldr	r3, [pc, #564]	; (800d8e8 <init_bars+0xf24>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d6be:	4989      	ldr	r1, [pc, #548]	; (800d8e4 <init_bars+0xf20>)
 800d6c0:	4887      	ldr	r0, [pc, #540]	; (800d8e0 <init_bars+0xf1c>)
 800d6c2:	f7fe fffb 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_bg_fltrev, &lucidaConsole_18ptFontInfo);
 800d6c6:	4989      	ldr	r1, [pc, #548]	; (800d8ec <init_bars+0xf28>)
 800d6c8:	4885      	ldr	r0, [pc, #532]	; (800d8e0 <init_bars+0xf1c>)
 800d6ca:	f000 fa41 	bl	800db50 <bar_value>
	bar_barinfo(&bar_bg_fltrev, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	0fda      	lsrs	r2, r3, #31
 800d6d2:	4413      	add	r3, r2
 800d6d4:	105b      	asrs	r3, r3, #1
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	005b      	lsls	r3, r3, #1
 800d6e2:	4a83      	ldr	r2, [pc, #524]	; (800d8f0 <init_bars+0xf2c>)
 800d6e4:	fb82 1203 	smull	r1, r2, r2, r3
 800d6e8:	17db      	asrs	r3, r3, #31
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	ee07 3a10 	vmov	s14, r3
 800d6f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	ee06 3a90 	vmov	s13, r3
 800d6fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d6fe:	eeb0 1a66 	vmov.f32	s2, s13
 800d702:	eef0 0a47 	vmov.f32	s1, s14
 800d706:	eeb0 0a67 	vmov.f32	s0, s15
 800d70a:	4875      	ldr	r0, [pc, #468]	; (800d8e0 <init_bars+0xf1c>)
 800d70c:	f000 fa4a 	bl	800dba4 <bar_barinfo>

	bar_initstruct(&bar_bg_drvfwd);
 800d710:	4878      	ldr	r0, [pc, #480]	; (800d8f4 <init_bars+0xf30>)
 800d712:	f000 f961 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_bg_drvfwd,leftx,starty + barynum++*(diffy+height) + 15, width, height);
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	1c5a      	adds	r2, r3, #1
 800d71a:	61fa      	str	r2, [r7, #28]
 800d71c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d71e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d720:	440a      	add	r2, r1
 800d722:	fb02 f203 	mul.w	r2, r2, r3
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	4413      	add	r3, r2
 800d72a:	f103 020f 	add.w	r2, r3, #15
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d736:	486f      	ldr	r0, [pc, #444]	; (800d8f4 <init_bars+0xf30>)
 800d738:	f000 f95c 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_bg_drvfwd, &lucidaConsole_14ptFontInfo, textxshift, textyshift, getLangadd(DRVFWDPWR,pcfgdata->systemMode?"":"(Drv)"));
 800d73c:	4b6a      	ldr	r3, [pc, #424]	; (800d8e8 <init_bars+0xf24>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <init_bars+0xd88>
 800d748:	4b6b      	ldr	r3, [pc, #428]	; (800d8f8 <init_bars+0xf34>)
 800d74a:	e000      	b.n	800d74e <init_bars+0xd8a>
 800d74c:	4b6b      	ldr	r3, [pc, #428]	; (800d8fc <init_bars+0xf38>)
 800d74e:	4619      	mov	r1, r3
 800d750:	202f      	movs	r0, #47	; 0x2f
 800d752:	f003 fb71 	bl	8010e38 <getLangadd>
 800d756:	4603      	mov	r3, r0
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	6a3a      	ldr	r2, [r7, #32]
 800d75e:	495f      	ldr	r1, [pc, #380]	; (800d8dc <init_bars+0xf18>)
 800d760:	4864      	ldr	r0, [pc, #400]	; (800d8f4 <init_bars+0xf30>)
 800d762:	f000 f964 	bl	800da2e <bar_title>
	bar_style(&bar_bg_drvfwd, BARSTYLE_FULL | BARSTYLE_LOG);
 800d766:	210a      	movs	r1, #10
 800d768:	4862      	ldr	r0, [pc, #392]	; (800d8f4 <init_bars+0xf30>)
 800d76a:	f000 f985 	bl	800da78 <bar_style>
	bar_labelunit(&bar_bg_drvfwd, &verdana_12ptFontInfo, getLang(W_RFout));
 800d76e:	2001      	movs	r0, #1
 800d770:	f003 fb38 	bl	8010de4 <getLang>
 800d774:	4603      	mov	r3, r0
 800d776:	461a      	mov	r2, r3
 800d778:	495a      	ldr	r1, [pc, #360]	; (800d8e4 <init_bars+0xf20>)
 800d77a:	485e      	ldr	r0, [pc, #376]	; (800d8f4 <init_bars+0xf30>)
 800d77c:	f000 f98a 	bl	800da94 <bar_labelunit>
	maxpwr = getMaxPower();					// Power bei Vollausschlag
 800d780:	f008 f840 	bl	8015804 <getMaxPower>
 800d784:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_bg_drvfwd, &verdana_12ptFontInfo,maxpwr,pcfgdata->maxpwrunits);
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	ee07 3a90 	vmov	s15, r3
 800d78c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d790:	4b55      	ldr	r3, [pc, #340]	; (800d8e8 <init_bars+0xf24>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d798:	461a      	mov	r2, r3
 800d79a:	eeb0 0a67 	vmov.f32	s0, s15
 800d79e:	4951      	ldr	r1, [pc, #324]	; (800d8e4 <init_bars+0xf20>)
 800d7a0:	4854      	ldr	r0, [pc, #336]	; (800d8f4 <init_bars+0xf30>)
 800d7a2:	f7fe ff8b 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_bg_drvfwd, &lucidaConsole_18ptFontInfo);
 800d7a6:	4951      	ldr	r1, [pc, #324]	; (800d8ec <init_bars+0xf28>)
 800d7a8:	4852      	ldr	r0, [pc, #328]	; (800d8f4 <init_bars+0xf30>)
 800d7aa:	f000 f9d1 	bl	800db50 <bar_value>
	bar_barinfo(&bar_bg_drvfwd, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	0fda      	lsrs	r2, r3, #31
 800d7b2:	4413      	add	r3, r2
 800d7b4:	105b      	asrs	r3, r3, #1
 800d7b6:	ee07 3a90 	vmov	s15, r3
 800d7ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	4a4b      	ldr	r2, [pc, #300]	; (800d8f0 <init_bars+0xf2c>)
 800d7c4:	fb82 1203 	smull	r1, r2, r2, r3
 800d7c8:	17db      	asrs	r3, r3, #31
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	ee07 3a10 	vmov	s14, r3
 800d7d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	ee06 3a90 	vmov	s13, r3
 800d7da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d7de:	eeb0 1a66 	vmov.f32	s2, s13
 800d7e2:	eef0 0a47 	vmov.f32	s1, s14
 800d7e6:	eeb0 0a67 	vmov.f32	s0, s15
 800d7ea:	4842      	ldr	r0, [pc, #264]	; (800d8f4 <init_bars+0xf30>)
 800d7ec:	f000 f9da 	bl	800dba4 <bar_barinfo>

	bar_initstruct(&bar_bg_drvrev);
 800d7f0:	4843      	ldr	r0, [pc, #268]	; (800d900 <init_bars+0xf3c>)
 800d7f2:	f000 f8f1 	bl	800d9d8 <bar_initstruct>
	bar_setxy(&bar_bg_drvrev,leftx,starty + barynum++*(diffy+height) + 15, width, height);
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	61fa      	str	r2, [r7, #28]
 800d7fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d800:	440a      	add	r2, r1
 800d802:	fb02 f203 	mul.w	r2, r2, r3
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	4413      	add	r3, r2
 800d80a:	f103 020f 	add.w	r2, r3, #15
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d814:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d816:	483a      	ldr	r0, [pc, #232]	; (800d900 <init_bars+0xf3c>)
 800d818:	f000 f8ec 	bl	800d9f4 <bar_setxy>
	bar_title(&bar_bg_drvrev, &lucidaConsole_14ptFontInfo, textxshift, textyshift, getLangadd(DRVREVPWR,pcfgdata->systemMode?"":"(Drv)"));
 800d81c:	4b32      	ldr	r3, [pc, #200]	; (800d8e8 <init_bars+0xf24>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <init_bars+0xe68>
 800d828:	4b33      	ldr	r3, [pc, #204]	; (800d8f8 <init_bars+0xf34>)
 800d82a:	e000      	b.n	800d82e <init_bars+0xe6a>
 800d82c:	4b33      	ldr	r3, [pc, #204]	; (800d8fc <init_bars+0xf38>)
 800d82e:	4619      	mov	r1, r3
 800d830:	2030      	movs	r0, #48	; 0x30
 800d832:	f003 fb01 	bl	8010e38 <getLangadd>
 800d836:	4603      	mov	r3, r0
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	6a3a      	ldr	r2, [r7, #32]
 800d83e:	4927      	ldr	r1, [pc, #156]	; (800d8dc <init_bars+0xf18>)
 800d840:	482f      	ldr	r0, [pc, #188]	; (800d900 <init_bars+0xf3c>)
 800d842:	f000 f8f4 	bl	800da2e <bar_title>
	bar_style(&bar_bg_drvrev, BARSTYLE_FULL | BARSTYLE_LOG);
 800d846:	210a      	movs	r1, #10
 800d848:	482d      	ldr	r0, [pc, #180]	; (800d900 <init_bars+0xf3c>)
 800d84a:	f000 f915 	bl	800da78 <bar_style>
	bar_labelunit(&bar_bg_drvrev, &verdana_12ptFontInfo, getLang(W_RFout));
 800d84e:	2001      	movs	r0, #1
 800d850:	f003 fac8 	bl	8010de4 <getLang>
 800d854:	4603      	mov	r3, r0
 800d856:	461a      	mov	r2, r3
 800d858:	4922      	ldr	r1, [pc, #136]	; (800d8e4 <init_bars+0xf20>)
 800d85a:	4829      	ldr	r0, [pc, #164]	; (800d900 <init_bars+0xf3c>)
 800d85c:	f000 f91a 	bl	800da94 <bar_labelunit>
	maxpwr = getMaxPower();					// Power bei Vollausschlag
 800d860:	f007 ffd0 	bl	8015804 <getMaxPower>
 800d864:	61b8      	str	r0, [r7, #24]
	makeLabelEntries_Power(&bar_bg_drvrev, &verdana_12ptFontInfo,maxpwr,pcfgdata->maxpwrunits);
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	ee07 3a90 	vmov	s15, r3
 800d86c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d870:	4b1d      	ldr	r3, [pc, #116]	; (800d8e8 <init_bars+0xf24>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d878:	461a      	mov	r2, r3
 800d87a:	eeb0 0a67 	vmov.f32	s0, s15
 800d87e:	4919      	ldr	r1, [pc, #100]	; (800d8e4 <init_bars+0xf20>)
 800d880:	481f      	ldr	r0, [pc, #124]	; (800d900 <init_bars+0xf3c>)
 800d882:	f7fe ff1b 	bl	800c6bc <makeLabelEntries_Power>
	bar_value(&bar_bg_drvrev, &lucidaConsole_18ptFontInfo);
 800d886:	4919      	ldr	r1, [pc, #100]	; (800d8ec <init_bars+0xf28>)
 800d888:	481d      	ldr	r0, [pc, #116]	; (800d900 <init_bars+0xf3c>)
 800d88a:	f000 f961 	bl	800db50 <bar_value>
	bar_barinfo(&bar_bg_drvrev, maxpwr/2, (maxpwr*2)/3, maxpwr);
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	0fda      	lsrs	r2, r3, #31
 800d892:	4413      	add	r3, r2
 800d894:	105b      	asrs	r3, r3, #1
 800d896:	ee07 3a90 	vmov	s15, r3
 800d89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	4a13      	ldr	r2, [pc, #76]	; (800d8f0 <init_bars+0xf2c>)
 800d8a4:	fb82 1203 	smull	r1, r2, r2, r3
 800d8a8:	17db      	asrs	r3, r3, #31
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	ee07 3a10 	vmov	s14, r3
 800d8b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	ee06 3a90 	vmov	s13, r3
 800d8ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d8be:	eeb0 1a66 	vmov.f32	s2, s13
 800d8c2:	eef0 0a47 	vmov.f32	s1, s14
 800d8c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d8ca:	480d      	ldr	r0, [pc, #52]	; (800d900 <init_bars+0xf3c>)
 800d8cc:	f000 f96a 	bl	800dba4 <bar_barinfo>
}
 800d8d0:	bf00      	nop
 800d8d2:	3740      	adds	r7, #64	; 0x40
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	0802487c 	.word	0x0802487c
 800d8dc:	20001c28 	.word	0x20001c28
 800d8e0:	20003f80 	.word	0x20003f80
 800d8e4:	20001c64 	.word	0x20001c64
 800d8e8:	20000bf0 	.word	0x20000bf0
 800d8ec:	20001c34 	.word	0x20001c34
 800d8f0:	55555556 	.word	0x55555556
 800d8f4:	200040c4 	.word	0x200040c4
 800d8f8:	08024870 	.word	0x08024870
 800d8fc:	08024884 	.word	0x08024884
 800d900:	20004490 	.word	0x20004490

0800d904 <show_mainbars>:

void show_mainbars()
{
 800d904:	b580      	push	{r7, lr}
 800d906:	af00      	add	r7, sp, #0
	show_bar(&bar_out_power);
 800d908:	4811      	ldr	r0, [pc, #68]	; (800d950 <show_mainbars+0x4c>)
 800d90a:	f7fe fb1f 	bl	800bf4c <show_bar>
	show_bar(&bar_out_swr);
 800d90e:	4811      	ldr	r0, [pc, #68]	; (800d954 <show_mainbars+0x50>)
 800d910:	f7fe fb1c 	bl	800bf4c <show_bar>
	if(pcfgdata->systemMode == 0)
 800d914:	4b10      	ldr	r3, [pc, #64]	; (800d958 <show_mainbars+0x54>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d105      	bne.n	800d92c <show_mainbars+0x28>
	{
		show_bar(&bar_in_power);
 800d920:	480e      	ldr	r0, [pc, #56]	; (800d95c <show_mainbars+0x58>)
 800d922:	f7fe fb13 	bl	800bf4c <show_bar>
		show_bar(&bar_efficiency);
 800d926:	480e      	ldr	r0, [pc, #56]	; (800d960 <show_mainbars+0x5c>)
 800d928:	f7fe fb10 	bl	800bf4c <show_bar>
	}
	show_bar(&bar_temperature1);
 800d92c:	480d      	ldr	r0, [pc, #52]	; (800d964 <show_mainbars+0x60>)
 800d92e:	f7fe fb0d 	bl	800bf4c <show_bar>
	show_bar(&bar_temperature2);
 800d932:	480d      	ldr	r0, [pc, #52]	; (800d968 <show_mainbars+0x64>)
 800d934:	f7fe fb0a 	bl	800bf4c <show_bar>
	show_bar(&bar_voltage);
 800d938:	480c      	ldr	r0, [pc, #48]	; (800d96c <show_mainbars+0x68>)
 800d93a:	f7fe fb07 	bl	800bf4c <show_bar>
	show_bar(&bar_current);
 800d93e:	480c      	ldr	r0, [pc, #48]	; (800d970 <show_mainbars+0x6c>)
 800d940:	f7fe fb04 	bl	800bf4c <show_bar>
	show_bar(&bar_dc_power);
 800d944:	480b      	ldr	r0, [pc, #44]	; (800d974 <show_mainbars+0x70>)
 800d946:	f7fe fb01 	bl	800bf4c <show_bar>
}
 800d94a:	bf00      	nop
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	200036a4 	.word	0x200036a4
 800d954:	20003cf8 	.word	0x20003cf8
 800d958:	20000bf0 	.word	0x20000bf0
 800d95c:	20003bb4 	.word	0x20003bb4
 800d960:	20003a70 	.word	0x20003a70
 800d964:	2000392c 	.word	0x2000392c
 800d968:	20003194 	.word	0x20003194
 800d96c:	200032d8 	.word	0x200032d8
 800d970:	2000341c 	.word	0x2000341c
 800d974:	20003e3c 	.word	0x20003e3c

0800d978 <show_bigbars>:

void show_bigbars()
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
	show_bar(&bar_big_power);
 800d97c:	4803      	ldr	r0, [pc, #12]	; (800d98c <show_bigbars+0x14>)
 800d97e:	f7fe fae5 	bl	800bf4c <show_bar>
	show_bar(&bar_big_swr);
 800d982:	4803      	ldr	r0, [pc, #12]	; (800d990 <show_bigbars+0x18>)
 800d984:	f7fe fae2 	bl	800bf4c <show_bar>
}
 800d988:	bf00      	nop
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	200045d4 	.word	0x200045d4
 800d990:	2000434c 	.word	0x2000434c

0800d994 <show_bridge_bars>:

void show_bridge_bars()
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
	show_bar(&bar_bg_antfwd);
 800d998:	4809      	ldr	r0, [pc, #36]	; (800d9c0 <show_bridge_bars+0x2c>)
 800d99a:	f7fe fad7 	bl	800bf4c <show_bar>
	show_bar(&bar_bg_antrev);
 800d99e:	4809      	ldr	r0, [pc, #36]	; (800d9c4 <show_bridge_bars+0x30>)
 800d9a0:	f7fe fad4 	bl	800bf4c <show_bar>
	show_bar(&bar_bg_fltfwd);
 800d9a4:	4808      	ldr	r0, [pc, #32]	; (800d9c8 <show_bridge_bars+0x34>)
 800d9a6:	f7fe fad1 	bl	800bf4c <show_bar>
	show_bar(&bar_bg_fltrev);
 800d9aa:	4808      	ldr	r0, [pc, #32]	; (800d9cc <show_bridge_bars+0x38>)
 800d9ac:	f7fe face 	bl	800bf4c <show_bar>
	show_bar(&bar_bg_drvfwd);
 800d9b0:	4807      	ldr	r0, [pc, #28]	; (800d9d0 <show_bridge_bars+0x3c>)
 800d9b2:	f7fe facb 	bl	800bf4c <show_bar>
	show_bar(&bar_bg_drvrev);
 800d9b6:	4807      	ldr	r0, [pc, #28]	; (800d9d4 <show_bridge_bars+0x40>)
 800d9b8:	f7fe fac8 	bl	800bf4c <show_bar>
}
 800d9bc:	bf00      	nop
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	20003560 	.word	0x20003560
 800d9c4:	200037e8 	.word	0x200037e8
 800d9c8:	20004208 	.word	0x20004208
 800d9cc:	20003f80 	.word	0x20003f80
 800d9d0:	200040c4 	.word	0x200040c4
 800d9d4:	20004490 	.word	0x20004490

0800d9d8 <bar_initstruct>:

void bar_initstruct(t_bargraph *bar)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
	memset(bar,0,sizeof(t_bargraph));
 800d9e0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f011 fc02 	bl	801f1f0 <memset>
}
 800d9ec:	bf00      	nop
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <bar_setxy>:

void bar_setxy(t_bargraph *bar, int leftx, int starty, int width, int height)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	607a      	str	r2, [r7, #4]
 800da00:	603b      	str	r3, [r7, #0]
	bar->minx =leftx;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	68ba      	ldr	r2, [r7, #8]
 800da06:	601a      	str	r2, [r3, #0]
	bar->maxx = leftx+width;
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	441a      	add	r2, r3
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	605a      	str	r2, [r3, #4]
	bar->miny = starty;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	609a      	str	r2, [r3, #8]
	bar->maxy = starty+height;
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	441a      	add	r2, r3
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	60da      	str	r2, [r3, #12]
}
 800da22:	bf00      	nop
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <bar_title>:

void bar_title(t_bargraph *bar, FONT_INFO *pfi, int x, int y, char *text)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b084      	sub	sp, #16
 800da32:	af00      	add	r7, sp, #0
 800da34:	60f8      	str	r0, [r7, #12]
 800da36:	60b9      	str	r1, [r7, #8]
 800da38:	607a      	str	r2, [r7, #4]
 800da3a:	603b      	str	r3, [r7, #0]
	bar->titlefont = pfi;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	611a      	str	r2, [r3, #16]
	bar->titlex = bar->minx + x;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	441a      	add	r2, r3
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	615a      	str	r2, [r3, #20]
	bar->titley = bar->miny + y;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	689a      	ldr	r2, [r3, #8]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	441a      	add	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	619a      	str	r2, [r3, #24]
	strncpy(bar->titletext,text,29);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	331c      	adds	r3, #28
 800da5e:	221d      	movs	r2, #29
 800da60:	69b9      	ldr	r1, [r7, #24]
 800da62:	4618      	mov	r0, r3
 800da64:	f011 fc10 	bl	801f288 <strncpy>
	bar->titletext[29] = 0;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800da70:	bf00      	nop
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <bar_style>:

void bar_style(t_bargraph *bar, int style)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
	bar->style = style;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800da88:	bf00      	nop
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <bar_labelunit>:

void bar_labelunit(t_bargraph *bar, FONT_INFO *pfi, char *text)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
	bar->labelfont = pfi;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	64da      	str	r2, [r3, #76]	; 0x4c
	strncpy(bar->labeltext,text,9);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	3340      	adds	r3, #64	; 0x40
 800daaa:	2209      	movs	r2, #9
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	4618      	mov	r0, r3
 800dab0:	f011 fbea 	bl	801f288 <strncpy>
	bar->labeltext[9] = 0;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800dabc:	bf00      	nop
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <bar_labelentry>:

void bar_labelentry(t_bargraph *bar, int x, int shift, char *text)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	603b      	str	r3, [r7, #0]
	bar->barlabel[bar->labelanz].posx = x;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800dad8:	68f9      	ldr	r1, [r7, #12]
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	440b      	add	r3, r1
 800dae4:	3350      	adds	r3, #80	; 0x50
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	601a      	str	r2, [r3, #0]
	bar->barlabel[bar->labelanz].leftshift = shift;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800daf0:	68f9      	ldr	r1, [r7, #12]
 800daf2:	4613      	mov	r3, r2
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4413      	add	r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	440b      	add	r3, r1
 800dafc:	3354      	adds	r3, #84	; 0x54
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	601a      	str	r2, [r3, #0]
	strncpy(bar->barlabel[bar->labelanz].text,text,9);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800db08:	4613      	mov	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	4413      	add	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	3358      	adds	r3, #88	; 0x58
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	4413      	add	r3, r2
 800db16:	2209      	movs	r2, #9
 800db18:	6839      	ldr	r1, [r7, #0]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f011 fbb4 	bl	801f288 <strncpy>
	bar->barlabel[bar->labelanz].text[9] = 0;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800db26:	68f9      	ldr	r1, [r7, #12]
 800db28:	4613      	mov	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	440b      	add	r3, r1
 800db32:	3361      	adds	r3, #97	; 0x61
 800db34:	2200      	movs	r2, #0
 800db36:	701a      	strb	r2, [r3, #0]
	bar->labelanz++;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800db3e:	1c5a      	adds	r2, r3, #1
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
	...

0800db50 <bar_value>:

void bar_value(t_bargraph *bar, FONT_INFO *pfi)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
	bar->valuefont = pfi;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	bar->valuexdiff = 2;	// Abstand vom rechten Bar Rand
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2202      	movs	r2, #2
 800db66:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	// Höhe des Fonts ermitteln
	int tw, th;
	tft_textwidth_pixel(pfi, "A", &tw, &th);
 800db6a:	f107 0308 	add.w	r3, r7, #8
 800db6e:	f107 020c 	add.w	r2, r7, #12
 800db72:	490b      	ldr	r1, [pc, #44]	; (800dba0 <bar_value+0x50>)
 800db74:	6838      	ldr	r0, [r7, #0]
 800db76:	f011 f82e 	bl	801ebd6 <tft_textwidth_pixel>
	bar->valueydiff = ((bar->maxy - bar->miny) - th) /2 + 2;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	1ad2      	subs	r2, r2, r3
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	0fda      	lsrs	r2, r3, #31
 800db8a:	4413      	add	r3, r2
 800db8c:	105b      	asrs	r3, r3, #1
 800db8e:	1c9a      	adds	r2, r3, #2
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 800db96:	bf00      	nop
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	0802488c 	.word	0x0802488c

0800dba4 <bar_barinfo>:

void bar_barinfo(t_bargraph *bar, float vyellow, float vred, float v100)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	ed87 0a02 	vstr	s0, [r7, #8]
 800dbb0:	edc7 0a01 	vstr	s1, [r7, #4]
 800dbb4:	ed87 1a00 	vstr	s2, [r7]
	bar->val100precent = v100;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	bar->red = vred;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	bar->yellow = vyellow;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800dbd0:	bf00      	nop
 800dbd2:	3714      	adds	r7, #20
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr

0800dbdc <draw_buttons_calib>:
// zeichne Calib-Buttons
#define CALHELPY_num 340
#define CALHELPY_val 150

void draw_buttons_calib()
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af04      	add	r7, sp, #16
	if(selcol == 1)
 800dbe2:	4b46      	ldr	r3, [pc, #280]	; (800dcfc <draw_buttons_calib+0x120>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d155      	bne.n	800dc96 <draw_buttons_calib+0xba>
	{
		TFT_Fill_Rectangle(CALIB_XRIGHT+2,100,TFT_WIDTH-1,410,BLACK);
 800dbea:	2300      	movs	r3, #0
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dbf2:	f240 321f 	movw	r2, #799	; 0x31f
 800dbf6:	2164      	movs	r1, #100	; 0x64
 800dbf8:	f240 10dd 	movw	r0, #477	; 0x1dd
 800dbfc:	f009 fe1c 	bl	8017838 <TFT_Fill_Rectangle>
		draw_touchbutton(&tb_buttons[TB_P1000]);
 800dc00:	483f      	ldr	r0, [pc, #252]	; (800dd00 <draw_buttons_calib+0x124>)
 800dc02:	f00c fa03 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_P100]);
 800dc06:	483f      	ldr	r0, [pc, #252]	; (800dd04 <draw_buttons_calib+0x128>)
 800dc08:	f00c fa00 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_P10]);
 800dc0c:	483e      	ldr	r0, [pc, #248]	; (800dd08 <draw_buttons_calib+0x12c>)
 800dc0e:	f00c f9fd 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_P1]);
 800dc12:	483e      	ldr	r0, [pc, #248]	; (800dd0c <draw_buttons_calib+0x130>)
 800dc14:	f00c f9fa 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_M1000]);
 800dc18:	483d      	ldr	r0, [pc, #244]	; (800dd10 <draw_buttons_calib+0x134>)
 800dc1a:	f00c f9f7 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_M100]);
 800dc1e:	483d      	ldr	r0, [pc, #244]	; (800dd14 <draw_buttons_calib+0x138>)
 800dc20:	f00c f9f4 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_M10]);
 800dc24:	483c      	ldr	r0, [pc, #240]	; (800dd18 <draw_buttons_calib+0x13c>)
 800dc26:	f00c f9f1 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_M1]);
 800dc2a:	483c      	ldr	r0, [pc, #240]	; (800dd1c <draw_buttons_calib+0x140>)
 800dc2c:	f00c f9ee 	bl	801a00c <draw_touchbutton>
		tft_print(&lucidaConsole_18ptFontInfo, "x1000 x100  x10   x1", 480, 197, 1, WHITE , BLACK);
 800dc30:	2300      	movs	r3, #0
 800dc32:	9302      	str	r3, [sp, #8]
 800dc34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc38:	9301      	str	r3, [sp, #4]
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	23c5      	movs	r3, #197	; 0xc5
 800dc40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dc44:	4936      	ldr	r1, [pc, #216]	; (800dd20 <draw_buttons_calib+0x144>)
 800dc46:	4837      	ldr	r0, [pc, #220]	; (800dd24 <draw_buttons_calib+0x148>)
 800dc48:	f010 ffac 	bl	801eba4 <tft_print>
		tft_print(&lucidaConsole_12ptFontInfo, getLang(GETCALHELP1), 550, CALHELPY_num, 1, WHITE , BLACK);
 800dc4c:	204a      	movs	r0, #74	; 0x4a
 800dc4e:	f003 f8c9 	bl	8010de4 <getLang>
 800dc52:	4601      	mov	r1, r0
 800dc54:	2300      	movs	r3, #0
 800dc56:	9302      	str	r3, [sp, #8]
 800dc58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc5c:	9301      	str	r3, [sp, #4]
 800dc5e:	2301      	movs	r3, #1
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800dc66:	f240 2226 	movw	r2, #550	; 0x226
 800dc6a:	482f      	ldr	r0, [pc, #188]	; (800dd28 <draw_buttons_calib+0x14c>)
 800dc6c:	f010 ff9a 	bl	801eba4 <tft_print>
		tft_print(&lucidaConsole_12ptFontInfo, getLang(GETCALHELP2), 550, CALHELPY_num+20, 1, WHITE , BLACK);
 800dc70:	204b      	movs	r0, #75	; 0x4b
 800dc72:	f003 f8b7 	bl	8010de4 <getLang>
 800dc76:	4601      	mov	r1, r0
 800dc78:	2300      	movs	r3, #0
 800dc7a:	9302      	str	r3, [sp, #8]
 800dc7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc80:	9301      	str	r3, [sp, #4]
 800dc82:	2301      	movs	r3, #1
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800dc8a:	f240 2226 	movw	r2, #550	; 0x226
 800dc8e:	4826      	ldr	r0, [pc, #152]	; (800dd28 <draw_buttons_calib+0x14c>)
 800dc90:	f010 ff88 	bl	801eba4 <tft_print>
		TFT_Fill_Rectangle(CALIB_XRIGHT+2,100,TFT_WIDTH-1,410,BLACK);
		draw_touchbutton(&tb_buttons[TB_GETVAL]);
		tft_print(&lucidaConsole_12ptFontInfo, getLang(GETVALHELP1), 550, CALHELPY_val, 1, WHITE , BLACK);
		tft_print(&lucidaConsole_12ptFontInfo, getLang(GETVALHELP2), 550, CALHELPY_val+20, 1, WHITE , BLACK);
	}
}
 800dc94:	e02f      	b.n	800dcf6 <draw_buttons_calib+0x11a>
		TFT_Fill_Rectangle(CALIB_XRIGHT+2,100,TFT_WIDTH-1,410,BLACK);
 800dc96:	2300      	movs	r3, #0
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800dc9e:	f240 321f 	movw	r2, #799	; 0x31f
 800dca2:	2164      	movs	r1, #100	; 0x64
 800dca4:	f240 10dd 	movw	r0, #477	; 0x1dd
 800dca8:	f009 fdc6 	bl	8017838 <TFT_Fill_Rectangle>
		draw_touchbutton(&tb_buttons[TB_GETVAL]);
 800dcac:	481f      	ldr	r0, [pc, #124]	; (800dd2c <draw_buttons_calib+0x150>)
 800dcae:	f00c f9ad 	bl	801a00c <draw_touchbutton>
		tft_print(&lucidaConsole_12ptFontInfo, getLang(GETVALHELP1), 550, CALHELPY_val, 1, WHITE , BLACK);
 800dcb2:	2048      	movs	r0, #72	; 0x48
 800dcb4:	f003 f896 	bl	8010de4 <getLang>
 800dcb8:	4601      	mov	r1, r0
 800dcba:	2300      	movs	r3, #0
 800dcbc:	9302      	str	r3, [sp, #8]
 800dcbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcc2:	9301      	str	r3, [sp, #4]
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	2396      	movs	r3, #150	; 0x96
 800dcca:	f240 2226 	movw	r2, #550	; 0x226
 800dcce:	4816      	ldr	r0, [pc, #88]	; (800dd28 <draw_buttons_calib+0x14c>)
 800dcd0:	f010 ff68 	bl	801eba4 <tft_print>
		tft_print(&lucidaConsole_12ptFontInfo, getLang(GETVALHELP2), 550, CALHELPY_val+20, 1, WHITE , BLACK);
 800dcd4:	2049      	movs	r0, #73	; 0x49
 800dcd6:	f003 f885 	bl	8010de4 <getLang>
 800dcda:	4601      	mov	r1, r0
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9302      	str	r3, [sp, #8]
 800dce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dce4:	9301      	str	r3, [sp, #4]
 800dce6:	2301      	movs	r3, #1
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	23aa      	movs	r3, #170	; 0xaa
 800dcec:	f240 2226 	movw	r2, #550	; 0x226
 800dcf0:	480d      	ldr	r0, [pc, #52]	; (800dd28 <draw_buttons_calib+0x14c>)
 800dcf2:	f010 ff57 	bl	801eba4 <tft_print>
}
 800dcf6:	bf00      	nop
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	20000b4c 	.word	0x20000b4c
 800dd00:	20007678 	.word	0x20007678
 800dd04:	200076d8 	.word	0x200076d8
 800dd08:	20007738 	.word	0x20007738
 800dd0c:	20007798 	.word	0x20007798
 800dd10:	200077f8 	.word	0x200077f8
 800dd14:	20007858 	.word	0x20007858
 800dd18:	200078b8 	.word	0x200078b8
 800dd1c:	20007918 	.word	0x20007918
 800dd20:	08024890 	.word	0x08024890
 800dd24:	20001c34 	.word	0x20001c34
 800dd28:	20001c1c 	.word	0x20001c1c
 800dd2c:	20007978 	.word	0x20007978

0800dd30 <draw_menu_calib>:

// Zeichne feste Bestandteile des Calib Menüs
void draw_menu_calib()
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b088      	sub	sp, #32
 800dd34:	af04      	add	r7, sp, #16
	calib_linetext = calib_linetext_pa;
 800dd36:	4b56      	ldr	r3, [pc, #344]	; (800de90 <draw_menu_calib+0x160>)
 800dd38:	4a56      	ldr	r2, [pc, #344]	; (800de94 <draw_menu_calib+0x164>)
 800dd3a:	601a      	str	r2, [r3, #0]
	if(pcfgdata->systemMode == 1) calib_linetext = calib_linetext_pwrswr;
 800dd3c:	4b56      	ldr	r3, [pc, #344]	; (800de98 <draw_menu_calib+0x168>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d102      	bne.n	800dd4e <draw_menu_calib+0x1e>
 800dd48:	4b51      	ldr	r3, [pc, #324]	; (800de90 <draw_menu_calib+0x160>)
 800dd4a:	4a54      	ldr	r2, [pc, #336]	; (800de9c <draw_menu_calib+0x16c>)
 800dd4c:	601a      	str	r2, [r3, #0]

	TFT_Fill_Screen(BLACK);
 800dd4e:	2000      	movs	r0, #0
 800dd50:	f009 fdb2 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_bottom();
 800dd54:	f00c f9e0 	bl	801a118 <draw_touchbuttons_bottom>
	tft_print(&verdana_36ptFontInfo, getLang(POWER_SWR_CALIBRATION), 14, 1, 5, WHITE , BLACK);
 800dd58:	200b      	movs	r0, #11
 800dd5a:	f003 f843 	bl	8010de4 <getLang>
 800dd5e:	4601      	mov	r1, r0
 800dd60:	2300      	movs	r3, #0
 800dd62:	9302      	str	r3, [sp, #8]
 800dd64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	2305      	movs	r3, #5
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	2301      	movs	r3, #1
 800dd70:	220e      	movs	r2, #14
 800dd72:	484b      	ldr	r0, [pc, #300]	; (800dea0 <draw_menu_calib+0x170>)
 800dd74:	f010 ff16 	bl	801eba4 <tft_print>

	draw_buttons_calib();
 800dd78:	f7ff ff30 	bl	800dbdc <draw_buttons_calib>

	for(int line = 0; line < CALIB_LINES; line++)
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60fb      	str	r3, [r7, #12]
 800dd80:	e06e      	b.n	800de60 <draw_menu_calib+0x130>
	{
		int y = CALIB_YTOP + CALIB_YSPACE * line;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2232      	movs	r2, #50	; 0x32
 800dd86:	fb02 f303 	mul.w	r3, r2, r3
 800dd8a:	333c      	adds	r3, #60	; 0x3c
 800dd8c:	607b      	str	r3, [r7, #4]
		for(int cols = 0; cols < CALIB_COLS; cols++)
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60bb      	str	r3, [r7, #8]
 800dd92:	e048      	b.n	800de26 <draw_menu_calib+0xf6>
		{
			int x = CALIB_XLEFT + CALIB_XSPACE * cols;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	229e      	movs	r2, #158	; 0x9e
 800dd98:	fb02 f303 	mul.w	r3, r2, r3
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	603b      	str	r3, [r7, #0]
			TFT_Rectangle(x, y, x + CALIB_XSPACE-1, y + CALIB_YSPACE-1, WHITE, 1);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	f103 029d 	add.w	r2, r3, #157	; 0x9d
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f103 0131 	add.w	r1, r3, #49	; 0x31
 800ddac:	2301      	movs	r3, #1
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	6879      	ldr	r1, [r7, #4]
 800ddba:	6838      	ldr	r0, [r7, #0]
 800ddbc:	f00a f896 	bl	8017eec <TFT_Rectangle>

			if(line == 0 && cols == 1)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d114      	bne.n	800ddf0 <draw_menu_calib+0xc0>
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d111      	bne.n	800ddf0 <draw_menu_calib+0xc0>
				tft_print(&lucidaConsole_18ptFontInfo, "TX Pwr [W]", x+10, y+12, 0, WHITE , BLACK);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	f103 020a 	add.w	r2, r3, #10
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f103 010c 	add.w	r1, r3, #12
 800ddd8:	2300      	movs	r3, #0
 800ddda:	9302      	str	r3, [sp, #8]
 800dddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	2300      	movs	r3, #0
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	460b      	mov	r3, r1
 800dde8:	492e      	ldr	r1, [pc, #184]	; (800dea4 <draw_menu_calib+0x174>)
 800ddea:	482f      	ldr	r0, [pc, #188]	; (800dea8 <draw_menu_calib+0x178>)
 800ddec:	f010 feda 	bl	801eba4 <tft_print>
			if(line == 0 && cols == 2)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d114      	bne.n	800de20 <draw_menu_calib+0xf0>
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d111      	bne.n	800de20 <draw_menu_calib+0xf0>
				tft_print(&lucidaConsole_18ptFontInfo, "Bridge[mV]", x+10, y+12, 0, WHITE , BLACK);
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	f103 020a 	add.w	r2, r3, #10
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f103 010c 	add.w	r1, r3, #12
 800de08:	2300      	movs	r3, #0
 800de0a:	9302      	str	r3, [sp, #8]
 800de0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de10:	9301      	str	r3, [sp, #4]
 800de12:	2300      	movs	r3, #0
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	460b      	mov	r3, r1
 800de18:	4924      	ldr	r1, [pc, #144]	; (800deac <draw_menu_calib+0x17c>)
 800de1a:	4823      	ldr	r0, [pc, #140]	; (800dea8 <draw_menu_calib+0x178>)
 800de1c:	f010 fec2 	bl	801eba4 <tft_print>
		for(int cols = 0; cols < CALIB_COLS; cols++)
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	3301      	adds	r3, #1
 800de24:	60bb      	str	r3, [r7, #8]
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	ddb3      	ble.n	800dd94 <draw_menu_calib+0x64>
		}
		tft_print(&lucidaConsole_18ptFontInfo, calib_linetext[line], CALIB_XLEFT+17, y+13, 1, WHITE , BLACK);
 800de2c:	4b18      	ldr	r3, [pc, #96]	; (800de90 <draw_menu_calib+0x160>)
 800de2e:	6819      	ldr	r1, [r3, #0]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4613      	mov	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4413      	add	r3, r2
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	4419      	add	r1, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f103 020d 	add.w	r2, r3, #13
 800de42:	2300      	movs	r3, #0
 800de44:	9302      	str	r3, [sp, #8]
 800de46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de4a:	9301      	str	r3, [sp, #4]
 800de4c:	2301      	movs	r3, #1
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	4613      	mov	r3, r2
 800de52:	2212      	movs	r2, #18
 800de54:	4814      	ldr	r0, [pc, #80]	; (800dea8 <draw_menu_calib+0x178>)
 800de56:	f010 fea5 	bl	801eba4 <tft_print>
	for(int line = 0; line < CALIB_LINES; line++)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3301      	adds	r3, #1
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2b06      	cmp	r3, #6
 800de64:	dd8d      	ble.n	800dd82 <draw_menu_calib+0x52>
	}

	TFT_Hor_Line(CALIB_XLEFT, CALIB_XLEFT + CALIB_XSPACE * 3 - 1, CALIB_YTOP + CALIB_YSPACE - 4, WHITE, BLACK, 3,0);
 800de66:	2300      	movs	r3, #0
 800de68:	9302      	str	r3, [sp, #8]
 800de6a:	2303      	movs	r3, #3
 800de6c:	9301      	str	r3, [sp, #4]
 800de6e:	2300      	movs	r3, #0
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de76:	226a      	movs	r2, #106	; 0x6a
 800de78:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800de7c:	2001      	movs	r0, #1
 800de7e:	f009 fd85 	bl	801798c <TFT_Hor_Line>

	draw_calib_buttons();
 800de82:	f000 f8eb 	bl	800e05c <draw_calib_buttons>
}
 800de86:	bf00      	nop
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	20004718 	.word	0x20004718
 800de94:	20000b50 	.word	0x20000b50
 800de98:	20000bf0 	.word	0x20000bf0
 800de9c:	20000b98 	.word	0x20000b98
 800dea0:	20001c88 	.word	0x20001c88
 800dea4:	080248a8 	.word	0x080248a8
 800dea8:	20001c34 	.word	0x20001c34
 800deac:	080248b4 	.word	0x080248b4

0800deb0 <getfValsPtr>:

float *getfValsPtr(float *fp, int y, int x)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]
	if(x == 1)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d129      	bne.n	800df16 <getfValsPtr+0x66>
	{
		if(y == 1) fp = &pcfgdata->ant_W_low;
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d103      	bne.n	800ded0 <getfValsPtr+0x20>
 800dec8:	4b2d      	ldr	r3, [pc, #180]	; (800df80 <getfValsPtr+0xd0>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	3350      	adds	r3, #80	; 0x50
 800dece:	60fb      	str	r3, [r7, #12]
		if(y == 2) fp = &pcfgdata->ant_W_high;
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d103      	bne.n	800dede <getfValsPtr+0x2e>
 800ded6:	4b2a      	ldr	r3, [pc, #168]	; (800df80 <getfValsPtr+0xd0>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3354      	adds	r3, #84	; 0x54
 800dedc:	60fb      	str	r3, [r7, #12]
		if(y == 3) fp = &pcfgdata->flt_W_low;
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	2b03      	cmp	r3, #3
 800dee2:	d103      	bne.n	800deec <getfValsPtr+0x3c>
 800dee4:	4b26      	ldr	r3, [pc, #152]	; (800df80 <getfValsPtr+0xd0>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	3360      	adds	r3, #96	; 0x60
 800deea:	60fb      	str	r3, [r7, #12]
		if(y == 4) fp = &pcfgdata->flt_W_high;
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	2b04      	cmp	r3, #4
 800def0:	d103      	bne.n	800defa <getfValsPtr+0x4a>
 800def2:	4b23      	ldr	r3, [pc, #140]	; (800df80 <getfValsPtr+0xd0>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3364      	adds	r3, #100	; 0x64
 800def8:	60fb      	str	r3, [r7, #12]
		if(y == 5) fp = &pcfgdata->drv_W_low;
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	2b05      	cmp	r3, #5
 800defe:	d103      	bne.n	800df08 <getfValsPtr+0x58>
 800df00:	4b1f      	ldr	r3, [pc, #124]	; (800df80 <getfValsPtr+0xd0>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3370      	adds	r3, #112	; 0x70
 800df06:	60fb      	str	r3, [r7, #12]
		if(y == 6) fp = &pcfgdata->drv_W_high;
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b06      	cmp	r3, #6
 800df0c:	d103      	bne.n	800df16 <getfValsPtr+0x66>
 800df0e:	4b1c      	ldr	r3, [pc, #112]	; (800df80 <getfValsPtr+0xd0>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3374      	adds	r3, #116	; 0x74
 800df14:	60fb      	str	r3, [r7, #12]
	}

	if(x == 2)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d129      	bne.n	800df70 <getfValsPtr+0xc0>
	{
		if(y == 1) fp = &pcfgdata->ant_mV_low;
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d103      	bne.n	800df2a <getfValsPtr+0x7a>
 800df22:	4b17      	ldr	r3, [pc, #92]	; (800df80 <getfValsPtr+0xd0>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	3358      	adds	r3, #88	; 0x58
 800df28:	60fb      	str	r3, [r7, #12]
		if(y == 2) fp = &pcfgdata->ant_mV_high;
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d103      	bne.n	800df38 <getfValsPtr+0x88>
 800df30:	4b13      	ldr	r3, [pc, #76]	; (800df80 <getfValsPtr+0xd0>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	335c      	adds	r3, #92	; 0x5c
 800df36:	60fb      	str	r3, [r7, #12]
		if(y == 3) fp = &pcfgdata->flt_mV_low;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b03      	cmp	r3, #3
 800df3c:	d103      	bne.n	800df46 <getfValsPtr+0x96>
 800df3e:	4b10      	ldr	r3, [pc, #64]	; (800df80 <getfValsPtr+0xd0>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3368      	adds	r3, #104	; 0x68
 800df44:	60fb      	str	r3, [r7, #12]
		if(y == 4) fp = &pcfgdata->flt_mV_high;
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b04      	cmp	r3, #4
 800df4a:	d103      	bne.n	800df54 <getfValsPtr+0xa4>
 800df4c:	4b0c      	ldr	r3, [pc, #48]	; (800df80 <getfValsPtr+0xd0>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	336c      	adds	r3, #108	; 0x6c
 800df52:	60fb      	str	r3, [r7, #12]
		if(y == 5) fp = &pcfgdata->drv_mV_low;
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	2b05      	cmp	r3, #5
 800df58:	d103      	bne.n	800df62 <getfValsPtr+0xb2>
 800df5a:	4b09      	ldr	r3, [pc, #36]	; (800df80 <getfValsPtr+0xd0>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	3378      	adds	r3, #120	; 0x78
 800df60:	60fb      	str	r3, [r7, #12]
		if(y == 6) fp = &pcfgdata->drv_mV_high;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2b06      	cmp	r3, #6
 800df66:	d103      	bne.n	800df70 <getfValsPtr+0xc0>
 800df68:	4b05      	ldr	r3, [pc, #20]	; (800df80 <getfValsPtr+0xd0>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	337c      	adds	r3, #124	; 0x7c
 800df6e:	60fb      	str	r3, [r7, #12]
	}

	return fp;
 800df70:	68fb      	ldr	r3, [r7, #12]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	20000bf0 	.word	0x20000bf0
 800df84:	00000000 	.word	0x00000000

0800df88 <drawCalibVppHelp>:

void drawCalibVppHelp(int line)
{
 800df88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df8a:	b091      	sub	sp, #68	; 0x44
 800df8c:	af04      	add	r7, sp, #16
 800df8e:	6078      	str	r0, [r7, #4]
	float *pval = NULL;
 800df90:	2300      	movs	r3, #0
 800df92:	62fb      	str	r3, [r7, #44]	; 0x2c
	pval = getfValsPtr(pval, line,1);
 800df94:	2201      	movs	r2, #1
 800df96:	6879      	ldr	r1, [r7, #4]
 800df98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df9a:	f7ff ff89 	bl	800deb0 <getfValsPtr>
 800df9e:	62f8      	str	r0, [r7, #44]	; 0x2c
	// val hat den Watt-Wert vom Button
	// rechne in Vpp um
	// Veff = Wurzel(P * R)
	// Vpp = 2 * Veff * Wurzel(2)
	// Vpp = 2 * Wurzel(P * R) * Wurzel(2)
	float vpp = 2.0 * sqrt(*pval * 50.0) * sqrt(2);
 800dfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fa fa07 	bl	80083b8 <__aeabi_f2d>
 800dfaa:	f04f 0200 	mov.w	r2, #0
 800dfae:	4b28      	ldr	r3, [pc, #160]	; (800e050 <drawCalibVppHelp+0xc8>)
 800dfb0:	f7fa fa5a 	bl	8008468 <__aeabi_dmul>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	ec44 3b17 	vmov	d7, r3, r4
 800dfbc:	eeb0 0a47 	vmov.f32	s0, s14
 800dfc0:	eef0 0a67 	vmov.f32	s1, s15
 800dfc4:	f014 fb54 	bl	8022670 <sqrt>
 800dfc8:	ec51 0b10 	vmov	r0, r1, d0
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	f7fa f894 	bl	80080fc <__adddf3>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	4618      	mov	r0, r3
 800dfda:	4621      	mov	r1, r4
 800dfdc:	a31a      	add	r3, pc, #104	; (adr r3, 800e048 <drawCalibVppHelp+0xc0>)
 800dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe2:	f7fa fa41 	bl	8008468 <__aeabi_dmul>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	460c      	mov	r4, r1
 800dfea:	4618      	mov	r0, r3
 800dfec:	4621      	mov	r1, r4
 800dfee:	f7fa fd13 	bl	8008a18 <__aeabi_d2f>
 800dff2:	4603      	mov	r3, r0
 800dff4:	62bb      	str	r3, [r7, #40]	; 0x28
	char s[30];
	sprintf(s,"%6.1fW -> %6.1fVpp",*pval,vpp);
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fa f9dc 	bl	80083b8 <__aeabi_f2d>
 800e000:	4605      	mov	r5, r0
 800e002:	460e      	mov	r6, r1
 800e004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e006:	f7fa f9d7 	bl	80083b8 <__aeabi_f2d>
 800e00a:	4603      	mov	r3, r0
 800e00c:	460c      	mov	r4, r1
 800e00e:	f107 0008 	add.w	r0, r7, #8
 800e012:	e9cd 3400 	strd	r3, r4, [sp]
 800e016:	462a      	mov	r2, r5
 800e018:	4633      	mov	r3, r6
 800e01a:	490e      	ldr	r1, [pc, #56]	; (800e054 <drawCalibVppHelp+0xcc>)
 800e01c:	f011 f90c 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_12ptFontInfo, s, 490, 65, 1, WHITE , BLACK);
 800e020:	f107 0108 	add.w	r1, r7, #8
 800e024:	2300      	movs	r3, #0
 800e026:	9302      	str	r3, [sp, #8]
 800e028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e02c:	9301      	str	r3, [sp, #4]
 800e02e:	2301      	movs	r3, #1
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	2341      	movs	r3, #65	; 0x41
 800e034:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 800e038:	4807      	ldr	r0, [pc, #28]	; (800e058 <drawCalibVppHelp+0xd0>)
 800e03a:	f010 fdb3 	bl	801eba4 <tft_print>
}
 800e03e:	bf00      	nop
 800e040:	3734      	adds	r7, #52	; 0x34
 800e042:	46bd      	mov	sp, r7
 800e044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e046:	bf00      	nop
 800e048:	667f3bcd 	.word	0x667f3bcd
 800e04c:	3ff6a09e 	.word	0x3ff6a09e
 800e050:	40490000 	.word	0x40490000
 800e054:	080248c0 	.word	0x080248c0
 800e058:	20001c1c 	.word	0x20001c1c

0800e05c <draw_calib_buttons>:

void draw_calib_buttons()
{
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b091      	sub	sp, #68	; 0x44
 800e060:	af04      	add	r7, sp, #16
char s[20];
int fcolor,bcolor;

	for(int line = 1; line < CALIB_LINES; line++)
 800e062:	2301      	movs	r3, #1
 800e064:	627b      	str	r3, [r7, #36]	; 0x24
 800e066:	e069      	b.n	800e13c <draw_calib_buttons+0xe0>
	{
		int y = CALIB_YTOP + CALIB_YSPACE * line;
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	2232      	movs	r2, #50	; 0x32
 800e06c:	fb02 f303 	mul.w	r3, r2, r3
 800e070:	333c      	adds	r3, #60	; 0x3c
 800e072:	61fb      	str	r3, [r7, #28]
		for(int cols = 1; cols < CALIB_COLS; cols++)
 800e074:	2301      	movs	r3, #1
 800e076:	623b      	str	r3, [r7, #32]
 800e078:	e05a      	b.n	800e130 <draw_calib_buttons+0xd4>
		{
			int x = CALIB_XLEFT + CALIB_XSPACE * cols;
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	229e      	movs	r2, #158	; 0x9e
 800e07e:	fb02 f303 	mul.w	r3, r2, r3
 800e082:	3301      	adds	r3, #1
 800e084:	61bb      	str	r3, [r7, #24]
			fcolor = WHITE; bcolor = BLUE;
 800e086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e08a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e08c:	231f      	movs	r3, #31
 800e08e:	62bb      	str	r3, [r7, #40]	; 0x28
			if(line == selline && cols == selcol)
 800e090:	4b2e      	ldr	r3, [pc, #184]	; (800e14c <draw_calib_buttons+0xf0>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e096:	429a      	cmp	r2, r3
 800e098:	d10e      	bne.n	800e0b8 <draw_calib_buttons+0x5c>
 800e09a:	4b2d      	ldr	r3, [pc, #180]	; (800e150 <draw_calib_buttons+0xf4>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	6a3a      	ldr	r2, [r7, #32]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d109      	bne.n	800e0b8 <draw_calib_buttons+0x5c>
			{
				// aktuell selektierte Zeile/Spalte
				fcolor = BLACK;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
				bcolor = YELLOW;
 800e0a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800e0ac:	62bb      	str	r3, [r7, #40]	; 0x28
				drawCalibVppHelp(line);
 800e0ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0b0:	f7ff ff6a 	bl	800df88 <drawCalibVppHelp>
				draw_buttons_calib();
 800e0b4:	f7ff fd92 	bl	800dbdc <draw_buttons_calib>
			}
			TFT_Fill_Rectangle(x+2, y+2, x + CALIB_XSPACE-3, y + CALIB_YSPACE-3, bcolor);
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	1c98      	adds	r0, r3, #2
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	1c99      	adds	r1, r3, #2
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	f103 029b 	add.w	r2, r3, #155	; 0x9b
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	4623      	mov	r3, r4
 800e0d2:	f009 fbb1 	bl	8017838 <TFT_Fill_Rectangle>
			float *val = NULL;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	617b      	str	r3, [r7, #20]
			val = getfValsPtr(val, line,cols);
 800e0da:	6a3a      	ldr	r2, [r7, #32]
 800e0dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0de:	6978      	ldr	r0, [r7, #20]
 800e0e0:	f7ff fee6 	bl	800deb0 <getfValsPtr>
 800e0e4:	6178      	str	r0, [r7, #20]
			if(val != NULL)
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d01e      	beq.n	800e12a <draw_calib_buttons+0xce>
			{
				sprintf(s,"%.0f",*val);
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7fa f961 	bl	80083b8 <__aeabi_f2d>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	4638      	mov	r0, r7
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	4623      	mov	r3, r4
 800e100:	4914      	ldr	r1, [pc, #80]	; (800e154 <draw_calib_buttons+0xf8>)
 800e102:	f011 f899 	bl	801f238 <sprintf>
				tft_print(&lucidaConsole_22ptFontInfo, s, x+37, y+12, 3, fcolor , bcolor);
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	f103 040c 	add.w	r4, r3, #12
 800e112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e116:	4639      	mov	r1, r7
 800e118:	9202      	str	r2, [sp, #8]
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	2303      	movs	r3, #3
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	4623      	mov	r3, r4
 800e122:	4602      	mov	r2, r0
 800e124:	480c      	ldr	r0, [pc, #48]	; (800e158 <draw_calib_buttons+0xfc>)
 800e126:	f010 fd3d 	bl	801eba4 <tft_print>
		for(int cols = 1; cols < CALIB_COLS; cols++)
 800e12a:	6a3b      	ldr	r3, [r7, #32]
 800e12c:	3301      	adds	r3, #1
 800e12e:	623b      	str	r3, [r7, #32]
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	2b02      	cmp	r3, #2
 800e134:	dda1      	ble.n	800e07a <draw_calib_buttons+0x1e>
	for(int line = 1; line < CALIB_LINES; line++)
 800e136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e138:	3301      	adds	r3, #1
 800e13a:	627b      	str	r3, [r7, #36]	; 0x24
 800e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13e:	2b06      	cmp	r3, #6
 800e140:	dd92      	ble.n	800e068 <draw_calib_buttons+0xc>
			}
		}
	}
}
 800e142:	bf00      	nop
 800e144:	3734      	adds	r7, #52	; 0x34
 800e146:	46bd      	mov	sp, r7
 800e148:	bd90      	pop	{r4, r7, pc}
 800e14a:	bf00      	nop
 800e14c:	20000b48 	.word	0x20000b48
 800e150:	20000b4c 	.word	0x20000b4c
 800e154:	080248d4 	.word	0x080248d4
 800e158:	20001c40 	.word	0x20001c40

0800e15c <calib_touch>:

// Bearbeitung eines Touches ins Grid
void calib_touch(int x, int y)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b088      	sub	sp, #32
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
	// suche Feld
	for(int line = 1; line < CALIB_LINES; line++)
 800e166:	2301      	movs	r3, #1
 800e168:	61fb      	str	r3, [r7, #28]
 800e16a:	e031      	b.n	800e1d0 <calib_touch+0x74>
	{
		int ys = CALIB_YTOP + CALIB_YSPACE * line;
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	2232      	movs	r2, #50	; 0x32
 800e170:	fb02 f303 	mul.w	r3, r2, r3
 800e174:	333c      	adds	r3, #60	; 0x3c
 800e176:	617b      	str	r3, [r7, #20]
		int ye = ys + CALIB_YSPACE;
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	3332      	adds	r3, #50	; 0x32
 800e17c:	613b      	str	r3, [r7, #16]
		for(int cols = 1; cols < CALIB_COLS; cols++)
 800e17e:	2301      	movs	r3, #1
 800e180:	61bb      	str	r3, [r7, #24]
 800e182:	e01f      	b.n	800e1c4 <calib_touch+0x68>
		{
			int xs = CALIB_XLEFT + CALIB_XSPACE * cols;
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	229e      	movs	r2, #158	; 0x9e
 800e188:	fb02 f303 	mul.w	r3, r2, r3
 800e18c:	3301      	adds	r3, #1
 800e18e:	60fb      	str	r3, [r7, #12]
			int xe = xs + CALIB_XSPACE;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	339e      	adds	r3, #158	; 0x9e
 800e194:	60bb      	str	r3, [r7, #8]

			if(x>xs && x<xe && y>ys && y<ye)
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	dd0f      	ble.n	800e1be <calib_touch+0x62>
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	da0b      	bge.n	800e1be <calib_touch+0x62>
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	dd07      	ble.n	800e1be <calib_touch+0x62>
 800e1ae:	683a      	ldr	r2, [r7, #0]
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	da03      	bge.n	800e1be <calib_touch+0x62>
			{
				// gefunden
				select_gridfield(line,cols);
 800e1b6:	69b9      	ldr	r1, [r7, #24]
 800e1b8:	69f8      	ldr	r0, [r7, #28]
 800e1ba:	f000 f811 	bl	800e1e0 <select_gridfield>
		for(int cols = 1; cols < CALIB_COLS; cols++)
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	61bb      	str	r3, [r7, #24]
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	2b02      	cmp	r3, #2
 800e1c8:	dddc      	ble.n	800e184 <calib_touch+0x28>
	for(int line = 1; line < CALIB_LINES; line++)
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	61fb      	str	r3, [r7, #28]
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	2b06      	cmp	r3, #6
 800e1d4:	ddca      	ble.n	800e16c <calib_touch+0x10>
			}
		}
	}
}
 800e1d6:	bf00      	nop
 800e1d8:	3720      	adds	r7, #32
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <select_gridfield>:

void select_gridfield(int line, int cols)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
	selline = line;
 800e1ea:	4a06      	ldr	r2, [pc, #24]	; (800e204 <select_gridfield+0x24>)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6013      	str	r3, [r2, #0]
	selcol = cols;
 800e1f0:	4a05      	ldr	r2, [pc, #20]	; (800e208 <select_gridfield+0x28>)
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	6013      	str	r3, [r2, #0]

	draw_calib_buttons();
 800e1f6:	f7ff ff31 	bl	800e05c <draw_calib_buttons>
}
 800e1fa:	bf00      	nop
 800e1fc:	3708      	adds	r7, #8
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	20000b48 	.word	0x20000b48
 800e208:	20000b4c 	.word	0x20000b4c

0800e20c <do_button_calib>:

int do_button_calib(int touchbutton)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	if(touchbutton < TB_P1000) return 0;	// diese Buttons interessieren uns hier nicht
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b0f      	cmp	r3, #15
 800e218:	dc01      	bgt.n	800e21e <do_button_calib+0x12>
 800e21a:	2300      	movs	r3, #0
 800e21c:	e056      	b.n	800e2cc <do_button_calib+0xc0>

	tb_buttons[touchbutton].pressed = 1;
 800e21e:	492d      	ldr	r1, [pc, #180]	; (800e2d4 <do_button_calib+0xc8>)
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	4613      	mov	r3, r2
 800e224:	005b      	lsls	r3, r3, #1
 800e226:	4413      	add	r3, r2
 800e228:	015b      	lsls	r3, r3, #5
 800e22a:	440b      	add	r3, r1
 800e22c:	335c      	adds	r3, #92	; 0x5c
 800e22e:	2201      	movs	r2, #1
 800e230:	701a      	strb	r2, [r3, #0]

	if(touchbutton == TB_GETVAL)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2b18      	cmp	r3, #24
 800e236:	d105      	bne.n	800e244 <do_button_calib+0x38>
	{
		draw_touchbutton(&tb_buttons[TB_GETVAL]);
 800e238:	4827      	ldr	r0, [pc, #156]	; (800e2d8 <do_button_calib+0xcc>)
 800e23a:	f00b fee7 	bl	801a00c <draw_touchbutton>
		calib_readvalue();
 800e23e:	f000 f8db 	bl	800e3f8 <calib_readvalue>
 800e242:	e042      	b.n	800e2ca <do_button_calib+0xbe>
	}
	else
	{
		if(selcol == 1)
 800e244:	4b25      	ldr	r3, [pc, #148]	; (800e2dc <do_button_calib+0xd0>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d13e      	bne.n	800e2ca <do_button_calib+0xbe>
		{
			if(touchbutton >= TB_P1000 && touchbutton <= TB_M1)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b0f      	cmp	r3, #15
 800e250:	dd3b      	ble.n	800e2ca <do_button_calib+0xbe>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b17      	cmp	r3, #23
 800e256:	dc38      	bgt.n	800e2ca <do_button_calib+0xbe>
			{
				for(int i=TB_P1000; i<=TB_M1; i++)
 800e258:	2310      	movs	r3, #16
 800e25a:	60fb      	str	r3, [r7, #12]
 800e25c:	e032      	b.n	800e2c4 <do_button_calib+0xb8>
				{
					if(i != touchbutton)
 800e25e:	68fa      	ldr	r2, [r7, #12]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	429a      	cmp	r2, r3
 800e264:	d014      	beq.n	800e290 <do_button_calib+0x84>
					{
						tb_buttons[i].pressed = 0;
 800e266:	491b      	ldr	r1, [pc, #108]	; (800e2d4 <do_button_calib+0xc8>)
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	4613      	mov	r3, r2
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	4413      	add	r3, r2
 800e270:	015b      	lsls	r3, r3, #5
 800e272:	440b      	add	r3, r1
 800e274:	335c      	adds	r3, #92	; 0x5c
 800e276:	2200      	movs	r2, #0
 800e278:	701a      	strb	r2, [r3, #0]
						draw_touchbutton(&tb_buttons[i]);
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	4613      	mov	r3, r2
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	4413      	add	r3, r2
 800e282:	015b      	lsls	r3, r3, #5
 800e284:	4a13      	ldr	r2, [pc, #76]	; (800e2d4 <do_button_calib+0xc8>)
 800e286:	4413      	add	r3, r2
 800e288:	4618      	mov	r0, r3
 800e28a:	f00b febf 	bl	801a00c <draw_touchbutton>
 800e28e:	e016      	b.n	800e2be <do_button_calib+0xb2>
					}
					else
					{
						tb_buttons[i].pressed = 1;
 800e290:	4910      	ldr	r1, [pc, #64]	; (800e2d4 <do_button_calib+0xc8>)
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	4613      	mov	r3, r2
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	4413      	add	r3, r2
 800e29a:	015b      	lsls	r3, r3, #5
 800e29c:	440b      	add	r3, r1
 800e29e:	335c      	adds	r3, #92	; 0x5c
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	701a      	strb	r2, [r3, #0]
						draw_touchbutton(&tb_buttons[i]);
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	4413      	add	r3, r2
 800e2ac:	015b      	lsls	r3, r3, #5
 800e2ae:	4a09      	ldr	r2, [pc, #36]	; (800e2d4 <do_button_calib+0xc8>)
 800e2b0:	4413      	add	r3, r2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f00b feaa 	bl	801a00c <draw_touchbutton>
						calib_changevalue(i);
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f000 f811 	bl	800e2e0 <calib_changevalue>
				for(int i=TB_P1000; i<=TB_M1; i++)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	60fb      	str	r3, [r7, #12]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b17      	cmp	r3, #23
 800e2c8:	ddc9      	ble.n	800e25e <do_button_calib+0x52>
				}
			}
		}
	}

	return 1;
 800e2ca:	2301      	movs	r3, #1
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	20007078 	.word	0x20007078
 800e2d8:	20007978 	.word	0x20007978
 800e2dc:	20000b4c 	.word	0x20000b4c

0800e2e0 <calib_changevalue>:

void calib_changevalue(int touchbutton)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
float *fp = NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	60bb      	str	r3, [r7, #8]
int ival;

	fp = getfValsPtr(fp, selline,selcol);
 800e2ec:	4b3f      	ldr	r3, [pc, #252]	; (800e3ec <calib_changevalue+0x10c>)
 800e2ee:	6819      	ldr	r1, [r3, #0]
 800e2f0:	4b3f      	ldr	r3, [pc, #252]	; (800e3f0 <calib_changevalue+0x110>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	68b8      	ldr	r0, [r7, #8]
 800e2f8:	f7ff fdda 	bl	800deb0 <getfValsPtr>
 800e2fc:	60b8      	str	r0, [r7, #8]

	ival = (int)(*fp);
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	edd3 7a00 	vldr	s15, [r3]
 800e304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e308:	ee17 3a90 	vmov	r3, s15
 800e30c:	60fb      	str	r3, [r7, #12]

	if(touchbutton >= TB_P1 && touchbutton <= TB_M1000)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b12      	cmp	r3, #18
 800e312:	dd05      	ble.n	800e320 <calib_changevalue+0x40>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b14      	cmp	r3, #20
 800e318:	dc02      	bgt.n	800e320 <calib_changevalue+0x40>
		setup_modified = 1;
 800e31a:	4b36      	ldr	r3, [pc, #216]	; (800e3f4 <calib_changevalue+0x114>)
 800e31c:	2201      	movs	r2, #1
 800e31e:	601a      	str	r2, [r3, #0]

	// stelle den Wert ein
	if(touchbutton == TB_P1) ival++;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b13      	cmp	r3, #19
 800e324:	d102      	bne.n	800e32c <calib_changevalue+0x4c>
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	3301      	adds	r3, #1
 800e32a:	60fb      	str	r3, [r7, #12]
	if(touchbutton == TB_P10) ival += 10;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b12      	cmp	r3, #18
 800e330:	d102      	bne.n	800e338 <calib_changevalue+0x58>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	330a      	adds	r3, #10
 800e336:	60fb      	str	r3, [r7, #12]
	if(touchbutton == TB_P100) ival += 100;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b11      	cmp	r3, #17
 800e33c:	d102      	bne.n	800e344 <calib_changevalue+0x64>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	3364      	adds	r3, #100	; 0x64
 800e342:	60fb      	str	r3, [r7, #12]
	if(touchbutton == TB_P1000) ival += 1000;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b10      	cmp	r3, #16
 800e348:	d103      	bne.n	800e352 <calib_changevalue+0x72>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e350:	60fb      	str	r3, [r7, #12]

	if(touchbutton == TB_M1) ival--;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b17      	cmp	r3, #23
 800e356:	d102      	bne.n	800e35e <calib_changevalue+0x7e>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	3b01      	subs	r3, #1
 800e35c:	60fb      	str	r3, [r7, #12]
	if(touchbutton == TB_M10) ival -= 10;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2b16      	cmp	r3, #22
 800e362:	d102      	bne.n	800e36a <calib_changevalue+0x8a>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	3b0a      	subs	r3, #10
 800e368:	60fb      	str	r3, [r7, #12]
	if(touchbutton == TB_M100) ival -= 100;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2b15      	cmp	r3, #21
 800e36e:	d102      	bne.n	800e376 <calib_changevalue+0x96>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3b64      	subs	r3, #100	; 0x64
 800e374:	60fb      	str	r3, [r7, #12]
	if(touchbutton == TB_M1000) ival -= 1000;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b14      	cmp	r3, #20
 800e37a:	d103      	bne.n	800e384 <calib_changevalue+0xa4>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e382:	60fb      	str	r3, [r7, #12]

	// Begrenze auf max/min Werte
	if(selcol == 1)
 800e384:	4b1a      	ldr	r3, [pc, #104]	; (800e3f0 <calib_changevalue+0x110>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d10c      	bne.n	800e3a6 <calib_changevalue+0xc6>
	{
		if(ival < 1) ival = 1;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dc01      	bgt.n	800e396 <calib_changevalue+0xb6>
 800e392:	2301      	movs	r3, #1
 800e394:	60fb      	str	r3, [r7, #12]
		if(ival > 10000) ival = 10000;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f242 7210 	movw	r2, #10000	; 0x2710
 800e39c:	4293      	cmp	r3, r2
 800e39e:	dd02      	ble.n	800e3a6 <calib_changevalue+0xc6>
 800e3a0:	f242 7310 	movw	r3, #10000	; 0x2710
 800e3a4:	60fb      	str	r3, [r7, #12]
	}

	if(selcol == 2)
 800e3a6:	4b12      	ldr	r3, [pc, #72]	; (800e3f0 <calib_changevalue+0x110>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d10c      	bne.n	800e3c8 <calib_changevalue+0xe8>
	{
		if(ival < 1) ival = 1;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	dc01      	bgt.n	800e3b8 <calib_changevalue+0xd8>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	60fb      	str	r3, [r7, #12]
		if(ival > 2499) ival = 2499;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	dd02      	ble.n	800e3c8 <calib_changevalue+0xe8>
 800e3c2:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800e3c6:	60fb      	str	r3, [r7, #12]
	}

	*fp = (float)ival;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	ee07 3a90 	vmov	s15, r3
 800e3ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	edc3 7a00 	vstr	s15, [r3]

	draw_calib_buttons();
 800e3d8:	f7ff fe40 	bl	800e05c <draw_calib_buttons>
	setup_modified = 1;
 800e3dc:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <calib_changevalue+0x114>)
 800e3de:	2201      	movs	r2, #1
 800e3e0:	601a      	str	r2, [r3, #0]
}
 800e3e2:	bf00      	nop
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	20000b48 	.word	0x20000b48
 800e3f0:	20000b4c 	.word	0x20000b4c
 800e3f4:	2000277c 	.word	0x2000277c

0800e3f8 <calib_readvalue>:

// füge ADCvalue direkt ein
void calib_readvalue()
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
float *fp = NULL;
 800e3fe:	2300      	movs	r3, #0
 800e400:	607b      	str	r3, [r7, #4]

	// Pointer auf den Messwert der selektierten Zeile
	fp = getfValsPtr(fp, selline,2);
 800e402:	4b31      	ldr	r3, [pc, #196]	; (800e4c8 <calib_readvalue+0xd0>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2202      	movs	r2, #2
 800e408:	4619      	mov	r1, r3
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7ff fd50 	bl	800deb0 <getfValsPtr>
 800e410:	6078      	str	r0, [r7, #4]

	switch (selline)
 800e412:	4b2d      	ldr	r3, [pc, #180]	; (800e4c8 <calib_readvalue+0xd0>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	3b01      	subs	r3, #1
 800e418:	2b05      	cmp	r3, #5
 800e41a:	d84b      	bhi.n	800e4b4 <calib_readvalue+0xbc>
 800e41c:	a201      	add	r2, pc, #4	; (adr r2, 800e424 <calib_readvalue+0x2c>)
 800e41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e422:	bf00      	nop
 800e424:	0800e43d 	.word	0x0800e43d
 800e428:	0800e451 	.word	0x0800e451
 800e42c:	0800e465 	.word	0x0800e465
 800e430:	0800e479 	.word	0x0800e479
 800e434:	0800e48d 	.word	0x0800e48d
 800e438:	0800e4a1 	.word	0x0800e4a1
	{
	case 1: *fp = adc_rawvals[UFWDANT]; break;
 800e43c:	4b23      	ldr	r3, [pc, #140]	; (800e4cc <calib_readvalue+0xd4>)
 800e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e440:	ee07 3a90 	vmov	s15, r3
 800e444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	edc3 7a00 	vstr	s15, [r3]
 800e44e:	e031      	b.n	800e4b4 <calib_readvalue+0xbc>
	case 2: *fp = adc_rawvals[UFWDANT]; break;
 800e450:	4b1e      	ldr	r3, [pc, #120]	; (800e4cc <calib_readvalue+0xd4>)
 800e452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e454:	ee07 3a90 	vmov	s15, r3
 800e458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	edc3 7a00 	vstr	s15, [r3]
 800e462:	e027      	b.n	800e4b4 <calib_readvalue+0xbc>
	case 3: *fp = adc_rawvals[UFWDFLT]; break;
 800e464:	4b19      	ldr	r3, [pc, #100]	; (800e4cc <calib_readvalue+0xd4>)
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	ee07 3a90 	vmov	s15, r3
 800e46c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	edc3 7a00 	vstr	s15, [r3]
 800e476:	e01d      	b.n	800e4b4 <calib_readvalue+0xbc>
	case 4: *fp = adc_rawvals[UFWDFLT]; break;
 800e478:	4b14      	ldr	r3, [pc, #80]	; (800e4cc <calib_readvalue+0xd4>)
 800e47a:	699b      	ldr	r3, [r3, #24]
 800e47c:	ee07 3a90 	vmov	s15, r3
 800e480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	edc3 7a00 	vstr	s15, [r3]
 800e48a:	e013      	b.n	800e4b4 <calib_readvalue+0xbc>
	case 5: *fp = adc_rawvals[UFWDIN]; break;
 800e48c:	4b0f      	ldr	r3, [pc, #60]	; (800e4cc <calib_readvalue+0xd4>)
 800e48e:	695b      	ldr	r3, [r3, #20]
 800e490:	ee07 3a90 	vmov	s15, r3
 800e494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	edc3 7a00 	vstr	s15, [r3]
 800e49e:	e009      	b.n	800e4b4 <calib_readvalue+0xbc>
	case 6: *fp = adc_rawvals[UFWDIN]; break;
 800e4a0:	4b0a      	ldr	r3, [pc, #40]	; (800e4cc <calib_readvalue+0xd4>)
 800e4a2:	695b      	ldr	r3, [r3, #20]
 800e4a4:	ee07 3a90 	vmov	s15, r3
 800e4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	edc3 7a00 	vstr	s15, [r3]
 800e4b2:	bf00      	nop
	}

	draw_calib_buttons();
 800e4b4:	f7ff fdd2 	bl	800e05c <draw_calib_buttons>
	setup_modified = 1;
 800e4b8:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <calib_readvalue+0xd8>)
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	601a      	str	r2, [r3, #0]
}
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20000b48 	.word	0x20000b48
 800e4cc:	20003108 	.word	0x20003108
 800e4d0:	2000277c 	.word	0x2000277c

0800e4d4 <checkmV>:

// prüfe ob sinnvolle Werte drin stehen
void checkmV(float *low, float *high)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
	if(*low >= *high)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	ed93 7a00 	vldr	s14, [r3]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	edd3 7a00 	vldr	s15, [r3]
 800e4ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f2:	da00      	bge.n	800e4f6 <checkmV+0x22>
	{
		*low = 1500;
		*high = 2500;
	}
}
 800e4f4:	e005      	b.n	800e502 <checkmV+0x2e>
		*low = 1500;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4a05      	ldr	r2, [pc, #20]	; (800e510 <checkmV+0x3c>)
 800e4fa:	601a      	str	r2, [r3, #0]
		*high = 2500;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	4a05      	ldr	r2, [pc, #20]	; (800e514 <checkmV+0x40>)
 800e500:	601a      	str	r2, [r3, #0]
}
 800e502:	bf00      	nop
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	44bb8000 	.word	0x44bb8000
 800e514:	451c4000 	.word	0x451c4000

0800e518 <calibvalsOK>:

uint8_t calibvalsOK()
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	af00      	add	r7, sp, #0
	if(pcfgdata->ant_W_low >= pcfgdata->ant_W_high) return 0;
 800e51c:	4b28      	ldr	r3, [pc, #160]	; (800e5c0 <calibvalsOK+0xa8>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800e524:	4b26      	ldr	r3, [pc, #152]	; (800e5c0 <calibvalsOK+0xa8>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e52c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	db01      	blt.n	800e53a <calibvalsOK+0x22>
 800e536:	2300      	movs	r3, #0
 800e538:	e03f      	b.n	800e5ba <calibvalsOK+0xa2>
	if(pcfgdata->flt_W_low >= pcfgdata->flt_W_high) return 0;
 800e53a:	4b21      	ldr	r3, [pc, #132]	; (800e5c0 <calibvalsOK+0xa8>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800e542:	4b1f      	ldr	r3, [pc, #124]	; (800e5c0 <calibvalsOK+0xa8>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e54a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e552:	db01      	blt.n	800e558 <calibvalsOK+0x40>
 800e554:	2300      	movs	r3, #0
 800e556:	e030      	b.n	800e5ba <calibvalsOK+0xa2>
	if(pcfgdata->drv_W_low >= pcfgdata->drv_W_high) return 0;
 800e558:	4b19      	ldr	r3, [pc, #100]	; (800e5c0 <calibvalsOK+0xa8>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800e560:	4b17      	ldr	r3, [pc, #92]	; (800e5c0 <calibvalsOK+0xa8>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800e568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e570:	db01      	blt.n	800e576 <calibvalsOK+0x5e>
 800e572:	2300      	movs	r3, #0
 800e574:	e021      	b.n	800e5ba <calibvalsOK+0xa2>

	checkmV(&pcfgdata->ant_mV_low,&pcfgdata->ant_mV_high);
 800e576:	4b12      	ldr	r3, [pc, #72]	; (800e5c0 <calibvalsOK+0xa8>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800e57e:	4b10      	ldr	r3, [pc, #64]	; (800e5c0 <calibvalsOK+0xa8>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	335c      	adds	r3, #92	; 0x5c
 800e584:	4619      	mov	r1, r3
 800e586:	4610      	mov	r0, r2
 800e588:	f7ff ffa4 	bl	800e4d4 <checkmV>
	checkmV(&pcfgdata->flt_mV_low,&pcfgdata->flt_mV_high);
 800e58c:	4b0c      	ldr	r3, [pc, #48]	; (800e5c0 <calibvalsOK+0xa8>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e594:	4b0a      	ldr	r3, [pc, #40]	; (800e5c0 <calibvalsOK+0xa8>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	336c      	adds	r3, #108	; 0x6c
 800e59a:	4619      	mov	r1, r3
 800e59c:	4610      	mov	r0, r2
 800e59e:	f7ff ff99 	bl	800e4d4 <checkmV>
	checkmV(&pcfgdata->drv_mV_low,&pcfgdata->drv_mV_high);
 800e5a2:	4b07      	ldr	r3, [pc, #28]	; (800e5c0 <calibvalsOK+0xa8>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800e5aa:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <calibvalsOK+0xa8>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	337c      	adds	r3, #124	; 0x7c
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	f7ff ff8e 	bl	800e4d4 <checkmV>

	return 1;
 800e5b8:	2301      	movs	r3, #1
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20000bf0 	.word	0x20000bf0

0800e5c4 <control>:
uint8_t old_pttstat = 255;
uint32_t uptime_ref1 = 0;
uint32_t uptime_ref2 = 0;

void control()
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
	if(state == STATE_EMERGENCYOFF)
 800e5ca:	4b8a      	ldr	r3, [pc, #552]	; (800e7f4 <control+0x230>)
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d10a      	bne.n	800e5e8 <control+0x24>
	{
		// im Notstatus regagieren wir nur auf die ON Taste (in menu.c)
		// sobald diese gedrückt wird, geht der Status auf Standby
		uptime_ref1 = 0;
 800e5d2:	4b89      	ldr	r3, [pc, #548]	; (800e7f8 <control+0x234>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	601a      	str	r2, [r3, #0]
		uptime_ref2 = 0;
 800e5d8:	4b88      	ldr	r3, [pc, #544]	; (800e7fc <control+0x238>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	601a      	str	r2, [r3, #0]
		oldstate = state;
 800e5de:	4b85      	ldr	r3, [pc, #532]	; (800e7f4 <control+0x230>)
 800e5e0:	781a      	ldrb	r2, [r3, #0]
 800e5e2:	4b87      	ldr	r3, [pc, #540]	; (800e800 <control+0x23c>)
 800e5e4:	701a      	strb	r2, [r3, #0]
		return;
 800e5e6:	e22f      	b.n	800ea48 <control+0x484>
	}

	if(oldstate == STATE_POWERUP && state == STATE_POWERUP)
 800e5e8:	4b85      	ldr	r3, [pc, #532]	; (800e800 <control+0x23c>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d122      	bne.n	800e636 <control+0x72>
 800e5f0:	4b80      	ldr	r3, [pc, #512]	; (800e7f4 <control+0x230>)
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d11e      	bne.n	800e636 <control+0x72>
		// Gerät wurde eingeschaltet,
		// oder ist in Notaus gegangen
		// alles soll deaktiviert sein
		// es wird der Splashscreen und der ON Button dargestellt

		uptime_ref1 = 0;
 800e5f8:	4b7f      	ldr	r3, [pc, #508]	; (800e7f8 <control+0x234>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	601a      	str	r2, [r3, #0]
		uptime_ref2 = 0;
 800e5fe:	4b7f      	ldr	r3, [pc, #508]	; (800e7fc <control+0x238>)
 800e600:	2200      	movs	r2, #0
 800e602:	601a      	str	r2, [r3, #0]

		for(int i=ANTSEL1; i<MAXGPIOS; i++)
 800e604:	230e      	movs	r3, #14
 800e606:	607b      	str	r3, [r7, #4]
 800e608:	e007      	b.n	800e61a <control+0x56>
			gpio_stat[i] = 0;
 800e60a:	4a7e      	ldr	r2, [pc, #504]	; (800e804 <control+0x240>)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4413      	add	r3, r2
 800e610:	2200      	movs	r2, #0
 800e612:	701a      	strb	r2, [r3, #0]
		for(int i=ANTSEL1; i<MAXGPIOS; i++)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	3301      	adds	r3, #1
 800e618:	607b      	str	r3, [r7, #4]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b1a      	cmp	r3, #26
 800e61e:	ddf4      	ble.n	800e60a <control+0x46>

		// LCD Beleuchtung einschalten
		gpio_stat[LCD_BACKLIGHT_ONOFF] = 1;
 800e620:	4b78      	ldr	r3, [pc, #480]	; (800e804 <control+0x240>)
 800e622:	2201      	movs	r2, #1
 800e624:	735a      	strb	r2, [r3, #13]

		// PA-DC Versorgung abgeschaltet, Bias aus, PTTout aus
		gpio_stat[PWRREL_OFF] = 1;
 800e626:	4b77      	ldr	r3, [pc, #476]	; (800e804 <control+0x240>)
 800e628:	2201      	movs	r2, #1
 800e62a:	741a      	strb	r2, [r3, #16]

		oldstate = state;
 800e62c:	4b71      	ldr	r3, [pc, #452]	; (800e7f4 <control+0x230>)
 800e62e:	781a      	ldrb	r2, [r3, #0]
 800e630:	4b73      	ldr	r3, [pc, #460]	; (800e800 <control+0x23c>)
 800e632:	701a      	strb	r2, [r3, #0]
		return;
 800e634:	e208      	b.n	800ea48 <control+0x484>
	}

	if((oldstate == STATE_POWERUP || oldstate == STATE_EMERGENCYOFF) && state == STATE_STANDBY)
 800e636:	4b72      	ldr	r3, [pc, #456]	; (800e800 <control+0x23c>)
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d003      	beq.n	800e646 <control+0x82>
 800e63e:	4b70      	ldr	r3, [pc, #448]	; (800e800 <control+0x23c>)
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	2b03      	cmp	r3, #3
 800e644:	d10f      	bne.n	800e666 <control+0xa2>
 800e646:	4b6b      	ldr	r3, [pc, #428]	; (800e7f4 <control+0x230>)
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d10b      	bne.n	800e666 <control+0xa2>
	{
		// ON Button wurde gedrückt: wir sind jetzt in Standby
		// Schalte das DC Netzteil auf die PA
		// Schalte Bänder und Antenne
		// PTT und BIAS bleibt aus
		gpio_stat[PWRREL_ON] = 1;	// Schalte ON Relais ein, bei "Aktiv" wird es wieder abgeschaltet
 800e64e:	4b6d      	ldr	r3, [pc, #436]	; (800e804 <control+0x240>)
 800e650:	2201      	movs	r2, #1
 800e652:	745a      	strb	r2, [r3, #17]

		gpio_stat[PWRREL_OFF] = 0;
 800e654:	4b6b      	ldr	r3, [pc, #428]	; (800e804 <control+0x240>)
 800e656:	2200      	movs	r2, #0
 800e658:	741a      	strb	r2, [r3, #16]
		gpio_stat[BIAS_ONOFF] = 0;
 800e65a:	4b6a      	ldr	r3, [pc, #424]	; (800e804 <control+0x240>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	74da      	strb	r2, [r3, #19]
		gpio_stat[PTTOUT] = 0;
 800e660:	4b68      	ldr	r3, [pc, #416]	; (800e804 <control+0x240>)
 800e662:	2200      	movs	r2, #0
 800e664:	751a      	strb	r2, [r3, #20]
	}

	if(oldstate == STATE_ACTIVE && state == STATE_STANDBY)
 800e666:	4b66      	ldr	r3, [pc, #408]	; (800e800 <control+0x23c>)
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d109      	bne.n	800e682 <control+0xbe>
 800e66e:	4b61      	ldr	r3, [pc, #388]	; (800e7f4 <control+0x230>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d105      	bne.n	800e682 <control+0xbe>
	{
		// Standby Button wurde gedrückt
		// lasse Netzteil an, deaktiviere Bias und PTT
		gpio_stat[BIAS_ONOFF] = 0;
 800e676:	4b63      	ldr	r3, [pc, #396]	; (800e804 <control+0x240>)
 800e678:	2200      	movs	r2, #0
 800e67a:	74da      	strb	r2, [r3, #19]
		gpio_stat[PTTOUT] = 0;
 800e67c:	4b61      	ldr	r3, [pc, #388]	; (800e804 <control+0x240>)
 800e67e:	2200      	movs	r2, #0
 800e680:	751a      	strb	r2, [r3, #20]
	}

	if(oldstate == STATE_STANDBY && state == STATE_ACTIVE && pcfgdata->systemMode == 0)
 800e682:	4b5f      	ldr	r3, [pc, #380]	; (800e800 <control+0x23c>)
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d10c      	bne.n	800e6a4 <control+0xe0>
 800e68a:	4b5a      	ldr	r3, [pc, #360]	; (800e7f4 <control+0x230>)
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	2b02      	cmp	r3, #2
 800e690:	d108      	bne.n	800e6a4 <control+0xe0>
 800e692:	4b5d      	ldr	r3, [pc, #372]	; (800e808 <control+0x244>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d102      	bne.n	800e6a4 <control+0xe0>
	{
		// es wurde gerade AKTIV gedrückt,
		// schalte das PowerON Relais wieder aus, da die Versorgung in Selbsthaltung ist
		gpio_stat[PWRREL_ON] = 0;
 800e69e:	4b59      	ldr	r3, [pc, #356]	; (800e804 <control+0x240>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	745a      	strb	r2, [r3, #17]
	}

	if(state == STATE_ACTIVE)
 800e6a4:	4b53      	ldr	r3, [pc, #332]	; (800e7f4 <control+0x230>)
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d12f      	bne.n	800e70c <control+0x148>
	{
		// wir sind aktiv, folge der PTT Steuerung
		uint8_t pttstat = gpio_stat[PTTIN];
 800e6ac:	4b55      	ldr	r3, [pc, #340]	; (800e804 <control+0x240>)
 800e6ae:	7b1b      	ldrb	r3, [r3, #12]
 800e6b0:	70fb      	strb	r3, [r7, #3]
		if(pttstat != old_pttstat)
 800e6b2:	4b56      	ldr	r3, [pc, #344]	; (800e80c <control+0x248>)
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	78fa      	ldrb	r2, [r7, #3]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d02a      	beq.n	800e712 <control+0x14e>
		{
			if(pttstat == 0)
 800e6bc:	78fb      	ldrb	r3, [r7, #3]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10e      	bne.n	800e6e0 <control+0x11c>
			{
				// der Transceiver geht auf TX
				gpio_stat[BIAS_ONOFF] = 1;
 800e6c2:	4b50      	ldr	r3, [pc, #320]	; (800e804 <control+0x240>)
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	74da      	strb	r2, [r3, #19]
				delay_1ms(100);
 800e6c8:	2064      	movs	r0, #100	; 0x64
 800e6ca:	f00a fb01 	bl	8018cd0 <delay_1ms>
				gpio_stat[PTTOUT] = 1;
 800e6ce:	4b4d      	ldr	r3, [pc, #308]	; (800e804 <control+0x240>)
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	751a      	strb	r2, [r3, #20]
				setup_touchbutton_presscolor(&tb_buttons[TB_ACTIVE], RED);
 800e6d4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800e6d8:	484d      	ldr	r0, [pc, #308]	; (800e810 <control+0x24c>)
 800e6da:	f00b fba1 	bl	8019e20 <setup_touchbutton_presscolor>
 800e6de:	e00a      	b.n	800e6f6 <control+0x132>
			}
			else
			{
				gpio_stat[BIAS_ONOFF] = 0;
 800e6e0:	4b48      	ldr	r3, [pc, #288]	; (800e804 <control+0x240>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	74da      	strb	r2, [r3, #19]
				gpio_stat[PTTOUT] = 0;
 800e6e6:	4b47      	ldr	r3, [pc, #284]	; (800e804 <control+0x240>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	751a      	strb	r2, [r3, #20]
				setup_touchbutton_presscolor(&tb_buttons[TB_ACTIVE], GREEN);
 800e6ec:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800e6f0:	4847      	ldr	r0, [pc, #284]	; (800e810 <control+0x24c>)
 800e6f2:	f00b fb95 	bl	8019e20 <setup_touchbutton_presscolor>
			}
			if(menunum != MENU_SELECTION)
 800e6f6:	4b47      	ldr	r3, [pc, #284]	; (800e814 <control+0x250>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <control+0x140>
				draw_touchbutton(&tb_buttons[TB_ACTIVE]);
 800e6fe:	4844      	ldr	r0, [pc, #272]	; (800e810 <control+0x24c>)
 800e700:	f00b fc84 	bl	801a00c <draw_touchbutton>
			old_pttstat = pttstat;
 800e704:	4a41      	ldr	r2, [pc, #260]	; (800e80c <control+0x248>)
 800e706:	78fb      	ldrb	r3, [r7, #3]
 800e708:	7013      	strb	r3, [r2, #0]
 800e70a:	e002      	b.n	800e712 <control+0x14e>
		}
	}
	else
	{
		txtime = 0;
 800e70c:	4b42      	ldr	r3, [pc, #264]	; (800e818 <control+0x254>)
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]
	}

	// Lüfterkontrolle
	do_fan();
 800e712:	f000 fa6f 	bl	800ebf4 <do_fan>

	// Überhitzung-Notabschaltung
	if(adc_realvals[UTEMP] > pcfgdata->Temp_limit && menunum != MENU_SETUP)
 800e716:	4b41      	ldr	r3, [pc, #260]	; (800e81c <control+0x258>)
 800e718:	ed93 7a03 	vldr	s14, [r3, #12]
 800e71c:	4b3a      	ldr	r3, [pc, #232]	; (800e808 <control+0x244>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	8b1b      	ldrh	r3, [r3, #24]
 800e722:	ee07 3a90 	vmov	s15, r3
 800e726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e72a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e732:	dd26      	ble.n	800e782 <control+0x1be>
 800e734:	4b37      	ldr	r3, [pc, #220]	; (800e814 <control+0x250>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b0b      	cmp	r3, #11
 800e73a:	d022      	beq.n	800e782 <control+0x1be>
	{
		// merke aktuelle Zeit
		if(uptime_ref1 == 0) uptime_ref1 = uptime;
 800e73c:	4b2e      	ldr	r3, [pc, #184]	; (800e7f8 <control+0x234>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d103      	bne.n	800e74c <control+0x188>
 800e744:	4b36      	ldr	r3, [pc, #216]	; (800e820 <control+0x25c>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a2b      	ldr	r2, [pc, #172]	; (800e7f8 <control+0x234>)
 800e74a:	6013      	str	r3, [r2, #0]

		// nach 10s langer Überhitzung schalte ab
		if((uptime - uptime_ref1) > 10000)
 800e74c:	4b34      	ldr	r3, [pc, #208]	; (800e820 <control+0x25c>)
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	4b29      	ldr	r3, [pc, #164]	; (800e7f8 <control+0x234>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	f242 7210 	movw	r2, #10000	; 0x2710
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d914      	bls.n	800e788 <control+0x1c4>
			emergency(EMERG_TEMP,pcfgdata->Temp_limit,adc_realvals[UTEMP]);
 800e75e:	4b2a      	ldr	r3, [pc, #168]	; (800e808 <control+0x244>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	8b1b      	ldrh	r3, [r3, #24]
 800e764:	ee07 3a90 	vmov	s15, r3
 800e768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e76c:	4b2b      	ldr	r3, [pc, #172]	; (800e81c <control+0x258>)
 800e76e:	ed93 7a03 	vldr	s14, [r3, #12]
 800e772:	eef0 0a47 	vmov.f32	s1, s14
 800e776:	eeb0 0a67 	vmov.f32	s0, s15
 800e77a:	2001      	movs	r0, #1
 800e77c:	f000 f9ac 	bl	800ead8 <emergency>
		if((uptime - uptime_ref1) > 10000)
 800e780:	e002      	b.n	800e788 <control+0x1c4>
	}
	else
		uptime_ref1 = 0;
 800e782:	4b1d      	ldr	r3, [pc, #116]	; (800e7f8 <control+0x234>)
 800e784:	2200      	movs	r2, #0
 800e786:	601a      	str	r2, [r3, #0]

	if(adc_realvals[UTEMP2] > pcfgdata->Temp_limit && menunum != MENU_SETUP)
 800e788:	4b24      	ldr	r3, [pc, #144]	; (800e81c <control+0x258>)
 800e78a:	ed93 7a08 	vldr	s14, [r3, #32]
 800e78e:	4b1e      	ldr	r3, [pc, #120]	; (800e808 <control+0x244>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	8b1b      	ldrh	r3, [r3, #24]
 800e794:	ee07 3a90 	vmov	s15, r3
 800e798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e79c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a4:	dd3e      	ble.n	800e824 <control+0x260>
 800e7a6:	4b1b      	ldr	r3, [pc, #108]	; (800e814 <control+0x250>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b0b      	cmp	r3, #11
 800e7ac:	d03a      	beq.n	800e824 <control+0x260>
	{
		// merke aktuelle Zeit
		if(uptime_ref2 == 0) uptime_ref2 = uptime;
 800e7ae:	4b13      	ldr	r3, [pc, #76]	; (800e7fc <control+0x238>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d103      	bne.n	800e7be <control+0x1fa>
 800e7b6:	4b1a      	ldr	r3, [pc, #104]	; (800e820 <control+0x25c>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a10      	ldr	r2, [pc, #64]	; (800e7fc <control+0x238>)
 800e7bc:	6013      	str	r3, [r2, #0]

		// nach 10s langer Überhitzung schalte ab
		if((uptime - uptime_ref2) > 10000)
 800e7be:	4b18      	ldr	r3, [pc, #96]	; (800e820 <control+0x25c>)
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	4b0e      	ldr	r3, [pc, #56]	; (800e7fc <control+0x238>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	1ad3      	subs	r3, r2, r3
 800e7c8:	f242 7210 	movw	r2, #10000	; 0x2710
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d92c      	bls.n	800e82a <control+0x266>
			emergency(EMERG_TEMP2,pcfgdata->Temp_limit,adc_realvals[UTEMP2]);
 800e7d0:	4b0d      	ldr	r3, [pc, #52]	; (800e808 <control+0x244>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	8b1b      	ldrh	r3, [r3, #24]
 800e7d6:	ee07 3a90 	vmov	s15, r3
 800e7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7de:	4b0f      	ldr	r3, [pc, #60]	; (800e81c <control+0x258>)
 800e7e0:	ed93 7a08 	vldr	s14, [r3, #32]
 800e7e4:	eef0 0a47 	vmov.f32	s1, s14
 800e7e8:	eeb0 0a67 	vmov.f32	s0, s15
 800e7ec:	2002      	movs	r0, #2
 800e7ee:	f000 f973 	bl	800ead8 <emergency>
		if((uptime - uptime_ref2) > 10000)
 800e7f2:	e01a      	b.n	800e82a <control+0x266>
 800e7f4:	200026a0 	.word	0x200026a0
 800e7f8:	200026a4 	.word	0x200026a4
 800e7fc:	200026a8 	.word	0x200026a8
 800e800:	200026a1 	.word	0x200026a1
 800e804:	2000498c 	.word	0x2000498c
 800e808:	20000bf0 	.word	0x20000bf0
 800e80c:	20000bde 	.word	0x20000bde
 800e810:	20007078 	.word	0x20007078
 800e814:	20000c24 	.word	0x20000c24
 800e818:	20002794 	.word	0x20002794
 800e81c:	2000314c 	.word	0x2000314c
 800e820:	200027a4 	.word	0x200027a4
	}
	else
		uptime_ref2 = 0;
 800e824:	4b8a      	ldr	r3, [pc, #552]	; (800ea50 <control+0x48c>)
 800e826:	2200      	movs	r2, #0
 800e828:	601a      	str	r2, [r3, #0]

	// zu hoher Strom-Notabschaltung
	if(adc_realvals[IMESS] > pcfgdata->I_limit)
 800e82a:	4b8a      	ldr	r3, [pc, #552]	; (800ea54 <control+0x490>)
 800e82c:	ed93 7a04 	vldr	s14, [r3, #16]
 800e830:	4b89      	ldr	r3, [pc, #548]	; (800ea58 <control+0x494>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	8a9b      	ldrh	r3, [r3, #20]
 800e836:	ee07 3a90 	vmov	s15, r3
 800e83a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e83e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e846:	dd10      	ble.n	800e86a <control+0x2a6>
		emergency(EMERG_I,pcfgdata->I_limit,adc_realvals[IMESS]);
 800e848:	4b83      	ldr	r3, [pc, #524]	; (800ea58 <control+0x494>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	8a9b      	ldrh	r3, [r3, #20]
 800e84e:	ee07 3a90 	vmov	s15, r3
 800e852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e856:	4b7f      	ldr	r3, [pc, #508]	; (800ea54 <control+0x490>)
 800e858:	ed93 7a04 	vldr	s14, [r3, #16]
 800e85c:	eef0 0a47 	vmov.f32	s1, s14
 800e860:	eeb0 0a67 	vmov.f32	s0, s15
 800e864:	2004      	movs	r0, #4
 800e866:	f000 f937 	bl	800ead8 <emergency>

	// zu hohe Spannung-Notabschaltung
	if(adc_realvals[UMESS] > pcfgdata->U_limit)
 800e86a:	4b7a      	ldr	r3, [pc, #488]	; (800ea54 <control+0x490>)
 800e86c:	ed93 7a01 	vldr	s14, [r3, #4]
 800e870:	4b79      	ldr	r3, [pc, #484]	; (800ea58 <control+0x494>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	8adb      	ldrh	r3, [r3, #22]
 800e876:	ee07 3a90 	vmov	s15, r3
 800e87a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e87e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e886:	dd10      	ble.n	800e8aa <control+0x2e6>
		emergency(EMERG_U,pcfgdata->U_limit,adc_realvals[UMESS]);
 800e888:	4b73      	ldr	r3, [pc, #460]	; (800ea58 <control+0x494>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	8adb      	ldrh	r3, [r3, #22]
 800e88e:	ee07 3a90 	vmov	s15, r3
 800e892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e896:	4b6f      	ldr	r3, [pc, #444]	; (800ea54 <control+0x490>)
 800e898:	ed93 7a01 	vldr	s14, [r3, #4]
 800e89c:	eef0 0a47 	vmov.f32	s1, s14
 800e8a0:	eeb0 0a67 	vmov.f32	s0, s15
 800e8a4:	2005      	movs	r0, #5
 800e8a6:	f000 f917 	bl	800ead8 <emergency>

	// zu hohe Steuerleistung-Notabschaltung
	if(pwrswr_input.fwd_watt > pcfgdata->Drive_limit && pcfgdata->systemMode == 0 && state == STATE_ACTIVE && gpio_stat[PTTIN] == 0)
 800e8aa:	4b6c      	ldr	r3, [pc, #432]	; (800ea5c <control+0x498>)
 800e8ac:	ed93 7a02 	vldr	s14, [r3, #8]
 800e8b0:	4b69      	ldr	r3, [pc, #420]	; (800ea58 <control+0x494>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	8b5b      	ldrh	r3, [r3, #26]
 800e8b6:	ee07 3a90 	vmov	s15, r3
 800e8ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c6:	dd23      	ble.n	800e910 <control+0x34c>
 800e8c8:	4b63      	ldr	r3, [pc, #396]	; (800ea58 <control+0x494>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d11d      	bne.n	800e910 <control+0x34c>
 800e8d4:	4b62      	ldr	r3, [pc, #392]	; (800ea60 <control+0x49c>)
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	2b02      	cmp	r3, #2
 800e8da:	d119      	bne.n	800e910 <control+0x34c>
 800e8dc:	4b61      	ldr	r3, [pc, #388]	; (800ea64 <control+0x4a0>)
 800e8de:	7b1b      	ldrb	r3, [r3, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d115      	bne.n	800e910 <control+0x34c>
	{
		if(fwd_drv_fail > 250)
 800e8e4:	4b60      	ldr	r3, [pc, #384]	; (800ea68 <control+0x4a4>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2bfa      	cmp	r3, #250	; 0xfa
 800e8ea:	d914      	bls.n	800e916 <control+0x352>
			emergency(EMERG_DRV,pcfgdata->Drive_limit,pwrswr_input.fwd_watt);
 800e8ec:	4b5a      	ldr	r3, [pc, #360]	; (800ea58 <control+0x494>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	8b5b      	ldrh	r3, [r3, #26]
 800e8f2:	ee07 3a90 	vmov	s15, r3
 800e8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8fa:	4b58      	ldr	r3, [pc, #352]	; (800ea5c <control+0x498>)
 800e8fc:	ed93 7a02 	vldr	s14, [r3, #8]
 800e900:	eef0 0a47 	vmov.f32	s1, s14
 800e904:	eeb0 0a67 	vmov.f32	s0, s15
 800e908:	2006      	movs	r0, #6
 800e90a:	f000 f8e5 	bl	800ead8 <emergency>
		if(fwd_drv_fail > 250)
 800e90e:	e002      	b.n	800e916 <control+0x352>
	}
	else
		fwd_drv_fail = 0;
 800e910:	4b55      	ldr	r3, [pc, #340]	; (800ea68 <control+0x4a4>)
 800e912:	2200      	movs	r2, #0
 800e914:	601a      	str	r2, [r3, #0]

	// SWR Notabschaltung
	// um kurze Glitches zu ignorieren, muss der Fehler für min. 250ms bestehen

	// zu hohes Antennen SWR - Notabschaltung
	if(pwrswr_antenna.swr > 3 && gpio_stat[PTTIN] == 0 && state == STATE_ACTIVE)
 800e916:	4b55      	ldr	r3, [pc, #340]	; (800ea6c <control+0x4a8>)
 800e918:	edd3 7a06 	vldr	s15, [r3, #24]
 800e91c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e920:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e928:	dd16      	ble.n	800e958 <control+0x394>
 800e92a:	4b4e      	ldr	r3, [pc, #312]	; (800ea64 <control+0x4a0>)
 800e92c:	7b1b      	ldrb	r3, [r3, #12]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d112      	bne.n	800e958 <control+0x394>
 800e932:	4b4b      	ldr	r3, [pc, #300]	; (800ea60 <control+0x49c>)
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b02      	cmp	r3, #2
 800e938:	d10e      	bne.n	800e958 <control+0x394>
	{
		if(swr_ant_fail >= 125)
 800e93a:	4b4d      	ldr	r3, [pc, #308]	; (800ea70 <control+0x4ac>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b7c      	cmp	r3, #124	; 0x7c
 800e940:	d90d      	bls.n	800e95e <control+0x39a>
			emergency(EMERG_ANTSWR,3,pwrswr_antenna.swr);
 800e942:	4b4a      	ldr	r3, [pc, #296]	; (800ea6c <control+0x4a8>)
 800e944:	edd3 7a06 	vldr	s15, [r3, #24]
 800e948:	eef0 0a67 	vmov.f32	s1, s15
 800e94c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800e950:	2009      	movs	r0, #9
 800e952:	f000 f8c1 	bl	800ead8 <emergency>
		if(swr_ant_fail >= 125)
 800e956:	e002      	b.n	800e95e <control+0x39a>
	}
	else
		swr_ant_fail = 0;
 800e958:	4b45      	ldr	r3, [pc, #276]	; (800ea70 <control+0x4ac>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	601a      	str	r2, [r3, #0]

	// zu hohes Filter SWR - Notabschaltung
	if(pwrswr_filter.swr > 5 && gpio_stat[PTTIN] == 0 && state == STATE_ACTIVE)
 800e95e:	4b45      	ldr	r3, [pc, #276]	; (800ea74 <control+0x4b0>)
 800e960:	edd3 7a06 	vldr	s15, [r3, #24]
 800e964:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800e968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e970:	dd16      	ble.n	800e9a0 <control+0x3dc>
 800e972:	4b3c      	ldr	r3, [pc, #240]	; (800ea64 <control+0x4a0>)
 800e974:	7b1b      	ldrb	r3, [r3, #12]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d112      	bne.n	800e9a0 <control+0x3dc>
 800e97a:	4b39      	ldr	r3, [pc, #228]	; (800ea60 <control+0x49c>)
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d10e      	bne.n	800e9a0 <control+0x3dc>
	{
		if(swr_filter_fail >= 250)
 800e982:	4b3d      	ldr	r3, [pc, #244]	; (800ea78 <control+0x4b4>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2bf9      	cmp	r3, #249	; 0xf9
 800e988:	d90d      	bls.n	800e9a6 <control+0x3e2>
			emergency(EMERG_FILTERSWR,5,pwrswr_filter.swr);
 800e98a:	4b3a      	ldr	r3, [pc, #232]	; (800ea74 <control+0x4b0>)
 800e98c:	edd3 7a06 	vldr	s15, [r3, #24]
 800e990:	eef0 0a67 	vmov.f32	s1, s15
 800e994:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800e998:	2008      	movs	r0, #8
 800e99a:	f000 f89d 	bl	800ead8 <emergency>
		if(swr_filter_fail >= 250)
 800e99e:	e002      	b.n	800e9a6 <control+0x3e2>
	}
	else
		swr_filter_fail = 0;
 800e9a0:	4b35      	ldr	r3, [pc, #212]	; (800ea78 <control+0x4b4>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	601a      	str	r2, [r3, #0]

	// zu lange auf TX -> Notabschaltung
	if(state != STATE_ACTIVE || gpio_stat[PTTIN] == 1)
 800e9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ea60 <control+0x49c>)
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	d103      	bne.n	800e9b6 <control+0x3f2>
 800e9ae:	4b2d      	ldr	r3, [pc, #180]	; (800ea64 <control+0x4a0>)
 800e9b0:	7b1b      	ldrb	r3, [r3, #12]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d102      	bne.n	800e9bc <control+0x3f8>
		txtime = 0;
 800e9b6:	4b31      	ldr	r3, [pc, #196]	; (800ea7c <control+0x4b8>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	601a      	str	r2, [r3, #0]

	if(state == STATE_ACTIVE && ((txtime/1000)/60) > pcfgdata->Time_limit_minutes)
 800e9bc:	4b28      	ldr	r3, [pc, #160]	; (800ea60 <control+0x49c>)
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	d122      	bne.n	800ea0a <control+0x446>
 800e9c4:	4b2d      	ldr	r3, [pc, #180]	; (800ea7c <control+0x4b8>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a2d      	ldr	r2, [pc, #180]	; (800ea80 <control+0x4bc>)
 800e9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e9ce:	0b9b      	lsrs	r3, r3, #14
 800e9d0:	4a21      	ldr	r2, [pc, #132]	; (800ea58 <control+0x494>)
 800e9d2:	6812      	ldr	r2, [r2, #0]
 800e9d4:	8b92      	ldrh	r2, [r2, #28]
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d917      	bls.n	800ea0a <control+0x446>
		emergency(EMERG_TXTIME,pcfgdata->Time_limit_minutes,(txtime/1000)/60);
 800e9da:	4b1f      	ldr	r3, [pc, #124]	; (800ea58 <control+0x494>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	8b9b      	ldrh	r3, [r3, #28]
 800e9e0:	ee07 3a90 	vmov	s15, r3
 800e9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9e8:	4b24      	ldr	r3, [pc, #144]	; (800ea7c <control+0x4b8>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a24      	ldr	r2, [pc, #144]	; (800ea80 <control+0x4bc>)
 800e9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e9f2:	0b9b      	lsrs	r3, r3, #14
 800e9f4:	ee07 3a10 	vmov	s14, r3
 800e9f8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e9fc:	eef0 0a47 	vmov.f32	s1, s14
 800ea00:	eeb0 0a67 	vmov.f32	s0, s15
 800ea04:	2007      	movs	r0, #7
 800ea06:	f000 f867 	bl	800ead8 <emergency>

	oldstate = state;
 800ea0a:	4b15      	ldr	r3, [pc, #84]	; (800ea60 <control+0x49c>)
 800ea0c:	781a      	ldrb	r2, [r3, #0]
 800ea0e:	4b1d      	ldr	r3, [pc, #116]	; (800ea84 <control+0x4c0>)
 800ea10:	701a      	strb	r2, [r3, #0]

	// Funktionen welche zu einem neuen State führen

	// wenn keine Ub mehr da ist schalte von aktiv auf standby zurück
	if(adc_realvals[UMESS] < 11.0 && state == STATE_ACTIVE)
 800ea12:	4b10      	ldr	r3, [pc, #64]	; (800ea54 <control+0x490>)
 800ea14:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea18:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800ea1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea24:	d505      	bpl.n	800ea32 <control+0x46e>
 800ea26:	4b0e      	ldr	r3, [pc, #56]	; (800ea60 <control+0x49c>)
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d101      	bne.n	800ea32 <control+0x46e>
		switchto_standby();
 800ea2e:	f002 fc1d 	bl	801126c <switchto_standby>

	// prüfe Icom Tuning
	if(isTuning() && state == STATE_ACTIVE)
 800ea32:	f000 f881 	bl	800eb38 <isTuning>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d005      	beq.n	800ea48 <control+0x484>
 800ea3c:	4b08      	ldr	r3, [pc, #32]	; (800ea60 <control+0x49c>)
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	d101      	bne.n	800ea48 <control+0x484>
	{
		switchto_standby();	// wenn getunt wird gehe in Standby
 800ea44:	f002 fc12 	bl	801126c <switchto_standby>
		// bei der nächsten Loop wird oldstate=active und state=standby oben bearbeitet
	}
}
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	200026a8 	.word	0x200026a8
 800ea54:	2000314c 	.word	0x2000314c
 800ea58:	20000bf0 	.word	0x20000bf0
 800ea5c:	200055e4 	.word	0x200055e4
 800ea60:	200026a0 	.word	0x200026a0
 800ea64:	2000498c 	.word	0x2000498c
 800ea68:	200027a0 	.word	0x200027a0
 800ea6c:	20005684 	.word	0x20005684
 800ea70:	2000279c 	.word	0x2000279c
 800ea74:	20005634 	.word	0x20005634
 800ea78:	20002798 	.word	0x20002798
 800ea7c:	20002794 	.word	0x20002794
 800ea80:	45e7b273 	.word	0x45e7b273
 800ea84:	200026a1 	.word	0x200026a1

0800ea88 <emergency_silent>:

// Notabschaltung
void emergency_silent(uint8_t errnum)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	4603      	mov	r3, r0
 800ea90:	71fb      	strb	r3, [r7, #7]
	error = errnum;
 800ea92:	4a0e      	ldr	r2, [pc, #56]	; (800eacc <emergency_silent+0x44>)
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	7013      	strb	r3, [r2, #0]

	// alles AUS
	for(int i=ANTSEL1; i<MAXGPIOS; i++)
 800ea98:	230e      	movs	r3, #14
 800ea9a:	60fb      	str	r3, [r7, #12]
 800ea9c:	e007      	b.n	800eaae <emergency_silent+0x26>
		gpio_stat[i] = 0;
 800ea9e:	4a0c      	ldr	r2, [pc, #48]	; (800ead0 <emergency_silent+0x48>)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
	for(int i=ANTSEL1; i<MAXGPIOS; i++)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	60fb      	str	r3, [r7, #12]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b1a      	cmp	r3, #26
 800eab2:	ddf4      	ble.n	800ea9e <emergency_silent+0x16>

	gpio_stat[PWRREL_OFF] = 1;
 800eab4:	4b06      	ldr	r3, [pc, #24]	; (800ead0 <emergency_silent+0x48>)
 800eab6:	2201      	movs	r2, #1
 800eab8:	741a      	strb	r2, [r3, #16]

	state = STATE_EMERGENCYOFF;
 800eaba:	4b06      	ldr	r3, [pc, #24]	; (800ead4 <emergency_silent+0x4c>)
 800eabc:	2203      	movs	r2, #3
 800eabe:	701a      	strb	r2, [r3, #0]
}
 800eac0:	bf00      	nop
 800eac2:	3714      	adds	r7, #20
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr
 800eacc:	200026a2 	.word	0x200026a2
 800ead0:	2000498c 	.word	0x2000498c
 800ead4:	200026a0 	.word	0x200026a0

0800ead8 <emergency>:

void emergency(uint8_t errnum, float soll, float ist)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	ed87 0a02 	vstr	s0, [r7, #8]
 800eae4:	edc7 0a01 	vstr	s1, [r7, #4]
 800eae8:	73fb      	strb	r3, [r7, #15]
	error = errnum;
 800eaea:	4a10      	ldr	r2, [pc, #64]	; (800eb2c <emergency+0x54>)
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
 800eaee:	7013      	strb	r3, [r2, #0]

	// alles AUS
	for(int i=ANTSEL1; i<MAXGPIOS; i++)
 800eaf0:	230e      	movs	r3, #14
 800eaf2:	617b      	str	r3, [r7, #20]
 800eaf4:	e007      	b.n	800eb06 <emergency+0x2e>
		gpio_stat[i] = 0;
 800eaf6:	4a0e      	ldr	r2, [pc, #56]	; (800eb30 <emergency+0x58>)
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	4413      	add	r3, r2
 800eafc:	2200      	movs	r2, #0
 800eafe:	701a      	strb	r2, [r3, #0]
	for(int i=ANTSEL1; i<MAXGPIOS; i++)
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	3301      	adds	r3, #1
 800eb04:	617b      	str	r3, [r7, #20]
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	2b1a      	cmp	r3, #26
 800eb0a:	ddf4      	ble.n	800eaf6 <emergency+0x1e>

	gpio_stat[PWRREL_OFF] = 1;
 800eb0c:	4b08      	ldr	r3, [pc, #32]	; (800eb30 <emergency+0x58>)
 800eb0e:	2201      	movs	r2, #1
 800eb10:	741a      	strb	r2, [r3, #16]

	draw_menu_emergency(soll, ist);
 800eb12:	edd7 0a01 	vldr	s1, [r7, #4]
 800eb16:	ed97 0a02 	vldr	s0, [r7, #8]
 800eb1a:	f005 fbdd 	bl	80142d8 <draw_menu_emergency>

	state = STATE_EMERGENCYOFF;
 800eb1e:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <emergency+0x5c>)
 800eb20:	2203      	movs	r2, #3
 800eb22:	701a      	strb	r2, [r3, #0]
}
 800eb24:	bf00      	nop
 800eb26:	3718      	adds	r7, #24
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	200026a2 	.word	0x200026a2
 800eb30:	2000498c 	.word	0x2000498c
 800eb34:	200026a0 	.word	0x200026a0

0800eb38 <isTuning>:
// Pin 1 is the TKEY pin, when the ‘TUNE’ button is pressed, it’s pulled low by the tuner to tell the radio to start transmitting.
// Pin 2 is the TSTR pin to/from the microprocessor.
// Under normal circumstances the START pin is pulled high when a remote tuner is attached to tell the radio that the tuner is present.
// When you press ‘TUNE’ the radio pulls the pin low telling the tuner to start the matching sequence.
char isTuning()
{
 800eb38:	b480      	push	{r7}
 800eb3a:	af00      	add	r7, sp, #0
	// TKEY:
	// + = es wird nicht getunt
	// GND = es wird getunt
	if(gpio_stat[TKEY] == 0) return 1;
 800eb3c:	4b05      	ldr	r3, [pc, #20]	; (800eb54 <isTuning+0x1c>)
 800eb3e:	7adb      	ldrb	r3, [r3, #11]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d101      	bne.n	800eb48 <isTuning+0x10>
 800eb44:	2301      	movs	r3, #1
 800eb46:	e000      	b.n	800eb4a <isTuning+0x12>
	return 0;
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	2000498c 	.word	0x2000498c

0800eb58 <fan_timer>:
int fan_minruntime = 20000;	// ms
int starttime = 10000;

// Aufruf alle 1ms
void fan_timer()
{
 800eb58:	b480      	push	{r7}
 800eb5a:	af00      	add	r7, sp, #0
	// Im Falle einer Überhitzung lasse den Fan laufen
	// Nach dem Einschalten für 10s ignorieren solange bis die ADC Daten gültig sind
	if(adc_realvals[UTEMP] > pcfgdata->Temp_limit)
 800eb5c:	4b1e      	ldr	r3, [pc, #120]	; (800ebd8 <fan_timer+0x80>)
 800eb5e:	ed93 7a03 	vldr	s14, [r3, #12]
 800eb62:	4b1e      	ldr	r3, [pc, #120]	; (800ebdc <fan_timer+0x84>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	8b1b      	ldrh	r3, [r3, #24]
 800eb68:	ee07 3a90 	vmov	s15, r3
 800eb6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb78:	dd0d      	ble.n	800eb96 <fan_timer+0x3e>
	{
		if(starttime) starttime--;
 800eb7a:	4b19      	ldr	r3, [pc, #100]	; (800ebe0 <fan_timer+0x88>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d005      	beq.n	800eb8e <fan_timer+0x36>
 800eb82:	4b17      	ldr	r3, [pc, #92]	; (800ebe0 <fan_timer+0x88>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	3b01      	subs	r3, #1
 800eb88:	4a15      	ldr	r2, [pc, #84]	; (800ebe0 <fan_timer+0x88>)
 800eb8a:	6013      	str	r3, [r2, #0]
		else gpio_stat[FAN_ONOFF] = 1;
		return;
 800eb8c:	e01f      	b.n	800ebce <fan_timer+0x76>
		else gpio_stat[FAN_ONOFF] = 1;
 800eb8e:	4b15      	ldr	r3, [pc, #84]	; (800ebe4 <fan_timer+0x8c>)
 800eb90:	2201      	movs	r2, #1
 800eb92:	749a      	strb	r2, [r3, #18]
		return;
 800eb94:	e01b      	b.n	800ebce <fan_timer+0x76>
	}

	if(fan_ontime) fan_ontime--;
 800eb96:	4b14      	ldr	r3, [pc, #80]	; (800ebe8 <fan_timer+0x90>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d004      	beq.n	800eba8 <fan_timer+0x50>
 800eb9e:	4b12      	ldr	r3, [pc, #72]	; (800ebe8 <fan_timer+0x90>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3b01      	subs	r3, #1
 800eba4:	4a10      	ldr	r2, [pc, #64]	; (800ebe8 <fan_timer+0x90>)
 800eba6:	6013      	str	r3, [r2, #0]

	if(fan_switch == 1)
 800eba8:	4b10      	ldr	r3, [pc, #64]	; (800ebec <fan_timer+0x94>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d107      	bne.n	800ebc0 <fan_timer+0x68>
	{
		// immer sofort einschalten
		gpio_stat[FAN_ONOFF] = 1;
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <fan_timer+0x8c>)
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	749a      	strb	r2, [r3, #18]
		fan_ontime = fan_minruntime;
 800ebb6:	4b0e      	ldr	r3, [pc, #56]	; (800ebf0 <fan_timer+0x98>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a0b      	ldr	r2, [pc, #44]	; (800ebe8 <fan_timer+0x90>)
 800ebbc:	6013      	str	r3, [r2, #0]
 800ebbe:	e006      	b.n	800ebce <fan_timer+0x76>
	}
	else
	{
		// ausschalten, aber erst wenn die min Laufzeit abgelaufen ist
		if(fan_ontime == 0)
 800ebc0:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <fan_timer+0x90>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d102      	bne.n	800ebce <fan_timer+0x76>
			gpio_stat[FAN_ONOFF] = 0;
 800ebc8:	4b06      	ldr	r3, [pc, #24]	; (800ebe4 <fan_timer+0x8c>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	749a      	strb	r2, [r3, #18]
	}
}
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	2000314c 	.word	0x2000314c
 800ebdc:	20000bf0 	.word	0x20000bf0
 800ebe0:	20000be8 	.word	0x20000be8
 800ebe4:	2000498c 	.word	0x2000498c
 800ebe8:	200026b0 	.word	0x200026b0
 800ebec:	200026ac 	.word	0x200026ac
 800ebf0:	20000be4 	.word	0x20000be4

0800ebf4 <do_fan>:

void do_fan()
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	af00      	add	r7, sp, #0
	if(pcfgdata->fan_temp == 7)
 800ebf8:	4b37      	ldr	r3, [pc, #220]	; (800ecd8 <do_fan+0xe4>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	8bdb      	ldrh	r3, [r3, #30]
 800ebfe:	2b07      	cmp	r3, #7
 800ec00:	d102      	bne.n	800ec08 <do_fan+0x14>
	{
		// Automatik
		fan_auto();
 800ec02:	f000 f873 	bl	800ecec <fan_auto>

		// oder aus
		if((adc_realvals[UTEMP] < (pcfgdata->fan_temp - fanhyst)) && (adc_realvals[UTEMP2] < (pcfgdata->fan_temp - fanhyst)))
			fan_switch = 0;
	}
}
 800ec06:	e065      	b.n	800ecd4 <do_fan+0xe0>
	else if(pcfgdata->fan_temp == 8)
 800ec08:	4b33      	ldr	r3, [pc, #204]	; (800ecd8 <do_fan+0xe4>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	8bdb      	ldrh	r3, [r3, #30]
 800ec0e:	2b08      	cmp	r3, #8
 800ec10:	d103      	bne.n	800ec1a <do_fan+0x26>
		fan_switch = 1;
 800ec12:	4b32      	ldr	r3, [pc, #200]	; (800ecdc <do_fan+0xe8>)
 800ec14:	2201      	movs	r2, #1
 800ec16:	601a      	str	r2, [r3, #0]
}
 800ec18:	e05c      	b.n	800ecd4 <do_fan+0xe0>
	else if(pcfgdata->fan_temp == 9)
 800ec1a:	4b2f      	ldr	r3, [pc, #188]	; (800ecd8 <do_fan+0xe4>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	8bdb      	ldrh	r3, [r3, #30]
 800ec20:	2b09      	cmp	r3, #9
 800ec22:	d10b      	bne.n	800ec3c <do_fan+0x48>
		if(gpio_stat[PTTOUT] != 0)
 800ec24:	4b2e      	ldr	r3, [pc, #184]	; (800ece0 <do_fan+0xec>)
 800ec26:	7d1b      	ldrb	r3, [r3, #20]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <do_fan+0x40>
			fan_switch = 1;
 800ec2c:	4b2b      	ldr	r3, [pc, #172]	; (800ecdc <do_fan+0xe8>)
 800ec2e:	2201      	movs	r2, #1
 800ec30:	601a      	str	r2, [r3, #0]
}
 800ec32:	e04f      	b.n	800ecd4 <do_fan+0xe0>
			fan_switch = 0;
 800ec34:	4b29      	ldr	r3, [pc, #164]	; (800ecdc <do_fan+0xe8>)
 800ec36:	2200      	movs	r2, #0
 800ec38:	601a      	str	r2, [r3, #0]
}
 800ec3a:	e04b      	b.n	800ecd4 <do_fan+0xe0>
		if((adc_realvals[UTEMP] > pcfgdata->fan_temp) || (adc_realvals[UTEMP2] > pcfgdata->fan_temp))
 800ec3c:	4b29      	ldr	r3, [pc, #164]	; (800ece4 <do_fan+0xf0>)
 800ec3e:	ed93 7a03 	vldr	s14, [r3, #12]
 800ec42:	4b25      	ldr	r3, [pc, #148]	; (800ecd8 <do_fan+0xe4>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	8bdb      	ldrh	r3, [r3, #30]
 800ec48:	ee07 3a90 	vmov	s15, r3
 800ec4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec58:	dc0e      	bgt.n	800ec78 <do_fan+0x84>
 800ec5a:	4b22      	ldr	r3, [pc, #136]	; (800ece4 <do_fan+0xf0>)
 800ec5c:	ed93 7a08 	vldr	s14, [r3, #32]
 800ec60:	4b1d      	ldr	r3, [pc, #116]	; (800ecd8 <do_fan+0xe4>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	8bdb      	ldrh	r3, [r3, #30]
 800ec66:	ee07 3a90 	vmov	s15, r3
 800ec6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec76:	dd02      	ble.n	800ec7e <do_fan+0x8a>
			fan_switch = 1;
 800ec78:	4b18      	ldr	r3, [pc, #96]	; (800ecdc <do_fan+0xe8>)
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	601a      	str	r2, [r3, #0]
		if((adc_realvals[UTEMP] < (pcfgdata->fan_temp - fanhyst)) && (adc_realvals[UTEMP2] < (pcfgdata->fan_temp - fanhyst)))
 800ec7e:	4b19      	ldr	r3, [pc, #100]	; (800ece4 <do_fan+0xf0>)
 800ec80:	ed93 7a03 	vldr	s14, [r3, #12]
 800ec84:	4b14      	ldr	r3, [pc, #80]	; (800ecd8 <do_fan+0xe4>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	8bdb      	ldrh	r3, [r3, #30]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	4b16      	ldr	r3, [pc, #88]	; (800ece8 <do_fan+0xf4>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	ee07 3a90 	vmov	s15, r3
 800ec96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca2:	d400      	bmi.n	800eca6 <do_fan+0xb2>
}
 800eca4:	e016      	b.n	800ecd4 <do_fan+0xe0>
		if((adc_realvals[UTEMP] < (pcfgdata->fan_temp - fanhyst)) && (adc_realvals[UTEMP2] < (pcfgdata->fan_temp - fanhyst)))
 800eca6:	4b0f      	ldr	r3, [pc, #60]	; (800ece4 <do_fan+0xf0>)
 800eca8:	ed93 7a08 	vldr	s14, [r3, #32]
 800ecac:	4b0a      	ldr	r3, [pc, #40]	; (800ecd8 <do_fan+0xe4>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	8bdb      	ldrh	r3, [r3, #30]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	4b0c      	ldr	r3, [pc, #48]	; (800ece8 <do_fan+0xf4>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	1ad3      	subs	r3, r2, r3
 800ecba:	ee07 3a90 	vmov	s15, r3
 800ecbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ecc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecca:	d400      	bmi.n	800ecce <do_fan+0xda>
}
 800eccc:	e002      	b.n	800ecd4 <do_fan+0xe0>
			fan_switch = 0;
 800ecce:	4b03      	ldr	r3, [pc, #12]	; (800ecdc <do_fan+0xe8>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	601a      	str	r2, [r3, #0]
}
 800ecd4:	bf00      	nop
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	20000bf0 	.word	0x20000bf0
 800ecdc:	200026ac 	.word	0x200026ac
 800ece0:	2000498c 	.word	0x2000498c
 800ece4:	2000314c 	.word	0x2000314c
 800ece8:	20000be0 	.word	0x20000be0

0800ecec <fan_auto>:

void fan_auto()
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
static int lasttemp = 9999;
int rise_fall=2;
 800ecf2:	2302      	movs	r3, #2
 800ecf4:	60fb      	str	r3, [r7, #12]
int difftemp = 5;	// in 1/10 Grad
 800ecf6:	2305      	movs	r3, #5
 800ecf8:	607b      	str	r3, [r7, #4]

	int temp = adc_realvals[UTEMP] * 10;
 800ecfa:	4b32      	ldr	r3, [pc, #200]	; (800edc4 <fan_auto+0xd8>)
 800ecfc:	edd3 7a03 	vldr	s15, [r3, #12]
 800ed00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ed04:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed0c:	ee17 3a90 	vmov	r3, s15
 800ed10:	60bb      	str	r3, [r7, #8]
	int temp2 = adc_realvals[UTEMP2] * 10;
 800ed12:	4b2c      	ldr	r3, [pc, #176]	; (800edc4 <fan_auto+0xd8>)
 800ed14:	edd3 7a08 	vldr	s15, [r3, #32]
 800ed18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ed1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed24:	ee17 3a90 	vmov	r3, s15
 800ed28:	603b      	str	r3, [r7, #0]
	if(temp2 > temp) temp = temp2;
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	dd01      	ble.n	800ed36 <fan_auto+0x4a>
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	60bb      	str	r3, [r7, #8]

	// temp = Temperatur*10, also auf 1/10 Grad genau

	// bei > 45 Grad schalte ein
	if(temp > 450)
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800ed3c:	dd06      	ble.n	800ed4c <fan_auto+0x60>
	{
		fan_switch = 1;
 800ed3e:	4b22      	ldr	r3, [pc, #136]	; (800edc8 <fan_auto+0xdc>)
 800ed40:	2201      	movs	r2, #1
 800ed42:	601a      	str	r2, [r3, #0]
		lasttemp = temp;
 800ed44:	4a21      	ldr	r2, [pc, #132]	; (800edcc <fan_auto+0xe0>)
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	6013      	str	r3, [r2, #0]
		return;
 800ed4a:	e035      	b.n	800edb8 <fan_auto+0xcc>
	}

	// bei < 30 Grad schalte aus
	if(temp < 300)
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ed52:	da06      	bge.n	800ed62 <fan_auto+0x76>
	{
		fan_switch = 0;
 800ed54:	4b1c      	ldr	r3, [pc, #112]	; (800edc8 <fan_auto+0xdc>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	601a      	str	r2, [r3, #0]
		lasttemp = temp;
 800ed5a:	4a1c      	ldr	r2, [pc, #112]	; (800edcc <fan_auto+0xe0>)
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	6013      	str	r3, [r2, #0]
		return;
 800ed60:	e02a      	b.n	800edb8 <fan_auto+0xcc>
	}

	// Bewegungsrichtung der Temperatur
	if(temp < (lasttemp - difftemp)) rise_fall = 0;
 800ed62:	4b1a      	ldr	r3, [pc, #104]	; (800edcc <fan_auto+0xe0>)
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	1ad3      	subs	r3, r2, r3
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	da01      	bge.n	800ed74 <fan_auto+0x88>
 800ed70:	2300      	movs	r3, #0
 800ed72:	60fb      	str	r3, [r7, #12]
	if(temp > (lasttemp + difftemp)) rise_fall = 1;
 800ed74:	4b15      	ldr	r3, [pc, #84]	; (800edcc <fan_auto+0xe0>)
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	dd01      	ble.n	800ed86 <fan_auto+0x9a>
 800ed82:	2301      	movs	r3, #1
 800ed84:	60fb      	str	r3, [r7, #12]
	if(rise_fall != 2) lasttemp = temp;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b02      	cmp	r3, #2
 800ed8a:	d002      	beq.n	800ed92 <fan_auto+0xa6>
 800ed8c:	4a0f      	ldr	r2, [pc, #60]	; (800edcc <fan_auto+0xe0>)
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	6013      	str	r3, [r2, #0]

	// wenn die Temperatur ansteigt, schalte ein
	if(rise_fall == 1)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d102      	bne.n	800ed9e <fan_auto+0xb2>
		fan_switch = 1;
 800ed98:	4b0b      	ldr	r3, [pc, #44]	; (800edc8 <fan_auto+0xdc>)
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	601a      	str	r2, [r3, #0]

	// wenn die Temperatur sinkt, schalte aus
	if(rise_fall == 0) fan_switch = 0;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d102      	bne.n	800edaa <fan_auto+0xbe>
 800eda4:	4b08      	ldr	r3, [pc, #32]	; (800edc8 <fan_auto+0xdc>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	601a      	str	r2, [r3, #0]

	// bei unter 35 Grad schalte sofort aus
	if(temp < 350)
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800edb0:	da02      	bge.n	800edb8 <fan_auto+0xcc>
		fan_ontime = 0;
 800edb2:	4b07      	ldr	r3, [pc, #28]	; (800edd0 <fan_auto+0xe4>)
 800edb4:	2200      	movs	r2, #0
 800edb6:	601a      	str	r2, [r3, #0]
}
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	2000314c 	.word	0x2000314c
 800edc8:	200026ac 	.word	0x200026ac
 800edcc:	20000bec 	.word	0x20000bec
 800edd0:	200026b0 	.word	0x200026b0

0800edd4 <setDefaults>:
t_fdata *pcfgdata = &flashdata[0];   // hiermit kann im Programm gearbeitet werden

#define MAGIC 0x124ea7a9	// Ändern zum Löschen der Konfig

void setDefaults()
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
	pcfgdata->magic = MAGIC;
 800edda:	4b6c      	ldr	r3, [pc, #432]	; (800ef8c <setDefaults+0x1b8>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4a6c      	ldr	r2, [pc, #432]	; (800ef90 <setDefaults+0x1bc>)
 800ede0:	601a      	str	r2, [r3, #0]

	pcfgdata->touch_left = TOUCH_DEFAULT_LEFT;
 800ede2:	4b6a      	ldr	r3, [pc, #424]	; (800ef8c <setDefaults+0x1b8>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f640 723c 	movw	r2, #3900	; 0xf3c
 800edea:	605a      	str	r2, [r3, #4]
	pcfgdata->touch_right = TOUCH_DEFAULT_RIGHT;
 800edec:	4b67      	ldr	r3, [pc, #412]	; (800ef8c <setDefaults+0x1b8>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	227b      	movs	r2, #123	; 0x7b
 800edf2:	609a      	str	r2, [r3, #8]
	pcfgdata->touch_top = TOUCH_DEFAULT_TOP;
 800edf4:	4b65      	ldr	r3, [pc, #404]	; (800ef8c <setDefaults+0x1b8>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f640 726e 	movw	r2, #3950	; 0xf6e
 800edfc:	60da      	str	r2, [r3, #12]
	pcfgdata->touch_bottom = TOUCH_DEFAULT_BOTTOM;
 800edfe:	4b63      	ldr	r3, [pc, #396]	; (800ef8c <setDefaults+0x1b8>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ee06:	611a      	str	r2, [r3, #16]

	pcfgdata->language = 0;
 800ee08:	4b60      	ldr	r3, [pc, #384]	; (800ef8c <setDefaults+0x1b8>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	pcfgdata->display_reverse = 0;
 800ee12:	4b5e      	ldr	r3, [pc, #376]	; (800ef8c <setDefaults+0x1b8>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	pcfgdata->tempunits = 0;
 800ee1c:	4b5b      	ldr	r3, [pc, #364]	; (800ef8c <setDefaults+0x1b8>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	pcfgdata->maxpwrunits = 2;
 800ee26:	4b59      	ldr	r3, [pc, #356]	; (800ef8c <setDefaults+0x1b8>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2202      	movs	r2, #2
 800ee2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	pcfgdata->maxdrvpwrunits = 2;
 800ee30:	4b56      	ldr	r3, [pc, #344]	; (800ef8c <setDefaults+0x1b8>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2202      	movs	r2, #2
 800ee36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	pcfgdata->maxUunits = 1;
 800ee3a:	4b54      	ldr	r3, [pc, #336]	; (800ef8c <setDefaults+0x1b8>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	pcfgdata->maxIunits = 1;
 800ee44:	4b51      	ldr	r3, [pc, #324]	; (800ef8c <setDefaults+0x1b8>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	pcfgdata->bandmode = 0;
 800ee4e:	4b4f      	ldr	r3, [pc, #316]	; (800ef8c <setDefaults+0x1b8>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	pcfgdata->shuntR = 0;
 800ee58:	4b4c      	ldr	r3, [pc, #304]	; (800ef8c <setDefaults+0x1b8>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	pcfgdata->I_limit = 30;
 800ee62:	4b4a      	ldr	r3, [pc, #296]	; (800ef8c <setDefaults+0x1b8>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	221e      	movs	r2, #30
 800ee68:	829a      	strh	r2, [r3, #20]
	pcfgdata->U_limit = 51;
 800ee6a:	4b48      	ldr	r3, [pc, #288]	; (800ef8c <setDefaults+0x1b8>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2233      	movs	r2, #51	; 0x33
 800ee70:	82da      	strh	r2, [r3, #22]
	pcfgdata->Temp_limit = 55;
 800ee72:	4b46      	ldr	r3, [pc, #280]	; (800ef8c <setDefaults+0x1b8>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2237      	movs	r2, #55	; 0x37
 800ee78:	831a      	strh	r2, [r3, #24]
	pcfgdata->Drive_limit = 10;
 800ee7a:	4b44      	ldr	r3, [pc, #272]	; (800ef8c <setDefaults+0x1b8>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	220a      	movs	r2, #10
 800ee80:	835a      	strh	r2, [r3, #26]
	pcfgdata->Time_limit_minutes = 5;
 800ee82:	4b42      	ldr	r3, [pc, #264]	; (800ef8c <setDefaults+0x1b8>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2205      	movs	r2, #5
 800ee88:	839a      	strh	r2, [r3, #28]
	pcfgdata->fan_temp = 40;
 800ee8a:	4b40      	ldr	r3, [pc, #256]	; (800ef8c <setDefaults+0x1b8>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2228      	movs	r2, #40	; 0x28
 800ee90:	83da      	strh	r2, [r3, #30]
	pcfgdata->pttdelay = 0;
 800ee92:	4b3e      	ldr	r3, [pc, #248]	; (800ef8c <setDefaults+0x1b8>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2200      	movs	r2, #0
 800ee98:	841a      	strh	r2, [r3, #32]
	pcfgdata->systemMode = 0;
 800ee9a:	4b3c      	ldr	r3, [pc, #240]	; (800ef8c <setDefaults+0x1b8>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	pcfgdata->auxInputMode = PTT4x; // 0=rotSwitch, 1=4xPTTin
 800eea4:	4b39      	ldr	r3, [pc, #228]	; (800ef8c <setDefaults+0x1b8>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	pcfgdata->civ_adr1 = 0;
 800eeae:	4b37      	ldr	r3, [pc, #220]	; (800ef8c <setDefaults+0x1b8>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcfgdata->civ_adr2 = 0;
 800eeb8:	4b34      	ldr	r3, [pc, #208]	; (800ef8c <setDefaults+0x1b8>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	pcfgdata->civ_adr3 = 0;
 800eec2:	4b32      	ldr	r3, [pc, #200]	; (800ef8c <setDefaults+0x1b8>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2200      	movs	r2, #0
 800eec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	pcfgdata->civ_adr4 = 0;
 800eecc:	4b2f      	ldr	r3, [pc, #188]	; (800ef8c <setDefaults+0x1b8>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	pcfgdata->ant_W_low = 3;
 800eed6:	4b2d      	ldr	r3, [pc, #180]	; (800ef8c <setDefaults+0x1b8>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a2e      	ldr	r2, [pc, #184]	; (800ef94 <setDefaults+0x1c0>)
 800eedc:	651a      	str	r2, [r3, #80]	; 0x50
	pcfgdata->ant_W_high = 100;
 800eede:	4b2b      	ldr	r3, [pc, #172]	; (800ef8c <setDefaults+0x1b8>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a2d      	ldr	r2, [pc, #180]	; (800ef98 <setDefaults+0x1c4>)
 800eee4:	655a      	str	r2, [r3, #84]	; 0x54
	pcfgdata->ant_mV_low = 1666;
 800eee6:	4b29      	ldr	r3, [pc, #164]	; (800ef8c <setDefaults+0x1b8>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a2c      	ldr	r2, [pc, #176]	; (800ef9c <setDefaults+0x1c8>)
 800eeec:	659a      	str	r2, [r3, #88]	; 0x58
	pcfgdata->ant_mV_high = 2058;
 800eeee:	4b27      	ldr	r3, [pc, #156]	; (800ef8c <setDefaults+0x1b8>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a2b      	ldr	r2, [pc, #172]	; (800efa0 <setDefaults+0x1cc>)
 800eef4:	65da      	str	r2, [r3, #92]	; 0x5c
	pcfgdata->flt_W_low = 3;
 800eef6:	4b25      	ldr	r3, [pc, #148]	; (800ef8c <setDefaults+0x1b8>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a26      	ldr	r2, [pc, #152]	; (800ef94 <setDefaults+0x1c0>)
 800eefc:	661a      	str	r2, [r3, #96]	; 0x60
	pcfgdata->flt_W_high = 100;
 800eefe:	4b23      	ldr	r3, [pc, #140]	; (800ef8c <setDefaults+0x1b8>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4a25      	ldr	r2, [pc, #148]	; (800ef98 <setDefaults+0x1c4>)
 800ef04:	665a      	str	r2, [r3, #100]	; 0x64
	pcfgdata->flt_mV_low = 1561;
 800ef06:	4b21      	ldr	r3, [pc, #132]	; (800ef8c <setDefaults+0x1b8>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a26      	ldr	r2, [pc, #152]	; (800efa4 <setDefaults+0x1d0>)
 800ef0c:	669a      	str	r2, [r3, #104]	; 0x68
	pcfgdata->flt_mV_high = 1909;
 800ef0e:	4b1f      	ldr	r3, [pc, #124]	; (800ef8c <setDefaults+0x1b8>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4a25      	ldr	r2, [pc, #148]	; (800efa8 <setDefaults+0x1d4>)
 800ef14:	66da      	str	r2, [r3, #108]	; 0x6c
	pcfgdata->drv_W_low = 2;
 800ef16:	4b1d      	ldr	r3, [pc, #116]	; (800ef8c <setDefaults+0x1b8>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ef1e:	671a      	str	r2, [r3, #112]	; 0x70
	pcfgdata->drv_W_high = 10;
 800ef20:	4b1a      	ldr	r3, [pc, #104]	; (800ef8c <setDefaults+0x1b8>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a21      	ldr	r2, [pc, #132]	; (800efac <setDefaults+0x1d8>)
 800ef26:	675a      	str	r2, [r3, #116]	; 0x74
	pcfgdata->drv_mV_low = 1412;
 800ef28:	4b18      	ldr	r3, [pc, #96]	; (800ef8c <setDefaults+0x1b8>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a20      	ldr	r2, [pc, #128]	; (800efb0 <setDefaults+0x1dc>)
 800ef2e:	679a      	str	r2, [r3, #120]	; 0x78
	pcfgdata->drv_mV_high = 1572;
 800ef30:	4b16      	ldr	r3, [pc, #88]	; (800ef8c <setDefaults+0x1b8>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a1f      	ldr	r2, [pc, #124]	; (800efb4 <setDefaults+0x1e0>)
 800ef36:	67da      	str	r2, [r3, #124]	; 0x7c

	pcfgdata->antsw = 0;
 800ef38:	4b14      	ldr	r3, [pc, #80]	; (800ef8c <setDefaults+0x1b8>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	for(int i=0; i<11; i++)
 800ef42:	2300      	movs	r3, #0
 800ef44:	607b      	str	r3, [r7, #4]
 800ef46:	e017      	b.n	800ef78 <setDefaults+0x1a4>
	{
		pcfgdata->antsw_bandsel[0][i] = 0;
 800ef48:	4b10      	ldr	r3, [pc, #64]	; (800ef8c <setDefaults+0x1b8>)
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	4413      	add	r3, r2
 800ef50:	33a9      	adds	r3, #169	; 0xa9
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]
		pcfgdata->antsw_bandsel[1][i] = 0;
 800ef56:	4b0d      	ldr	r3, [pc, #52]	; (800ef8c <setDefaults+0x1b8>)
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	33b4      	adds	r3, #180	; 0xb4
 800ef60:	2200      	movs	r2, #0
 800ef62:	701a      	strb	r2, [r3, #0]
		pcfgdata->antsw_bandsel[2][i] = 0;
 800ef64:	4b09      	ldr	r3, [pc, #36]	; (800ef8c <setDefaults+0x1b8>)
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	33bf      	adds	r3, #191	; 0xbf
 800ef6e:	2200      	movs	r2, #0
 800ef70:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<11; i++)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	3301      	adds	r3, #1
 800ef76:	607b      	str	r3, [r7, #4]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b0a      	cmp	r3, #10
 800ef7c:	dde4      	ble.n	800ef48 <setDefaults+0x174>
	}

	copy_ram_to_flash();
 800ef7e:	f000 f81b 	bl	800efb8 <copy_ram_to_flash>
}
 800ef82:	bf00      	nop
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20000bf0 	.word	0x20000bf0
 800ef90:	124ea7a9 	.word	0x124ea7a9
 800ef94:	40400000 	.word	0x40400000
 800ef98:	42c80000 	.word	0x42c80000
 800ef9c:	44d04000 	.word	0x44d04000
 800efa0:	4500a000 	.word	0x4500a000
 800efa4:	44c32000 	.word	0x44c32000
 800efa8:	44eea000 	.word	0x44eea000
 800efac:	41200000 	.word	0x41200000
 800efb0:	44b08000 	.word	0x44b08000
 800efb4:	44c48000 	.word	0x44c48000

0800efb8 <copy_ram_to_flash>:
 * es wird im Programm nur die erste Struktur benutzt.
 * Erst vor dem schreiben ins Flash wird sie dupliziert
*/

void copy_ram_to_flash()
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
int i;
uint32_t pflash = FLASHDATA_START;
 800efbe:	4b3a      	ldr	r3, [pc, #232]	; (800f0a8 <copy_ram_to_flash+0xf0>)
 800efc0:	613b      	str	r3, [r7, #16]
unsigned char *pdata0 = (unsigned char *)(&flashdata[0]);
 800efc2:	4b3a      	ldr	r3, [pc, #232]	; (800f0ac <copy_ram_to_flash+0xf4>)
 800efc4:	60fb      	str	r3, [r7, #12]
unsigned char *pdata1 = (unsigned char *)(&flashdata[1]);
 800efc6:	4b3a      	ldr	r3, [pc, #232]	; (800f0b0 <copy_ram_to_flash+0xf8>)
 800efc8:	60bb      	str	r3, [r7, #8]
unsigned char *pdata2 = (unsigned char *)(&flashdata[2]);
 800efca:	4b3a      	ldr	r3, [pc, #232]	; (800f0b4 <copy_ram_to_flash+0xfc>)
 800efcc:	607b      	str	r3, [r7, #4]

    // calc CRC
    flashdata[0].crc16 = crc16_messagecalc((unsigned char *)(&flashdata[0]), sizeof(t_fdata) - sizeof(int));
 800efce:	21cc      	movs	r1, #204	; 0xcc
 800efd0:	4836      	ldr	r0, [pc, #216]	; (800f0ac <copy_ram_to_flash+0xf4>)
 800efd2:	f000 f94f 	bl	800f274 <crc16_messagecalc>
 800efd6:	4602      	mov	r2, r0
 800efd8:	4b34      	ldr	r3, [pc, #208]	; (800f0ac <copy_ram_to_flash+0xf4>)
 800efda:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    // die abgelegten Werte stehen in pdata0
    // kopiere sie in die anderen beiden Strukturen
    for(i=0; i<sizeof(t_fdata); i++)
 800efde:	2300      	movs	r3, #0
 800efe0:	617b      	str	r3, [r7, #20]
 800efe2:	e00f      	b.n	800f004 <copy_ram_to_flash+0x4c>
        pdata1[i] = pdata2[i] = pdata0[i];
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	441a      	add	r2, r3
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	6879      	ldr	r1, [r7, #4]
 800efee:	440b      	add	r3, r1
 800eff0:	7812      	ldrb	r2, [r2, #0]
 800eff2:	701a      	strb	r2, [r3, #0]
 800eff4:	697a      	ldr	r2, [r7, #20]
 800eff6:	68b9      	ldr	r1, [r7, #8]
 800eff8:	440a      	add	r2, r1
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	7013      	strb	r3, [r2, #0]
    for(i=0; i<sizeof(t_fdata); i++)
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	3301      	adds	r3, #1
 800f002:	617b      	str	r3, [r7, #20]
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	2bcf      	cmp	r3, #207	; 0xcf
 800f008:	d9ec      	bls.n	800efe4 <copy_ram_to_flash+0x2c>
    
    // unlock flash
    FLASH_Unlock();
 800f00a:	f7fa fa2f 	bl	800946c <FLASH_Unlock>

    // lösche den ganzen Sector 8
    FLASH_EraseSector(DATASECTOR, VoltageRange_3);
 800f00e:	2102      	movs	r1, #2
 800f010:	2040      	movs	r0, #64	; 0x40
 800f012:	f7fa fa53 	bl	80094bc <FLASH_EraseSector>
    
    // kopiere die Daten
    for(i=0; i<sizeof(t_fdata); i++)
 800f016:	2300      	movs	r3, #0
 800f018:	617b      	str	r3, [r7, #20]
 800f01a:	e00d      	b.n	800f038 <copy_ram_to_flash+0x80>
    	FLASH_ProgramByte(pflash++, pdata0[i]);
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	1c5a      	adds	r2, r3, #1
 800f020:	613a      	str	r2, [r7, #16]
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	68f9      	ldr	r1, [r7, #12]
 800f026:	440a      	add	r2, r1
 800f028:	7812      	ldrb	r2, [r2, #0]
 800f02a:	4611      	mov	r1, r2
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fa faa5 	bl	800957c <FLASH_ProgramByte>
    for(i=0; i<sizeof(t_fdata); i++)
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	3301      	adds	r3, #1
 800f036:	617b      	str	r3, [r7, #20]
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	2bcf      	cmp	r3, #207	; 0xcf
 800f03c:	d9ee      	bls.n	800f01c <copy_ram_to_flash+0x64>

    for(i=0; i<sizeof(t_fdata); i++)
 800f03e:	2300      	movs	r3, #0
 800f040:	617b      	str	r3, [r7, #20]
 800f042:	e00d      	b.n	800f060 <copy_ram_to_flash+0xa8>
    	FLASH_ProgramByte(pflash++, pdata1[i]);
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	613a      	str	r2, [r7, #16]
 800f04a:	697a      	ldr	r2, [r7, #20]
 800f04c:	68b9      	ldr	r1, [r7, #8]
 800f04e:	440a      	add	r2, r1
 800f050:	7812      	ldrb	r2, [r2, #0]
 800f052:	4611      	mov	r1, r2
 800f054:	4618      	mov	r0, r3
 800f056:	f7fa fa91 	bl	800957c <FLASH_ProgramByte>
    for(i=0; i<sizeof(t_fdata); i++)
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	3301      	adds	r3, #1
 800f05e:	617b      	str	r3, [r7, #20]
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	2bcf      	cmp	r3, #207	; 0xcf
 800f064:	d9ee      	bls.n	800f044 <copy_ram_to_flash+0x8c>

    for(i=0; i<sizeof(t_fdata); i++)
 800f066:	2300      	movs	r3, #0
 800f068:	617b      	str	r3, [r7, #20]
 800f06a:	e00d      	b.n	800f088 <copy_ram_to_flash+0xd0>
    	FLASH_ProgramByte(pflash++, pdata2[i]);
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	1c5a      	adds	r2, r3, #1
 800f070:	613a      	str	r2, [r7, #16]
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	6879      	ldr	r1, [r7, #4]
 800f076:	440a      	add	r2, r1
 800f078:	7812      	ldrb	r2, [r2, #0]
 800f07a:	4611      	mov	r1, r2
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fa fa7d 	bl	800957c <FLASH_ProgramByte>
    for(i=0; i<sizeof(t_fdata); i++)
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	3301      	adds	r3, #1
 800f086:	617b      	str	r3, [r7, #20]
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2bcf      	cmp	r3, #207	; 0xcf
 800f08c:	d9ee      	bls.n	800f06c <copy_ram_to_flash+0xb4>

    // lock flash
    FLASH_Lock();
 800f08e:	f7fa fa05 	bl	800949c <FLASH_Lock>

    setup_modified = 0;
 800f092:	4b09      	ldr	r3, [pc, #36]	; (800f0b8 <copy_ram_to_flash+0x100>)
 800f094:	2200      	movs	r2, #0
 800f096:	601a      	str	r2, [r3, #0]
    send_config = 1;	// send config to wifi
 800f098:	4b08      	ldr	r3, [pc, #32]	; (800f0bc <copy_ram_to_flash+0x104>)
 800f09a:	2201      	movs	r2, #1
 800f09c:	601a      	str	r2, [r3, #0]
}
 800f09e:	bf00      	nop
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	08080000 	.word	0x08080000
 800f0ac:	2000471c 	.word	0x2000471c
 800f0b0:	200047ec 	.word	0x200047ec
 800f0b4:	200048bc 	.word	0x200048bc
 800f0b8:	2000277c 	.word	0x2000277c
 800f0bc:	200027d0 	.word	0x200027d0

0800f0c0 <copy_flash_to_ram>:

// 1=ok, 0=Fehler (reset to defaults)
int copy_flash_to_ram()
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b088      	sub	sp, #32
 800f0c4:	af00      	add	r7, sp, #0
volatile unsigned char *pflash = (unsigned char *)FLASHDATA_START;
 800f0c6:	4b4c      	ldr	r3, [pc, #304]	; (800f1f8 <copy_flash_to_ram+0x138>)
 800f0c8:	61fb      	str	r3, [r7, #28]
unsigned char *pdata0 = (unsigned char *)(&flashdata[0]);
 800f0ca:	4b4c      	ldr	r3, [pc, #304]	; (800f1fc <copy_flash_to_ram+0x13c>)
 800f0cc:	617b      	str	r3, [r7, #20]
unsigned char *pdata1 = (unsigned char *)(&flashdata[1]);
 800f0ce:	4b4c      	ldr	r3, [pc, #304]	; (800f200 <copy_flash_to_ram+0x140>)
 800f0d0:	613b      	str	r3, [r7, #16]
unsigned char *pdata2 = (unsigned char *)(&flashdata[2]);
 800f0d2:	4b4c      	ldr	r3, [pc, #304]	; (800f204 <copy_flash_to_ram+0x144>)
 800f0d4:	60fb      	str	r3, [r7, #12]
int i;
unsigned int crc16;
int datasize = sizeof(t_fdata) - sizeof(int);
 800f0d6:	23cc      	movs	r3, #204	; 0xcc
 800f0d8:	60bb      	str	r3, [r7, #8]

	// kopiere die Daten aus dem Flash ins Ram
    for(i=0; i<sizeof(t_fdata); i++)
 800f0da:	2300      	movs	r3, #0
 800f0dc:	61bb      	str	r3, [r7, #24]
 800f0de:	e00b      	b.n	800f0f8 <copy_flash_to_ram+0x38>
        pdata0[i] = *pflash++;
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	1c5a      	adds	r2, r3, #1
 800f0e4:	61fa      	str	r2, [r7, #28]
 800f0e6:	69ba      	ldr	r2, [r7, #24]
 800f0e8:	6979      	ldr	r1, [r7, #20]
 800f0ea:	440a      	add	r2, r1
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	7013      	strb	r3, [r2, #0]
    for(i=0; i<sizeof(t_fdata); i++)
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	61bb      	str	r3, [r7, #24]
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	2bcf      	cmp	r3, #207	; 0xcf
 800f0fc:	d9f0      	bls.n	800f0e0 <copy_flash_to_ram+0x20>
    flashdata[0].magic = MAGIC;	// überschreibe, um eine geänderte Magic zu erkennen
 800f0fe:	4b3f      	ldr	r3, [pc, #252]	; (800f1fc <copy_flash_to_ram+0x13c>)
 800f100:	4a41      	ldr	r2, [pc, #260]	; (800f208 <copy_flash_to_ram+0x148>)
 800f102:	601a      	str	r2, [r3, #0]

    for(i=0; i<sizeof(t_fdata); i++)
 800f104:	2300      	movs	r3, #0
 800f106:	61bb      	str	r3, [r7, #24]
 800f108:	e00b      	b.n	800f122 <copy_flash_to_ram+0x62>
        pdata1[i] = *pflash++;
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	1c5a      	adds	r2, r3, #1
 800f10e:	61fa      	str	r2, [r7, #28]
 800f110:	69ba      	ldr	r2, [r7, #24]
 800f112:	6939      	ldr	r1, [r7, #16]
 800f114:	440a      	add	r2, r1
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	7013      	strb	r3, [r2, #0]
    for(i=0; i<sizeof(t_fdata); i++)
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	3301      	adds	r3, #1
 800f120:	61bb      	str	r3, [r7, #24]
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	2bcf      	cmp	r3, #207	; 0xcf
 800f126:	d9f0      	bls.n	800f10a <copy_flash_to_ram+0x4a>
    flashdata[1].magic = MAGIC;
 800f128:	4b34      	ldr	r3, [pc, #208]	; (800f1fc <copy_flash_to_ram+0x13c>)
 800f12a:	4a37      	ldr	r2, [pc, #220]	; (800f208 <copy_flash_to_ram+0x148>)
 800f12c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    for(i=0; i<sizeof(t_fdata); i++)
 800f130:	2300      	movs	r3, #0
 800f132:	61bb      	str	r3, [r7, #24]
 800f134:	e00b      	b.n	800f14e <copy_flash_to_ram+0x8e>
        pdata2[i] = *pflash++;
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	1c5a      	adds	r2, r3, #1
 800f13a:	61fa      	str	r2, [r7, #28]
 800f13c:	69ba      	ldr	r2, [r7, #24]
 800f13e:	68f9      	ldr	r1, [r7, #12]
 800f140:	440a      	add	r2, r1
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	b2db      	uxtb	r3, r3
 800f146:	7013      	strb	r3, [r2, #0]
    for(i=0; i<sizeof(t_fdata); i++)
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	3301      	adds	r3, #1
 800f14c:	61bb      	str	r3, [r7, #24]
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	2bcf      	cmp	r3, #207	; 0xcf
 800f152:	d9f0      	bls.n	800f136 <copy_flash_to_ram+0x76>
    flashdata[2].magic = MAGIC;
 800f154:	4b29      	ldr	r3, [pc, #164]	; (800f1fc <copy_flash_to_ram+0x13c>)
 800f156:	4a2c      	ldr	r2, [pc, #176]	; (800f208 <copy_flash_to_ram+0x148>)
 800f158:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

    // prüfe crc16
    crc16 = crc16_messagecalc(pdata0, datasize);
 800f15c:	68b9      	ldr	r1, [r7, #8]
 800f15e:	6978      	ldr	r0, [r7, #20]
 800f160:	f000 f888 	bl	800f274 <crc16_messagecalc>
 800f164:	6078      	str	r0, [r7, #4]
    if(crc16 == flashdata[0].crc16) return 1; // alles ok
 800f166:	4b25      	ldr	r3, [pc, #148]	; (800f1fc <copy_flash_to_ram+0x13c>)
 800f168:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d101      	bne.n	800f176 <copy_flash_to_ram+0xb6>
 800f172:	2301      	movs	r3, #1
 800f174:	e03c      	b.n	800f1f0 <copy_flash_to_ram+0x130>
        
    // erste Struktur defekt, versuche zweite
    crc16 = crc16_messagecalc(pdata1, datasize);
 800f176:	68b9      	ldr	r1, [r7, #8]
 800f178:	6938      	ldr	r0, [r7, #16]
 800f17a:	f000 f87b 	bl	800f274 <crc16_messagecalc>
 800f17e:	6078      	str	r0, [r7, #4]
    if(crc16 == flashdata[1].crc16) 
 800f180:	4b1e      	ldr	r3, [pc, #120]	; (800f1fc <copy_flash_to_ram+0x13c>)
 800f182:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d112      	bne.n	800f1b2 <copy_flash_to_ram+0xf2>
    {
        // ist ok
        for(i=0; i<sizeof(t_fdata); i++) pdata0[i] = pdata1[i];
 800f18c:	2300      	movs	r3, #0
 800f18e:	61bb      	str	r3, [r7, #24]
 800f190:	e00a      	b.n	800f1a8 <copy_flash_to_ram+0xe8>
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	693a      	ldr	r2, [r7, #16]
 800f196:	441a      	add	r2, r3
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	6979      	ldr	r1, [r7, #20]
 800f19c:	440b      	add	r3, r1
 800f19e:	7812      	ldrb	r2, [r2, #0]
 800f1a0:	701a      	strb	r2, [r3, #0]
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	61bb      	str	r3, [r7, #24]
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	2bcf      	cmp	r3, #207	; 0xcf
 800f1ac:	d9f1      	bls.n	800f192 <copy_flash_to_ram+0xd2>
        return 1;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e01e      	b.n	800f1f0 <copy_flash_to_ram+0x130>
    }
    
    // zweite Struktur defekt, versuche dritte
    crc16 = crc16_messagecalc(pdata2, datasize);
 800f1b2:	68b9      	ldr	r1, [r7, #8]
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f000 f85d 	bl	800f274 <crc16_messagecalc>
 800f1ba:	6078      	str	r0, [r7, #4]
    if(crc16 == flashdata[2].crc16) 
 800f1bc:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <copy_flash_to_ram+0x13c>)
 800f1be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d112      	bne.n	800f1ee <copy_flash_to_ram+0x12e>
    {
        // ist ok
        for(i=0; i<sizeof(t_fdata); i++) pdata0[i] = pdata2[i];
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	61bb      	str	r3, [r7, #24]
 800f1cc:	e00a      	b.n	800f1e4 <copy_flash_to_ram+0x124>
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	68fa      	ldr	r2, [r7, #12]
 800f1d2:	441a      	add	r2, r3
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	6979      	ldr	r1, [r7, #20]
 800f1d8:	440b      	add	r3, r1
 800f1da:	7812      	ldrb	r2, [r2, #0]
 800f1dc:	701a      	strb	r2, [r3, #0]
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	61bb      	str	r3, [r7, #24]
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	2bcf      	cmp	r3, #207	; 0xcf
 800f1e8:	d9f1      	bls.n	800f1ce <copy_flash_to_ram+0x10e>
        return 1;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e000      	b.n	800f1f0 <copy_flash_to_ram+0x130>
    }

    return 0;
 800f1ee:	2300      	movs	r3, #0
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3720      	adds	r7, #32
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	08080000 	.word	0x08080000
 800f1fc:	2000471c 	.word	0x2000471c
 800f200:	200047ec 	.word	0x200047ec
 800f204:	200048bc 	.word	0x200048bc
 800f208:	124ea7a9 	.word	0x124ea7a9

0800f20c <crc16_bytecalc>:
// ====== CRC Funktionen ======

 unsigned int reg16 = 0xffff;         // Schieberegister
 
 unsigned int crc16_bytecalc(unsigned char byte)
 {
 800f20c:	b480      	push	{r7}
 800f20e:	b085      	sub	sp, #20
 800f210:	af00      	add	r7, sp, #0
 800f212:	4603      	mov	r3, r0
 800f214:	71fb      	strb	r3, [r7, #7]
	 int i;
	 unsigned int polynom = 0x8408;        // Generatorpolynom
 800f216:	f248 4308 	movw	r3, #33800	; 0x8408
 800f21a:	60bb      	str	r3, [r7, #8]

	 for (i=0; i<8; ++i)
 800f21c:	2300      	movs	r3, #0
 800f21e:	60fb      	str	r3, [r7, #12]
 800f220:	e01a      	b.n	800f258 <crc16_bytecalc+0x4c>
	 {
		 if ((reg16&1) != (byte&1))
 800f222:	79fa      	ldrb	r2, [r7, #7]
 800f224:	4b12      	ldr	r3, [pc, #72]	; (800f270 <crc16_bytecalc+0x64>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4053      	eors	r3, r2
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d007      	beq.n	800f242 <crc16_bytecalc+0x36>
            reg16 = (reg16>>1)^polynom;
 800f232:	4b0f      	ldr	r3, [pc, #60]	; (800f270 <crc16_bytecalc+0x64>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	085a      	lsrs	r2, r3, #1
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	4053      	eors	r3, r2
 800f23c:	4a0c      	ldr	r2, [pc, #48]	; (800f270 <crc16_bytecalc+0x64>)
 800f23e:	6013      	str	r3, [r2, #0]
 800f240:	e004      	b.n	800f24c <crc16_bytecalc+0x40>
		 else
            reg16 >>= 1;
 800f242:	4b0b      	ldr	r3, [pc, #44]	; (800f270 <crc16_bytecalc+0x64>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	085b      	lsrs	r3, r3, #1
 800f248:	4a09      	ldr	r2, [pc, #36]	; (800f270 <crc16_bytecalc+0x64>)
 800f24a:	6013      	str	r3, [r2, #0]
		 byte >>= 1;
 800f24c:	79fb      	ldrb	r3, [r7, #7]
 800f24e:	085b      	lsrs	r3, r3, #1
 800f250:	71fb      	strb	r3, [r7, #7]
	 for (i=0; i<8; ++i)
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	3301      	adds	r3, #1
 800f256:	60fb      	str	r3, [r7, #12]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2b07      	cmp	r3, #7
 800f25c:	dde1      	ble.n	800f222 <crc16_bytecalc+0x16>
	 }
	 return reg16;             // inverses Ergebnis, MSB zuerst
 800f25e:	4b04      	ldr	r3, [pc, #16]	; (800f270 <crc16_bytecalc+0x64>)
 800f260:	681b      	ldr	r3, [r3, #0]
 }
 800f262:	4618      	mov	r0, r3
 800f264:	3714      	adds	r7, #20
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	20000bf4 	.word	0x20000bf4

0800f274 <crc16_messagecalc>:

 unsigned int crc16_messagecalc(unsigned char *data, int len)
 {
 800f274:	b580      	push	{r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
	 int i;

	 reg16 = 0xffff;					// Initialisiere Shift-Register mit Startwert
 800f27e:	4b0f      	ldr	r3, [pc, #60]	; (800f2bc <crc16_messagecalc+0x48>)
 800f280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f284:	601a      	str	r2, [r3, #0]
	 for(i=0; i<len; i++) {
 800f286:	2300      	movs	r3, #0
 800f288:	60fb      	str	r3, [r7, #12]
 800f28a:	e00c      	b.n	800f2a6 <crc16_messagecalc+0x32>
		 reg16 = crc16_bytecalc(data[i]);		// Berechne fuer jeweils 8 Bit der Nachricht
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	4413      	add	r3, r2
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	4618      	mov	r0, r3
 800f296:	f7ff ffb9 	bl	800f20c <crc16_bytecalc>
 800f29a:	4602      	mov	r2, r0
 800f29c:	4b07      	ldr	r3, [pc, #28]	; (800f2bc <crc16_messagecalc+0x48>)
 800f29e:	601a      	str	r2, [r3, #0]
	 for(i=0; i<len; i++) {
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	60fb      	str	r3, [r7, #12]
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	dbee      	blt.n	800f28c <crc16_messagecalc+0x18>
	 }
	 return reg16;
 800f2ae:	4b03      	ldr	r3, [pc, #12]	; (800f2bc <crc16_messagecalc+0x48>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 }
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	20000bf4 	.word	0x20000bf4

0800f2c0 <init_freq_meas>:
#define TIM5_CCER    (*((volatile uint32_t *)(TIM5_BASE + 0x20)))
#define TIM5_CCMR1   (*((volatile uint32_t *)(TIM5_BASE + 0x18)))
#define TIM5_SMCR    (*((volatile uint32_t *)(TIM5_BASE + 0x08)))

void init_freq_meas()
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	2001      	movs	r0, #1
 800f2ca:	f7fa fcc7 	bl	8009c5c <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 800f2ce:	2101      	movs	r1, #1
 800f2d0:	2008      	movs	r0, #8
 800f2d2:	f7fa fd03 	bl	8009cdc <RCC_APB1PeriphClockCmd>

	// stelle PA1 auf Alternativen Input TIM5_Ch2
	GPIO_InitTypeDef      GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800f2d6:	2302      	movs	r3, #2
 800f2d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f2da:	2302      	movs	r3, #2
 800f2dc:	743b      	strb	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800f2e2:	f107 030c 	add.w	r3, r7, #12
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	4826      	ldr	r0, [pc, #152]	; (800f384 <init_freq_meas+0xc4>)
 800f2ea:	f7fa fae7 	bl	80098bc <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM5);
 800f2ee:	2202      	movs	r2, #2
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	4824      	ldr	r0, [pc, #144]	; (800f384 <init_freq_meas+0xc4>)
 800f2f4:	f7fa fbc0 	bl	8009a78 <GPIO_PinAFConfig>

	// stelle TIM5 auf maximale Geschwindigkeit ein
	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseInitStruct.TIM_Period = 0xffffffff;
 800f300:	f04f 33ff 	mov.w	r3, #4294967295
 800f304:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseInitStruct);
 800f30a:	463b      	mov	r3, r7
 800f30c:	4619      	mov	r1, r3
 800f30e:	481e      	ldr	r0, [pc, #120]	; (800f388 <init_freq_meas+0xc8>)
 800f310:	f7fa fde6 	bl	8009ee0 <TIM_TimeBaseInit>

	// schalte auf ext. Clock an PA1 (TIM5_Ch2) um
	// TIM5 läuft jetzt mit dem ext. Clock
	TIM_Cmd(TIM5, DISABLE);
 800f314:	2100      	movs	r1, #0
 800f316:	481c      	ldr	r0, [pc, #112]	; (800f388 <init_freq_meas+0xc8>)
 800f318:	f7fa fe4e 	bl	8009fb8 <TIM_Cmd>
	//TIM5->CCMR1 = 0x0500;
	TIM5->SMCR = 0x67;
 800f31c:	4b1a      	ldr	r3, [pc, #104]	; (800f388 <init_freq_meas+0xc8>)
 800f31e:	2267      	movs	r2, #103	; 0x67
 800f320:	811a      	strh	r2, [r3, #8]

	TIM_Cmd(TIM5, ENABLE);
 800f322:	2101      	movs	r1, #1
 800f324:	4818      	ldr	r0, [pc, #96]	; (800f388 <init_freq_meas+0xc8>)
 800f326:	f7fa fe47 	bl	8009fb8 <TIM_Cmd>

	// mache mit TIM6 einen Timeout von 1s (Torzeit)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 800f32a:	2101      	movs	r1, #1
 800f32c:	2010      	movs	r0, #16
 800f32e:	f7fa fcd5 	bl	8009cdc <RCC_APB1PeriphClockCmd>

	// Enable the TIM6 gloabal Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 800f332:	2336      	movs	r3, #54	; 0x36
 800f334:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800f336:	2300      	movs	r3, #0
 800f338:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800f33a:	2301      	movs	r3, #1
 800f33c:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800f33e:	2301      	movs	r3, #1
 800f340:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 800f342:	f107 0314 	add.w	r3, r7, #20
 800f346:	4618      	mov	r0, r3
 800f348:	f7f9 fd36 	bl	8008db8 <NVIC_Init>

	// APB1 hat 90 MHz
	TIM_TimeBaseInitStruct.TIM_Period = 9000;				// hier noch 10kHz
 800f34c:	f242 3328 	movw	r3, #9000	; 0x2328
 800f350:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 2500;			// und hier 1Hz
 800f352:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800f356:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 800f358:	2300      	movs	r3, #0
 800f35a:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Down;
 800f35c:	2310      	movs	r3, #16
 800f35e:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseInitStruct);
 800f360:	463b      	mov	r3, r7
 800f362:	4619      	mov	r1, r3
 800f364:	4809      	ldr	r0, [pc, #36]	; (800f38c <init_freq_meas+0xcc>)
 800f366:	f7fa fdbb 	bl	8009ee0 <TIM_TimeBaseInit>

	// Interrupt enable
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 800f36a:	2201      	movs	r2, #1
 800f36c:	2101      	movs	r1, #1
 800f36e:	4807      	ldr	r0, [pc, #28]	; (800f38c <init_freq_meas+0xcc>)
 800f370:	f7fa fe42 	bl	8009ff8 <TIM_ITConfig>

	// TIM3 einschalten
	TIM_Cmd(TIM6, ENABLE);
 800f374:	2101      	movs	r1, #1
 800f376:	4805      	ldr	r0, [pc, #20]	; (800f38c <init_freq_meas+0xcc>)
 800f378:	f7fa fe1e 	bl	8009fb8 <TIM_Cmd>
}
 800f37c:	bf00      	nop
 800f37e:	3718      	adds	r7, #24
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	40020000 	.word	0x40020000
 800f388:	40000c00 	.word	0x40000c00
 800f38c:	40001000 	.word	0x40001000

0800f390 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 800f394:	2101      	movs	r1, #1
 800f396:	4808      	ldr	r0, [pc, #32]	; (800f3b8 <TIM6_DAC_IRQHandler+0x28>)
 800f398:	f7fa fe52 	bl	800a040 <TIM_GetITStatus>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d108      	bne.n	800f3b4 <TIM6_DAC_IRQHandler+0x24>
	{
		getFrequency(TIM5->CNT);
 800f3a2:	4b06      	ldr	r3, [pc, #24]	; (800f3bc <TIM6_DAC_IRQHandler+0x2c>)
 800f3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 f80a 	bl	800f3c0 <getFrequency>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 800f3ac:	2101      	movs	r1, #1
 800f3ae:	4802      	ldr	r0, [pc, #8]	; (800f3b8 <TIM6_DAC_IRQHandler+0x28>)
 800f3b0:	f7fa fe70 	bl	800a094 <TIM_ClearITPendingBit>
	}
}
 800f3b4:	bf00      	nop
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	40001000 	.word	0x40001000
 800f3bc:	40000c00 	.word	0x40000c00

0800f3c0 <getFrequency>:

float fcorr = 1000000.0/1000520.0;

void getFrequency(uint32_t frequency)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
static uint32_t lastf = 0;

	float val = frequency - lastf;
 800f3c8:	4b16      	ldr	r3, [pc, #88]	; (800f424 <getFrequency+0x64>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	ee07 3a90 	vmov	s15, r3
 800f3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3d8:	edc7 7a03 	vstr	s15, [r7, #12]
	lastf = frequency;
 800f3dc:	4a11      	ldr	r2, [pc, #68]	; (800f424 <getFrequency+0x64>)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6013      	str	r3, [r2, #0]

	float f=val*8;
 800f3e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800f3e6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800f3ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3ee:	edc7 7a02 	vstr	s15, [r7, #8]
	f = f*fcorr;
 800f3f2:	4b0d      	ldr	r3, [pc, #52]	; (800f428 <getFrequency+0x68>)
 800f3f4:	edd3 7a00 	vldr	s15, [r3]
 800f3f8:	ed97 7a02 	vldr	s14, [r7, #8]
 800f3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f400:	edc7 7a02 	vstr	s15, [r7, #8]

	adc_realvals[MFREQUENCY] = f / 1000.0;
 800f404:	ed97 7a02 	vldr	s14, [r7, #8]
 800f408:	eddf 6a08 	vldr	s13, [pc, #32]	; 800f42c <getFrequency+0x6c>
 800f40c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f410:	4b07      	ldr	r3, [pc, #28]	; (800f430 <getFrequency+0x70>)
 800f412:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 800f416:	bf00      	nop
 800f418:	3714      	adds	r7, #20
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop
 800f424:	200026b4 	.word	0x200026b4
 800f428:	20000bf8 	.word	0x20000bf8
 800f42c:	447a0000 	.word	0x447a0000
 800f430:	2000314c 	.word	0x2000314c

0800f434 <init_GPIOs>:
// beschreibt man hier einen Ausgang, so wird er automatisch gesetzt
uint8_t gpio_stat[MAXGPIOS];
uint8_t gpio_oldstat[MAXGPIOS];

void init_GPIOs()
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE, ENABLE);
 800f43a:	2101      	movs	r1, #1
 800f43c:	201f      	movs	r0, #31
 800f43e:	f7fa fc0d 	bl	8009c5c <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	// GPIO A
	GPIO_InitStructure.GPIO_Pin=SW_ONOFF_IN_PA8 | SW_RESET_IN_PA11 | SW_STANDBY_IN_PA12;
 800f442:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800f446:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f448:	2300      	movs	r3, #0
 800f44a:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f44c:	2303      	movs	r3, #3
 800f44e:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f450:	2300      	movs	r3, #0
 800f452:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f454:	2300      	movs	r3, #0
 800f456:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800f458:	1d3b      	adds	r3, r7, #4
 800f45a:	4619      	mov	r1, r3
 800f45c:	4855      	ldr	r0, [pc, #340]	; (800f5b4 <init_GPIOs+0x180>)
 800f45e:	f7fa fa2d 	bl	80098bc <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin=ROTS_AUTO_IN_PA15;
 800f462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f466:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f468:	2300      	movs	r3, #0
 800f46a:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f46c:	2303      	movs	r3, #3
 800f46e:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f470:	2300      	movs	r3, #0
 800f472:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800f474:	2301      	movs	r3, #1
 800f476:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800f478:	1d3b      	adds	r3, r7, #4
 800f47a:	4619      	mov	r1, r3
 800f47c:	484d      	ldr	r0, [pc, #308]	; (800f5b4 <init_GPIOs+0x180>)
 800f47e:	f7fa fa1d 	bl	80098bc <GPIO_Init>

	// GPIO B
	GPIO_InitStructure.GPIO_Pin=ANT_SEL1_OUT_PB6 | BANDREL_1715_OUT_PB7 | BANDREL_1210_OUT_PB9 | BANDREL_6_OUT_PB12;
 800f482:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800f486:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800f488:	2301      	movs	r3, #1
 800f48a:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f48c:	2303      	movs	r3, #3
 800f48e:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f490:	2300      	movs	r3, #0
 800f492:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f494:	2300      	movs	r3, #0
 800f496:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800f498:	1d3b      	adds	r3, r7, #4
 800f49a:	4619      	mov	r1, r3
 800f49c:	4846      	ldr	r0, [pc, #280]	; (800f5b8 <init_GPIOs+0x184>)
 800f49e:	f7fa fa0d 	bl	80098bc <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin= ROTS_80M_IN_PB8;
 800f4a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4a6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	723b      	strb	r3, [r7, #8]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800f4ac:	1d3b      	adds	r3, r7, #4
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	4841      	ldr	r0, [pc, #260]	; (800f5b8 <init_GPIOs+0x184>)
 800f4b2:	f7fa fa03 	bl	80098bc <GPIO_Init>

	// GPIO C
	GPIO_InitStructure.GPIO_Pin= ROTS_6040M_IN_PC4 | ROTS_3020M_IN_PC5 | ROTS_1715M_IN_PC6 | ROTS_1210M_IN_PC7 | ROTS_6M_IN_PC8;
 800f4b6:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800f4ba:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f4c0:	2303      	movs	r3, #3
 800f4c2:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800f4cc:	1d3b      	adds	r3, r7, #4
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	483a      	ldr	r0, [pc, #232]	; (800f5bc <init_GPIOs+0x188>)
 800f4d2:	f7fa f9f3 	bl	80098bc <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin= ROTS_160M_IN_PC13;
 800f4d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4da:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f4e0:	2303      	movs	r3, #3
 800f4e2:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800f4ec:	1d3b      	adds	r3, r7, #4
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	4832      	ldr	r0, [pc, #200]	; (800f5bc <init_GPIOs+0x188>)
 800f4f2:	f7fa f9e3 	bl	80098bc <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin=BANDREL_80_OUT_PC14 | BANDREL_6040_OUT_PC15;
 800f4f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800f4fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f500:	2303      	movs	r3, #3
 800f502:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f504:	2300      	movs	r3, #0
 800f506:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f508:	2300      	movs	r3, #0
 800f50a:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800f50c:	1d3b      	adds	r3, r7, #4
 800f50e:	4619      	mov	r1, r3
 800f510:	482a      	ldr	r0, [pc, #168]	; (800f5bc <init_GPIOs+0x188>)
 800f512:	f7fa f9d3 	bl	80098bc <GPIO_Init>

	// GPIO D
	GPIO_InitStructure.GPIO_Pin=ICOM_TKEY_IN_PD6;
 800f516:	2340      	movs	r3, #64	; 0x40
 800f518:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f51a:	2300      	movs	r3, #0
 800f51c:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f51e:	2303      	movs	r3, #3
 800f520:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f522:	2300      	movs	r3, #0
 800f524:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800f526:	2301      	movs	r3, #1
 800f528:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 800f52a:	1d3b      	adds	r3, r7, #4
 800f52c:	4619      	mov	r1, r3
 800f52e:	4824      	ldr	r0, [pc, #144]	; (800f5c0 <init_GPIOs+0x18c>)
 800f530:	f7fa f9c4 	bl	80098bc <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin=PSOFF_OUT_PD2 | ANT_SEL2_OUT_PD13;
 800f534:	f242 0304 	movw	r3, #8196	; 0x2004
 800f538:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800f53a:	2301      	movs	r3, #1
 800f53c:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f53e:	2303      	movs	r3, #3
 800f540:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f542:	2300      	movs	r3, #0
 800f544:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f546:	2300      	movs	r3, #0
 800f548:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 800f54a:	1d3b      	adds	r3, r7, #4
 800f54c:	4619      	mov	r1, r3
 800f54e:	481c      	ldr	r0, [pc, #112]	; (800f5c0 <init_GPIOs+0x18c>)
 800f550:	f7fa f9b4 	bl	80098bc <GPIO_Init>

	// GPIO E
	GPIO_InitStructure.GPIO_Pin=PTTIN_IN_PE2;
 800f554:	2304      	movs	r3, #4
 800f556:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800f558:	2300      	movs	r3, #0
 800f55a:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f55c:	2303      	movs	r3, #3
 800f55e:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f560:	2300      	movs	r3, #0
 800f562:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f564:	2300      	movs	r3, #0
 800f566:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 800f568:	1d3b      	adds	r3, r7, #4
 800f56a:	4619      	mov	r1, r3
 800f56c:	4815      	ldr	r0, [pc, #84]	; (800f5c4 <init_GPIOs+0x190>)
 800f56e:	f7fa f9a5 	bl	80098bc <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin=BANDREL_3020_OUT_PE0 | LCD_BACKLIGHT_OUT_PE1 | PSON_OUT_PE3 | FAN_OUT_PE4 | BIAS_OUT_PE5 | PTTOUT_OUT_PE6;
 800f572:	237b      	movs	r3, #123	; 0x7b
 800f574:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800f576:	2301      	movs	r3, #1
 800f578:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800f57a:	2303      	movs	r3, #3
 800f57c:	727b      	strb	r3, [r7, #9]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f57e:	2300      	movs	r3, #0
 800f580:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800f582:	2300      	movs	r3, #0
 800f584:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 800f586:	1d3b      	adds	r3, r7, #4
 800f588:	4619      	mov	r1, r3
 800f58a:	480e      	ldr	r0, [pc, #56]	; (800f5c4 <init_GPIOs+0x190>)
 800f58c:	f7fa f996 	bl	80098bc <GPIO_Init>

	for(int i=0; i<MAXGPIOS; i++)
 800f590:	2300      	movs	r3, #0
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	e007      	b.n	800f5a6 <init_GPIOs+0x172>
		gpio_stat[i] = 0;
 800f596:	4a0c      	ldr	r2, [pc, #48]	; (800f5c8 <init_GPIOs+0x194>)
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	4413      	add	r3, r2
 800f59c:	2200      	movs	r2, #0
 800f59e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MAXGPIOS; i++)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	60fb      	str	r3, [r7, #12]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2b1a      	cmp	r3, #26
 800f5aa:	ddf4      	ble.n	800f596 <init_GPIOs+0x162>
}
 800f5ac:	bf00      	nop
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	40020000 	.word	0x40020000
 800f5b8:	40020400 	.word	0x40020400
 800f5bc:	40020800 	.word	0x40020800
 800f5c0:	40020c00 	.word	0x40020c00
 800f5c4:	40021000 	.word	0x40021000
 800f5c8:	2000498c 	.word	0x2000498c

0800f5cc <read_GPIOs>:

void read_GPIOs()
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
static int oldptt4=255;
int ptt4;
static int f = 1;

	gpio_stat[SW_RESET] = GPIO_ReadInputDataBit(GPIOA, SW_RESET_IN_PA11);
 800f5d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f5d6:	4891      	ldr	r0, [pc, #580]	; (800f81c <read_GPIOs+0x250>)
 800f5d8:	f7fa f9fe 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	461a      	mov	r2, r3
 800f5e0:	4b8f      	ldr	r3, [pc, #572]	; (800f820 <read_GPIOs+0x254>)
 800f5e2:	701a      	strb	r2, [r3, #0]
	gpio_stat[SW_STANDBY] = GPIO_ReadInputDataBit(GPIOA, SW_STANDBY_IN_PA12);
 800f5e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f5e8:	488c      	ldr	r0, [pc, #560]	; (800f81c <read_GPIOs+0x250>)
 800f5ea:	f7fa f9f5 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	4b8b      	ldr	r3, [pc, #556]	; (800f820 <read_GPIOs+0x254>)
 800f5f4:	705a      	strb	r2, [r3, #1]
	gpio_stat[SW_ONOFF] = GPIO_ReadInputDataBit(GPIOA, SW_ONOFF_IN_PA8);
 800f5f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f5fa:	4888      	ldr	r0, [pc, #544]	; (800f81c <read_GPIOs+0x250>)
 800f5fc:	f7fa f9ec 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f600:	4603      	mov	r3, r0
 800f602:	461a      	mov	r2, r3
 800f604:	4b86      	ldr	r3, [pc, #536]	; (800f820 <read_GPIOs+0x254>)
 800f606:	709a      	strb	r2, [r3, #2]
	gpio_stat[ROTS_B5] = GPIO_ReadInputDataBit(GPIOC, ROTS_1715M_IN_PC6);
 800f608:	2140      	movs	r1, #64	; 0x40
 800f60a:	4886      	ldr	r0, [pc, #536]	; (800f824 <read_GPIOs+0x258>)
 800f60c:	f7fa f9e4 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f610:	4603      	mov	r3, r0
 800f612:	461a      	mov	r2, r3
 800f614:	4b82      	ldr	r3, [pc, #520]	; (800f820 <read_GPIOs+0x254>)
 800f616:	71da      	strb	r2, [r3, #7]
	gpio_stat[ROTS_B6] = GPIO_ReadInputDataBit(GPIOC, ROTS_1210M_IN_PC7);
 800f618:	2180      	movs	r1, #128	; 0x80
 800f61a:	4882      	ldr	r0, [pc, #520]	; (800f824 <read_GPIOs+0x258>)
 800f61c:	f7fa f9dc 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f620:	4603      	mov	r3, r0
 800f622:	461a      	mov	r2, r3
 800f624:	4b7e      	ldr	r3, [pc, #504]	; (800f820 <read_GPIOs+0x254>)
 800f626:	721a      	strb	r2, [r3, #8]
	gpio_stat[ROTS_B7] = GPIO_ReadInputDataBit(GPIOC, ROTS_6M_IN_PC8);
 800f628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f62c:	487d      	ldr	r0, [pc, #500]	; (800f824 <read_GPIOs+0x258>)
 800f62e:	f7fa f9d3 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f632:	4603      	mov	r3, r0
 800f634:	461a      	mov	r2, r3
 800f636:	4b7a      	ldr	r3, [pc, #488]	; (800f820 <read_GPIOs+0x254>)
 800f638:	725a      	strb	r2, [r3, #9]
	gpio_stat[ROTS_AUTO] = GPIO_ReadInputDataBit(GPIOA,ROTS_AUTO_IN_PA15);
 800f63a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f63e:	4877      	ldr	r0, [pc, #476]	; (800f81c <read_GPIOs+0x250>)
 800f640:	f7fa f9ca 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f644:	4603      	mov	r3, r0
 800f646:	461a      	mov	r2, r3
 800f648:	4b75      	ldr	r3, [pc, #468]	; (800f820 <read_GPIOs+0x254>)
 800f64a:	729a      	strb	r2, [r3, #10]
	gpio_stat[TKEY] = GPIO_ReadInputDataBit(GPIOD, ICOM_TKEY_IN_PD6);
 800f64c:	2140      	movs	r1, #64	; 0x40
 800f64e:	4876      	ldr	r0, [pc, #472]	; (800f828 <read_GPIOs+0x25c>)
 800f650:	f7fa f9c2 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f654:	4603      	mov	r3, r0
 800f656:	461a      	mov	r2, r3
 800f658:	4b71      	ldr	r3, [pc, #452]	; (800f820 <read_GPIOs+0x254>)
 800f65a:	72da      	strb	r2, [r3, #11]
	gpio_stat[PTTIN] = GPIO_ReadInputDataBit(GPIOE, PTTIN_IN_PE2)?0:1;
 800f65c:	2104      	movs	r1, #4
 800f65e:	4873      	ldr	r0, [pc, #460]	; (800f82c <read_GPIOs+0x260>)
 800f660:	f7fa f9ba 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	bf0c      	ite	eq
 800f66a:	2301      	moveq	r3, #1
 800f66c:	2300      	movne	r3, #0
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	461a      	mov	r2, r3
 800f672:	4b6b      	ldr	r3, [pc, #428]	; (800f820 <read_GPIOs+0x254>)
 800f674:	731a      	strb	r2, [r3, #12]

	// das Board 72 unterstützt keinen Rotary Switch
	#if BOARDVERSION == 72
	pcfgdata->auxInputMode = PTT4x;
 800f676:	4b6e      	ldr	r3, [pc, #440]	; (800f830 <read_GPIOs+0x264>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	gpio_stat[SW_RESET] = 1;
 800f680:	4b67      	ldr	r3, [pc, #412]	; (800f820 <read_GPIOs+0x254>)
 800f682:	2201      	movs	r2, #1
 800f684:	701a      	strb	r2, [r3, #0]
	gpio_stat[SW_STANDBY] = 1;
 800f686:	4b66      	ldr	r3, [pc, #408]	; (800f820 <read_GPIOs+0x254>)
 800f688:	2201      	movs	r2, #1
 800f68a:	705a      	strb	r2, [r3, #1]
	gpio_stat[SW_ONOFF] = 1;
 800f68c:	4b64      	ldr	r3, [pc, #400]	; (800f820 <read_GPIOs+0x254>)
 800f68e:	2201      	movs	r2, #1
 800f690:	709a      	strb	r2, [r3, #2]
	gpio_stat[ROTS_B5] = 1;
 800f692:	4b63      	ldr	r3, [pc, #396]	; (800f820 <read_GPIOs+0x254>)
 800f694:	2201      	movs	r2, #1
 800f696:	71da      	strb	r2, [r3, #7]
	gpio_stat[ROTS_B6] = 1;
 800f698:	4b61      	ldr	r3, [pc, #388]	; (800f820 <read_GPIOs+0x254>)
 800f69a:	2201      	movs	r2, #1
 800f69c:	721a      	strb	r2, [r3, #8]
	gpio_stat[ROTS_B7] = 1;
 800f69e:	4b60      	ldr	r3, [pc, #384]	; (800f820 <read_GPIOs+0x254>)
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	725a      	strb	r2, [r3, #9]
	gpio_stat[ROTS_AUTO] = 1;
 800f6a4:	4b5e      	ldr	r3, [pc, #376]	; (800f820 <read_GPIOs+0x254>)
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	729a      	strb	r2, [r3, #10]
	gpio_stat[TKEY] = 1;
 800f6aa:	4b5d      	ldr	r3, [pc, #372]	; (800f820 <read_GPIOs+0x254>)
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	72da      	strb	r2, [r3, #11]
	#endif

	if(pcfgdata->auxInputMode == ROTARYSWITCH)
 800f6b0:	4b5f      	ldr	r3, [pc, #380]	; (800f830 <read_GPIOs+0x264>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d124      	bne.n	800f706 <read_GPIOs+0x13a>
	{
		gpio_stat[ROTS_B1] = GPIO_ReadInputDataBit(GPIOC,ROTS_160M_IN_PC13);
 800f6bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f6c0:	4858      	ldr	r0, [pc, #352]	; (800f824 <read_GPIOs+0x258>)
 800f6c2:	f7fa f989 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	4b55      	ldr	r3, [pc, #340]	; (800f820 <read_GPIOs+0x254>)
 800f6cc:	70da      	strb	r2, [r3, #3]
		gpio_stat[ROTS_B2] = GPIO_ReadInputDataBit(GPIOB, ROTS_80M_IN_PB8);
 800f6ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f6d2:	4858      	ldr	r0, [pc, #352]	; (800f834 <read_GPIOs+0x268>)
 800f6d4:	f7fa f980 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	4b50      	ldr	r3, [pc, #320]	; (800f820 <read_GPIOs+0x254>)
 800f6de:	711a      	strb	r2, [r3, #4]
		gpio_stat[ROTS_B3] = GPIO_ReadInputDataBit(GPIOC, ROTS_6040M_IN_PC4);
 800f6e0:	2110      	movs	r1, #16
 800f6e2:	4850      	ldr	r0, [pc, #320]	; (800f824 <read_GPIOs+0x258>)
 800f6e4:	f7fa f978 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	4b4c      	ldr	r3, [pc, #304]	; (800f820 <read_GPIOs+0x254>)
 800f6ee:	715a      	strb	r2, [r3, #5]
		gpio_stat[ROTS_B4] = GPIO_ReadInputDataBit(GPIOC, ROTS_3020M_IN_PC5);
 800f6f0:	2120      	movs	r1, #32
 800f6f2:	484c      	ldr	r0, [pc, #304]	; (800f824 <read_GPIOs+0x258>)
 800f6f4:	f7fa f970 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	4b48      	ldr	r3, [pc, #288]	; (800f820 <read_GPIOs+0x254>)
 800f6fe:	719a      	strb	r2, [r3, #6]
		f = 1;
 800f700:	4b4d      	ldr	r3, [pc, #308]	; (800f838 <read_GPIOs+0x26c>)
 800f702:	2201      	movs	r2, #1
 800f704:	601a      	str	r2, [r3, #0]
	}

	if(pcfgdata->auxInputMode == PTT4x)
 800f706:	4b4a      	ldr	r3, [pc, #296]	; (800f830 <read_GPIOs+0x264>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d17f      	bne.n	800f812 <read_GPIOs+0x246>
	{
		// simuliere das bistabile Relais
		// wenn ein PTT Eingang auf 0 geht, setze und LASSE ihn auf 0, solange bis ein anderer kommt
		if(GPIO_ReadInputDataBit(GPIOC,ROTS_160M_IN_PC13) == 0)
 800f712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f716:	4843      	ldr	r0, [pc, #268]	; (800f824 <read_GPIOs+0x258>)
 800f718:	f7fa f95e 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10c      	bne.n	800f73c <read_GPIOs+0x170>
		{
			gpio_stat[ROTS_B1] = 0;
 800f722:	4b3f      	ldr	r3, [pc, #252]	; (800f820 <read_GPIOs+0x254>)
 800f724:	2200      	movs	r2, #0
 800f726:	70da      	strb	r2, [r3, #3]
			gpio_stat[ROTS_B2] = 1;
 800f728:	4b3d      	ldr	r3, [pc, #244]	; (800f820 <read_GPIOs+0x254>)
 800f72a:	2201      	movs	r2, #1
 800f72c:	711a      	strb	r2, [r3, #4]
			gpio_stat[ROTS_B3] = 1;
 800f72e:	4b3c      	ldr	r3, [pc, #240]	; (800f820 <read_GPIOs+0x254>)
 800f730:	2201      	movs	r2, #1
 800f732:	715a      	strb	r2, [r3, #5]
			gpio_stat[ROTS_B4] = 1;
 800f734:	4b3a      	ldr	r3, [pc, #232]	; (800f820 <read_GPIOs+0x254>)
 800f736:	2201      	movs	r2, #1
 800f738:	719a      	strb	r2, [r3, #6]
 800f73a:	e04f      	b.n	800f7dc <read_GPIOs+0x210>
		}
		else if(GPIO_ReadInputDataBit(GPIOB, ROTS_80M_IN_PB8) == 0)
 800f73c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f740:	483c      	ldr	r0, [pc, #240]	; (800f834 <read_GPIOs+0x268>)
 800f742:	f7fa f949 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d10c      	bne.n	800f766 <read_GPIOs+0x19a>
		{
			gpio_stat[ROTS_B1] = 1;
 800f74c:	4b34      	ldr	r3, [pc, #208]	; (800f820 <read_GPIOs+0x254>)
 800f74e:	2201      	movs	r2, #1
 800f750:	70da      	strb	r2, [r3, #3]
			gpio_stat[ROTS_B2] = 0;
 800f752:	4b33      	ldr	r3, [pc, #204]	; (800f820 <read_GPIOs+0x254>)
 800f754:	2200      	movs	r2, #0
 800f756:	711a      	strb	r2, [r3, #4]
			gpio_stat[ROTS_B3] = 1;
 800f758:	4b31      	ldr	r3, [pc, #196]	; (800f820 <read_GPIOs+0x254>)
 800f75a:	2201      	movs	r2, #1
 800f75c:	715a      	strb	r2, [r3, #5]
			gpio_stat[ROTS_B4] = 1;
 800f75e:	4b30      	ldr	r3, [pc, #192]	; (800f820 <read_GPIOs+0x254>)
 800f760:	2201      	movs	r2, #1
 800f762:	719a      	strb	r2, [r3, #6]
 800f764:	e03a      	b.n	800f7dc <read_GPIOs+0x210>
		}
		else if(GPIO_ReadInputDataBit(GPIOC,ROTS_6040M_IN_PC4) == 0)
 800f766:	2110      	movs	r1, #16
 800f768:	482e      	ldr	r0, [pc, #184]	; (800f824 <read_GPIOs+0x258>)
 800f76a:	f7fa f935 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d10c      	bne.n	800f78e <read_GPIOs+0x1c2>
		{
			gpio_stat[ROTS_B1] = 1;
 800f774:	4b2a      	ldr	r3, [pc, #168]	; (800f820 <read_GPIOs+0x254>)
 800f776:	2201      	movs	r2, #1
 800f778:	70da      	strb	r2, [r3, #3]
			gpio_stat[ROTS_B2] = 1;
 800f77a:	4b29      	ldr	r3, [pc, #164]	; (800f820 <read_GPIOs+0x254>)
 800f77c:	2201      	movs	r2, #1
 800f77e:	711a      	strb	r2, [r3, #4]
			gpio_stat[ROTS_B3] = 0;
 800f780:	4b27      	ldr	r3, [pc, #156]	; (800f820 <read_GPIOs+0x254>)
 800f782:	2200      	movs	r2, #0
 800f784:	715a      	strb	r2, [r3, #5]
			gpio_stat[ROTS_B4] = 1;
 800f786:	4b26      	ldr	r3, [pc, #152]	; (800f820 <read_GPIOs+0x254>)
 800f788:	2201      	movs	r2, #1
 800f78a:	719a      	strb	r2, [r3, #6]
 800f78c:	e026      	b.n	800f7dc <read_GPIOs+0x210>
		}
		else if(GPIO_ReadInputDataBit(GPIOC,ROTS_3020M_IN_PC5) == 0)
 800f78e:	2120      	movs	r1, #32
 800f790:	4824      	ldr	r0, [pc, #144]	; (800f824 <read_GPIOs+0x258>)
 800f792:	f7fa f921 	bl	80099d8 <GPIO_ReadInputDataBit>
 800f796:	4603      	mov	r3, r0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d10c      	bne.n	800f7b6 <read_GPIOs+0x1ea>
		{
			gpio_stat[ROTS_B1] = 1;
 800f79c:	4b20      	ldr	r3, [pc, #128]	; (800f820 <read_GPIOs+0x254>)
 800f79e:	2201      	movs	r2, #1
 800f7a0:	70da      	strb	r2, [r3, #3]
			gpio_stat[ROTS_B2] = 1;
 800f7a2:	4b1f      	ldr	r3, [pc, #124]	; (800f820 <read_GPIOs+0x254>)
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	711a      	strb	r2, [r3, #4]
			gpio_stat[ROTS_B3] = 1;
 800f7a8:	4b1d      	ldr	r3, [pc, #116]	; (800f820 <read_GPIOs+0x254>)
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	715a      	strb	r2, [r3, #5]
			gpio_stat[ROTS_B4] = 0;
 800f7ae:	4b1c      	ldr	r3, [pc, #112]	; (800f820 <read_GPIOs+0x254>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	719a      	strb	r2, [r3, #6]
 800f7b4:	e012      	b.n	800f7dc <read_GPIOs+0x210>
		}
		else
		{
			if(f)
 800f7b6:	4b20      	ldr	r3, [pc, #128]	; (800f838 <read_GPIOs+0x26c>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00e      	beq.n	800f7dc <read_GPIOs+0x210>
			{
				f = 0;
 800f7be:	4b1e      	ldr	r3, [pc, #120]	; (800f838 <read_GPIOs+0x26c>)
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]
				gpio_stat[ROTS_B1] = 1;
 800f7c4:	4b16      	ldr	r3, [pc, #88]	; (800f820 <read_GPIOs+0x254>)
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	70da      	strb	r2, [r3, #3]
				gpio_stat[ROTS_B2] = 1;
 800f7ca:	4b15      	ldr	r3, [pc, #84]	; (800f820 <read_GPIOs+0x254>)
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	711a      	strb	r2, [r3, #4]
				gpio_stat[ROTS_B3] = 1;
 800f7d0:	4b13      	ldr	r3, [pc, #76]	; (800f820 <read_GPIOs+0x254>)
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	715a      	strb	r2, [r3, #5]
				gpio_stat[ROTS_B4] = 1;
 800f7d6:	4b12      	ldr	r3, [pc, #72]	; (800f820 <read_GPIOs+0x254>)
 800f7d8:	2201      	movs	r2, #1
 800f7da:	719a      	strb	r2, [r3, #6]
			}
		}

		// prüfe ob sich was geändert hat
		ptt4 = gpio_stat[ROTS_B1] + (gpio_stat[ROTS_B2] << 1) + (gpio_stat[ROTS_B3] << 2) + (gpio_stat[ROTS_B4] << 3);
 800f7dc:	4b10      	ldr	r3, [pc, #64]	; (800f820 <read_GPIOs+0x254>)
 800f7de:	78db      	ldrb	r3, [r3, #3]
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	4b0f      	ldr	r3, [pc, #60]	; (800f820 <read_GPIOs+0x254>)
 800f7e4:	791b      	ldrb	r3, [r3, #4]
 800f7e6:	005b      	lsls	r3, r3, #1
 800f7e8:	441a      	add	r2, r3
 800f7ea:	4b0d      	ldr	r3, [pc, #52]	; (800f820 <read_GPIOs+0x254>)
 800f7ec:	795b      	ldrb	r3, [r3, #5]
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	441a      	add	r2, r3
 800f7f2:	4b0b      	ldr	r3, [pc, #44]	; (800f820 <read_GPIOs+0x254>)
 800f7f4:	799b      	ldrb	r3, [r3, #6]
 800f7f6:	00db      	lsls	r3, r3, #3
 800f7f8:	4413      	add	r3, r2
 800f7fa:	607b      	str	r3, [r7, #4]
		if(ptt4 != oldptt4)
 800f7fc:	4b0f      	ldr	r3, [pc, #60]	; (800f83c <read_GPIOs+0x270>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	429a      	cmp	r2, r3
 800f804:	d005      	beq.n	800f812 <read_GPIOs+0x246>
		{
			showstatus = 1;
 800f806:	4b0e      	ldr	r3, [pc, #56]	; (800f840 <read_GPIOs+0x274>)
 800f808:	2201      	movs	r2, #1
 800f80a:	701a      	strb	r2, [r3, #0]
			oldptt4 = ptt4;
 800f80c:	4a0b      	ldr	r2, [pc, #44]	; (800f83c <read_GPIOs+0x270>)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6013      	str	r3, [r2, #0]
		}
	}
}
 800f812:	bf00      	nop
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	40020000 	.word	0x40020000
 800f820:	2000498c 	.word	0x2000498c
 800f824:	40020800 	.word	0x40020800
 800f828:	40020c00 	.word	0x40020c00
 800f82c:	40021000 	.word	0x40021000
 800f830:	20000bf0 	.word	0x20000bf0
 800f834:	40020400 	.word	0x40020400
 800f838:	20000bfc 	.word	0x20000bfc
 800f83c:	20000c00 	.word	0x20000c00
 800f840:	20002704 	.word	0x20002704

0800f844 <set_GPIO>:

void set_GPIO()
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
static int first = 1;

	if(first)
 800f84a:	4b72      	ldr	r3, [pc, #456]	; (800fa14 <set_GPIO+0x1d0>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d010      	beq.n	800f874 <set_GPIO+0x30>
	{
		for(int i=0; i<MAXGPIOS; i++)
 800f852:	2300      	movs	r3, #0
 800f854:	607b      	str	r3, [r7, #4]
 800f856:	e007      	b.n	800f868 <set_GPIO+0x24>
			gpio_oldstat[i] = 99;
 800f858:	4a6f      	ldr	r2, [pc, #444]	; (800fa18 <set_GPIO+0x1d4>)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4413      	add	r3, r2
 800f85e:	2263      	movs	r2, #99	; 0x63
 800f860:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<MAXGPIOS; i++)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	3301      	adds	r3, #1
 800f866:	607b      	str	r3, [r7, #4]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b1a      	cmp	r3, #26
 800f86c:	ddf4      	ble.n	800f858 <set_GPIO+0x14>
		first = 0;
 800f86e:	4b69      	ldr	r3, [pc, #420]	; (800fa14 <set_GPIO+0x1d0>)
 800f870:	2200      	movs	r2, #0
 800f872:	601a      	str	r2, [r3, #0]
	}

	for(int i=ANTSEL1; i<=BANDREL_6; i++)
 800f874:	230e      	movs	r3, #14
 800f876:	603b      	str	r3, [r7, #0]
 800f878:	e0c3      	b.n	800fa02 <set_GPIO+0x1be>
	{
		if(gpio_stat[i] != gpio_oldstat[i])
 800f87a:	4a68      	ldr	r2, [pc, #416]	; (800fa1c <set_GPIO+0x1d8>)
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	4413      	add	r3, r2
 800f880:	781a      	ldrb	r2, [r3, #0]
 800f882:	4965      	ldr	r1, [pc, #404]	; (800fa18 <set_GPIO+0x1d4>)
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	440b      	add	r3, r1
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	f000 80b6 	beq.w	800f9fc <set_GPIO+0x1b8>
		{
			if(i == ANTSEL1) 		GPIO_WriteBit(GPIOB,ANT_SEL1_OUT_PB6,gpio_stat[i]);
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	2b0e      	cmp	r3, #14
 800f894:	d108      	bne.n	800f8a8 <set_GPIO+0x64>
 800f896:	4a61      	ldr	r2, [pc, #388]	; (800fa1c <set_GPIO+0x1d8>)
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	4413      	add	r3, r2
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	2140      	movs	r1, #64	; 0x40
 800f8a2:	485f      	ldr	r0, [pc, #380]	; (800fa20 <set_GPIO+0x1dc>)
 800f8a4:	f7fa f8d0 	bl	8009a48 <GPIO_WriteBit>
			if(i == ANTSEL2) 		GPIO_WriteBit(GPIOD,ANT_SEL2_OUT_PD13,gpio_stat[i]);
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	2b0f      	cmp	r3, #15
 800f8ac:	d109      	bne.n	800f8c2 <set_GPIO+0x7e>
 800f8ae:	4a5b      	ldr	r2, [pc, #364]	; (800fa1c <set_GPIO+0x1d8>)
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f8bc:	4859      	ldr	r0, [pc, #356]	; (800fa24 <set_GPIO+0x1e0>)
 800f8be:	f7fa f8c3 	bl	8009a48 <GPIO_WriteBit>
			if(i == PWRREL_OFF) 	GPIO_WriteBit(GPIOD,PSOFF_OUT_PD2,gpio_stat[i]);
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	2b10      	cmp	r3, #16
 800f8c6:	d108      	bne.n	800f8da <set_GPIO+0x96>
 800f8c8:	4a54      	ldr	r2, [pc, #336]	; (800fa1c <set_GPIO+0x1d8>)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	4413      	add	r3, r2
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	2104      	movs	r1, #4
 800f8d4:	4853      	ldr	r0, [pc, #332]	; (800fa24 <set_GPIO+0x1e0>)
 800f8d6:	f7fa f8b7 	bl	8009a48 <GPIO_WriteBit>
			if(i == LCD_BACKLIGHT_ONOFF) GPIO_WriteBit(GPIOE,LCD_BACKLIGHT_OUT_PE1,gpio_stat[i]);
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	2b0d      	cmp	r3, #13
 800f8de:	d108      	bne.n	800f8f2 <set_GPIO+0xae>
 800f8e0:	4a4e      	ldr	r2, [pc, #312]	; (800fa1c <set_GPIO+0x1d8>)
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	2102      	movs	r1, #2
 800f8ec:	484e      	ldr	r0, [pc, #312]	; (800fa28 <set_GPIO+0x1e4>)
 800f8ee:	f7fa f8ab 	bl	8009a48 <GPIO_WriteBit>
			if(i == PWRREL_ON) 		GPIO_WriteBit(GPIOE,PSON_OUT_PE3,gpio_stat[i]);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b11      	cmp	r3, #17
 800f8f6:	d108      	bne.n	800f90a <set_GPIO+0xc6>
 800f8f8:	4a48      	ldr	r2, [pc, #288]	; (800fa1c <set_GPIO+0x1d8>)
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	461a      	mov	r2, r3
 800f902:	2108      	movs	r1, #8
 800f904:	4848      	ldr	r0, [pc, #288]	; (800fa28 <set_GPIO+0x1e4>)
 800f906:	f7fa f89f 	bl	8009a48 <GPIO_WriteBit>
			if(i == FAN_ONOFF)		GPIO_WriteBit(GPIOE,FAN_OUT_PE4,gpio_stat[i]);
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	2b12      	cmp	r3, #18
 800f90e:	d108      	bne.n	800f922 <set_GPIO+0xde>
 800f910:	4a42      	ldr	r2, [pc, #264]	; (800fa1c <set_GPIO+0x1d8>)
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	4413      	add	r3, r2
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	461a      	mov	r2, r3
 800f91a:	2110      	movs	r1, #16
 800f91c:	4842      	ldr	r0, [pc, #264]	; (800fa28 <set_GPIO+0x1e4>)
 800f91e:	f7fa f893 	bl	8009a48 <GPIO_WriteBit>
			if(i == BIAS_ONOFF) 	GPIO_WriteBit(GPIOE,BIAS_OUT_PE5,gpio_stat[i]);
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	2b13      	cmp	r3, #19
 800f926:	d108      	bne.n	800f93a <set_GPIO+0xf6>
 800f928:	4a3c      	ldr	r2, [pc, #240]	; (800fa1c <set_GPIO+0x1d8>)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	4413      	add	r3, r2
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	461a      	mov	r2, r3
 800f932:	2120      	movs	r1, #32
 800f934:	483c      	ldr	r0, [pc, #240]	; (800fa28 <set_GPIO+0x1e4>)
 800f936:	f7fa f887 	bl	8009a48 <GPIO_WriteBit>
			if(i == PTTOUT) 		GPIO_WriteBit(GPIOE,PTTOUT_OUT_PE6,gpio_stat[i]);
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	2b14      	cmp	r3, #20
 800f93e:	d108      	bne.n	800f952 <set_GPIO+0x10e>
 800f940:	4a36      	ldr	r2, [pc, #216]	; (800fa1c <set_GPIO+0x1d8>)
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	4413      	add	r3, r2
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	461a      	mov	r2, r3
 800f94a:	2140      	movs	r1, #64	; 0x40
 800f94c:	4836      	ldr	r0, [pc, #216]	; (800fa28 <set_GPIO+0x1e4>)
 800f94e:	f7fa f87b 	bl	8009a48 <GPIO_WriteBit>
			if(i == BANDREL_1) 		GPIO_WriteBit(GPIOC,BANDREL_80_OUT_PC14,gpio_stat[i]);
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	2b15      	cmp	r3, #21
 800f956:	d109      	bne.n	800f96c <set_GPIO+0x128>
 800f958:	4a30      	ldr	r2, [pc, #192]	; (800fa1c <set_GPIO+0x1d8>)
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	4413      	add	r3, r2
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	461a      	mov	r2, r3
 800f962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f966:	4831      	ldr	r0, [pc, #196]	; (800fa2c <set_GPIO+0x1e8>)
 800f968:	f7fa f86e 	bl	8009a48 <GPIO_WriteBit>
			if(i == BANDREL_2) 		GPIO_WriteBit(GPIOC,BANDREL_6040_OUT_PC15,gpio_stat[i]);
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	2b16      	cmp	r3, #22
 800f970:	d109      	bne.n	800f986 <set_GPIO+0x142>
 800f972:	4a2a      	ldr	r2, [pc, #168]	; (800fa1c <set_GPIO+0x1d8>)
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	4413      	add	r3, r2
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	461a      	mov	r2, r3
 800f97c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f980:	482a      	ldr	r0, [pc, #168]	; (800fa2c <set_GPIO+0x1e8>)
 800f982:	f7fa f861 	bl	8009a48 <GPIO_WriteBit>
			if(i == BANDREL_3) 		GPIO_WriteBit(GPIOE,BANDREL_3020_OUT_PE0,gpio_stat[i]);
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	2b17      	cmp	r3, #23
 800f98a:	d108      	bne.n	800f99e <set_GPIO+0x15a>
 800f98c:	4a23      	ldr	r2, [pc, #140]	; (800fa1c <set_GPIO+0x1d8>)
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	4413      	add	r3, r2
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	461a      	mov	r2, r3
 800f996:	2101      	movs	r1, #1
 800f998:	4823      	ldr	r0, [pc, #140]	; (800fa28 <set_GPIO+0x1e4>)
 800f99a:	f7fa f855 	bl	8009a48 <GPIO_WriteBit>
			if(i == BANDREL_4) 		GPIO_WriteBit(GPIOB,BANDREL_1715_OUT_PB7,gpio_stat[i]);
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	2b18      	cmp	r3, #24
 800f9a2:	d108      	bne.n	800f9b6 <set_GPIO+0x172>
 800f9a4:	4a1d      	ldr	r2, [pc, #116]	; (800fa1c <set_GPIO+0x1d8>)
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	2180      	movs	r1, #128	; 0x80
 800f9b0:	481b      	ldr	r0, [pc, #108]	; (800fa20 <set_GPIO+0x1dc>)
 800f9b2:	f7fa f849 	bl	8009a48 <GPIO_WriteBit>
			if(i == BANDREL_5) 		GPIO_WriteBit(GPIOB,BANDREL_1210_OUT_PB9,gpio_stat[i]);
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	2b19      	cmp	r3, #25
 800f9ba:	d109      	bne.n	800f9d0 <set_GPIO+0x18c>
 800f9bc:	4a17      	ldr	r2, [pc, #92]	; (800fa1c <set_GPIO+0x1d8>)
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f9ca:	4815      	ldr	r0, [pc, #84]	; (800fa20 <set_GPIO+0x1dc>)
 800f9cc:	f7fa f83c 	bl	8009a48 <GPIO_WriteBit>
			if(i == BANDREL_6) 		GPIO_WriteBit(GPIOB,BANDREL_6_OUT_PB12,gpio_stat[i]);
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	2b1a      	cmp	r3, #26
 800f9d4:	d109      	bne.n	800f9ea <set_GPIO+0x1a6>
 800f9d6:	4a11      	ldr	r2, [pc, #68]	; (800fa1c <set_GPIO+0x1d8>)
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	4413      	add	r3, r2
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f9e4:	480e      	ldr	r0, [pc, #56]	; (800fa20 <set_GPIO+0x1dc>)
 800f9e6:	f7fa f82f 	bl	8009a48 <GPIO_WriteBit>

			gpio_oldstat[i] = gpio_stat[i];
 800f9ea:	4a0c      	ldr	r2, [pc, #48]	; (800fa1c <set_GPIO+0x1d8>)
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	4413      	add	r3, r2
 800f9f0:	7819      	ldrb	r1, [r3, #0]
 800f9f2:	4a09      	ldr	r2, [pc, #36]	; (800fa18 <set_GPIO+0x1d4>)
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	460a      	mov	r2, r1
 800f9fa:	701a      	strb	r2, [r3, #0]
	for(int i=ANTSEL1; i<=BANDREL_6; i++)
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	603b      	str	r3, [r7, #0]
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	2b1a      	cmp	r3, #26
 800fa06:	f77f af38 	ble.w	800f87a <set_GPIO+0x36>
		}
	}
}
 800fa0a:	bf00      	nop
 800fa0c:	3708      	adds	r7, #8
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	20000c04 	.word	0x20000c04
 800fa18:	200049a8 	.word	0x200049a8
 800fa1c:	2000498c 	.word	0x2000498c
 800fa20:	40020400 	.word	0x40020400
 800fa24:	40020c00 	.word	0x40020c00
 800fa28:	40021000 	.word	0x40021000
 800fa2c:	40020800 	.word	0x40020800

0800fa30 <rotaryswitch_installed>:

char rotaryswitch_installed()
{
 800fa30:	b480      	push	{r7}
 800fa32:	af00      	add	r7, sp, #0
	#if BOARDVERSION == 72
		return 0;
 800fa34:	2300      	movs	r3, #0
	if(!gpio_stat[ROTS_B6]) return ROTS_B6;
	if(!gpio_stat[ROTS_B7]) return ROTS_B7;
	if(!gpio_stat[ROTS_AUTO])return ROTS_AUTO;

	return 0;
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <process_extbuttons>:

void process_extbuttons()
{
 800fa40:	b480      	push	{r7}
 800fa42:	af00      	add	r7, sp, #0
static uint8_t laststat[3] = {1,1,1};

	#if BOARDVERSION == 72
		return;
 800fa44:	bf00      	nop
			}
		}

		laststat[1] = gpio_stat[SW_STANDBY];
	}
}
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
	...

0800fa50 <hist_draw_frame>:
int xspeed = 123;	// ms pro Pixel, wird am Anfang durch einen simulierten Tastendruck eingestellt

#define HIST_MAINLINEWIDTH 4

void hist_draw_frame()
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	af00      	add	r7, sp, #0
	hist_maxpwr = getMaxPower();
 800fa54:	f005 fed6 	bl	8015804 <getMaxPower>
 800fa58:	ee07 0a90 	vmov	s15, r0
 800fa5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa60:	4b03      	ldr	r3, [pc, #12]	; (800fa70 <hist_draw_frame+0x20>)
 800fa62:	edc3 7a00 	vstr	s15, [r3]

	hist_drawcoord();
 800fa66:	f000 f867 	bl	800fb38 <hist_drawcoord>
}
 800fa6a:	bf00      	nop
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	20000c0c 	.word	0x20000c0c

0800fa74 <hist_ValueToScreen>:

int hist_ValueToScreen(float val)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	ed87 0a01 	vstr	s0, [r7, #4]
	// Skalieren auf Screen Koordinaten
	int ival = lin_log(val, hist_maxpwr, hist_height);
 800fa7e:	4b09      	ldr	r3, [pc, #36]	; (800faa4 <hist_ValueToScreen+0x30>)
 800fa80:	edd3 7a00 	vldr	s15, [r3]
 800fa84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800fa88:	eef0 0a67 	vmov.f32	s1, s15
 800fa8c:	ed97 0a01 	vldr	s0, [r7, #4]
 800fa90:	f005 fe58 	bl	8015744 <lin_log>
 800fa94:	60f8      	str	r0, [r7, #12]
	return hist_top + hist_height - ival;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f5c3 73aa 	rsb	r3, r3, #340	; 0x154
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20000c0c 	.word	0x20000c0c

0800faa8 <makeTimeString>:

char *makeTimeString(int32_t ms)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
static char s[10];

	int sec = -ms/1000L;	// Sekunden
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	425b      	negs	r3, r3
 800fab4:	4a1a      	ldr	r2, [pc, #104]	; (800fb20 <makeTimeString+0x78>)
 800fab6:	fb82 1203 	smull	r1, r2, r2, r3
 800faba:	1192      	asrs	r2, r2, #6
 800fabc:	17db      	asrs	r3, r3, #31
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	617b      	str	r3, [r7, #20]

	if(sec < 60)
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2b3b      	cmp	r3, #59	; 0x3b
 800fac6:	dc05      	bgt.n	800fad4 <makeTimeString+0x2c>
		sprintf(s,"%ds",sec);
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	4916      	ldr	r1, [pc, #88]	; (800fb24 <makeTimeString+0x7c>)
 800facc:	4816      	ldr	r0, [pc, #88]	; (800fb28 <makeTimeString+0x80>)
 800face:	f00f fbb3 	bl	801f238 <sprintf>
 800fad2:	e020      	b.n	800fb16 <makeTimeString+0x6e>
	else
	{
		int min = sec/60;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	4a15      	ldr	r2, [pc, #84]	; (800fb2c <makeTimeString+0x84>)
 800fad8:	fb82 1203 	smull	r1, r2, r2, r3
 800fadc:	441a      	add	r2, r3
 800fade:	1152      	asrs	r2, r2, #5
 800fae0:	17db      	asrs	r3, r3, #31
 800fae2:	1ad3      	subs	r3, r2, r3
 800fae4:	613b      	str	r3, [r7, #16]
		int restsec = sec - (min*60);
 800fae6:	693a      	ldr	r2, [r7, #16]
 800fae8:	4613      	mov	r3, r2
 800faea:	0112      	lsls	r2, r2, #4
 800faec:	1a9b      	subs	r3, r3, r2
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	461a      	mov	r2, r3
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	4413      	add	r3, r2
 800faf6:	60fb      	str	r3, [r7, #12]
		if(restsec)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d006      	beq.n	800fb0c <makeTimeString+0x64>
			sprintf(s,"%dm%d",min,restsec);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	693a      	ldr	r2, [r7, #16]
 800fb02:	490b      	ldr	r1, [pc, #44]	; (800fb30 <makeTimeString+0x88>)
 800fb04:	4808      	ldr	r0, [pc, #32]	; (800fb28 <makeTimeString+0x80>)
 800fb06:	f00f fb97 	bl	801f238 <sprintf>
 800fb0a:	e004      	b.n	800fb16 <makeTimeString+0x6e>
		else
			sprintf(s,"%dm",min);
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	4909      	ldr	r1, [pc, #36]	; (800fb34 <makeTimeString+0x8c>)
 800fb10:	4805      	ldr	r0, [pc, #20]	; (800fb28 <makeTimeString+0x80>)
 800fb12:	f00f fb91 	bl	801f238 <sprintf>
	}

	return s;
 800fb16:	4b04      	ldr	r3, [pc, #16]	; (800fb28 <makeTimeString+0x80>)
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3718      	adds	r7, #24
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	10624dd3 	.word	0x10624dd3
 800fb24:	080248dc 	.word	0x080248dc
 800fb28:	200026f0 	.word	0x200026f0
 800fb2c:	88888889 	.word	0x88888889
 800fb30:	080248e0 	.word	0x080248e0
 800fb34:	080248e8 	.word	0x080248e8

0800fb38 <hist_drawcoord>:

void hist_drawcoord()
{
 800fb38:	b590      	push	{r4, r7, lr}
 800fb3a:	b08d      	sub	sp, #52	; 0x34
 800fb3c:	af04      	add	r7, sp, #16
int ydiff = 8;	// Verschiebung für Label Text
 800fb3e:	2308      	movs	r3, #8
 800fb40:	613b      	str	r3, [r7, #16]

	// Lösche Diagrammfläche
	TFT_Fill_Rectangle(0, 0, TFT_WIDTH-151, 369, BLACK);
 800fb42:	2300      	movs	r3, #0
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	f240 1371 	movw	r3, #369	; 0x171
 800fb4a:	f240 2289 	movw	r2, #649	; 0x289
 800fb4e:	2100      	movs	r1, #0
 800fb50:	2000      	movs	r0, #0
 800fb52:	f007 fe71 	bl	8017838 <TFT_Fill_Rectangle>

	// Titel
	tft_print(&lucidaConsole_22ptFontInfo, getLang(HISTORY), 150, 1, 4, WHITE , BLACK);
 800fb56:	202a      	movs	r0, #42	; 0x2a
 800fb58:	f001 f944 	bl	8010de4 <getLang>
 800fb5c:	4601      	mov	r1, r0
 800fb5e:	2300      	movs	r3, #0
 800fb60:	9302      	str	r3, [sp, #8]
 800fb62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb66:	9301      	str	r3, [sp, #4]
 800fb68:	2304      	movs	r3, #4
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	2296      	movs	r2, #150	; 0x96
 800fb70:	487e      	ldr	r0, [pc, #504]	; (800fd6c <hist_drawcoord+0x234>)
 800fb72:	f00f f817 	bl	801eba4 <tft_print>

	// Hauptachsen
	TFT_Hor_Line(hist_left-5-HIST_MAINLINEWIDTH, hist_left+hist_width, hist_top+hist_height, WHITE, BLACK, HIST_MAINLINEWIDTH,0);
 800fb76:	2300      	movs	r3, #0
 800fb78:	9302      	str	r3, [sp, #8]
 800fb7a:	2304      	movs	r3, #4
 800fb7c:	9301      	str	r3, [sp, #4]
 800fb7e:	2300      	movs	r3, #0
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb86:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800fb8a:	f44f 710c 	mov.w	r1, #560	; 0x230
 800fb8e:	2033      	movs	r0, #51	; 0x33
 800fb90:	f007 fefc 	bl	801798c <TFT_Hor_Line>
	TFT_Vert_Line(hist_left-HIST_MAINLINEWIDTH, hist_top-5, hist_top+hist_height+5+HIST_MAINLINEWIDTH, WHITE, BLACK, HIST_MAINLINEWIDTH,0);
 800fb94:	2300      	movs	r3, #0
 800fb96:	9302      	str	r3, [sp, #8]
 800fb98:	2304      	movs	r3, #4
 800fb9a:	9301      	str	r3, [sp, #4]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fba4:	f240 125d 	movw	r2, #349	; 0x15d
 800fba8:	2123      	movs	r1, #35	; 0x23
 800fbaa:	2038      	movs	r0, #56	; 0x38
 800fbac:	f007 ff3e 	bl	8017a2c <TFT_Vert_Line>

	// Hauptachsen Beschriftung
	tft_print(&lucidaConsole_14ptFontInfo, "W"/*getLang(W_RFout)*/, 0, hist_top-20, 2, RED , BLACK);
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9302      	str	r3, [sp, #8]
 800fbb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800fbb8:	9301      	str	r3, [sp, #4]
 800fbba:	2302      	movs	r3, #2
 800fbbc:	9300      	str	r3, [sp, #0]
 800fbbe:	2314      	movs	r3, #20
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	496b      	ldr	r1, [pc, #428]	; (800fd70 <hist_drawcoord+0x238>)
 800fbc4:	486b      	ldr	r0, [pc, #428]	; (800fd74 <hist_drawcoord+0x23c>)
 800fbc6:	f00e ffed 	bl	801eba4 <tft_print>
	tft_print(&lucidaConsole_14ptFontInfo, getLang(W_RFoutPeak), 30, hist_top-20, 2, BLUE , BLACK);
 800fbca:	204c      	movs	r0, #76	; 0x4c
 800fbcc:	f001 f90a 	bl	8010de4 <getLang>
 800fbd0:	4601      	mov	r1, r0
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	9302      	str	r3, [sp, #8]
 800fbd6:	231f      	movs	r3, #31
 800fbd8:	9301      	str	r3, [sp, #4]
 800fbda:	2302      	movs	r3, #2
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	2314      	movs	r3, #20
 800fbe0:	221e      	movs	r2, #30
 800fbe2:	4864      	ldr	r0, [pc, #400]	; (800fd74 <hist_drawcoord+0x23c>)
 800fbe4:	f00e ffde 	bl	801eba4 <tft_print>
	tft_print(&lucidaConsole_14ptFontInfo, "W [DC]", hist_left + hist_width, hist_top-20, 2, GREEN , BLACK);
 800fbe8:	2300      	movs	r3, #0
 800fbea:	9302      	str	r3, [sp, #8]
 800fbec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800fbf0:	9301      	str	r3, [sp, #4]
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	2314      	movs	r3, #20
 800fbf8:	f44f 720c 	mov.w	r2, #560	; 0x230
 800fbfc:	495e      	ldr	r1, [pc, #376]	; (800fd78 <hist_drawcoord+0x240>)
 800fbfe:	485d      	ldr	r0, [pc, #372]	; (800fd74 <hist_drawcoord+0x23c>)
 800fc00:	f00e ffd0 	bl	801eba4 <tft_print>
	tft_print(&lucidaConsole_14ptFontInfo, "t", hist_left + hist_width + 10, hist_top+hist_height - 8, 2, WHITE , BLACK);
 800fc04:	2300      	movs	r3, #0
 800fc06:	9302      	str	r3, [sp, #8]
 800fc08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	2302      	movs	r3, #2
 800fc10:	9300      	str	r3, [sp, #0]
 800fc12:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800fc16:	f240 223a 	movw	r2, #570	; 0x23a
 800fc1a:	4958      	ldr	r1, [pc, #352]	; (800fd7c <hist_drawcoord+0x244>)
 800fc1c:	4855      	ldr	r0, [pc, #340]	; (800fd74 <hist_drawcoord+0x23c>)
 800fc1e:	f00e ffc1 	bl	801eba4 <tft_print>

	// Hilfslinien horizontal und vertikal
	hist_hilfslinien();
 800fc22:	f000 f915 	bl	800fe50 <hist_hilfslinien>

	// Beschriftung der horizontalen Hilfslinien
	for(int i=0; i<5; i++)
 800fc26:	2300      	movs	r3, #0
 800fc28:	61fb      	str	r3, [r7, #28]
 800fc2a:	e04d      	b.n	800fcc8 <hist_drawcoord+0x190>
	{
		int pwr = h_power[pcfgdata->maxpwrunits][i];
 800fc2c:	4b54      	ldr	r3, [pc, #336]	; (800fd80 <hist_drawcoord+0x248>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fc34:	461a      	mov	r2, r3
 800fc36:	4953      	ldr	r1, [pc, #332]	; (800fd84 <hist_drawcoord+0x24c>)
 800fc38:	4613      	mov	r3, r2
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	4413      	add	r3, r2
 800fc3e:	69fa      	ldr	r2, [r7, #28]
 800fc40:	4413      	add	r3, r2
 800fc42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fc46:	60bb      	str	r3, [r7, #8]
		// HF Power
		tft_print(&lucidaConsole_12ptFontInfo, hist_Ylabel(pwr), 0, hist_ValueToScreen(pwr)-ydiff, 1, WHITE , BLACK);
 800fc48:	68b8      	ldr	r0, [r7, #8]
 800fc4a:	f000 f8a3 	bl	800fd94 <hist_Ylabel>
 800fc4e:	4604      	mov	r4, r0
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	ee07 3a90 	vmov	s15, r3
 800fc56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc5a:	eeb0 0a67 	vmov.f32	s0, s15
 800fc5e:	f7ff ff09 	bl	800fa74 <hist_ValueToScreen>
 800fc62:	4602      	mov	r2, r0
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	1ad2      	subs	r2, r2, r3
 800fc68:	2300      	movs	r3, #0
 800fc6a:	9302      	str	r3, [sp, #8]
 800fc6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc70:	9301      	str	r3, [sp, #4]
 800fc72:	2301      	movs	r3, #1
 800fc74:	9300      	str	r3, [sp, #0]
 800fc76:	4613      	mov	r3, r2
 800fc78:	2200      	movs	r2, #0
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	4842      	ldr	r0, [pc, #264]	; (800fd88 <hist_drawcoord+0x250>)
 800fc7e:	f00e ff91 	bl	801eba4 <tft_print>
		// DC Power (doppelte Größe)
		tft_print(&lucidaConsole_12ptFontInfo, hist_Ylabel(pwr*2), hist_left + hist_width + 8, hist_ValueToScreen(pwr)-ydiff, 1, WHITE , BLACK);
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	005b      	lsls	r3, r3, #1
 800fc86:	4618      	mov	r0, r3
 800fc88:	f000 f884 	bl	800fd94 <hist_Ylabel>
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	ee07 3a90 	vmov	s15, r3
 800fc94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc98:	eeb0 0a67 	vmov.f32	s0, s15
 800fc9c:	f7ff feea 	bl	800fa74 <hist_ValueToScreen>
 800fca0:	4602      	mov	r2, r0
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	1ad2      	subs	r2, r2, r3
 800fca6:	2300      	movs	r3, #0
 800fca8:	9302      	str	r3, [sp, #8]
 800fcaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcae:	9301      	str	r3, [sp, #4]
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	9300      	str	r3, [sp, #0]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	f44f 720e 	mov.w	r2, #568	; 0x238
 800fcba:	4621      	mov	r1, r4
 800fcbc:	4832      	ldr	r0, [pc, #200]	; (800fd88 <hist_drawcoord+0x250>)
 800fcbe:	f00e ff71 	bl	801eba4 <tft_print>
	for(int i=0; i<5; i++)
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	61fb      	str	r3, [r7, #28]
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	2b04      	cmp	r3, #4
 800fccc:	ddae      	ble.n	800fc2c <hist_drawcoord+0xf4>
	}

	// Beschriftung der vertikalen Hilfslinien
	int32_t millisecond = 0;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<hist_width; i++)
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	617b      	str	r3, [r7, #20]
 800fcd6:	e039      	b.n	800fd4c <hist_drawcoord+0x214>
	{
		if((i%60) == 0 && i != 0)
 800fcd8:	697a      	ldr	r2, [r7, #20]
 800fcda:	4b2c      	ldr	r3, [pc, #176]	; (800fd8c <hist_drawcoord+0x254>)
 800fcdc:	fb83 1302 	smull	r1, r3, r3, r2
 800fce0:	4413      	add	r3, r2
 800fce2:	1159      	asrs	r1, r3, #5
 800fce4:	17d3      	asrs	r3, r2, #31
 800fce6:	1ac9      	subs	r1, r1, r3
 800fce8:	460b      	mov	r3, r1
 800fcea:	011b      	lsls	r3, r3, #4
 800fcec:	1a5b      	subs	r3, r3, r1
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	1ad1      	subs	r1, r2, r3
 800fcf2:	2900      	cmp	r1, #0
 800fcf4:	d122      	bne.n	800fd3c <hist_drawcoord+0x204>
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d01f      	beq.n	800fd3c <hist_drawcoord+0x204>
		{
			char *hp = makeTimeString(millisecond);
 800fcfc:	69b8      	ldr	r0, [r7, #24]
 800fcfe:	f7ff fed3 	bl	800faa8 <makeTimeString>
 800fd02:	60f8      	str	r0, [r7, #12]
			int w,h;
			tft_textwidth_pixel(&lucidaConsole_12ptFontInfo, hp, &w, &h);
 800fd04:	463b      	mov	r3, r7
 800fd06:	1d3a      	adds	r2, r7, #4
 800fd08:	68f9      	ldr	r1, [r7, #12]
 800fd0a:	481f      	ldr	r0, [pc, #124]	; (800fd88 <hist_drawcoord+0x250>)
 800fd0c:	f00e ff63 	bl	801ebd6 <tft_textwidth_pixel>
			tft_print(&lucidaConsole_12ptFontInfo, hp, hist_left + i - w/2, hist_top + hist_height+7, 1, WHITE , BLACK);
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	0fd9      	lsrs	r1, r3, #31
 800fd1a:	440b      	add	r3, r1
 800fd1c:	105b      	asrs	r3, r3, #1
 800fd1e:	425b      	negs	r3, r3
 800fd20:	441a      	add	r2, r3
 800fd22:	2300      	movs	r3, #0
 800fd24:	9302      	str	r3, [sp, #8]
 800fd26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd2a:	9301      	str	r3, [sp, #4]
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	f240 135b 	movw	r3, #347	; 0x15b
 800fd34:	68f9      	ldr	r1, [r7, #12]
 800fd36:	4814      	ldr	r0, [pc, #80]	; (800fd88 <hist_drawcoord+0x250>)
 800fd38:	f00e ff34 	bl	801eba4 <tft_print>
		}
		millisecond -= xspeed;
 800fd3c:	4b14      	ldr	r3, [pc, #80]	; (800fd90 <hist_drawcoord+0x258>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	69ba      	ldr	r2, [r7, #24]
 800fd42:	1ad3      	subs	r3, r2, r3
 800fd44:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<hist_width; i++)
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	617b      	str	r3, [r7, #20]
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fd52:	dbc1      	blt.n	800fcd8 <hist_drawcoord+0x1a0>
	}

	if(xspeed == 123)
 800fd54:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <hist_drawcoord+0x258>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	2b7b      	cmp	r3, #123	; 0x7b
 800fd5a:	d102      	bne.n	800fd62 <hist_drawcoord+0x22a>
		do_button_history(TB_HIST1000);
 800fd5c:	2035      	movs	r0, #53	; 0x35
 800fd5e:	f000 fa65 	bl	801022c <do_button_history>
}
 800fd62:	bf00      	nop
 800fd64:	3724      	adds	r7, #36	; 0x24
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd90      	pop	{r4, r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	20001c40 	.word	0x20001c40
 800fd70:	080248ec 	.word	0x080248ec
 800fd74:	20001c28 	.word	0x20001c28
 800fd78:	080248f0 	.word	0x080248f0
 800fd7c:	080248f8 	.word	0x080248f8
 800fd80:	20000bf0 	.word	0x20000bf0
 800fd84:	20001470 	.word	0x20001470
 800fd88:	20001c1c 	.word	0x20001c1c
 800fd8c:	88888889 	.word	0x88888889
 800fd90:	20000c10 	.word	0x20000c10

0800fd94 <hist_Ylabel>:

static char hist_ylab[30] = {0};

char *hist_Ylabel(int v)
{
 800fd94:	b590      	push	{r4, r7, lr}
 800fd96:	b087      	sub	sp, #28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]

	if(v<1000)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fda2:	da05      	bge.n	800fdb0 <hist_Ylabel+0x1c>
		sprintf(hist_ylab,"%d",v);
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	4925      	ldr	r1, [pc, #148]	; (800fe3c <hist_Ylabel+0xa8>)
 800fda8:	4825      	ldr	r0, [pc, #148]	; (800fe40 <hist_Ylabel+0xac>)
 800fdaa:	f00f fa45 	bl	801f238 <sprintf>
 800fdae:	e040      	b.n	800fe32 <hist_Ylabel+0x9e>
	else
	{
		int vi = (v/1000.0);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f7f8 faef 	bl	8008394 <__aeabi_i2d>
 800fdb6:	f04f 0200 	mov.w	r2, #0
 800fdba:	4b22      	ldr	r3, [pc, #136]	; (800fe44 <hist_Ylabel+0xb0>)
 800fdbc:	f7f8 fc7e 	bl	80086bc <__aeabi_ddiv>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	f7f8 fdfe 	bl	80089c8 <__aeabi_d2iz>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	613b      	str	r3, [r7, #16]
		int rest = v - vi*1000;
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	4a1d      	ldr	r2, [pc, #116]	; (800fe48 <hist_Ylabel+0xb4>)
 800fdd4:	fb02 f303 	mul.w	r3, r2, r3
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	4413      	add	r3, r2
 800fddc:	60fb      	str	r3, [r7, #12]
		sprintf(hist_ylab,"%dk%d",vi,rest);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	693a      	ldr	r2, [r7, #16]
 800fde2:	491a      	ldr	r1, [pc, #104]	; (800fe4c <hist_Ylabel+0xb8>)
 800fde4:	4816      	ldr	r0, [pc, #88]	; (800fe40 <hist_Ylabel+0xac>)
 800fde6:	f00f fa27 	bl	801f238 <sprintf>
		for(int i=strlen(hist_ylab)-1; i>0; i--)
 800fdea:	4815      	ldr	r0, [pc, #84]	; (800fe40 <hist_Ylabel+0xac>)
 800fdec:	f7f8 f928 	bl	8008040 <strlen>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	3b01      	subs	r3, #1
 800fdf4:	617b      	str	r3, [r7, #20]
 800fdf6:	e019      	b.n	800fe2c <hist_Ylabel+0x98>
		{
			if(hist_ylab[i] == 0 || hist_ylab[i] == 'k') break;
 800fdf8:	4a11      	ldr	r2, [pc, #68]	; (800fe40 <hist_Ylabel+0xac>)
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d016      	beq.n	800fe32 <hist_Ylabel+0x9e>
 800fe04:	4a0e      	ldr	r2, [pc, #56]	; (800fe40 <hist_Ylabel+0xac>)
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	4413      	add	r3, r2
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b6b      	cmp	r3, #107	; 0x6b
 800fe0e:	d010      	beq.n	800fe32 <hist_Ylabel+0x9e>
			if(hist_ylab[i] == '0') hist_ylab[i] = 0;
 800fe10:	4a0b      	ldr	r2, [pc, #44]	; (800fe40 <hist_Ylabel+0xac>)
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	4413      	add	r3, r2
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	2b30      	cmp	r3, #48	; 0x30
 800fe1a:	d104      	bne.n	800fe26 <hist_Ylabel+0x92>
 800fe1c:	4a08      	ldr	r2, [pc, #32]	; (800fe40 <hist_Ylabel+0xac>)
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	4413      	add	r3, r2
 800fe22:	2200      	movs	r2, #0
 800fe24:	701a      	strb	r2, [r3, #0]
		for(int i=strlen(hist_ylab)-1; i>0; i--)
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	617b      	str	r3, [r7, #20]
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	dce2      	bgt.n	800fdf8 <hist_Ylabel+0x64>
		}
	}

	return hist_ylab;
 800fe32:	4b03      	ldr	r3, [pc, #12]	; (800fe40 <hist_Ylabel+0xac>)
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	371c      	adds	r7, #28
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd90      	pop	{r4, r7, pc}
 800fe3c:	080248fc 	.word	0x080248fc
 800fe40:	200026b8 	.word	0x200026b8
 800fe44:	408f4000 	.word	0x408f4000
 800fe48:	fffffc18 	.word	0xfffffc18
 800fe4c:	08024900 	.word	0x08024900

0800fe50 <hist_hilfslinien>:

// wird laufend aufgerufen zur Wiederherstellung, daher hier keinen Text ausdrucken, nur das Gitter
void hist_hilfslinien()
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b088      	sub	sp, #32
 800fe54:	af04      	add	r7, sp, #16
	// Hilfslinien Horizontal
	for(int i=0; i<5; i++)
 800fe56:	2300      	movs	r3, #0
 800fe58:	60fb      	str	r3, [r7, #12]
 800fe5a:	e027      	b.n	800feac <hist_hilfslinien+0x5c>
	{
		int pwr = h_power[pcfgdata->maxpwrunits][i];
 800fe5c:	4b2d      	ldr	r3, [pc, #180]	; (800ff14 <hist_hilfslinien+0xc4>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fe64:	461a      	mov	r2, r3
 800fe66:	492c      	ldr	r1, [pc, #176]	; (800ff18 <hist_hilfslinien+0xc8>)
 800fe68:	4613      	mov	r3, r2
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	4413      	add	r3, r2
 800fe6e:	68fa      	ldr	r2, [r7, #12]
 800fe70:	4413      	add	r3, r2
 800fe72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe76:	607b      	str	r3, [r7, #4]
		TFT_Hor_Line(hist_left, hist_left+hist_width, hist_ValueToScreen(pwr), RGB16(0x10,0x20,0x20), BLACK, 1, 0);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	ee07 3a90 	vmov	s15, r3
 800fe7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe82:	eeb0 0a67 	vmov.f32	s0, s15
 800fe86:	f7ff fdf5 	bl	800fa74 <hist_ValueToScreen>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9302      	str	r3, [sp, #8]
 800fe90:	2301      	movs	r3, #1
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	2300      	movs	r3, #0
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	f241 1304 	movw	r3, #4356	; 0x1104
 800fe9c:	f44f 710c 	mov.w	r1, #560	; 0x230
 800fea0:	203c      	movs	r0, #60	; 0x3c
 800fea2:	f007 fd73 	bl	801798c <TFT_Hor_Line>
	for(int i=0; i<5; i++)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	3301      	adds	r3, #1
 800feaa:	60fb      	str	r3, [r7, #12]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2b04      	cmp	r3, #4
 800feb0:	ddd4      	ble.n	800fe5c <hist_hilfslinien+0xc>
	}

	// Hilfslinien vertikal, alle 60 Sekunden
	for(int i=0; i<hist_width; i++)
 800feb2:	2300      	movs	r3, #0
 800feb4:	60bb      	str	r3, [r7, #8]
 800feb6:	e024      	b.n	800ff02 <hist_hilfslinien+0xb2>
	{
		if((i%60) == 0 && i != 0)
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	4b18      	ldr	r3, [pc, #96]	; (800ff1c <hist_hilfslinien+0xcc>)
 800febc:	fb83 1302 	smull	r1, r3, r3, r2
 800fec0:	4413      	add	r3, r2
 800fec2:	1159      	asrs	r1, r3, #5
 800fec4:	17d3      	asrs	r3, r2, #31
 800fec6:	1ac9      	subs	r1, r1, r3
 800fec8:	460b      	mov	r3, r1
 800feca:	011b      	lsls	r3, r3, #4
 800fecc:	1a5b      	subs	r3, r3, r1
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	1ad1      	subs	r1, r2, r3
 800fed2:	2900      	cmp	r1, #0
 800fed4:	d112      	bne.n	800fefc <hist_hilfslinien+0xac>
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00f      	beq.n	800fefc <hist_hilfslinien+0xac>
			TFT_Vert_Line(hist_left+i, hist_top-4, hist_top+hist_height, RGB16(0x10,0x20,0x20), BLACK, 2, 0);
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800fee2:	2300      	movs	r3, #0
 800fee4:	9302      	str	r3, [sp, #8]
 800fee6:	2302      	movs	r3, #2
 800fee8:	9301      	str	r3, [sp, #4]
 800feea:	2300      	movs	r3, #0
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	f241 1304 	movw	r3, #4356	; 0x1104
 800fef2:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800fef6:	2124      	movs	r1, #36	; 0x24
 800fef8:	f007 fd98 	bl	8017a2c <TFT_Vert_Line>
	for(int i=0; i<hist_width; i++)
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	3301      	adds	r3, #1
 800ff00:	60bb      	str	r3, [r7, #8]
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ff08:	dbd6      	blt.n	800feb8 <hist_hilfslinien+0x68>
	}
}
 800ff0a:	bf00      	nop
 800ff0c:	3710      	adds	r7, #16
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	20000bf0 	.word	0x20000bf0
 800ff18:	20001470 	.word	0x20001470
 800ff1c:	88888889 	.word	0x88888889

0800ff20 <hist_insertdata>:

float htest = 0;
float htest1 = 0;

void hist_insertdata()
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
static char f = 1;

	if(f)
 800ff26:	4b3c      	ldr	r3, [pc, #240]	; (8010018 <hist_insertdata+0xf8>)
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d026      	beq.n	800ff7c <hist_insertdata+0x5c>
	{
		for(int i=0; i<hist_width; i++)
 800ff2e:	2300      	movs	r3, #0
 800ff30:	607b      	str	r3, [r7, #4]
 800ff32:	e01c      	b.n	800ff6e <hist_insertdata+0x4e>
		{
			dcpwr_arr[i] = antpwr_arr[i] = antpeakpwr_arr[i] = hist_ValueToScreen(0);
 800ff34:	ed9f 0a39 	vldr	s0, [pc, #228]	; 801001c <hist_insertdata+0xfc>
 800ff38:	f7ff fd9c 	bl	800fa74 <hist_ValueToScreen>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	b299      	uxth	r1, r3
 800ff40:	4a37      	ldr	r2, [pc, #220]	; (8010020 <hist_insertdata+0x100>)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800ff48:	4a35      	ldr	r2, [pc, #212]	; (8010020 <hist_insertdata+0x100>)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ff50:	4a34      	ldr	r2, [pc, #208]	; (8010024 <hist_insertdata+0x104>)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800ff58:	4a32      	ldr	r2, [pc, #200]	; (8010024 <hist_insertdata+0x104>)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ff60:	4a31      	ldr	r2, [pc, #196]	; (8010028 <hist_insertdata+0x108>)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0; i<hist_width; i++)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	607b      	str	r3, [r7, #4]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ff74:	dbde      	blt.n	800ff34 <hist_insertdata+0x14>
		}

		f=0;
 800ff76:	4b28      	ldr	r3, [pc, #160]	; (8010018 <hist_insertdata+0xf8>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	701a      	strb	r2, [r3, #0]
	}

	if(hist_10ms == 0)
 800ff7c:	4b2b      	ldr	r3, [pc, #172]	; (801002c <hist_insertdata+0x10c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d143      	bne.n	801000c <hist_insertdata+0xec>
	{
		// 10ms sind abgelaufen, füge den aktuellen Messwert zum Mittel hinzu
		if(pwrswr_antenna.fwd_watt < hist_maxpwr)
 800ff84:	4b2a      	ldr	r3, [pc, #168]	; (8010030 <hist_insertdata+0x110>)
 800ff86:	ed93 7a02 	vldr	s14, [r3, #8]
 800ff8a:	4b2a      	ldr	r3, [pc, #168]	; (8010034 <hist_insertdata+0x114>)
 800ff8c:	edd3 7a00 	vldr	s15, [r3]
 800ff90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff98:	d50b      	bpl.n	800ffb2 <hist_insertdata+0x92>
			antpwr_mittel += pwrswr_antenna.fwd_watt;
 800ff9a:	4b25      	ldr	r3, [pc, #148]	; (8010030 <hist_insertdata+0x110>)
 800ff9c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ffa0:	4b25      	ldr	r3, [pc, #148]	; (8010038 <hist_insertdata+0x118>)
 800ffa2:	edd3 7a00 	vldr	s15, [r3]
 800ffa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffaa:	4b23      	ldr	r3, [pc, #140]	; (8010038 <hist_insertdata+0x118>)
 800ffac:	edc3 7a00 	vstr	s15, [r3]
 800ffb0:	e00a      	b.n	800ffc8 <hist_insertdata+0xa8>
		else
			antpwr_mittel += hist_maxpwr;
 800ffb2:	4b21      	ldr	r3, [pc, #132]	; (8010038 <hist_insertdata+0x118>)
 800ffb4:	ed93 7a00 	vldr	s14, [r3]
 800ffb8:	4b1e      	ldr	r3, [pc, #120]	; (8010034 <hist_insertdata+0x114>)
 800ffba:	edd3 7a00 	vldr	s15, [r3]
 800ffbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffc2:	4b1d      	ldr	r3, [pc, #116]	; (8010038 <hist_insertdata+0x118>)
 800ffc4:	edc3 7a00 	vstr	s15, [r3]

		if(pwrswr_antenna.fwd_peakwatt > antpwr_peak)
 800ffc8:	4b19      	ldr	r3, [pc, #100]	; (8010030 <hist_insertdata+0x110>)
 800ffca:	ed93 7a03 	vldr	s14, [r3, #12]
 800ffce:	4b1b      	ldr	r3, [pc, #108]	; (801003c <hist_insertdata+0x11c>)
 800ffd0:	edd3 7a00 	vldr	s15, [r3]
 800ffd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ffd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffdc:	dd03      	ble.n	800ffe6 <hist_insertdata+0xc6>
			antpwr_peak = pwrswr_antenna.fwd_peakwatt;
 800ffde:	4b14      	ldr	r3, [pc, #80]	; (8010030 <hist_insertdata+0x110>)
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	4a16      	ldr	r2, [pc, #88]	; (801003c <hist_insertdata+0x11c>)
 800ffe4:	6013      	str	r3, [r2, #0]

		dcpwr_mittel += adc_realvals[CALC_POWER];
 800ffe6:	4b16      	ldr	r3, [pc, #88]	; (8010040 <hist_insertdata+0x120>)
 800ffe8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ffec:	4b15      	ldr	r3, [pc, #84]	; (8010044 <hist_insertdata+0x124>)
 800ffee:	edd3 7a00 	vldr	s15, [r3]
 800fff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fff6:	4b13      	ldr	r3, [pc, #76]	; (8010044 <hist_insertdata+0x124>)
 800fff8:	edc3 7a00 	vstr	s15, [r3]


		mittelcnt++;
 800fffc:	4b12      	ldr	r3, [pc, #72]	; (8010048 <hist_insertdata+0x128>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	3301      	adds	r3, #1
 8010002:	4a11      	ldr	r2, [pc, #68]	; (8010048 <hist_insertdata+0x128>)
 8010004:	6013      	str	r3, [r2, #0]
		hist_10ms = 10;
 8010006:	4b09      	ldr	r3, [pc, #36]	; (801002c <hist_insertdata+0x10c>)
 8010008:	220a      	movs	r2, #10
 801000a:	601a      	str	r2, [r3, #0]
	}

	show_histdata();
 801000c:	f000 f81e 	bl	801004c <show_histdata>
}
 8010010:	bf00      	nop
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	20000c14 	.word	0x20000c14
 801001c:	00000000 	.word	0x00000000
 8010020:	200049c4 	.word	0x200049c4
 8010024:	20004dac 	.word	0x20004dac
 8010028:	20005194 	.word	0x20005194
 801002c:	20001b44 	.word	0x20001b44
 8010030:	20005684 	.word	0x20005684
 8010034:	20000c0c 	.word	0x20000c0c
 8010038:	200026d8 	.word	0x200026d8
 801003c:	200026dc 	.word	0x200026dc
 8010040:	2000314c 	.word	0x2000314c
 8010044:	200026e0 	.word	0x200026e0
 8010048:	200026e4 	.word	0x200026e4

0801004c <show_histdata>:

void show_histdata()
{
 801004c:	b580      	push	{r7, lr}
 801004e:	af00      	add	r7, sp, #0
	if(hist_1s == 0)
 8010050:	4b44      	ldr	r3, [pc, #272]	; (8010164 <show_histdata+0x118>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	f040 8082 	bne.w	801015e <show_histdata+0x112>
	{
		// xspeed s sind abgelaufen, berechne Wert

		if(menunum == MENU_HISTORY)
 801005a:	4b43      	ldr	r3, [pc, #268]	; (8010168 <show_histdata+0x11c>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b05      	cmp	r3, #5
 8010060:	d10d      	bne.n	801007e <show_histdata+0x32>
		{
			// Lösche aktuelle Linie
			hist_drawvalues(antpwr_arr, BLACK);
 8010062:	2100      	movs	r1, #0
 8010064:	4841      	ldr	r0, [pc, #260]	; (801016c <show_histdata+0x120>)
 8010066:	f000 f897 	bl	8010198 <hist_drawvalues>
			hist_drawvalues(antpeakpwr_arr, BLACK);
 801006a:	2100      	movs	r1, #0
 801006c:	4840      	ldr	r0, [pc, #256]	; (8010170 <show_histdata+0x124>)
 801006e:	f000 f893 	bl	8010198 <hist_drawvalues>
			hist_drawvalues(dcpwr_arr, BLACK);
 8010072:	2100      	movs	r1, #0
 8010074:	483f      	ldr	r0, [pc, #252]	; (8010174 <show_histdata+0x128>)
 8010076:	f000 f88f 	bl	8010198 <hist_drawvalues>

			// restauriere Hilfslinien
			hist_hilfslinien();
 801007a:	f7ff fee9 	bl	800fe50 <hist_hilfslinien>
		}

		// schiebe Array
		memmove(antpwr_arr+1,antpwr_arr,(hist_width-1)*sizeof(uint16_t));
 801007e:	4b3e      	ldr	r3, [pc, #248]	; (8010178 <show_histdata+0x12c>)
 8010080:	f240 32e6 	movw	r2, #998	; 0x3e6
 8010084:	4939      	ldr	r1, [pc, #228]	; (801016c <show_histdata+0x120>)
 8010086:	4618      	mov	r0, r3
 8010088:	f00f f899 	bl	801f1be <memmove>
		memmove(antpeakpwr_arr+1,antpeakpwr_arr,(hist_width-1)*sizeof(uint16_t));
 801008c:	4b3b      	ldr	r3, [pc, #236]	; (801017c <show_histdata+0x130>)
 801008e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8010092:	4937      	ldr	r1, [pc, #220]	; (8010170 <show_histdata+0x124>)
 8010094:	4618      	mov	r0, r3
 8010096:	f00f f892 	bl	801f1be <memmove>
		memmove(dcpwr_arr+1,dcpwr_arr,(hist_width-1)*sizeof(uint16_t));
 801009a:	4b39      	ldr	r3, [pc, #228]	; (8010180 <show_histdata+0x134>)
 801009c:	f240 32e6 	movw	r2, #998	; 0x3e6
 80100a0:	4934      	ldr	r1, [pc, #208]	; (8010174 <show_histdata+0x128>)
 80100a2:	4618      	mov	r0, r3
 80100a4:	f00f f88b 	bl	801f1be <memmove>

		// füge neuen Wert ein
		antpwr_arr[0] = hist_ValueToScreen(antpwr_mittel / (float)mittelcnt);
 80100a8:	4b36      	ldr	r3, [pc, #216]	; (8010184 <show_histdata+0x138>)
 80100aa:	ed93 7a00 	vldr	s14, [r3]
 80100ae:	4b36      	ldr	r3, [pc, #216]	; (8010188 <show_histdata+0x13c>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	ee07 3a90 	vmov	s15, r3
 80100b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80100be:	eeb0 0a66 	vmov.f32	s0, s13
 80100c2:	f7ff fcd7 	bl	800fa74 <hist_ValueToScreen>
 80100c6:	4603      	mov	r3, r0
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	4b28      	ldr	r3, [pc, #160]	; (801016c <show_histdata+0x120>)
 80100cc:	801a      	strh	r2, [r3, #0]
		antpeakpwr_arr[0] = hist_ValueToScreen(antpwr_peak);
 80100ce:	4b2f      	ldr	r3, [pc, #188]	; (801018c <show_histdata+0x140>)
 80100d0:	edd3 7a00 	vldr	s15, [r3]
 80100d4:	eeb0 0a67 	vmov.f32	s0, s15
 80100d8:	f7ff fccc 	bl	800fa74 <hist_ValueToScreen>
 80100dc:	4603      	mov	r3, r0
 80100de:	b29a      	uxth	r2, r3
 80100e0:	4b23      	ldr	r3, [pc, #140]	; (8010170 <show_histdata+0x124>)
 80100e2:	801a      	strh	r2, [r3, #0]
		dcpwr_arr[0] = hist_ValueToScreen(dcpwr_mittel / (float)mittelcnt / 2.0);  // durch 2.0 weil die Skala doppelt so groß skaliert ist wie die RF Skala
 80100e4:	4b2a      	ldr	r3, [pc, #168]	; (8010190 <show_histdata+0x144>)
 80100e6:	edd3 6a00 	vldr	s13, [r3]
 80100ea:	4b27      	ldr	r3, [pc, #156]	; (8010188 <show_histdata+0x13c>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	ee07 3a90 	vmov	s15, r3
 80100f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80100f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100fa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80100fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010102:	eeb0 0a66 	vmov.f32	s0, s13
 8010106:	f7ff fcb5 	bl	800fa74 <hist_ValueToScreen>
 801010a:	4603      	mov	r3, r0
 801010c:	b29a      	uxth	r2, r3
 801010e:	4b19      	ldr	r3, [pc, #100]	; (8010174 <show_histdata+0x128>)
 8010110:	801a      	strh	r2, [r3, #0]

		if(menunum == MENU_HISTORY)
 8010112:	4b15      	ldr	r3, [pc, #84]	; (8010168 <show_histdata+0x11c>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2b05      	cmp	r3, #5
 8010118:	d10d      	bne.n	8010136 <show_histdata+0xea>
		{
			// Zeichne neue Werte
			hist_drawvalues(dcpwr_arr, GREEN);
 801011a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 801011e:	4815      	ldr	r0, [pc, #84]	; (8010174 <show_histdata+0x128>)
 8010120:	f000 f83a 	bl	8010198 <hist_drawvalues>
			hist_drawvalues(antpwr_arr, RED);
 8010124:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8010128:	4810      	ldr	r0, [pc, #64]	; (801016c <show_histdata+0x120>)
 801012a:	f000 f835 	bl	8010198 <hist_drawvalues>
			hist_drawvalues(antpeakpwr_arr, BLUE);
 801012e:	211f      	movs	r1, #31
 8010130:	480f      	ldr	r0, [pc, #60]	; (8010170 <show_histdata+0x124>)
 8010132:	f000 f831 	bl	8010198 <hist_drawvalues>
		}

		antpwr_mittel = 0;
 8010136:	4b13      	ldr	r3, [pc, #76]	; (8010184 <show_histdata+0x138>)
 8010138:	f04f 0200 	mov.w	r2, #0
 801013c:	601a      	str	r2, [r3, #0]
		antpwr_peak = 0;
 801013e:	4b13      	ldr	r3, [pc, #76]	; (801018c <show_histdata+0x140>)
 8010140:	f04f 0200 	mov.w	r2, #0
 8010144:	601a      	str	r2, [r3, #0]
		dcpwr_mittel = 0;
 8010146:	4b12      	ldr	r3, [pc, #72]	; (8010190 <show_histdata+0x144>)
 8010148:	f04f 0200 	mov.w	r2, #0
 801014c:	601a      	str	r2, [r3, #0]
		mittelcnt = 0;
 801014e:	4b0e      	ldr	r3, [pc, #56]	; (8010188 <show_histdata+0x13c>)
 8010150:	2200      	movs	r2, #0
 8010152:	601a      	str	r2, [r3, #0]
		hist_1s = xspeed;
 8010154:	4b0f      	ldr	r3, [pc, #60]	; (8010194 <show_histdata+0x148>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	461a      	mov	r2, r3
 801015a:	4b02      	ldr	r3, [pc, #8]	; (8010164 <show_histdata+0x118>)
 801015c:	601a      	str	r2, [r3, #0]
	}
}
 801015e:	bf00      	nop
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	20001b40 	.word	0x20001b40
 8010168:	20000c24 	.word	0x20000c24
 801016c:	20004dac 	.word	0x20004dac
 8010170:	200049c4 	.word	0x200049c4
 8010174:	20005194 	.word	0x20005194
 8010178:	20004dae 	.word	0x20004dae
 801017c:	200049c6 	.word	0x200049c6
 8010180:	20005196 	.word	0x20005196
 8010184:	200026d8 	.word	0x200026d8
 8010188:	200026e4 	.word	0x200026e4
 801018c:	200026dc 	.word	0x200026dc
 8010190:	200026e0 	.word	0x200026e0
 8010194:	20000c10 	.word	0x20000c10

08010198 <hist_drawvalues>:

void hist_drawvalues(uint16_t *arr, uint16_t rgb)
{
 8010198:	b590      	push	{r4, r7, lr}
 801019a:	b08b      	sub	sp, #44	; 0x2c
 801019c:	af04      	add	r7, sp, #16
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	807b      	strh	r3, [r7, #2]
uint16_t ys,ye;
int linewidth = 2;
 80101a4:	2302      	movs	r3, #2
 80101a6:	60fb      	str	r3, [r7, #12]

	ys = *arr++;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	1c9a      	adds	r2, r3, #2
 80101ac:	607a      	str	r2, [r7, #4]
 80101ae:	881b      	ldrh	r3, [r3, #0]
 80101b0:	82fb      	strh	r3, [r7, #22]
	for(int x=1; x<hist_width; x++)
 80101b2:	2301      	movs	r3, #1
 80101b4:	613b      	str	r3, [r7, #16]
 80101b6:	e031      	b.n	801021c <hist_drawvalues+0x84>
	{
		ye = *arr++;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	1c9a      	adds	r2, r3, #2
 80101bc:	607a      	str	r2, [r7, #4]
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	817b      	strh	r3, [r7, #10]
		// das die X-Schrittweite 1 px is, reicht die VerticalLine
		if(ys == ye)
 80101c2:	8afa      	ldrh	r2, [r7, #22]
 80101c4:	897b      	ldrh	r3, [r7, #10]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d114      	bne.n	80101f4 <hist_drawvalues+0x5c>
		{
			// keine Änderung der Höhe, es reicht das Pixelsetzen
			TFT_Fill_Rectangle(hist_left+x, ys, hist_left+x+linewidth-1, ye+linewidth-1, rgb);
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80101d0:	8af9      	ldrh	r1, [r7, #22]
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	4413      	add	r3, r2
 80101dc:	1e5c      	subs	r4, r3, #1
 80101de:	897a      	ldrh	r2, [r7, #10]
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	4413      	add	r3, r2
 80101e4:	1e5a      	subs	r2, r3, #1
 80101e6:	887b      	ldrh	r3, [r7, #2]
 80101e8:	9300      	str	r3, [sp, #0]
 80101ea:	4613      	mov	r3, r2
 80101ec:	4622      	mov	r2, r4
 80101ee:	f007 fb23 	bl	8017838 <TFT_Fill_Rectangle>
 80101f2:	e010      	b.n	8010216 <hist_drawvalues+0x7e>
		}
		else
		{
			TFT_Vert_Line(hist_left+x, ys, ye, rgb, BLACK, linewidth, 0);
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80101fa:	8af9      	ldrh	r1, [r7, #22]
 80101fc:	897a      	ldrh	r2, [r7, #10]
 80101fe:	887c      	ldrh	r4, [r7, #2]
 8010200:	2300      	movs	r3, #0
 8010202:	9302      	str	r3, [sp, #8]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	9301      	str	r3, [sp, #4]
 8010208:	2300      	movs	r3, #0
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	4623      	mov	r3, r4
 801020e:	f007 fc0d 	bl	8017a2c <TFT_Vert_Line>
			ys = ye;
 8010212:	897b      	ldrh	r3, [r7, #10]
 8010214:	82fb      	strh	r3, [r7, #22]
	for(int x=1; x<hist_width; x++)
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	3301      	adds	r3, #1
 801021a:	613b      	str	r3, [r7, #16]
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010222:	dbc9      	blt.n	80101b8 <hist_drawvalues+0x20>
		}
	}
}
 8010224:	bf00      	nop
 8010226:	371c      	adds	r7, #28
 8010228:	46bd      	mov	sp, r7
 801022a:	bd90      	pop	{r4, r7, pc}

0801022c <do_button_history>:

int do_button_history(int touchbutton)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
	if(touchbutton >= TB_HIST100 && touchbutton <= TB_HIST1000)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2b31      	cmp	r3, #49	; 0x31
 8010238:	dd4f      	ble.n	80102da <do_button_history+0xae>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2b35      	cmp	r3, #53	; 0x35
 801023e:	dc4c      	bgt.n	80102da <do_button_history+0xae>
	{
		tb_buttons[TB_HIST100].pressed = 0;
 8010240:	4b28      	ldr	r3, [pc, #160]	; (80102e4 <do_button_history+0xb8>)
 8010242:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8010246:	331c      	adds	r3, #28
 8010248:	2200      	movs	r2, #0
 801024a:	701a      	strb	r2, [r3, #0]
		tb_buttons[TB_HIST250].pressed = 0;
 801024c:	4b25      	ldr	r3, [pc, #148]	; (80102e4 <do_button_history+0xb8>)
 801024e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8010252:	331c      	adds	r3, #28
 8010254:	2200      	movs	r2, #0
 8010256:	701a      	strb	r2, [r3, #0]
		tb_buttons[TB_HIST500].pressed = 0;
 8010258:	4b22      	ldr	r3, [pc, #136]	; (80102e4 <do_button_history+0xb8>)
 801025a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 801025e:	331c      	adds	r3, #28
 8010260:	2200      	movs	r2, #0
 8010262:	701a      	strb	r2, [r3, #0]
		tb_buttons[TB_HIST1000].pressed = 0;
 8010264:	4b1f      	ldr	r3, [pc, #124]	; (80102e4 <do_button_history+0xb8>)
 8010266:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 801026a:	331c      	adds	r3, #28
 801026c:	2200      	movs	r2, #0
 801026e:	701a      	strb	r2, [r3, #0]

		tb_buttons[touchbutton].pressed = 1;
 8010270:	491c      	ldr	r1, [pc, #112]	; (80102e4 <do_button_history+0xb8>)
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	4613      	mov	r3, r2
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	4413      	add	r3, r2
 801027a:	015b      	lsls	r3, r3, #5
 801027c:	440b      	add	r3, r1
 801027e:	335c      	adds	r3, #92	; 0x5c
 8010280:	2201      	movs	r2, #1
 8010282:	701a      	strb	r2, [r3, #0]
		draw_touchbutton(&tb_buttons[TB_HIST100]);
 8010284:	4818      	ldr	r0, [pc, #96]	; (80102e8 <do_button_history+0xbc>)
 8010286:	f009 fec1 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_HIST250]);
 801028a:	4818      	ldr	r0, [pc, #96]	; (80102ec <do_button_history+0xc0>)
 801028c:	f009 febe 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_HIST500]);
 8010290:	4817      	ldr	r0, [pc, #92]	; (80102f0 <do_button_history+0xc4>)
 8010292:	f009 febb 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_HIST1000]);
 8010296:	4817      	ldr	r0, [pc, #92]	; (80102f4 <do_button_history+0xc8>)
 8010298:	f009 feb8 	bl	801a00c <draw_touchbutton>

		int newxspeed = 100;
 801029c:	2364      	movs	r3, #100	; 0x64
 801029e:	60fb      	str	r3, [r7, #12]
		if(touchbutton == TB_HIST250) newxspeed = 250;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b33      	cmp	r3, #51	; 0x33
 80102a4:	d101      	bne.n	80102aa <do_button_history+0x7e>
 80102a6:	23fa      	movs	r3, #250	; 0xfa
 80102a8:	60fb      	str	r3, [r7, #12]
		if(touchbutton == TB_HIST500) newxspeed = 500;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2b34      	cmp	r3, #52	; 0x34
 80102ae:	d102      	bne.n	80102b6 <do_button_history+0x8a>
 80102b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80102b4:	60fb      	str	r3, [r7, #12]
		if(touchbutton == TB_HIST1000) newxspeed = 1000;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b35      	cmp	r3, #53	; 0x35
 80102ba:	d102      	bne.n	80102c2 <do_button_history+0x96>
 80102bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80102c0:	60fb      	str	r3, [r7, #12]

		if(newxspeed != xspeed)
 80102c2:	4b0d      	ldr	r3, [pc, #52]	; (80102f8 <do_button_history+0xcc>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	68fa      	ldr	r2, [r7, #12]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d004      	beq.n	80102d6 <do_button_history+0xaa>
		{
			xspeed = newxspeed;
 80102cc:	4a0a      	ldr	r2, [pc, #40]	; (80102f8 <do_button_history+0xcc>)
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6013      	str	r3, [r2, #0]
			hist_drawcoord();
 80102d2:	f7ff fc31 	bl	800fb38 <hist_drawcoord>
		}

		return 1;
 80102d6:	2301      	movs	r3, #1
 80102d8:	e000      	b.n	80102dc <do_button_history+0xb0>
	}

	return 0;
 80102da:	2300      	movs	r3, #0
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3710      	adds	r7, #16
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	20007078 	.word	0x20007078
 80102e8:	20008338 	.word	0x20008338
 80102ec:	20008398 	.word	0x20008398
 80102f0:	200083f8 	.word	0x200083f8
 80102f4:	20008458 	.word	0x20008458
 80102f8:	20000c10 	.word	0x20000c10

080102fc <setup_instrument>:
#define ZEIGERREVYTOTOP		320
#define ZEIGERLEN			320

// x,y ist die linke obere Ecke
void setup_instrument(int x, int y)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
	instr_x = x;
 8010306:	4a15      	ldr	r2, [pc, #84]	; (801035c <setup_instrument+0x60>)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6013      	str	r3, [r2, #0]
	instr_y = y;
 801030c:	4a14      	ldr	r2, [pc, #80]	; (8010360 <setup_instrument+0x64>)
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	6013      	str	r3, [r2, #0]

	zgxf = x + ZEIGERFWDXTOLEFT;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f203 1343 	addw	r3, r3, #323	; 0x143
 8010318:	4a12      	ldr	r2, [pc, #72]	; (8010364 <setup_instrument+0x68>)
 801031a:	6013      	str	r3, [r2, #0]
	zgyf = y + ZEIGERFWDYTOTOP;
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010322:	4a11      	ldr	r2, [pc, #68]	; (8010368 <setup_instrument+0x6c>)
 8010324:	6013      	str	r3, [r2, #0]
	zgxr = x + ZEIGERREVXTOLEFT;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	334d      	adds	r3, #77	; 0x4d
 801032a:	4a10      	ldr	r2, [pc, #64]	; (801036c <setup_instrument+0x70>)
 801032c:	6013      	str	r3, [r2, #0]
	zgyr = y + ZEIGERREVYTOTOP;
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010334:	4a0e      	ldr	r2, [pc, #56]	; (8010370 <setup_instrument+0x74>)
 8010336:	6013      	str	r3, [r2, #0]

	ofwd = orev = -9999;
 8010338:	4b0e      	ldr	r3, [pc, #56]	; (8010374 <setup_instrument+0x78>)
 801033a:	4a0f      	ldr	r2, [pc, #60]	; (8010378 <setup_instrument+0x7c>)
 801033c:	601a      	str	r2, [r3, #0]
 801033e:	4b0d      	ldr	r3, [pc, #52]	; (8010374 <setup_instrument+0x78>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	4a0e      	ldr	r2, [pc, #56]	; (801037c <setup_instrument+0x80>)
 8010344:	6013      	str	r3, [r2, #0]

	// Zeichne Scheibe
	TFT_DrawFlash("pmeter", x, y);
 8010346:	683a      	ldr	r2, [r7, #0]
 8010348:	6879      	ldr	r1, [r7, #4]
 801034a:	480d      	ldr	r0, [pc, #52]	; (8010380 <setup_instrument+0x84>)
 801034c:	f008 f916 	bl	801857c <TFT_DrawFlash>

	// Zeichne Skala
	draw_scale();
 8010350:	f000 fbf0 	bl	8010b34 <draw_scale>
}
 8010354:	bf00      	nop
 8010356:	3708      	adds	r7, #8
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	20005590 	.word	0x20005590
 8010360:	20005584 	.word	0x20005584
 8010364:	2000558c 	.word	0x2000558c
 8010368:	20005588 	.word	0x20005588
 801036c:	20005580 	.word	0x20005580
 8010370:	2000557c 	.word	0x2000557c
 8010374:	20000c1c 	.word	0x20000c1c
 8010378:	ffffd8f1 	.word	0xffffd8f1
 801037c:	20000c18 	.word	0x20000c18
 8010380:	08024908 	.word	0x08024908

08010384 <delete_zeiger>:

void delete_zeiger()
{
 8010384:	b580      	push	{r7, lr}
 8010386:	af00      	add	r7, sp, #0
	TFT_DeleteLastLine(7);
 8010388:	2007      	movs	r0, #7
 801038a:	f007 fcfb 	bl	8017d84 <TFT_DeleteLastLine>
	TFT_DeleteLastLine(6);
 801038e:	2006      	movs	r0, #6
 8010390:	f007 fcf8 	bl	8017d84 <TFT_DeleteLastLine>
	TFT_DeleteLastLine(5);
 8010394:	2005      	movs	r0, #5
 8010396:	f007 fcf5 	bl	8017d84 <TFT_DeleteLastLine>
	TFT_DeleteLastLine(4);
 801039a:	2004      	movs	r0, #4
 801039c:	f007 fcf2 	bl	8017d84 <TFT_DeleteLastLine>
	TFT_DeleteLastLine(3);
 80103a0:	2003      	movs	r0, #3
 80103a2:	f007 fcef 	bl	8017d84 <TFT_DeleteLastLine>
	TFT_DeleteLastLine(2);
 80103a6:	2002      	movs	r0, #2
 80103a8:	f007 fcec 	bl	8017d84 <TFT_DeleteLastLine>
	TFT_DeleteLastLine(1);
 80103ac:	2001      	movs	r0, #1
 80103ae:	f007 fce9 	bl	8017d84 <TFT_DeleteLastLine>
	TFT_DeleteLastLine(0);
 80103b2:	2000      	movs	r0, #0
 80103b4:	f007 fce6 	bl	8017d84 <TFT_DeleteLastLine>
}
 80103b8:	bf00      	nop
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	0000      	movs	r0, r0
	...

080103c0 <getPowerPhi>:

float getPowerPhi(float pwr)
{
 80103c0:	b590      	push	{r4, r7, lr}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	ed87 0a01 	vstr	s0, [r7, #4]
float phi;

	// Umrechnung des Powerwerts in den Winkel
	// erfolgt in 2 Bereichen 0-60 und 70-300W damit sich die Kurve optimal anschmiegt
	// die Berechnung erfolgt mit 0-300W, weshalb der Powerwert zunächst auf 300W normiert wird
	float pwr300 = 300 * (pwr / maxpwr[pcfgdata->maxpwrunits]);	// jetzt sind wir immer im Bereich 0-300W
 80103ca:	4b67      	ldr	r3, [pc, #412]	; (8010568 <getPowerPhi+0x1a8>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80103d2:	461a      	mov	r2, r3
 80103d4:	4b65      	ldr	r3, [pc, #404]	; (801056c <getPowerPhi+0x1ac>)
 80103d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103da:	ee07 3a90 	vmov	s15, r3
 80103de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80103e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80103e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103ea:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8010570 <getPowerPhi+0x1b0>
 80103ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103f2:	edc7 7a02 	vstr	s15, [r7, #8]
	if(pwr300 < 65)
 80103f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80103fa:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8010574 <getPowerPhi+0x1b4>
 80103fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010406:	d547      	bpl.n	8010498 <getPowerPhi+0xd8>
		phi = (0.64-log10(pwr300/15.0+1.0))*20.4/0.64+137.1;
 8010408:	68b8      	ldr	r0, [r7, #8]
 801040a:	f7f7 ffd5 	bl	80083b8 <__aeabi_f2d>
 801040e:	f04f 0200 	mov.w	r2, #0
 8010412:	4b59      	ldr	r3, [pc, #356]	; (8010578 <getPowerPhi+0x1b8>)
 8010414:	f7f8 f952 	bl	80086bc <__aeabi_ddiv>
 8010418:	4603      	mov	r3, r0
 801041a:	460c      	mov	r4, r1
 801041c:	4618      	mov	r0, r3
 801041e:	4621      	mov	r1, r4
 8010420:	f04f 0200 	mov.w	r2, #0
 8010424:	4b55      	ldr	r3, [pc, #340]	; (801057c <getPowerPhi+0x1bc>)
 8010426:	f7f7 fe69 	bl	80080fc <__adddf3>
 801042a:	4603      	mov	r3, r0
 801042c:	460c      	mov	r4, r1
 801042e:	ec44 3b17 	vmov	d7, r3, r4
 8010432:	eeb0 0a47 	vmov.f32	s0, s14
 8010436:	eef0 0a67 	vmov.f32	s1, s15
 801043a:	f011 ff29 	bl	8022290 <log10>
 801043e:	ec54 3b10 	vmov	r3, r4, d0
 8010442:	461a      	mov	r2, r3
 8010444:	4623      	mov	r3, r4
 8010446:	a13c      	add	r1, pc, #240	; (adr r1, 8010538 <getPowerPhi+0x178>)
 8010448:	e9d1 0100 	ldrd	r0, r1, [r1]
 801044c:	f7f7 fe54 	bl	80080f8 <__aeabi_dsub>
 8010450:	4603      	mov	r3, r0
 8010452:	460c      	mov	r4, r1
 8010454:	4618      	mov	r0, r3
 8010456:	4621      	mov	r1, r4
 8010458:	a339      	add	r3, pc, #228	; (adr r3, 8010540 <getPowerPhi+0x180>)
 801045a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045e:	f7f8 f803 	bl	8008468 <__aeabi_dmul>
 8010462:	4603      	mov	r3, r0
 8010464:	460c      	mov	r4, r1
 8010466:	4618      	mov	r0, r3
 8010468:	4621      	mov	r1, r4
 801046a:	a333      	add	r3, pc, #204	; (adr r3, 8010538 <getPowerPhi+0x178>)
 801046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010470:	f7f8 f924 	bl	80086bc <__aeabi_ddiv>
 8010474:	4603      	mov	r3, r0
 8010476:	460c      	mov	r4, r1
 8010478:	4618      	mov	r0, r3
 801047a:	4621      	mov	r1, r4
 801047c:	a332      	add	r3, pc, #200	; (adr r3, 8010548 <getPowerPhi+0x188>)
 801047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010482:	f7f7 fe3b 	bl	80080fc <__adddf3>
 8010486:	4603      	mov	r3, r0
 8010488:	460c      	mov	r4, r1
 801048a:	4618      	mov	r0, r3
 801048c:	4621      	mov	r1, r4
 801048e:	f7f8 fac3 	bl	8008a18 <__aeabi_d2f>
 8010492:	4603      	mov	r3, r0
 8010494:	60fb      	str	r3, [r7, #12]
 8010496:	e046      	b.n	8010526 <getPowerPhi+0x166>
	else
		phi = (0.778-log10(pwr300/60.0+1.0))*55.7/0.778+101.8;
 8010498:	68b8      	ldr	r0, [r7, #8]
 801049a:	f7f7 ff8d 	bl	80083b8 <__aeabi_f2d>
 801049e:	f04f 0200 	mov.w	r2, #0
 80104a2:	4b37      	ldr	r3, [pc, #220]	; (8010580 <getPowerPhi+0x1c0>)
 80104a4:	f7f8 f90a 	bl	80086bc <__aeabi_ddiv>
 80104a8:	4603      	mov	r3, r0
 80104aa:	460c      	mov	r4, r1
 80104ac:	4618      	mov	r0, r3
 80104ae:	4621      	mov	r1, r4
 80104b0:	f04f 0200 	mov.w	r2, #0
 80104b4:	4b31      	ldr	r3, [pc, #196]	; (801057c <getPowerPhi+0x1bc>)
 80104b6:	f7f7 fe21 	bl	80080fc <__adddf3>
 80104ba:	4603      	mov	r3, r0
 80104bc:	460c      	mov	r4, r1
 80104be:	ec44 3b17 	vmov	d7, r3, r4
 80104c2:	eeb0 0a47 	vmov.f32	s0, s14
 80104c6:	eef0 0a67 	vmov.f32	s1, s15
 80104ca:	f011 fee1 	bl	8022290 <log10>
 80104ce:	ec54 3b10 	vmov	r3, r4, d0
 80104d2:	461a      	mov	r2, r3
 80104d4:	4623      	mov	r3, r4
 80104d6:	a11e      	add	r1, pc, #120	; (adr r1, 8010550 <getPowerPhi+0x190>)
 80104d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104dc:	f7f7 fe0c 	bl	80080f8 <__aeabi_dsub>
 80104e0:	4603      	mov	r3, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	4618      	mov	r0, r3
 80104e6:	4621      	mov	r1, r4
 80104e8:	a31b      	add	r3, pc, #108	; (adr r3, 8010558 <getPowerPhi+0x198>)
 80104ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ee:	f7f7 ffbb 	bl	8008468 <__aeabi_dmul>
 80104f2:	4603      	mov	r3, r0
 80104f4:	460c      	mov	r4, r1
 80104f6:	4618      	mov	r0, r3
 80104f8:	4621      	mov	r1, r4
 80104fa:	a315      	add	r3, pc, #84	; (adr r3, 8010550 <getPowerPhi+0x190>)
 80104fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010500:	f7f8 f8dc 	bl	80086bc <__aeabi_ddiv>
 8010504:	4603      	mov	r3, r0
 8010506:	460c      	mov	r4, r1
 8010508:	4618      	mov	r0, r3
 801050a:	4621      	mov	r1, r4
 801050c:	a314      	add	r3, pc, #80	; (adr r3, 8010560 <getPowerPhi+0x1a0>)
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	f7f7 fdf3 	bl	80080fc <__adddf3>
 8010516:	4603      	mov	r3, r0
 8010518:	460c      	mov	r4, r1
 801051a:	4618      	mov	r0, r3
 801051c:	4621      	mov	r1, r4
 801051e:	f7f8 fa7b 	bl	8008a18 <__aeabi_d2f>
 8010522:	4603      	mov	r3, r0
 8010524:	60fb      	str	r3, [r7, #12]

	return phi;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	ee07 3a90 	vmov	s15, r3
}
 801052c:	eeb0 0a67 	vmov.f32	s0, s15
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	bd90      	pop	{r4, r7, pc}
 8010536:	bf00      	nop
 8010538:	47ae147b 	.word	0x47ae147b
 801053c:	3fe47ae1 	.word	0x3fe47ae1
 8010540:	66666666 	.word	0x66666666
 8010544:	40346666 	.word	0x40346666
 8010548:	33333333 	.word	0x33333333
 801054c:	40612333 	.word	0x40612333
 8010550:	4189374c 	.word	0x4189374c
 8010554:	3fe8e560 	.word	0x3fe8e560
 8010558:	9999999a 	.word	0x9999999a
 801055c:	404bd999 	.word	0x404bd999
 8010560:	33333333 	.word	0x33333333
 8010564:	40597333 	.word	0x40597333
 8010568:	20000bf0 	.word	0x20000bf0
 801056c:	20001450 	.word	0x20001450
 8010570:	43960000 	.word	0x43960000
 8010574:	42820000 	.word	0x42820000
 8010578:	402e0000 	.word	0x402e0000
 801057c:	3ff00000 	.word	0x3ff00000
 8010580:	404e0000 	.word	0x404e0000
 8010584:	00000000 	.word	0x00000000

08010588 <getReversePhi>:

float getReversePhi(float pwr)
{
 8010588:	b590      	push	{r4, r7, lr}
 801058a:	b085      	sub	sp, #20
 801058c:	af00      	add	r7, sp, #0
 801058e:	ed87 0a01 	vstr	s0, [r7, #4]
float phi;

	// Umrechnung des Powerwerts in den Winkel
	// die Berechnung erfolgt mit 0-60W, weshalb der Powerwert zunächst auf 60W normiert wird
	// die REV Skala muss immer 1/5tel der FWD Skala sein damit die SWR Striche stimmen
	float pwr60 = 60 * (pwr / (maxpwr[pcfgdata->maxpwrunits] / 5));	// jetzt sind wir immer im Bereich 0-60W
 8010592:	4b55      	ldr	r3, [pc, #340]	; (80106e8 <getReversePhi+0x160>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801059a:	461a      	mov	r2, r3
 801059c:	4b53      	ldr	r3, [pc, #332]	; (80106ec <getReversePhi+0x164>)
 801059e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105a2:	4a53      	ldr	r2, [pc, #332]	; (80106f0 <getReversePhi+0x168>)
 80105a4:	fb82 1203 	smull	r1, r2, r2, r3
 80105a8:	1052      	asrs	r2, r2, #1
 80105aa:	17db      	asrs	r3, r3, #31
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	ee07 3a90 	vmov	s15, r3
 80105b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80105b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80105ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105be:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80106f4 <getReversePhi+0x16c>
 80105c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105c6:	edc7 7a02 	vstr	s15, [r7, #8]
	if(pwr60 < 20)
 80105ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80105ce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80105d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80105d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105da:	d53a      	bpl.n	8010652 <getReversePhi+0xca>
		phi = log10(pwr60/4+1.0)*(47.5-22.5)/0.677+22.5;
 80105dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80105e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80105e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80105e8:	ee16 0a90 	vmov	r0, s13
 80105ec:	f7f7 fee4 	bl	80083b8 <__aeabi_f2d>
 80105f0:	f04f 0200 	mov.w	r2, #0
 80105f4:	4b40      	ldr	r3, [pc, #256]	; (80106f8 <getReversePhi+0x170>)
 80105f6:	f7f7 fd81 	bl	80080fc <__adddf3>
 80105fa:	4603      	mov	r3, r0
 80105fc:	460c      	mov	r4, r1
 80105fe:	ec44 3b17 	vmov	d7, r3, r4
 8010602:	eeb0 0a47 	vmov.f32	s0, s14
 8010606:	eef0 0a67 	vmov.f32	s1, s15
 801060a:	f011 fe41 	bl	8022290 <log10>
 801060e:	ec51 0b10 	vmov	r0, r1, d0
 8010612:	f04f 0200 	mov.w	r2, #0
 8010616:	4b39      	ldr	r3, [pc, #228]	; (80106fc <getReversePhi+0x174>)
 8010618:	f7f7 ff26 	bl	8008468 <__aeabi_dmul>
 801061c:	4603      	mov	r3, r0
 801061e:	460c      	mov	r4, r1
 8010620:	4618      	mov	r0, r3
 8010622:	4621      	mov	r1, r4
 8010624:	a32c      	add	r3, pc, #176	; (adr r3, 80106d8 <getReversePhi+0x150>)
 8010626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062a:	f7f8 f847 	bl	80086bc <__aeabi_ddiv>
 801062e:	4603      	mov	r3, r0
 8010630:	460c      	mov	r4, r1
 8010632:	4618      	mov	r0, r3
 8010634:	4621      	mov	r1, r4
 8010636:	f04f 0200 	mov.w	r2, #0
 801063a:	4b31      	ldr	r3, [pc, #196]	; (8010700 <getReversePhi+0x178>)
 801063c:	f7f7 fd5e 	bl	80080fc <__adddf3>
 8010640:	4603      	mov	r3, r0
 8010642:	460c      	mov	r4, r1
 8010644:	4618      	mov	r0, r3
 8010646:	4621      	mov	r1, r4
 8010648:	f7f8 f9e6 	bl	8008a18 <__aeabi_d2f>
 801064c:	4603      	mov	r3, r0
 801064e:	60fb      	str	r3, [r7, #12]
 8010650:	e039      	b.n	80106c6 <getReversePhi+0x13e>
	else
		phi =log10(pwr60/15+1.0)*56.5/0.699+22.5;
 8010652:	edd7 7a02 	vldr	s15, [r7, #8]
 8010656:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 801065a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801065e:	ee16 0a90 	vmov	r0, s13
 8010662:	f7f7 fea9 	bl	80083b8 <__aeabi_f2d>
 8010666:	f04f 0200 	mov.w	r2, #0
 801066a:	4b23      	ldr	r3, [pc, #140]	; (80106f8 <getReversePhi+0x170>)
 801066c:	f7f7 fd46 	bl	80080fc <__adddf3>
 8010670:	4603      	mov	r3, r0
 8010672:	460c      	mov	r4, r1
 8010674:	ec44 3b17 	vmov	d7, r3, r4
 8010678:	eeb0 0a47 	vmov.f32	s0, s14
 801067c:	eef0 0a67 	vmov.f32	s1, s15
 8010680:	f011 fe06 	bl	8022290 <log10>
 8010684:	ec51 0b10 	vmov	r0, r1, d0
 8010688:	f04f 0200 	mov.w	r2, #0
 801068c:	4b1d      	ldr	r3, [pc, #116]	; (8010704 <getReversePhi+0x17c>)
 801068e:	f7f7 feeb 	bl	8008468 <__aeabi_dmul>
 8010692:	4603      	mov	r3, r0
 8010694:	460c      	mov	r4, r1
 8010696:	4618      	mov	r0, r3
 8010698:	4621      	mov	r1, r4
 801069a:	a311      	add	r3, pc, #68	; (adr r3, 80106e0 <getReversePhi+0x158>)
 801069c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a0:	f7f8 f80c 	bl	80086bc <__aeabi_ddiv>
 80106a4:	4603      	mov	r3, r0
 80106a6:	460c      	mov	r4, r1
 80106a8:	4618      	mov	r0, r3
 80106aa:	4621      	mov	r1, r4
 80106ac:	f04f 0200 	mov.w	r2, #0
 80106b0:	4b13      	ldr	r3, [pc, #76]	; (8010700 <getReversePhi+0x178>)
 80106b2:	f7f7 fd23 	bl	80080fc <__adddf3>
 80106b6:	4603      	mov	r3, r0
 80106b8:	460c      	mov	r4, r1
 80106ba:	4618      	mov	r0, r3
 80106bc:	4621      	mov	r1, r4
 80106be:	f7f8 f9ab 	bl	8008a18 <__aeabi_d2f>
 80106c2:	4603      	mov	r3, r0
 80106c4:	60fb      	str	r3, [r7, #12]

	return phi;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	ee07 3a90 	vmov	s15, r3
}
 80106cc:	eeb0 0a67 	vmov.f32	s0, s15
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd90      	pop	{r4, r7, pc}
 80106d6:	bf00      	nop
 80106d8:	e76c8b44 	.word	0xe76c8b44
 80106dc:	3fe5a9fb 	.word	0x3fe5a9fb
 80106e0:	3f7ced91 	.word	0x3f7ced91
 80106e4:	3fe65e35 	.word	0x3fe65e35
 80106e8:	20000bf0 	.word	0x20000bf0
 80106ec:	20001450 	.word	0x20001450
 80106f0:	66666667 	.word	0x66666667
 80106f4:	42700000 	.word	0x42700000
 80106f8:	3ff00000 	.word	0x3ff00000
 80106fc:	40390000 	.word	0x40390000
 8010700:	40368000 	.word	0x40368000
 8010704:	404c4000 	.word	0x404c4000

08010708 <draw_forward>:

void draw_forward(float pwr)
{
 8010708:	b5b0      	push	{r4, r5, r7, lr}
 801070a:	b08a      	sub	sp, #40	; 0x28
 801070c:	af04      	add	r7, sp, #16
 801070e:	ed87 0a01 	vstr	s0, [r7, #4]
int xze,yze;
float phi;

	phi = getPowerPhi(pwr);
 8010712:	ed97 0a01 	vldr	s0, [r7, #4]
 8010716:	f7ff fe53 	bl	80103c0 <getPowerPhi>
 801071a:	ed87 0a05 	vstr	s0, [r7, #20]

	TFT_PolarToKartesian(ZEIGERLEN, phi, &xze,&yze);
 801071e:	f107 020c 	add.w	r2, r7, #12
 8010722:	f107 0310 	add.w	r3, r7, #16
 8010726:	4619      	mov	r1, r3
 8010728:	ed97 0a05 	vldr	s0, [r7, #20]
 801072c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8010730:	f007 fc26 	bl	8017f80 <TFT_PolarToKartesian>
	TFT_DrawLine_aboveY(zgxf,zgyf,zgxf+xze,zgyf+yze, instr_y+275, BLUE, 1,0);
 8010734:	4b3b      	ldr	r3, [pc, #236]	; (8010824 <draw_forward+0x11c>)
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	4b3b      	ldr	r3, [pc, #236]	; (8010828 <draw_forward+0x120>)
 801073a:	6819      	ldr	r1, [r3, #0]
 801073c:	4b39      	ldr	r3, [pc, #228]	; (8010824 <draw_forward+0x11c>)
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	18d4      	adds	r4, r2, r3
 8010744:	4b38      	ldr	r3, [pc, #224]	; (8010828 <draw_forward+0x120>)
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	18d5      	adds	r5, r2, r3
 801074c:	4b37      	ldr	r3, [pc, #220]	; (801082c <draw_forward+0x124>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f203 1313 	addw	r3, r3, #275	; 0x113
 8010754:	2200      	movs	r2, #0
 8010756:	9203      	str	r2, [sp, #12]
 8010758:	2201      	movs	r2, #1
 801075a:	9202      	str	r2, [sp, #8]
 801075c:	221f      	movs	r2, #31
 801075e:	9201      	str	r2, [sp, #4]
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	462b      	mov	r3, r5
 8010764:	4622      	mov	r2, r4
 8010766:	f007 fa77 	bl	8017c58 <TFT_DrawLine_aboveY>
	TFT_DrawLine_aboveY(zgxf+1,zgyf,zgxf+xze+1,zgyf+yze, instr_y+275, BLUE, 1,1);
 801076a:	4b2e      	ldr	r3, [pc, #184]	; (8010824 <draw_forward+0x11c>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	1c58      	adds	r0, r3, #1
 8010770:	4b2d      	ldr	r3, [pc, #180]	; (8010828 <draw_forward+0x120>)
 8010772:	6819      	ldr	r1, [r3, #0]
 8010774:	4b2b      	ldr	r3, [pc, #172]	; (8010824 <draw_forward+0x11c>)
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	4413      	add	r3, r2
 801077c:	1c5c      	adds	r4, r3, #1
 801077e:	4b2a      	ldr	r3, [pc, #168]	; (8010828 <draw_forward+0x120>)
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	18d5      	adds	r5, r2, r3
 8010786:	4b29      	ldr	r3, [pc, #164]	; (801082c <draw_forward+0x124>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f203 1313 	addw	r3, r3, #275	; 0x113
 801078e:	2201      	movs	r2, #1
 8010790:	9203      	str	r2, [sp, #12]
 8010792:	2201      	movs	r2, #1
 8010794:	9202      	str	r2, [sp, #8]
 8010796:	221f      	movs	r2, #31
 8010798:	9201      	str	r2, [sp, #4]
 801079a:	9300      	str	r3, [sp, #0]
 801079c:	462b      	mov	r3, r5
 801079e:	4622      	mov	r2, r4
 80107a0:	f007 fa5a 	bl	8017c58 <TFT_DrawLine_aboveY>
	TFT_DrawLine_aboveY(zgxf,zgyf+1,zgxf+xze,zgyf+yze+1, instr_y+275, BLUE, 1,2);
 80107a4:	4b1f      	ldr	r3, [pc, #124]	; (8010824 <draw_forward+0x11c>)
 80107a6:	6818      	ldr	r0, [r3, #0]
 80107a8:	4b1f      	ldr	r3, [pc, #124]	; (8010828 <draw_forward+0x120>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	1c59      	adds	r1, r3, #1
 80107ae:	4b1d      	ldr	r3, [pc, #116]	; (8010824 <draw_forward+0x11c>)
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	18d4      	adds	r4, r2, r3
 80107b6:	4b1c      	ldr	r3, [pc, #112]	; (8010828 <draw_forward+0x120>)
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	4413      	add	r3, r2
 80107be:	1c5d      	adds	r5, r3, #1
 80107c0:	4b1a      	ldr	r3, [pc, #104]	; (801082c <draw_forward+0x124>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f203 1313 	addw	r3, r3, #275	; 0x113
 80107c8:	2202      	movs	r2, #2
 80107ca:	9203      	str	r2, [sp, #12]
 80107cc:	2201      	movs	r2, #1
 80107ce:	9202      	str	r2, [sp, #8]
 80107d0:	221f      	movs	r2, #31
 80107d2:	9201      	str	r2, [sp, #4]
 80107d4:	9300      	str	r3, [sp, #0]
 80107d6:	462b      	mov	r3, r5
 80107d8:	4622      	mov	r2, r4
 80107da:	f007 fa3d 	bl	8017c58 <TFT_DrawLine_aboveY>
	TFT_DrawLine_aboveY(zgxf+1,zgyf+1,zgxf+xze+1,zgyf+yze+1, instr_y+275, BLUE, 1,3);
 80107de:	4b11      	ldr	r3, [pc, #68]	; (8010824 <draw_forward+0x11c>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	1c58      	adds	r0, r3, #1
 80107e4:	4b10      	ldr	r3, [pc, #64]	; (8010828 <draw_forward+0x120>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	1c59      	adds	r1, r3, #1
 80107ea:	4b0e      	ldr	r3, [pc, #56]	; (8010824 <draw_forward+0x11c>)
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	4413      	add	r3, r2
 80107f2:	1c5c      	adds	r4, r3, #1
 80107f4:	4b0c      	ldr	r3, [pc, #48]	; (8010828 <draw_forward+0x120>)
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	4413      	add	r3, r2
 80107fc:	1c5d      	adds	r5, r3, #1
 80107fe:	4b0b      	ldr	r3, [pc, #44]	; (801082c <draw_forward+0x124>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f203 1313 	addw	r3, r3, #275	; 0x113
 8010806:	2203      	movs	r2, #3
 8010808:	9203      	str	r2, [sp, #12]
 801080a:	2201      	movs	r2, #1
 801080c:	9202      	str	r2, [sp, #8]
 801080e:	221f      	movs	r2, #31
 8010810:	9201      	str	r2, [sp, #4]
 8010812:	9300      	str	r3, [sp, #0]
 8010814:	462b      	mov	r3, r5
 8010816:	4622      	mov	r2, r4
 8010818:	f007 fa1e 	bl	8017c58 <TFT_DrawLine_aboveY>
}
 801081c:	bf00      	nop
 801081e:	3718      	adds	r7, #24
 8010820:	46bd      	mov	sp, r7
 8010822:	bdb0      	pop	{r4, r5, r7, pc}
 8010824:	2000558c 	.word	0x2000558c
 8010828:	20005588 	.word	0x20005588
 801082c:	20005584 	.word	0x20005584

08010830 <draw_reverse>:

void draw_reverse(float pwr)
{
 8010830:	b5b0      	push	{r4, r5, r7, lr}
 8010832:	b08a      	sub	sp, #40	; 0x28
 8010834:	af04      	add	r7, sp, #16
 8010836:	ed87 0a01 	vstr	s0, [r7, #4]
int xze,yze;
float phi;

	// die REV Skala hat genau 1/5 der Maximalpower von der Fwd-Skala
	phi = getReversePhi(pwr);
 801083a:	ed97 0a01 	vldr	s0, [r7, #4]
 801083e:	f7ff fea3 	bl	8010588 <getReversePhi>
 8010842:	ed87 0a05 	vstr	s0, [r7, #20]

	TFT_PolarToKartesian(ZEIGERLEN, phi, &xze,&yze);
 8010846:	f107 020c 	add.w	r2, r7, #12
 801084a:	f107 0310 	add.w	r3, r7, #16
 801084e:	4619      	mov	r1, r3
 8010850:	ed97 0a05 	vldr	s0, [r7, #20]
 8010854:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8010858:	f007 fb92 	bl	8017f80 <TFT_PolarToKartesian>
	TFT_DrawLine_aboveY(zgxr,zgyr,zgxr+xze,zgyr+yze, instr_y+275, BLUE, 1,4);
 801085c:	4b3b      	ldr	r3, [pc, #236]	; (801094c <draw_reverse+0x11c>)
 801085e:	6818      	ldr	r0, [r3, #0]
 8010860:	4b3b      	ldr	r3, [pc, #236]	; (8010950 <draw_reverse+0x120>)
 8010862:	6819      	ldr	r1, [r3, #0]
 8010864:	4b39      	ldr	r3, [pc, #228]	; (801094c <draw_reverse+0x11c>)
 8010866:	681a      	ldr	r2, [r3, #0]
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	18d4      	adds	r4, r2, r3
 801086c:	4b38      	ldr	r3, [pc, #224]	; (8010950 <draw_reverse+0x120>)
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	18d5      	adds	r5, r2, r3
 8010874:	4b37      	ldr	r3, [pc, #220]	; (8010954 <draw_reverse+0x124>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f203 1313 	addw	r3, r3, #275	; 0x113
 801087c:	2204      	movs	r2, #4
 801087e:	9203      	str	r2, [sp, #12]
 8010880:	2201      	movs	r2, #1
 8010882:	9202      	str	r2, [sp, #8]
 8010884:	221f      	movs	r2, #31
 8010886:	9201      	str	r2, [sp, #4]
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	462b      	mov	r3, r5
 801088c:	4622      	mov	r2, r4
 801088e:	f007 f9e3 	bl	8017c58 <TFT_DrawLine_aboveY>
	TFT_DrawLine_aboveY(zgxr+1,zgyr,zgxr+xze+1,zgyr+yze, instr_y+275, BLUE, 1,5);
 8010892:	4b2e      	ldr	r3, [pc, #184]	; (801094c <draw_reverse+0x11c>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	1c58      	adds	r0, r3, #1
 8010898:	4b2d      	ldr	r3, [pc, #180]	; (8010950 <draw_reverse+0x120>)
 801089a:	6819      	ldr	r1, [r3, #0]
 801089c:	4b2b      	ldr	r3, [pc, #172]	; (801094c <draw_reverse+0x11c>)
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	4413      	add	r3, r2
 80108a4:	1c5c      	adds	r4, r3, #1
 80108a6:	4b2a      	ldr	r3, [pc, #168]	; (8010950 <draw_reverse+0x120>)
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	18d5      	adds	r5, r2, r3
 80108ae:	4b29      	ldr	r3, [pc, #164]	; (8010954 <draw_reverse+0x124>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	f203 1313 	addw	r3, r3, #275	; 0x113
 80108b6:	2205      	movs	r2, #5
 80108b8:	9203      	str	r2, [sp, #12]
 80108ba:	2201      	movs	r2, #1
 80108bc:	9202      	str	r2, [sp, #8]
 80108be:	221f      	movs	r2, #31
 80108c0:	9201      	str	r2, [sp, #4]
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	462b      	mov	r3, r5
 80108c6:	4622      	mov	r2, r4
 80108c8:	f007 f9c6 	bl	8017c58 <TFT_DrawLine_aboveY>
	TFT_DrawLine_aboveY(zgxr,zgyr+1,zgxr+xze,zgyr+yze+1, instr_y+275, BLUE, 1,6);
 80108cc:	4b1f      	ldr	r3, [pc, #124]	; (801094c <draw_reverse+0x11c>)
 80108ce:	6818      	ldr	r0, [r3, #0]
 80108d0:	4b1f      	ldr	r3, [pc, #124]	; (8010950 <draw_reverse+0x120>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	1c59      	adds	r1, r3, #1
 80108d6:	4b1d      	ldr	r3, [pc, #116]	; (801094c <draw_reverse+0x11c>)
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	18d4      	adds	r4, r2, r3
 80108de:	4b1c      	ldr	r3, [pc, #112]	; (8010950 <draw_reverse+0x120>)
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	4413      	add	r3, r2
 80108e6:	1c5d      	adds	r5, r3, #1
 80108e8:	4b1a      	ldr	r3, [pc, #104]	; (8010954 <draw_reverse+0x124>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f203 1313 	addw	r3, r3, #275	; 0x113
 80108f0:	2206      	movs	r2, #6
 80108f2:	9203      	str	r2, [sp, #12]
 80108f4:	2201      	movs	r2, #1
 80108f6:	9202      	str	r2, [sp, #8]
 80108f8:	221f      	movs	r2, #31
 80108fa:	9201      	str	r2, [sp, #4]
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	462b      	mov	r3, r5
 8010900:	4622      	mov	r2, r4
 8010902:	f007 f9a9 	bl	8017c58 <TFT_DrawLine_aboveY>
	TFT_DrawLine_aboveY(zgxr+1,zgyr+1,zgxr+xze+1,zgyr+yze+1, instr_y+275, BLUE, 1,7);
 8010906:	4b11      	ldr	r3, [pc, #68]	; (801094c <draw_reverse+0x11c>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	1c58      	adds	r0, r3, #1
 801090c:	4b10      	ldr	r3, [pc, #64]	; (8010950 <draw_reverse+0x120>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	1c59      	adds	r1, r3, #1
 8010912:	4b0e      	ldr	r3, [pc, #56]	; (801094c <draw_reverse+0x11c>)
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	4413      	add	r3, r2
 801091a:	1c5c      	adds	r4, r3, #1
 801091c:	4b0c      	ldr	r3, [pc, #48]	; (8010950 <draw_reverse+0x120>)
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	4413      	add	r3, r2
 8010924:	1c5d      	adds	r5, r3, #1
 8010926:	4b0b      	ldr	r3, [pc, #44]	; (8010954 <draw_reverse+0x124>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f203 1313 	addw	r3, r3, #275	; 0x113
 801092e:	2207      	movs	r2, #7
 8010930:	9203      	str	r2, [sp, #12]
 8010932:	2201      	movs	r2, #1
 8010934:	9202      	str	r2, [sp, #8]
 8010936:	221f      	movs	r2, #31
 8010938:	9201      	str	r2, [sp, #4]
 801093a:	9300      	str	r3, [sp, #0]
 801093c:	462b      	mov	r3, r5
 801093e:	4622      	mov	r2, r4
 8010940:	f007 f98a 	bl	8017c58 <TFT_DrawLine_aboveY>
}
 8010944:	bf00      	nop
 8010946:	3718      	adds	r7, #24
 8010948:	46bd      	mov	sp, r7
 801094a:	bdb0      	pop	{r4, r5, r7, pc}
 801094c:	20005580 	.word	0x20005580
 8010950:	2000557c 	.word	0x2000557c
 8010954:	20005584 	.word	0x20005584

08010958 <draw_needle>:

void draw_needle()
{
 8010958:	b590      	push	{r4, r7, lr}
 801095a:	b085      	sub	sp, #20
 801095c:	af00      	add	r7, sp, #0
float v = pwrswr_antenna.fwd_watt;
 801095e:	4b21      	ldr	r3, [pc, #132]	; (80109e4 <draw_needle+0x8c>)
 8010960:	689b      	ldr	r3, [r3, #8]
 8010962:	60fb      	str	r3, [r7, #12]
float vr = pwrswr_antenna.rev_watt;
 8010964:	4b1f      	ldr	r3, [pc, #124]	; (80109e4 <draw_needle+0x8c>)
 8010966:	695b      	ldr	r3, [r3, #20]
 8010968:	60bb      	str	r3, [r7, #8]

int ifwd = (int)v, irev = (int)(vr*10.0);
 801096a:	edd7 7a03 	vldr	s15, [r7, #12]
 801096e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010972:	ee17 3a90 	vmov	r3, s15
 8010976:	607b      	str	r3, [r7, #4]
 8010978:	68b8      	ldr	r0, [r7, #8]
 801097a:	f7f7 fd1d 	bl	80083b8 <__aeabi_f2d>
 801097e:	f04f 0200 	mov.w	r2, #0
 8010982:	4b19      	ldr	r3, [pc, #100]	; (80109e8 <draw_needle+0x90>)
 8010984:	f7f7 fd70 	bl	8008468 <__aeabi_dmul>
 8010988:	4603      	mov	r3, r0
 801098a:	460c      	mov	r4, r1
 801098c:	4618      	mov	r0, r3
 801098e:	4621      	mov	r1, r4
 8010990:	f7f8 f81a 	bl	80089c8 <__aeabi_d2iz>
 8010994:	4603      	mov	r3, r0
 8010996:	603b      	str	r3, [r7, #0]

	if(abs(ifwd-ofwd)>2 || abs(irev-orev)>3)	// entflackern
 8010998:	4b14      	ldr	r3, [pc, #80]	; (80109ec <draw_needle+0x94>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	bfb8      	it	lt
 80109a4:	425b      	neglt	r3, r3
 80109a6:	2b02      	cmp	r3, #2
 80109a8:	dc08      	bgt.n	80109bc <draw_needle+0x64>
 80109aa:	4b11      	ldr	r3, [pc, #68]	; (80109f0 <draw_needle+0x98>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	683a      	ldr	r2, [r7, #0]
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	bfb8      	it	lt
 80109b6:	425b      	neglt	r3, r3
 80109b8:	2b03      	cmp	r3, #3
 80109ba:	dd0f      	ble.n	80109dc <draw_needle+0x84>
	{
		delete_zeiger();
 80109bc:	f7ff fce2 	bl	8010384 <delete_zeiger>
		draw_forward(v);
 80109c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80109c4:	f7ff fea0 	bl	8010708 <draw_forward>
		draw_reverse(vr);
 80109c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80109cc:	f7ff ff30 	bl	8010830 <draw_reverse>
		ofwd = ifwd;
 80109d0:	4a06      	ldr	r2, [pc, #24]	; (80109ec <draw_needle+0x94>)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6013      	str	r3, [r2, #0]
		orev = irev;
 80109d6:	4a06      	ldr	r2, [pc, #24]	; (80109f0 <draw_needle+0x98>)
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	6013      	str	r3, [r2, #0]
	}
}
 80109dc:	bf00      	nop
 80109de:	3714      	adds	r7, #20
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd90      	pop	{r4, r7, pc}
 80109e4:	20005684 	.word	0x20005684
 80109e8:	40240000 	.word	0x40240000
 80109ec:	20000c18 	.word	0x20000c18
 80109f0:	20000c1c 	.word	0x20000c1c

080109f4 <printFwdScaleValue>:

void printFwdScaleValue(float pwr, int dx, int dy)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b090      	sub	sp, #64	; 0x40
 80109f8:	af04      	add	r7, sp, #16
 80109fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80109fe:	60b8      	str	r0, [r7, #8]
 8010a00:	6079      	str	r1, [r7, #4]
int x,y;
char s[20];

	TFT_PolarToKartesian(ZEIGERLEN+15, getPowerPhi(pwr), &x,&y);
 8010a02:	ed97 0a03 	vldr	s0, [r7, #12]
 8010a06:	f7ff fcdb 	bl	80103c0 <getPowerPhi>
 8010a0a:	eef0 7a40 	vmov.f32	s15, s0
 8010a0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010a16:	4619      	mov	r1, r3
 8010a18:	eeb0 0a67 	vmov.f32	s0, s15
 8010a1c:	f240 104f 	movw	r0, #335	; 0x14f
 8010a20:	f007 faae 	bl	8017f80 <TFT_PolarToKartesian>
	sprintf(s,"%d",(int)pwr);
 8010a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8010a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a2c:	f107 0314 	add.w	r3, r7, #20
 8010a30:	ee17 2a90 	vmov	r2, s15
 8010a34:	4910      	ldr	r1, [pc, #64]	; (8010a78 <printFwdScaleValue+0x84>)
 8010a36:	4618      	mov	r0, r3
 8010a38:	f00e fbfe 	bl	801f238 <sprintf>
	tft_print(&verdana_10ptFontInfo, s, zgxf+x+dx, zgyf+y+dy, 1, BLACK , WHITE);
 8010a3c:	4b0f      	ldr	r3, [pc, #60]	; (8010a7c <printFwdScaleValue+0x88>)
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a42:	441a      	add	r2, r3
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	18d0      	adds	r0, r2, r3
 8010a48:	4b0d      	ldr	r3, [pc, #52]	; (8010a80 <printFwdScaleValue+0x8c>)
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4e:	441a      	add	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	441a      	add	r2, r3
 8010a54:	f107 0114 	add.w	r1, r7, #20
 8010a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a5c:	9302      	str	r3, [sp, #8]
 8010a5e:	2300      	movs	r3, #0
 8010a60:	9301      	str	r3, [sp, #4]
 8010a62:	2301      	movs	r3, #1
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	4613      	mov	r3, r2
 8010a68:	4602      	mov	r2, r0
 8010a6a:	4806      	ldr	r0, [pc, #24]	; (8010a84 <printFwdScaleValue+0x90>)
 8010a6c:	f00e f89a 	bl	801eba4 <tft_print>
}
 8010a70:	bf00      	nop
 8010a72:	3730      	adds	r7, #48	; 0x30
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	08024910 	.word	0x08024910
 8010a7c:	2000558c 	.word	0x2000558c
 8010a80:	20005588 	.word	0x20005588
 8010a84:	20001c58 	.word	0x20001c58

08010a88 <printRevScaleValue>:

void printRevScaleValue(float pwr, int dx, int dy)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b092      	sub	sp, #72	; 0x48
 8010a8c:	af04      	add	r7, sp, #16
 8010a8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8010a92:	60b8      	str	r0, [r7, #8]
 8010a94:	6079      	str	r1, [r7, #4]
int x,y;
char s[20];

	TFT_PolarToKartesian(ZEIGERLEN+10, getReversePhi(pwr), &x,&y);
 8010a96:	ed97 0a03 	vldr	s0, [r7, #12]
 8010a9a:	f7ff fd75 	bl	8010588 <getReversePhi>
 8010a9e:	eef0 7a40 	vmov.f32	s15, s0
 8010aa2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010aa6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010aaa:	4619      	mov	r1, r3
 8010aac:	eeb0 0a67 	vmov.f32	s0, s15
 8010ab0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8010ab4:	f007 fa64 	bl	8017f80 <TFT_PolarToKartesian>
	sprintf(s,"%d",(int)pwr);
 8010ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8010abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ac0:	f107 031c 	add.w	r3, r7, #28
 8010ac4:	ee17 2a90 	vmov	r2, s15
 8010ac8:	4916      	ldr	r1, [pc, #88]	; (8010b24 <printRevScaleValue+0x9c>)
 8010aca:	4618      	mov	r0, r3
 8010acc:	f00e fbb4 	bl	801f238 <sprintf>
	int w,h;
	tft_textwidth_pixel(&verdana_10ptFontInfo, s, &w, &h);
 8010ad0:	f107 0314 	add.w	r3, r7, #20
 8010ad4:	f107 0218 	add.w	r2, r7, #24
 8010ad8:	f107 011c 	add.w	r1, r7, #28
 8010adc:	4812      	ldr	r0, [pc, #72]	; (8010b28 <printRevScaleValue+0xa0>)
 8010ade:	f00e f87a 	bl	801ebd6 <tft_textwidth_pixel>
	tft_print(&verdana_10ptFontInfo, s, zgxr+x+dx-w, zgyr+y+dy, 1, BLACK , WHITE);
 8010ae2:	4b12      	ldr	r3, [pc, #72]	; (8010b2c <printRevScaleValue+0xa4>)
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae8:	441a      	add	r2, r3
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	441a      	add	r2, r3
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	1ad0      	subs	r0, r2, r3
 8010af2:	4b0f      	ldr	r3, [pc, #60]	; (8010b30 <printRevScaleValue+0xa8>)
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af8:	441a      	add	r2, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	441a      	add	r2, r3
 8010afe:	f107 011c 	add.w	r1, r7, #28
 8010b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b06:	9302      	str	r3, [sp, #8]
 8010b08:	2300      	movs	r3, #0
 8010b0a:	9301      	str	r3, [sp, #4]
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	4613      	mov	r3, r2
 8010b12:	4602      	mov	r2, r0
 8010b14:	4804      	ldr	r0, [pc, #16]	; (8010b28 <printRevScaleValue+0xa0>)
 8010b16:	f00e f845 	bl	801eba4 <tft_print>
}
 8010b1a:	bf00      	nop
 8010b1c:	3738      	adds	r7, #56	; 0x38
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	08024910 	.word	0x08024910
 8010b28:	20001c58 	.word	0x20001c58
 8010b2c:	20005580 	.word	0x20005580
 8010b30:	2000557c 	.word	0x2000557c

08010b34 <draw_scale>:

// Beschritung der Skalen
void draw_scale()
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	af00      	add	r7, sp, #0

	// Maximalwerte
	float maxfwdpwr = maxpwr[pcfgdata->maxpwrunits];
 8010b3a:	4b9c      	ldr	r3, [pc, #624]	; (8010dac <draw_scale+0x278>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b42:	461a      	mov	r2, r3
 8010b44:	4b9a      	ldr	r3, [pc, #616]	; (8010db0 <draw_scale+0x27c>)
 8010b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b4a:	ee07 3a90 	vmov	s15, r3
 8010b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b52:	edc7 7a01 	vstr	s15, [r7, #4]
	float maxrevpwr = maxfwdpwr / 5;	// die Rev Skala hat 1/5 des Maxwerts der Fwd Skala
 8010b56:	ed97 7a01 	vldr	s14, [r7, #4]
 8010b5a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8010b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b62:	edc7 7a00 	vstr	s15, [r7]

	printFwdScaleValue(maxfwdpwr,10,20);
 8010b66:	2114      	movs	r1, #20
 8010b68:	200a      	movs	r0, #10
 8010b6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8010b6e:	f7ff ff41 	bl	80109f4 <printFwdScaleValue>
	printRevScaleValue(maxrevpwr,-20,20);
 8010b72:	2114      	movs	r1, #20
 8010b74:	f06f 0013 	mvn.w	r0, #19
 8010b78:	ed97 0a00 	vldr	s0, [r7]
 8010b7c:	f7ff ff84 	bl	8010a88 <printRevScaleValue>

	if(pcfgdata->maxpwrunits == 0)
 8010b80:	4b8a      	ldr	r3, [pc, #552]	; (8010dac <draw_scale+0x278>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d137      	bne.n	8010bfc <draw_scale+0xc8>
	{
		// 250 W Bereich
		printFwdScaleValue(10,0,0);
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	2000      	movs	r0, #0
 8010b90:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8010b94:	f7ff ff2e 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(20,0,0);
 8010b98:	2100      	movs	r1, #0
 8010b9a:	2000      	movs	r0, #0
 8010b9c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8010ba0:	f7ff ff28 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(50,-5,5);
 8010ba4:	2105      	movs	r1, #5
 8010ba6:	f06f 0004 	mvn.w	r0, #4
 8010baa:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8010db4 <draw_scale+0x280>
 8010bae:	f7ff ff21 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(100,-5,5);
 8010bb2:	2105      	movs	r1, #5
 8010bb4:	f06f 0004 	mvn.w	r0, #4
 8010bb8:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8010db8 <draw_scale+0x284>
 8010bbc:	f7ff ff1a 	bl	80109f4 <printFwdScaleValue>

		printRevScaleValue(1,0,0);
 8010bc0:	2100      	movs	r1, #0
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010bc8:	f7ff ff5e 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(2,0,0);
 8010bcc:	2100      	movs	r1, #0
 8010bce:	2000      	movs	r0, #0
 8010bd0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010bd4:	f7ff ff58 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(5,0,0);
 8010bd8:	2100      	movs	r1, #0
 8010bda:	2000      	movs	r0, #0
 8010bdc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8010be0:	f7ff ff52 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(10,0,0);
 8010be4:	2100      	movs	r1, #0
 8010be6:	2000      	movs	r0, #0
 8010be8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8010bec:	f7ff ff4c 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(20,0,0);
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8010bf8:	f7ff ff46 	bl	8010a88 <printRevScaleValue>
	}

	if(pcfgdata->maxpwrunits == 1)
 8010bfc:	4b6b      	ldr	r3, [pc, #428]	; (8010dac <draw_scale+0x278>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d144      	bne.n	8010c92 <draw_scale+0x15e>
	{
		// 1000 W Bereich
		printFwdScaleValue(20,0,0);
 8010c08:	2100      	movs	r1, #0
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8010c10:	f7ff fef0 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(50,0,0);
 8010c14:	2100      	movs	r1, #0
 8010c16:	2000      	movs	r0, #0
 8010c18:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8010db4 <draw_scale+0x280>
 8010c1c:	f7ff feea 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(100,0,0);
 8010c20:	2100      	movs	r1, #0
 8010c22:	2000      	movs	r0, #0
 8010c24:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8010db8 <draw_scale+0x284>
 8010c28:	f7ff fee4 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(200,-3,3);
 8010c2c:	2103      	movs	r1, #3
 8010c2e:	f06f 0002 	mvn.w	r0, #2
 8010c32:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8010dbc <draw_scale+0x288>
 8010c36:	f7ff fedd 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(350,-5,5);
 8010c3a:	2105      	movs	r1, #5
 8010c3c:	f06f 0004 	mvn.w	r0, #4
 8010c40:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8010dc0 <draw_scale+0x28c>
 8010c44:	f7ff fed6 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(650,-5,5);
 8010c48:	2105      	movs	r1, #5
 8010c4a:	f06f 0004 	mvn.w	r0, #4
 8010c4e:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8010dc4 <draw_scale+0x290>
 8010c52:	f7ff fecf 	bl	80109f4 <printFwdScaleValue>

		printRevScaleValue(5,0,0);
 8010c56:	2100      	movs	r1, #0
 8010c58:	2000      	movs	r0, #0
 8010c5a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8010c5e:	f7ff ff13 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(10,0,0);
 8010c62:	2100      	movs	r1, #0
 8010c64:	2000      	movs	r0, #0
 8010c66:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8010c6a:	f7ff ff0d 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(20,0,0);
 8010c6e:	2100      	movs	r1, #0
 8010c70:	2000      	movs	r0, #0
 8010c72:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8010c76:	f7ff ff07 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(50,0,0);
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	2000      	movs	r0, #0
 8010c7e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010db4 <draw_scale+0x280>
 8010c82:	f7ff ff01 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(80,0,0);
 8010c86:	2100      	movs	r1, #0
 8010c88:	2000      	movs	r0, #0
 8010c8a:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8010dc8 <draw_scale+0x294>
 8010c8e:	f7ff fefb 	bl	8010a88 <printRevScaleValue>
	}

	if(pcfgdata->maxpwrunits == 2)
 8010c92:	4b46      	ldr	r3, [pc, #280]	; (8010dac <draw_scale+0x278>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d137      	bne.n	8010d0e <draw_scale+0x1da>
	{
		// 250 W Bereich
		printFwdScaleValue(100,0,0);
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8010db8 <draw_scale+0x284>
 8010ca6:	f7ff fea5 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(200,0,0);
 8010caa:	2100      	movs	r1, #0
 8010cac:	2000      	movs	r0, #0
 8010cae:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8010dbc <draw_scale+0x288>
 8010cb2:	f7ff fe9f 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(500,-5,5);
 8010cb6:	2105      	movs	r1, #5
 8010cb8:	f06f 0004 	mvn.w	r0, #4
 8010cbc:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8010dcc <draw_scale+0x298>
 8010cc0:	f7ff fe98 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(1000,-5,5);
 8010cc4:	2105      	movs	r1, #5
 8010cc6:	f06f 0004 	mvn.w	r0, #4
 8010cca:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8010dd0 <draw_scale+0x29c>
 8010cce:	f7ff fe91 	bl	80109f4 <printFwdScaleValue>

		printRevScaleValue(10,0,0);
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8010cda:	f7ff fed5 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(20,0,0);
 8010cde:	2100      	movs	r1, #0
 8010ce0:	2000      	movs	r0, #0
 8010ce2:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8010ce6:	f7ff fecf 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(50,0,0);
 8010cea:	2100      	movs	r1, #0
 8010cec:	2000      	movs	r0, #0
 8010cee:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8010db4 <draw_scale+0x280>
 8010cf2:	f7ff fec9 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(100,0,0);
 8010cf6:	2100      	movs	r1, #0
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8010db8 <draw_scale+0x284>
 8010cfe:	f7ff fec3 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(200,0,0);
 8010d02:	2100      	movs	r1, #0
 8010d04:	2000      	movs	r0, #0
 8010d06:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8010dbc <draw_scale+0x288>
 8010d0a:	f7ff febd 	bl	8010a88 <printRevScaleValue>
	}

	if(pcfgdata->maxpwrunits == 3)
 8010d0e:	4b27      	ldr	r3, [pc, #156]	; (8010dac <draw_scale+0x278>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010d16:	2b03      	cmp	r3, #3
 8010d18:	d144      	bne.n	8010da4 <draw_scale+0x270>
	{
		// 1000 W Bereich
		printFwdScaleValue(200,0,0);
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	2000      	movs	r0, #0
 8010d1e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8010dbc <draw_scale+0x288>
 8010d22:	f7ff fe67 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(500,0,0);
 8010d26:	2100      	movs	r1, #0
 8010d28:	2000      	movs	r0, #0
 8010d2a:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8010dcc <draw_scale+0x298>
 8010d2e:	f7ff fe61 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(1000,0,0);
 8010d32:	2100      	movs	r1, #0
 8010d34:	2000      	movs	r0, #0
 8010d36:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8010dd0 <draw_scale+0x29c>
 8010d3a:	f7ff fe5b 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(2000,-3,3);
 8010d3e:	2103      	movs	r1, #3
 8010d40:	f06f 0002 	mvn.w	r0, #2
 8010d44:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8010dd4 <draw_scale+0x2a0>
 8010d48:	f7ff fe54 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(3500,-5,5);
 8010d4c:	2105      	movs	r1, #5
 8010d4e:	f06f 0004 	mvn.w	r0, #4
 8010d52:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8010dd8 <draw_scale+0x2a4>
 8010d56:	f7ff fe4d 	bl	80109f4 <printFwdScaleValue>
		printFwdScaleValue(6500,-5,5);
 8010d5a:	2105      	movs	r1, #5
 8010d5c:	f06f 0004 	mvn.w	r0, #4
 8010d60:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8010ddc <draw_scale+0x2a8>
 8010d64:	f7ff fe46 	bl	80109f4 <printFwdScaleValue>

		printRevScaleValue(50,0,0);
 8010d68:	2100      	movs	r1, #0
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8010db4 <draw_scale+0x280>
 8010d70:	f7ff fe8a 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(100,0,0);
 8010d74:	2100      	movs	r1, #0
 8010d76:	2000      	movs	r0, #0
 8010d78:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8010db8 <draw_scale+0x284>
 8010d7c:	f7ff fe84 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(200,0,0);
 8010d80:	2100      	movs	r1, #0
 8010d82:	2000      	movs	r0, #0
 8010d84:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010dbc <draw_scale+0x288>
 8010d88:	f7ff fe7e 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(500,0,0);
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	2000      	movs	r0, #0
 8010d90:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010dcc <draw_scale+0x298>
 8010d94:	f7ff fe78 	bl	8010a88 <printRevScaleValue>
		printRevScaleValue(800,0,0);
 8010d98:	2100      	movs	r1, #0
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010de0 <draw_scale+0x2ac>
 8010da0:	f7ff fe72 	bl	8010a88 <printRevScaleValue>
	}
}
 8010da4:	bf00      	nop
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	20000bf0 	.word	0x20000bf0
 8010db0:	20001450 	.word	0x20001450
 8010db4:	42480000 	.word	0x42480000
 8010db8:	42c80000 	.word	0x42c80000
 8010dbc:	43480000 	.word	0x43480000
 8010dc0:	43af0000 	.word	0x43af0000
 8010dc4:	44228000 	.word	0x44228000
 8010dc8:	42a00000 	.word	0x42a00000
 8010dcc:	43fa0000 	.word	0x43fa0000
 8010dd0:	447a0000 	.word	0x447a0000
 8010dd4:	44fa0000 	.word	0x44fa0000
 8010dd8:	455ac000 	.word	0x455ac000
 8010ddc:	45cb2000 	.word	0x45cb2000
 8010de0:	44480000 	.word	0x44480000

08010de4 <getLang>:
};

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
char *getLang(int textnr)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
	if(textnr >= LASTLANGENTRY) return "???";
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2b51      	cmp	r3, #81	; 0x51
 8010df0:	dd01      	ble.n	8010df6 <getLang+0x12>
 8010df2:	4b0d      	ldr	r3, [pc, #52]	; (8010e28 <getLang+0x44>)
 8010df4:	e012      	b.n	8010e1c <getLang+0x38>

	if(pcfgdata->language == 0)
 8010df6:	4b0d      	ldr	r3, [pc, #52]	; (8010e2c <getLang+0x48>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d106      	bne.n	8010e10 <getLang+0x2c>
		return english[textnr];
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2232      	movs	r2, #50	; 0x32
 8010e06:	fb02 f303 	mul.w	r3, r2, r3
 8010e0a:	4a09      	ldr	r2, [pc, #36]	; (8010e30 <getLang+0x4c>)
 8010e0c:	4413      	add	r3, r2
 8010e0e:	e005      	b.n	8010e1c <getLang+0x38>

	return deutsch[textnr];
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2232      	movs	r2, #50	; 0x32
 8010e14:	fb02 f303 	mul.w	r3, r2, r3
 8010e18:	4a06      	ldr	r2, [pc, #24]	; (8010e34 <getLang+0x50>)
 8010e1a:	4413      	add	r3, r2
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr
 8010e28:	0802691c 	.word	0x0802691c
 8010e2c:	20000bf0 	.word	0x20000bf0
 8010e30:	08024914 	.word	0x08024914
 8010e34:	08025918 	.word	0x08025918

08010e38 <getLangadd>:
#pragma GCC diagnostic pop

char addtext[50];
char *getLangadd(int textnr, char *addtxt)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
	sprintf(addtext,"%s%s",getLang(textnr),addtxt);
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff ffce 	bl	8010de4 <getLang>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	4904      	ldr	r1, [pc, #16]	; (8010e60 <getLangadd+0x28>)
 8010e4e:	4805      	ldr	r0, [pc, #20]	; (8010e64 <getLangadd+0x2c>)
 8010e50:	f00e f9f2 	bl	801f238 <sprintf>
	return addtext;
 8010e54:	4b03      	ldr	r3, [pc, #12]	; (8010e64 <getLangadd+0x2c>)
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3708      	adds	r7, #8
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	08026920 	.word	0x08026920
 8010e64:	20005594 	.word	0x20005594

08010e68 <init_LEDs>:


#include <main.h>

void init_LEDs()
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8010e6e:	2101      	movs	r1, #1
 8010e70:	2002      	movs	r0, #2
 8010e72:	f7f8 fef3 	bl	8009c5c <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_4 | GPIO_Pin_5;
 8010e76:	2330      	movs	r3, #48	; 0x30
 8010e78:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8010e7e:	2303      	movs	r3, #3
 8010e80:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8010e82:	2300      	movs	r3, #0
 8010e84:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8010e86:	2301      	movs	r3, #1
 8010e88:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8010e8a:	463b      	mov	r3, r7
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	480f      	ldr	r0, [pc, #60]	; (8010ecc <init_LEDs+0x64>)
 8010e90:	f7f8 fd14 	bl	80098bc <GPIO_Init>

	GPIO_SetBits(GPIOB, GPIO_Pin_4);
 8010e94:	2110      	movs	r1, #16
 8010e96:	480d      	ldr	r0, [pc, #52]	; (8010ecc <init_LEDs+0x64>)
 8010e98:	f7f8 fdb8 	bl	8009a0c <GPIO_SetBits>
	GPIO_SetBits(GPIOB, GPIO_Pin_5);
 8010e9c:	2120      	movs	r1, #32
 8010e9e:	480b      	ldr	r0, [pc, #44]	; (8010ecc <init_LEDs+0x64>)
 8010ea0:	f7f8 fdb4 	bl	8009a0c <GPIO_SetBits>

	GPIO_ResetBits(GPIOB, GPIO_Pin_4);
 8010ea4:	2110      	movs	r1, #16
 8010ea6:	4809      	ldr	r0, [pc, #36]	; (8010ecc <init_LEDs+0x64>)
 8010ea8:	f7f8 fdbf 	bl	8009a2a <GPIO_ResetBits>
	GPIO_SetBits(GPIOB, GPIO_Pin_4);
 8010eac:	2110      	movs	r1, #16
 8010eae:	4807      	ldr	r0, [pc, #28]	; (8010ecc <init_LEDs+0x64>)
 8010eb0:	f7f8 fdac 	bl	8009a0c <GPIO_SetBits>

	GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8010eb4:	2120      	movs	r1, #32
 8010eb6:	4805      	ldr	r0, [pc, #20]	; (8010ecc <init_LEDs+0x64>)
 8010eb8:	f7f8 fdb7 	bl	8009a2a <GPIO_ResetBits>
	GPIO_SetBits(GPIOB, GPIO_Pin_5);
 8010ebc:	2120      	movs	r1, #32
 8010ebe:	4803      	ldr	r0, [pc, #12]	; (8010ecc <init_LEDs+0x64>)
 8010ec0:	f7f8 fda4 	bl	8009a0c <GPIO_SetBits>
}
 8010ec4:	bf00      	nop
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}
 8010ecc:	40020400 	.word	0x40020400

08010ed0 <switch_LED>:

void switch_LED(int led, int onoff)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
	switch (led)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2b02      	cmp	r3, #2
 8010ede:	d002      	beq.n	8010ee6 <switch_LED+0x16>
 8010ee0:	2b03      	cmp	r3, #3
 8010ee2:	d00d      	beq.n	8010f00 <switch_LED+0x30>
	case LEDGN:
		if(onoff == LEDOFF) GPIO_SetBits(GPIOB, GPIO_Pin_5);
		else GPIO_ResetBits(GPIOB, GPIO_Pin_5);
		break;
	}
}
 8010ee4:	e019      	b.n	8010f1a <switch_LED+0x4a>
		if(onoff == LEDOFF) GPIO_SetBits(GPIOB, GPIO_Pin_4);
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d104      	bne.n	8010ef6 <switch_LED+0x26>
 8010eec:	2110      	movs	r1, #16
 8010eee:	480d      	ldr	r0, [pc, #52]	; (8010f24 <switch_LED+0x54>)
 8010ef0:	f7f8 fd8c 	bl	8009a0c <GPIO_SetBits>
		break;
 8010ef4:	e011      	b.n	8010f1a <switch_LED+0x4a>
		else GPIO_ResetBits(GPIOB, GPIO_Pin_4);
 8010ef6:	2110      	movs	r1, #16
 8010ef8:	480a      	ldr	r0, [pc, #40]	; (8010f24 <switch_LED+0x54>)
 8010efa:	f7f8 fd96 	bl	8009a2a <GPIO_ResetBits>
		break;
 8010efe:	e00c      	b.n	8010f1a <switch_LED+0x4a>
		if(onoff == LEDOFF) GPIO_SetBits(GPIOB, GPIO_Pin_5);
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d104      	bne.n	8010f10 <switch_LED+0x40>
 8010f06:	2120      	movs	r1, #32
 8010f08:	4806      	ldr	r0, [pc, #24]	; (8010f24 <switch_LED+0x54>)
 8010f0a:	f7f8 fd7f 	bl	8009a0c <GPIO_SetBits>
		break;
 8010f0e:	e003      	b.n	8010f18 <switch_LED+0x48>
		else GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8010f10:	2120      	movs	r1, #32
 8010f12:	4804      	ldr	r0, [pc, #16]	; (8010f24 <switch_LED+0x54>)
 8010f14:	f7f8 fd89 	bl	8009a2a <GPIO_ResetBits>
		break;
 8010f18:	bf00      	nop
}
 8010f1a:	bf00      	nop
 8010f1c:	3708      	adds	r7, #8
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	40020400 	.word	0x40020400

08010f28 <set_LED>:

void set_LED()
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	af00      	add	r7, sp, #0
	if(state == STATE_EMERGENCYOFF || state == STATE_POWERUP)
 8010f2c:	4b13      	ldr	r3, [pc, #76]	; (8010f7c <set_LED+0x54>)
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b03      	cmp	r3, #3
 8010f32:	d003      	beq.n	8010f3c <set_LED+0x14>
 8010f34:	4b11      	ldr	r3, [pc, #68]	; (8010f7c <set_LED+0x54>)
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d108      	bne.n	8010f4e <set_LED+0x26>
	{
		switch_LED(LEDRD, LEDON);
 8010f3c:	2101      	movs	r1, #1
 8010f3e:	2002      	movs	r0, #2
 8010f40:	f7ff ffc6 	bl	8010ed0 <switch_LED>
		switch_LED(LEDGN, LEDOFF);
 8010f44:	2100      	movs	r1, #0
 8010f46:	2003      	movs	r0, #3
 8010f48:	f7ff ffc2 	bl	8010ed0 <switch_LED>
	else
	{
		switch_LED(LEDRD, LEDOFF);
		switch_LED(LEDGN, LEDON);
	}
}
 8010f4c:	e014      	b.n	8010f78 <set_LED+0x50>
	else if(state == STATE_ACTIVE)
 8010f4e:	4b0b      	ldr	r3, [pc, #44]	; (8010f7c <set_LED+0x54>)
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	2b02      	cmp	r3, #2
 8010f54:	d108      	bne.n	8010f68 <set_LED+0x40>
		switch_LED(LEDRD, LEDON);
 8010f56:	2101      	movs	r1, #1
 8010f58:	2002      	movs	r0, #2
 8010f5a:	f7ff ffb9 	bl	8010ed0 <switch_LED>
		switch_LED(LEDGN, LEDON);
 8010f5e:	2101      	movs	r1, #1
 8010f60:	2003      	movs	r0, #3
 8010f62:	f7ff ffb5 	bl	8010ed0 <switch_LED>
}
 8010f66:	e007      	b.n	8010f78 <set_LED+0x50>
		switch_LED(LEDRD, LEDOFF);
 8010f68:	2100      	movs	r1, #0
 8010f6a:	2002      	movs	r0, #2
 8010f6c:	f7ff ffb0 	bl	8010ed0 <switch_LED>
		switch_LED(LEDGN, LEDON);
 8010f70:	2101      	movs	r1, #1
 8010f72:	2003      	movs	r0, #3
 8010f74:	f7ff ffac 	bl	8010ed0 <switch_LED>
}
 8010f78:	bf00      	nop
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	200026a0 	.word	0x200026a0

08010f80 <main>:
*/

#include <main.h>

int main(void)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
int res = 1;
 8010f86:	2301      	movs	r3, #1
 8010f88:	607b      	str	r3, [r7, #4]

	TIM3_Initialization();	// 1ms Tick, delay usw.
 8010f8a:	f007 fe6f 	bl	8018c6c <TIM3_Initialization>
	init_LEDs();			// onboard RBG led
 8010f8e:	f7ff ff6b 	bl	8010e68 <init_LEDs>
	init_GPIOs();
 8010f92:	f7fe fa4f 	bl	800f434 <init_GPIOs>
GPIO_WriteBit(GPIOE,LCD_BACKLIGHT_OUT_PE1,1);	// warum braucht man das ??????????
 8010f96:	2201      	movs	r2, #1
 8010f98:	2102      	movs	r1, #2
 8010f9a:	4819      	ldr	r0, [pc, #100]	; (8011000 <main+0x80>)
 8010f9c:	f7f8 fd54 	bl	8009a48 <GPIO_WriteBit>
	res = copy_flash_to_ram();
 8010fa0:	f7fe f88e 	bl	800f0c0 <copy_flash_to_ram>
 8010fa4:	6078      	str	r0, [r7, #4]
	restore_smallflash_data();
 8010fa6:	f005 fb7d 	bl	80166a4 <restore_smallflash_data>
	init_TFT_and_Perif();
 8010faa:	f007 fbc1 	bl	8018730 <init_TFT_and_Perif>
	touch_init();
 8010fae:	f007 ff25 	bl	8018dfc <touch_init>
	dsp7_ADC_Init();
 8010fb2:	f7f9 faf5 	bl	800a5a0 <dsp7_ADC_Init>
	dsp7_ADC3_Init();
 8010fb6:	f7f9 f9e7 	bl	800a388 <dsp7_ADC3_Init>
	init_wifi_uart();
 8010fba:	f009 f9f5 	bl	801a3a8 <init_wifi_uart>
	init_CIV_uart();
 8010fbe:	f009 faf5 	bl	801a5ac <init_CIV_uart>
	init_freq_meas();
 8010fc2:	f7fe f97d 	bl	800f2c0 <init_freq_meas>
	init_touchbuttons();
 8010fc6:	f008 fae7 	bl	8019598 <init_touchbuttons>
	init_bars();
 8010fca:	f7fb fcfb 	bl	800c9c4 <init_bars>
	//setDefaults(); // einfügen um Speicher auf Defaultwerte zu setzen
	copy_bmp_to_flash();
 8010fce:	f007 f85d 	bl	801808c <copy_bmp_to_flash>
	 * manchmal sprint die SD Karte nicht an, geht man mit Pullup (Finger) auf SDO,
	 * so gehts. Programmierter Pullup hilft nicht.
	 * Evt. einen "SD-Starter" einbauen in fatfs_sd.c  Zeile 283-287
	 */

	if(!res)
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d10d      	bne.n	8010ff4 <main+0x74>
	{
		// keine korrekten Daten gefunden
	    messagebox(getLang(no_data_set_DEFAULTs),3000);
 8010fd8:	200c      	movs	r0, #12
 8010fda:	f7ff ff03 	bl	8010de4 <getLang>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f004 f9e1 	bl	80153ac <messagebox>
	    setDefaults();
 8010fea:	f7fd fef3 	bl	800edd4 <setDefaults>
	    TFT_Fill_Screen(BLACK);
 8010fee:	2000      	movs	r0, #0
 8010ff0:	f006 fc62 	bl	80178b8 <TFT_Fill_Screen>
	}

	// Startfenster
	draw_menu_startup();
 8010ff4:	f000 fd68 	bl	8011ac8 <draw_menu_startup>


	while(1)
	{
		mainloop();
 8010ff8:	f000 f804 	bl	8011004 <mainloop>
 8010ffc:	e7fc      	b.n	8010ff8 <main+0x78>
 8010ffe:	bf00      	nop
 8011000:	40021000 	.word	0x40021000

08011004 <mainloop>:
#include <main.h>

char s[30];

void mainloop()
{
 8011004:	b580      	push	{r7, lr}
 8011006:	af00      	add	r7, sp, #0
static uint8_t oldptt = 1;

	// Funktionen welche immer laufen müssen
	process_touchbuttons();		// frage Touch ab
 8011008:	f009 f8f0 	bl	801a1ec <process_touchbuttons>
	adc_calculate_values();		// schreibe rohe und reale Werte in Arrays
 801100c:	f7f9 ff72 	bl	800aef4 <adc_calculate_values>
	read_GPIOs();				// lese GPIOs in deren Struktur
 8011010:	f7fe fadc 	bl	800f5cc <read_GPIOs>
	set_GPIO();					// wenn sich an der GPIO Struktur was geändert hat, setzte die Ausgänge entsprechend
 8011014:	f7fe fc16 	bl	800f844 <set_GPIO>
	wifi();						// Kommunikation mit dem ESP8266
 8011018:	f009 fd9a 	bl	801ab50 <wifi>
	set_LED();					// stelle onboard LED ein
 801101c:	f7ff ff84 	bl	8010f28 <set_LED>
	process_extbuttons();		// reagiere auf die externen Taster
 8011020:	f7fe fd0e 	bl	800fa40 <process_extbuttons>

	// wenn die PTT gerade gedrückt wurde, mache sofort CIV
	if(oldptt == 1 && gpio_stat[PTTIN] == 0)
 8011024:	4b23      	ldr	r3, [pc, #140]	; (80110b4 <mainloop+0xb0>)
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d106      	bne.n	801103a <mainloop+0x36>
 801102c:	4b22      	ldr	r3, [pc, #136]	; (80110b8 <mainloop+0xb4>)
 801102e:	7b1b      	ldrb	r3, [r3, #12]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d102      	bne.n	801103a <mainloop+0x36>
	{
		civ_period = 50; // aber lasse ausreiched Zeit für einen laufenden Vorgang
 8011034:	4b21      	ldr	r3, [pc, #132]	; (80110bc <mainloop+0xb8>)
 8011036:	2232      	movs	r2, #50	; 0x32
 8011038:	601a      	str	r2, [r3, #0]
	}
	oldptt = gpio_stat[PTTIN];
 801103a:	4b1f      	ldr	r3, [pc, #124]	; (80110b8 <mainloop+0xb4>)
 801103c:	7b1a      	ldrb	r2, [r3, #12]
 801103e:	4b1d      	ldr	r3, [pc, #116]	; (80110b4 <mainloop+0xb0>)
 8011040:	701a      	strb	r2, [r3, #0]

	if(civ_period == 0)
 8011042:	4b1e      	ldr	r3, [pc, #120]	; (80110bc <mainloop+0xb8>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d105      	bne.n	8011056 <mainloop+0x52>
	{
		civ_request_frequency();// fordere Frequenz von einem Icom an
 801104a:	f009 fbd1 	bl	801a7f0 <civ_request_frequency>
		civ_period = 500;
 801104e:	4b1b      	ldr	r3, [pc, #108]	; (80110bc <mainloop+0xb8>)
 8011050:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8011054:	601a      	str	r2, [r3, #0]
	}

	// Antennen und Bandumschaltung
	if(menunum != MENU_ANTSW && menunum != MENU_SWITCH &&menunum != MENU_STARTUP)
 8011056:	4b1a      	ldr	r3, [pc, #104]	; (80110c0 <mainloop+0xbc>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b0a      	cmp	r3, #10
 801105c:	d00b      	beq.n	8011076 <mainloop+0x72>
 801105e:	4b18      	ldr	r3, [pc, #96]	; (80110c0 <mainloop+0xbc>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b09      	cmp	r3, #9
 8011064:	d007      	beq.n	8011076 <mainloop+0x72>
 8011066:	4b16      	ldr	r3, [pc, #88]	; (80110c0 <mainloop+0xbc>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b10      	cmp	r3, #16
 801106c:	d003      	beq.n	8011076 <mainloop+0x72>
	{
		bandselection();		// mache die Bandselection, außer wenn man gerade im Antennenauswahlmenü ist
 801106e:	f7fa fb6b 	bl	800b748 <bandselection>
		antennaswitch();		// schalte die Antennen
 8011072:	f7fa f959 	bl	800b328 <antennaswitch>
	}

	// nur wenn das GUI aktiv ist
	if(menunum != MENU_STARTUP)
 8011076:	4b12      	ldr	r3, [pc, #72]	; (80110c0 <mainloop+0xbc>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b10      	cmp	r3, #16
 801107c:	d003      	beq.n	8011086 <mainloop+0x82>
	{
		draw_values();				// Update der Bildschirmmenüs
 801107e:	f003 f8d5 	bl	801422c <draw_values>
		hist_insertdata();			// Update der History
 8011082:	f7fe ff4d 	bl	800ff20 <hist_insertdata>
	}

	if(menunum == MENU_SWITCH)	// im Switchmenü gibt es keinerlei Automatic
 8011086:	4b0e      	ldr	r3, [pc, #56]	; (80110c0 <mainloop+0xbc>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2b09      	cmp	r3, #9
 801108c:	d00f      	beq.n	80110ae <mainloop+0xaa>
		return;

	control();					// Automaticfunktionen, Sicherheitsfunktionen
 801108e:	f7fd fa99 	bl	800e5c4 <control>
	statusline();
 8011092:	f003 fff1 	bl	8015078 <statusline>
	check_wifi_commands();
 8011096:	f00a f8b7 	bl	801b208 <check_wifi_commands>

	if(storeStartMenuFlag)
 801109a:	4b0a      	ldr	r3, [pc, #40]	; (80110c4 <mainloop+0xc0>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d006      	beq.n	80110b0 <mainloop+0xac>
	{
		storeStartMenuFlag = 0;
 80110a2:	4b08      	ldr	r3, [pc, #32]	; (80110c4 <mainloop+0xc0>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	601a      	str	r2, [r3, #0]
		store_startmenu();
 80110a8:	f005 fae0 	bl	801666c <store_startmenu>
 80110ac:	e000      	b.n	80110b0 <mainloop+0xac>
		return;
 80110ae:	bf00      	nop
	}
}
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	20000c20 	.word	0x20000c20
 80110b8:	2000498c 	.word	0x2000498c
 80110bc:	2000706c 	.word	0x2000706c
 80110c0:	20000c24 	.word	0x20000c24
 80110c4:	200027ac 	.word	0x200027ac

080110c8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80110c8:	b480      	push	{r7}
 80110ca:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80110cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80110d0:	4b05      	ldr	r3, [pc, #20]	; (80110e8 <NVIC_SystemReset+0x20>)
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80110d8:	4903      	ldr	r1, [pc, #12]	; (80110e8 <NVIC_SystemReset+0x20>)
 80110da:	4b04      	ldr	r3, [pc, #16]	; (80110ec <NVIC_SystemReset+0x24>)
 80110dc:	4313      	orrs	r3, r2
 80110de:	60cb      	str	r3, [r1, #12]
 80110e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80110e4:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */
  while(1) { __NOP(); }                                             /* wait until reset */
 80110e6:	e7fd      	b.n	80110e4 <NVIC_SystemReset+0x1c>
 80110e8:	e000ed00 	.word	0xe000ed00
 80110ec:	05fa0004 	.word	0x05fa0004

080110f0 <switchto_emergencymode>:
#define SWITCH_XROW2		SWITCH_XROW1+250
#define SWITCH_XROW3		SWITCH_XROW2+250

// ============== Hilfsfunktionen zum Umschalten der Menüs bzw des Status =====================
void switchto_emergencymode()
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	af00      	add	r7, sp, #0
	if(state != STATE_EMERGENCYOFF)
 80110f4:	4b11      	ldr	r3, [pc, #68]	; (801113c <switchto_emergencymode+0x4c>)
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	2b03      	cmp	r3, #3
 80110fa:	d01d      	beq.n	8011138 <switchto_emergencymode+0x48>
	{
		// Notaus wurde gedrückt
		if(menunum == MENU_SELECTION || menunum == MENU_TOUCHCAL || menunum == MENU_STARTUP)
 80110fc:	4b10      	ldr	r3, [pc, #64]	; (8011140 <switchto_emergencymode+0x50>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d007      	beq.n	8011114 <switchto_emergencymode+0x24>
 8011104:	4b0e      	ldr	r3, [pc, #56]	; (8011140 <switchto_emergencymode+0x50>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b0f      	cmp	r3, #15
 801110a:	d003      	beq.n	8011114 <switchto_emergencymode+0x24>
 801110c:	4b0c      	ldr	r3, [pc, #48]	; (8011140 <switchto_emergencymode+0x50>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2b10      	cmp	r3, #16
 8011112:	d103      	bne.n	801111c <switchto_emergencymode+0x2c>
		{
			emergency_silent(EMERG_USER);
 8011114:	2003      	movs	r0, #3
 8011116:	f7fd fcb7 	bl	800ea88 <emergency_silent>
			return;
 801111a:	e00d      	b.n	8011138 <switchto_emergencymode+0x48>
		}

		tb_buttons[TB_EMERG_OFF].pressed = 0;
 801111c:	4b09      	ldr	r3, [pc, #36]	; (8011144 <switchto_emergencymode+0x54>)
 801111e:	2200      	movs	r2, #0
 8011120:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
		draw_touchbutton(&tb_buttons[TB_EMERG_OFF]);
 8011124:	4808      	ldr	r0, [pc, #32]	; (8011148 <switchto_emergencymode+0x58>)
 8011126:	f008 ff71 	bl	801a00c <draw_touchbutton>
		emergency(EMERG_USER,0,0);
 801112a:	eddf 0a08 	vldr	s1, [pc, #32]	; 801114c <switchto_emergencymode+0x5c>
 801112e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801114c <switchto_emergencymode+0x5c>
 8011132:	2003      	movs	r0, #3
 8011134:	f7fd fcd0 	bl	800ead8 <emergency>
	}
}
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	200026a0 	.word	0x200026a0
 8011140:	20000c24 	.word	0x20000c24
 8011144:	20007078 	.word	0x20007078
 8011148:	20007138 	.word	0x20007138
 801114c:	00000000 	.word	0x00000000

08011150 <switchto_ON>:

void switchto_ON()
{
 8011150:	b580      	push	{r7, lr}
 8011152:	af00      	add	r7, sp, #0
	if(state == STATE_EMERGENCYOFF && menunum != MENU_STARTUP)
 8011154:	4b17      	ldr	r3, [pc, #92]	; (80111b4 <switchto_ON+0x64>)
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	2b03      	cmp	r3, #3
 801115a:	d128      	bne.n	80111ae <switchto_ON+0x5e>
 801115c:	4b16      	ldr	r3, [pc, #88]	; (80111b8 <switchto_ON+0x68>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2b10      	cmp	r3, #16
 8011162:	d024      	beq.n	80111ae <switchto_ON+0x5e>
	{
		// es wird versucht wieder einzuschalten
		error = EMERG_NOERROR;
 8011164:	4b15      	ldr	r3, [pc, #84]	; (80111bc <switchto_ON+0x6c>)
 8011166:	2200      	movs	r2, #0
 8011168:	701a      	strb	r2, [r3, #0]
		state = STATE_STANDBY;
 801116a:	4b12      	ldr	r3, [pc, #72]	; (80111b4 <switchto_ON+0x64>)
 801116c:	2201      	movs	r2, #1
 801116e:	701a      	strb	r2, [r3, #0]

		if(menunum != MENU_SELECTION && menunum != MENU_TOUCHCAL)
 8011170:	4b11      	ldr	r3, [pc, #68]	; (80111b8 <switchto_ON+0x68>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d01a      	beq.n	80111ae <switchto_ON+0x5e>
 8011178:	4b0f      	ldr	r3, [pc, #60]	; (80111b8 <switchto_ON+0x68>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b0f      	cmp	r3, #15
 801117e:	d016      	beq.n	80111ae <switchto_ON+0x5e>
		{
			tb_buttons[TB_EMERG_OFF].pressed = 1;
 8011180:	4b0f      	ldr	r3, [pc, #60]	; (80111c0 <switchto_ON+0x70>)
 8011182:	2201      	movs	r2, #1
 8011184:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
			draw_touchbutton(&tb_buttons[TB_EMERG_OFF]);
 8011188:	480e      	ldr	r0, [pc, #56]	; (80111c4 <switchto_ON+0x74>)
 801118a:	f008 ff3f 	bl	801a00c <draw_touchbutton>
			tb_buttons[TB_STANDBY].pressed = 1;
 801118e:	4b0c      	ldr	r3, [pc, #48]	; (80111c0 <switchto_ON+0x70>)
 8011190:	2201      	movs	r2, #1
 8011192:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			draw_touchbutton(&tb_buttons[TB_STANDBY]);
 8011196:	480c      	ldr	r0, [pc, #48]	; (80111c8 <switchto_ON+0x78>)
 8011198:	f008 ff38 	bl	801a00c <draw_touchbutton>
			tb_buttons[TB_ACTIVE].pressed = 0;
 801119c:	4b08      	ldr	r3, [pc, #32]	; (80111c0 <switchto_ON+0x70>)
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			draw_touchbutton(&tb_buttons[TB_ACTIVE]);
 80111a4:	4806      	ldr	r0, [pc, #24]	; (80111c0 <switchto_ON+0x70>)
 80111a6:	f008 ff31 	bl	801a00c <draw_touchbutton>
			draw_menu_frame();
 80111aa:	f001 fc0f 	bl	80129cc <draw_menu_frame>
		}
	}
}
 80111ae:	bf00      	nop
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	200026a0 	.word	0x200026a0
 80111b8:	20000c24 	.word	0x20000c24
 80111bc:	200026a2 	.word	0x200026a2
 80111c0:	20007078 	.word	0x20007078
 80111c4:	20007138 	.word	0x20007138
 80111c8:	200070d8 	.word	0x200070d8

080111cc <switchto_active>:

int switchto_active()
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	af00      	add	r7, sp, #0
	// nicht aktivieren wenn keine Ub da ist
	if(adc_realvals[UMESS] < 11.0)
 80111d0:	4b1c      	ldr	r3, [pc, #112]	; (8011244 <switchto_active+0x78>)
 80111d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80111d6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80111da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e2:	d50e      	bpl.n	8011202 <switchto_active+0x36>
	{
		blink_touchbutton(&tb_buttons[TB_ACTIVE], pcfgdata->language?"Ub < 11V":"no Ub");
 80111e4:	4b18      	ldr	r3, [pc, #96]	; (8011248 <switchto_active+0x7c>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <switchto_active+0x28>
 80111f0:	4b16      	ldr	r3, [pc, #88]	; (801124c <switchto_active+0x80>)
 80111f2:	e000      	b.n	80111f6 <switchto_active+0x2a>
 80111f4:	4b16      	ldr	r3, [pc, #88]	; (8011250 <switchto_active+0x84>)
 80111f6:	4619      	mov	r1, r3
 80111f8:	4816      	ldr	r0, [pc, #88]	; (8011254 <switchto_active+0x88>)
 80111fa:	f008 fea9 	bl	8019f50 <blink_touchbutton>
		return 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	e01e      	b.n	8011240 <switchto_active+0x74>
	}

	// nicht aktivieren wenn PTT gedrückt
	if(gpio_stat[PTTIN] == 0)
 8011202:	4b15      	ldr	r3, [pc, #84]	; (8011258 <switchto_active+0x8c>)
 8011204:	7b1b      	ldrb	r3, [r3, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d105      	bne.n	8011216 <switchto_active+0x4a>
	{
		blink_touchbutton(&tb_buttons[TB_ACTIVE], "PTT ?");
 801120a:	4914      	ldr	r1, [pc, #80]	; (801125c <switchto_active+0x90>)
 801120c:	4811      	ldr	r0, [pc, #68]	; (8011254 <switchto_active+0x88>)
 801120e:	f008 fe9f 	bl	8019f50 <blink_touchbutton>
		return 0;
 8011212:	2300      	movs	r3, #0
 8011214:	e014      	b.n	8011240 <switchto_active+0x74>
	}

	tb_buttons[TB_STANDBY].pressed = 0;
 8011216:	4b0f      	ldr	r3, [pc, #60]	; (8011254 <switchto_active+0x88>)
 8011218:	2200      	movs	r2, #0
 801121a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	draw_touchbutton(&tb_buttons[TB_STANDBY]);
 801121e:	4810      	ldr	r0, [pc, #64]	; (8011260 <switchto_active+0x94>)
 8011220:	f008 fef4 	bl	801a00c <draw_touchbutton>
	tb_buttons[TB_ACTIVE].pressed = 1;
 8011224:	4b0b      	ldr	r3, [pc, #44]	; (8011254 <switchto_active+0x88>)
 8011226:	2201      	movs	r2, #1
 8011228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	draw_touchbutton(&tb_buttons[TB_ACTIVE]);
 801122c:	4809      	ldr	r0, [pc, #36]	; (8011254 <switchto_active+0x88>)
 801122e:	f008 feed 	bl	801a00c <draw_touchbutton>
	state = STATE_ACTIVE;
 8011232:	4b0c      	ldr	r3, [pc, #48]	; (8011264 <switchto_active+0x98>)
 8011234:	2202      	movs	r2, #2
 8011236:	701a      	strb	r2, [r3, #0]

	showstatus = 1;
 8011238:	4b0b      	ldr	r3, [pc, #44]	; (8011268 <switchto_active+0x9c>)
 801123a:	2201      	movs	r2, #1
 801123c:	701a      	strb	r2, [r3, #0]

	return 1;
 801123e:	2301      	movs	r3, #1
}
 8011240:	4618      	mov	r0, r3
 8011242:	bd80      	pop	{r7, pc}
 8011244:	2000314c 	.word	0x2000314c
 8011248:	20000bf0 	.word	0x20000bf0
 801124c:	08026928 	.word	0x08026928
 8011250:	08026934 	.word	0x08026934
 8011254:	20007078 	.word	0x20007078
 8011258:	2000498c 	.word	0x2000498c
 801125c:	0802693c 	.word	0x0802693c
 8011260:	200070d8 	.word	0x200070d8
 8011264:	200026a0 	.word	0x200026a0
 8011268:	20002704 	.word	0x20002704

0801126c <switchto_standby>:

void switchto_standby()
{
 801126c:	b580      	push	{r7, lr}
 801126e:	af00      	add	r7, sp, #0
	tb_buttons[TB_STANDBY].pressed = 1;
 8011270:	4b0a      	ldr	r3, [pc, #40]	; (801129c <switchto_standby+0x30>)
 8011272:	2201      	movs	r2, #1
 8011274:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	draw_touchbutton(&tb_buttons[TB_STANDBY]);
 8011278:	4809      	ldr	r0, [pc, #36]	; (80112a0 <switchto_standby+0x34>)
 801127a:	f008 fec7 	bl	801a00c <draw_touchbutton>
	tb_buttons[TB_ACTIVE].pressed = 0;
 801127e:	4b07      	ldr	r3, [pc, #28]	; (801129c <switchto_standby+0x30>)
 8011280:	2200      	movs	r2, #0
 8011282:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	draw_touchbutton(&tb_buttons[TB_ACTIVE]);
 8011286:	4805      	ldr	r0, [pc, #20]	; (801129c <switchto_standby+0x30>)
 8011288:	f008 fec0 	bl	801a00c <draw_touchbutton>
	state = STATE_STANDBY;
 801128c:	4b05      	ldr	r3, [pc, #20]	; (80112a4 <switchto_standby+0x38>)
 801128e:	2201      	movs	r2, #1
 8011290:	701a      	strb	r2, [r3, #0]

	showstatus = 1;
 8011292:	4b05      	ldr	r3, [pc, #20]	; (80112a8 <switchto_standby+0x3c>)
 8011294:	2201      	movs	r2, #1
 8011296:	701a      	strb	r2, [r3, #0]
}
 8011298:	bf00      	nop
 801129a:	bd80      	pop	{r7, pc}
 801129c:	20007078 	.word	0x20007078
 80112a0:	200070d8 	.word	0x200070d8
 80112a4:	200026a0 	.word	0x200026a0
 80112a8:	20002704 	.word	0x20002704

080112ac <process_button>:
 // ============== Umschalten der Menüs =====================

 // wird aufgerufen sobald der Benutzer wo touched. Position in t_xpos und t_ypos

int process_button(int touchbutton)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b092      	sub	sp, #72	; 0x48
 80112b0:	af04      	add	r7, sp, #16
 80112b2:	6078      	str	r0, [r7, #4]

	if(menunum != oldmenunum)
 80112b4:	4ba3      	ldr	r3, [pc, #652]	; (8011544 <process_button+0x298>)
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	4ba3      	ldr	r3, [pc, #652]	; (8011548 <process_button+0x29c>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	429a      	cmp	r2, r3
 80112be:	d006      	beq.n	80112ce <process_button+0x22>
	{
		first_statdisplay = 1;
 80112c0:	4ba2      	ldr	r3, [pc, #648]	; (801154c <process_button+0x2a0>)
 80112c2:	2201      	movs	r2, #1
 80112c4:	601a      	str	r2, [r3, #0]
		oldmenunum = menunum;
 80112c6:	4b9f      	ldr	r3, [pc, #636]	; (8011544 <process_button+0x298>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4a9f      	ldr	r2, [pc, #636]	; (8011548 <process_button+0x29c>)
 80112cc:	6013      	str	r3, [r2, #0]
	}

	// Einschalten nach Systemstart
	if(menunum == MENU_STARTUP)
 80112ce:	4b9d      	ldr	r3, [pc, #628]	; (8011544 <process_button+0x298>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2b10      	cmp	r3, #16
 80112d4:	d111      	bne.n	80112fa <process_button+0x4e>
	{
		tb_buttons[TB_STANDBY].pressed = 1;
 80112d6:	4b9e      	ldr	r3, [pc, #632]	; (8011550 <process_button+0x2a4>)
 80112d8:	2201      	movs	r2, #1
 80112da:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

		if(touchbutton == TB_EMERG_OFF)
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2b02      	cmp	r3, #2
 80112e2:	d108      	bne.n	80112f6 <process_button+0x4a>
		{
			// nach dem Einschalten wurde auf ON gedrückt
			menunum = sf_startmenu;
 80112e4:	4b9b      	ldr	r3, [pc, #620]	; (8011554 <process_button+0x2a8>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	4a96      	ldr	r2, [pc, #600]	; (8011544 <process_button+0x298>)
 80112ea:	6013      	str	r3, [r2, #0]
			state = STATE_EMERGENCYOFF; // nur damit switchto_ON() durchläuft, wird dort wieder überschrieben
 80112ec:	4b9a      	ldr	r3, [pc, #616]	; (8011558 <process_button+0x2ac>)
 80112ee:	2203      	movs	r2, #3
 80112f0:	701a      	strb	r2, [r3, #0]
			switchto_ON();
 80112f2:	f7ff ff2d 	bl	8011150 <switchto_ON>
		}
		return 1;
 80112f6:	2301      	movs	r3, #1
 80112f8:	e1f4      	b.n	80116e4 <process_button+0x438>
	}

	if(touchbutton == TB_EMERG_OFF)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2b02      	cmp	r3, #2
 80112fe:	d109      	bne.n	8011314 <process_button+0x68>
	{
		if(state != STATE_EMERGENCYOFF)
 8011300:	4b95      	ldr	r3, [pc, #596]	; (8011558 <process_button+0x2ac>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	2b03      	cmp	r3, #3
 8011306:	d003      	beq.n	8011310 <process_button+0x64>
		{
			// Notaus wurde gedrückt
			switchto_emergencymode();
 8011308:	f7ff fef2 	bl	80110f0 <switchto_emergencymode>
			return 1;
 801130c:	2301      	movs	r3, #1
 801130e:	e1e9      	b.n	80116e4 <process_button+0x438>
		}
		else
		{
			// es wird versucht wieder einzuschalten
			switchto_ON();
 8011310:	f7ff ff1e 	bl	8011150 <switchto_ON>
		}
	}

	// der Menübutton ist immer vorhanden, außer wenn man im Selektionsmenü ist
	if(touchbutton == TB_MENU && menunum != MENU_SELECTION)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b03      	cmp	r3, #3
 8011318:	d17a      	bne.n	8011410 <process_button+0x164>
 801131a:	4b8a      	ldr	r3, [pc, #552]	; (8011544 <process_button+0x298>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d076      	beq.n	8011410 <process_button+0x164>
	{
		if(menunum == MENU_SYSTEM1)
 8011322:	4b88      	ldr	r3, [pc, #544]	; (8011544 <process_button+0x298>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	2b0d      	cmp	r3, #13
 8011328:	d101      	bne.n	801132e <process_button+0x82>
		{
			setDisplayReverse();
 801132a:	f005 fadf 	bl	80168ec <setDisplayReverse>
		}

		// das Selectionsmenü wurde neu aufgerufen
		// der Tastendruck wird nicht weiter angezeigt weil man ihn eh nicht sieht
		if((menunum == MENU_SETUP || menunum == MENU_CALIB || menunum == MENU_SYSTEM1 || menunum == MENU_SYSTEM2 || menunum == MENU_ANTSW) && setup_modified)
 801132e:	4b85      	ldr	r3, [pc, #532]	; (8011544 <process_button+0x298>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b0b      	cmp	r3, #11
 8011334:	d00f      	beq.n	8011356 <process_button+0xaa>
 8011336:	4b83      	ldr	r3, [pc, #524]	; (8011544 <process_button+0x298>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b0c      	cmp	r3, #12
 801133c:	d00b      	beq.n	8011356 <process_button+0xaa>
 801133e:	4b81      	ldr	r3, [pc, #516]	; (8011544 <process_button+0x298>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	2b0d      	cmp	r3, #13
 8011344:	d007      	beq.n	8011356 <process_button+0xaa>
 8011346:	4b7f      	ldr	r3, [pc, #508]	; (8011544 <process_button+0x298>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2b0e      	cmp	r3, #14
 801134c:	d003      	beq.n	8011356 <process_button+0xaa>
 801134e:	4b7d      	ldr	r3, [pc, #500]	; (8011544 <process_button+0x298>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2b0a      	cmp	r3, #10
 8011354:	d155      	bne.n	8011402 <process_button+0x156>
 8011356:	4b81      	ldr	r3, [pc, #516]	; (801155c <process_button+0x2b0>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d051      	beq.n	8011402 <process_button+0x156>
		{
			// im Setupmenü wurde auf MENU gedrückt, das Setup wird also verlassen
			// speichere Werte
			if(menunum == MENU_CALIB)
 801135e:	4b79      	ldr	r3, [pc, #484]	; (8011544 <process_button+0x298>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b0c      	cmp	r3, #12
 8011364:	d117      	bne.n	8011396 <process_button+0xea>
			{
				 if(calibvalsOK() == 0)
 8011366:	f7fd f8d7 	bl	800e518 <calibvalsOK>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d112      	bne.n	8011396 <process_button+0xea>
				 {
					 tft_print(&lucidaConsole_18ptFontInfo, getLang(WRONGVALUE), 0,0, 6, RED , WHITE);
 8011370:	2041      	movs	r0, #65	; 0x41
 8011372:	f7ff fd37 	bl	8010de4 <getLang>
 8011376:	4601      	mov	r1, r0
 8011378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801137c:	9302      	str	r3, [sp, #8]
 801137e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011382:	9301      	str	r3, [sp, #4]
 8011384:	2306      	movs	r3, #6
 8011386:	9300      	str	r3, [sp, #0]
 8011388:	2300      	movs	r3, #0
 801138a:	2200      	movs	r2, #0
 801138c:	4874      	ldr	r0, [pc, #464]	; (8011560 <process_button+0x2b4>)
 801138e:	f00d fc09 	bl	801eba4 <tft_print>
					 return 1;
 8011392:	2301      	movs	r3, #1
 8011394:	e1a6      	b.n	80116e4 <process_button+0x438>
				 }
			}
			messagebox(getLang(save_values),2000);
 8011396:	200d      	movs	r0, #13
 8011398:	f7ff fd24 	bl	8010de4 <getLang>
 801139c:	4603      	mov	r3, r0
 801139e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80113a2:	4618      	mov	r0, r3
 80113a4:	f004 f802 	bl	80153ac <messagebox>
			copy_ram_to_flash();
 80113a8:	f7fd fe06 	bl	800efb8 <copy_ram_to_flash>
			init_bars();
 80113ac:	f7fb fb0a 	bl	800c9c4 <init_bars>

			// wenn sich der Systemmodus geändert hat:
			if(oldsystemMode != pcfgdata->systemMode && menunum == MENU_SYSTEM2)
 80113b0:	4b6c      	ldr	r3, [pc, #432]	; (8011564 <process_button+0x2b8>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80113b8:	4b6b      	ldr	r3, [pc, #428]	; (8011568 <process_button+0x2bc>)
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d020      	beq.n	8011402 <process_button+0x156>
 80113c0:	4b60      	ldr	r3, [pc, #384]	; (8011544 <process_button+0x298>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2b0e      	cmp	r3, #14
 80113c6:	d11c      	bne.n	8011402 <process_button+0x156>
			{
				char s[30];
				sprintf(s,"SysMode: %s",pcfgdata->systemMode?"SWR":"PA");
 80113c8:	4b66      	ldr	r3, [pc, #408]	; (8011564 <process_button+0x2b8>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <process_button+0x12c>
 80113d4:	4a65      	ldr	r2, [pc, #404]	; (801156c <process_button+0x2c0>)
 80113d6:	e000      	b.n	80113da <process_button+0x12e>
 80113d8:	4a65      	ldr	r2, [pc, #404]	; (8011570 <process_button+0x2c4>)
 80113da:	f107 030c 	add.w	r3, r7, #12
 80113de:	4965      	ldr	r1, [pc, #404]	; (8011574 <process_button+0x2c8>)
 80113e0:	4618      	mov	r0, r3
 80113e2:	f00d ff29 	bl	801f238 <sprintf>
				messagebox(s,2000);
 80113e6:	f107 030c 	add.w	r3, r7, #12
 80113ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80113ee:	4618      	mov	r0, r3
 80113f0:	f003 ffdc 	bl	80153ac <messagebox>
				messagebox("Rebooting",1000);
 80113f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80113f8:	485f      	ldr	r0, [pc, #380]	; (8011578 <process_button+0x2cc>)
 80113fa:	f003 ffd7 	bl	80153ac <messagebox>
				NVIC_SystemReset();
 80113fe:	f7ff fe63 	bl	80110c8 <NVIC_SystemReset>
			}
		}

		menunum = MENU_SELECTION;
 8011402:	4b50      	ldr	r3, [pc, #320]	; (8011544 <process_button+0x298>)
 8011404:	2200      	movs	r2, #0
 8011406:	601a      	str	r2, [r3, #0]
		show_selectionmenu();
 8011408:	f000 f978 	bl	80116fc <show_selectionmenu>
		return 1;
 801140c:	2301      	movs	r3, #1
 801140e:	e169      	b.n	80116e4 <process_button+0x438>
	}

	// BOTTOM Touch-Zeile
	if(pcfgdata->systemMode == 0)
 8011410:	4b54      	ldr	r3, [pc, #336]	; (8011564 <process_button+0x2b8>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011418:	2b00      	cmp	r3, #0
 801141a:	d12a      	bne.n	8011472 <process_button+0x1c6>
	{
		// PA-Controller Modus
		// außer im Selectionsmenü und im Touchcal ist die Bottom-Touchzeile immer gleich
		if((touchbutton == TB_STANDBY || touchbutton == TB_ACTIVE) && menunum != MENU_SELECTION && menunum != MENU_TOUCHCAL)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b01      	cmp	r3, #1
 8011420:	d002      	beq.n	8011428 <process_button+0x17c>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d124      	bne.n	8011472 <process_button+0x1c6>
 8011428:	4b46      	ldr	r3, [pc, #280]	; (8011544 <process_button+0x298>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d020      	beq.n	8011472 <process_button+0x1c6>
 8011430:	4b44      	ldr	r3, [pc, #272]	; (8011544 <process_button+0x298>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b0f      	cmp	r3, #15
 8011436:	d01c      	beq.n	8011472 <process_button+0x1c6>
		{
			if(state == STATE_EMERGENCYOFF) return 1;	// nicht aktivieren im Notausmodus
 8011438:	4b47      	ldr	r3, [pc, #284]	; (8011558 <process_button+0x2ac>)
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	2b03      	cmp	r3, #3
 801143e:	d101      	bne.n	8011444 <process_button+0x198>
 8011440:	2301      	movs	r3, #1
 8011442:	e14f      	b.n	80116e4 <process_button+0x438>

			if(touchbutton == TB_ACTIVE)
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d10c      	bne.n	8011464 <process_button+0x1b8>
			{
				if(gpio_stat[PTTIN] == 0) return 1; // nicht aktivieren wenn PTT gedrückt
 801144a:	4b4c      	ldr	r3, [pc, #304]	; (801157c <process_button+0x2d0>)
 801144c:	7b1b      	ldrb	r3, [r3, #12]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <process_button+0x1aa>
 8011452:	2301      	movs	r3, #1
 8011454:	e146      	b.n	80116e4 <process_button+0x438>

				if(!switchto_active())
 8011456:	f7ff feb9 	bl	80111cc <switchto_active>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d101      	bne.n	8011464 <process_button+0x1b8>
					return 1;			// es wurde nicht auf Aktiv geschaltet
 8011460:	2301      	movs	r3, #1
 8011462:	e13f      	b.n	80116e4 <process_button+0x438>
			}
			if(touchbutton == TB_STANDBY)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b01      	cmp	r3, #1
 8011468:	d101      	bne.n	801146e <process_button+0x1c2>
			{
				switchto_standby();
 801146a:	f7ff feff 	bl	801126c <switchto_standby>
			}
			return 1;
 801146e:	2301      	movs	r3, #1
 8011470:	e138      	b.n	80116e4 <process_button+0x438>
		}
	}

	if(pcfgdata->systemMode == 1)
 8011472:	4b3c      	ldr	r3, [pc, #240]	; (8011564 <process_button+0x2b8>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801147a:	2b01      	cmp	r3, #1
 801147c:	d156      	bne.n	801152c <process_button+0x280>
	{
		// PwrSwr Meter Modus
		// außer im Selectionsmenü und im Touchcal ist die Bottom-Touchzeile immer gleich
		if((touchbutton == TB_KOP1 || touchbutton == TB_KOP2 || touchbutton == TB_KOP3) && menunum != MENU_SELECTION && menunum != MENU_TOUCHCAL)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2b36      	cmp	r3, #54	; 0x36
 8011482:	d005      	beq.n	8011490 <process_button+0x1e4>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2b37      	cmp	r3, #55	; 0x37
 8011488:	d002      	beq.n	8011490 <process_button+0x1e4>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2b38      	cmp	r3, #56	; 0x38
 801148e:	d14d      	bne.n	801152c <process_button+0x280>
 8011490:	4b2c      	ldr	r3, [pc, #176]	; (8011544 <process_button+0x298>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d049      	beq.n	801152c <process_button+0x280>
 8011498:	4b2a      	ldr	r3, [pc, #168]	; (8011544 <process_button+0x298>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2b0f      	cmp	r3, #15
 801149e:	d045      	beq.n	801152c <process_button+0x280>
		{
			for(int i=TB_KOP1; i<=TB_KOP3; i++)
 80114a0:	2336      	movs	r3, #54	; 0x36
 80114a2:	637b      	str	r3, [r7, #52]	; 0x34
 80114a4:	e00c      	b.n	80114c0 <process_button+0x214>
				tb_buttons[i].pressed = 0;
 80114a6:	492a      	ldr	r1, [pc, #168]	; (8011550 <process_button+0x2a4>)
 80114a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114aa:	4613      	mov	r3, r2
 80114ac:	005b      	lsls	r3, r3, #1
 80114ae:	4413      	add	r3, r2
 80114b0:	015b      	lsls	r3, r3, #5
 80114b2:	440b      	add	r3, r1
 80114b4:	335c      	adds	r3, #92	; 0x5c
 80114b6:	2200      	movs	r2, #0
 80114b8:	701a      	strb	r2, [r3, #0]
			for(int i=TB_KOP1; i<=TB_KOP3; i++)
 80114ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114bc:	3301      	adds	r3, #1
 80114be:	637b      	str	r3, [r7, #52]	; 0x34
 80114c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114c2:	2b38      	cmp	r3, #56	; 0x38
 80114c4:	ddef      	ble.n	80114a6 <process_button+0x1fa>

			tb_buttons[touchbutton].pressed = 1;
 80114c6:	4922      	ldr	r1, [pc, #136]	; (8011550 <process_button+0x2a4>)
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	4613      	mov	r3, r2
 80114cc:	005b      	lsls	r3, r3, #1
 80114ce:	4413      	add	r3, r2
 80114d0:	015b      	lsls	r3, r3, #5
 80114d2:	440b      	add	r3, r1
 80114d4:	335c      	adds	r3, #92	; 0x5c
 80114d6:	2201      	movs	r2, #1
 80114d8:	701a      	strb	r2, [r3, #0]

			if(touchbutton == TB_KOP1) act_coupler = 1;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2b36      	cmp	r3, #54	; 0x36
 80114de:	d102      	bne.n	80114e6 <process_button+0x23a>
 80114e0:	4b27      	ldr	r3, [pc, #156]	; (8011580 <process_button+0x2d4>)
 80114e2:	2201      	movs	r2, #1
 80114e4:	601a      	str	r2, [r3, #0]
			if(touchbutton == TB_KOP2) act_coupler = 2;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2b37      	cmp	r3, #55	; 0x37
 80114ea:	d102      	bne.n	80114f2 <process_button+0x246>
 80114ec:	4b24      	ldr	r3, [pc, #144]	; (8011580 <process_button+0x2d4>)
 80114ee:	2202      	movs	r2, #2
 80114f0:	601a      	str	r2, [r3, #0]
			if(touchbutton == TB_KOP3) act_coupler = 3;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2b38      	cmp	r3, #56	; 0x38
 80114f6:	d102      	bne.n	80114fe <process_button+0x252>
 80114f8:	4b21      	ldr	r3, [pc, #132]	; (8011580 <process_button+0x2d4>)
 80114fa:	2203      	movs	r2, #3
 80114fc:	601a      	str	r2, [r3, #0]
			draw_values();
 80114fe:	f002 fe95 	bl	801422c <draw_values>

			for(int i=TB_KOP1; i<=TB_KOP3; i++)
 8011502:	2336      	movs	r3, #54	; 0x36
 8011504:	633b      	str	r3, [r7, #48]	; 0x30
 8011506:	e00c      	b.n	8011522 <process_button+0x276>
				draw_touchbutton(&tb_buttons[i]);
 8011508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801150a:	4613      	mov	r3, r2
 801150c:	005b      	lsls	r3, r3, #1
 801150e:	4413      	add	r3, r2
 8011510:	015b      	lsls	r3, r3, #5
 8011512:	4a0f      	ldr	r2, [pc, #60]	; (8011550 <process_button+0x2a4>)
 8011514:	4413      	add	r3, r2
 8011516:	4618      	mov	r0, r3
 8011518:	f008 fd78 	bl	801a00c <draw_touchbutton>
			for(int i=TB_KOP1; i<=TB_KOP3; i++)
 801151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151e:	3301      	adds	r3, #1
 8011520:	633b      	str	r3, [r7, #48]	; 0x30
 8011522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011524:	2b38      	cmp	r3, #56	; 0x38
 8011526:	ddef      	ble.n	8011508 <process_button+0x25c>
			return 1;
 8011528:	2301      	movs	r3, #1
 801152a:	e0db      	b.n	80116e4 <process_button+0x438>
		}
	}

	if(menunum == MENU_HISTORY)
 801152c:	4b05      	ldr	r3, [pc, #20]	; (8011544 <process_button+0x298>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2b05      	cmp	r3, #5
 8011532:	d127      	bne.n	8011584 <process_button+0x2d8>
	{
		if(do_button_history(touchbutton))
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f7fe fe79 	bl	801022c <do_button_history>
 801153a:	4603      	mov	r3, r0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d021      	beq.n	8011584 <process_button+0x2d8>
			return 1;
 8011540:	2301      	movs	r3, #1
 8011542:	e0cf      	b.n	80116e4 <process_button+0x438>
 8011544:	20000c24 	.word	0x20000c24
 8011548:	20000c28 	.word	0x20000c28
 801154c:	20000c2c 	.word	0x20000c2c
 8011550:	20007078 	.word	0x20007078
 8011554:	20001748 	.word	0x20001748
 8011558:	200026a0 	.word	0x200026a0
 801155c:	2000277c 	.word	0x2000277c
 8011560:	20001c34 	.word	0x20001c34
 8011564:	20000bf0 	.word	0x20000bf0
 8011568:	200055d4 	.word	0x200055d4
 801156c:	08026944 	.word	0x08026944
 8011570:	08026948 	.word	0x08026948
 8011574:	0802694c 	.word	0x0802694c
 8011578:	08026958 	.word	0x08026958
 801157c:	2000498c 	.word	0x2000498c
 8011580:	20000c34 	.word	0x20000c34
	}

	if(menunum == MENU_ANTSW)
 8011584:	4b59      	ldr	r3, [pc, #356]	; (80116ec <process_button+0x440>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b0a      	cmp	r3, #10
 801158a:	d107      	bne.n	801159c <process_button+0x2f0>
	{
		if(do_button_antsw(touchbutton))
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7f9 fcb9 	bl	800af04 <do_button_antsw>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d001      	beq.n	801159c <process_button+0x2f0>
			return 1;
 8011598:	2301      	movs	r3, #1
 801159a:	e0a3      	b.n	80116e4 <process_button+0x438>
	}

	// die Bandauswahl gibt es überall außer im Selectionsmenü, Switchmenü, Setupmenü, Calicmenü und Touchcal
	if(menunum != MENU_SELECTION && menunum != MENU_TOUCHCAL && menunum != MENU_SWITCH && menunum != MENU_SETUP && menunum != MENU_CALIB && menunum != MENU_SYSTEM1 && menunum != MENU_SYSTEM2)
 801159c:	4b53      	ldr	r3, [pc, #332]	; (80116ec <process_button+0x440>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d07a      	beq.n	801169a <process_button+0x3ee>
 80115a4:	4b51      	ldr	r3, [pc, #324]	; (80116ec <process_button+0x440>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2b0f      	cmp	r3, #15
 80115aa:	d076      	beq.n	801169a <process_button+0x3ee>
 80115ac:	4b4f      	ldr	r3, [pc, #316]	; (80116ec <process_button+0x440>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2b09      	cmp	r3, #9
 80115b2:	d072      	beq.n	801169a <process_button+0x3ee>
 80115b4:	4b4d      	ldr	r3, [pc, #308]	; (80116ec <process_button+0x440>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2b0b      	cmp	r3, #11
 80115ba:	d06e      	beq.n	801169a <process_button+0x3ee>
 80115bc:	4b4b      	ldr	r3, [pc, #300]	; (80116ec <process_button+0x440>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2b0c      	cmp	r3, #12
 80115c2:	d06a      	beq.n	801169a <process_button+0x3ee>
 80115c4:	4b49      	ldr	r3, [pc, #292]	; (80116ec <process_button+0x440>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	2b0d      	cmp	r3, #13
 80115ca:	d066      	beq.n	801169a <process_button+0x3ee>
 80115cc:	4b47      	ldr	r3, [pc, #284]	; (80116ec <process_button+0x440>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2b0e      	cmp	r3, #14
 80115d2:	d062      	beq.n	801169a <process_button+0x3ee>
	{
		if(touchbutton >= TB_BAND1 && touchbutton <= TB_BAND12)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b03      	cmp	r3, #3
 80115d8:	dd5f      	ble.n	801169a <process_button+0x3ee>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2b0f      	cmp	r3, #15
 80115de:	dc5c      	bgt.n	801169a <process_button+0x3ee>
		{
			// einer der Band-Touchbuttons wurde gedrückt
			// falls ein ext. Schalter angeschlossen ist ignoriere das
			if(!rotaryswitch_installed())
 80115e0:	f7fe fa26 	bl	800fa30 <rotaryswitch_installed>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d157      	bne.n	801169a <process_button+0x3ee>
			{
				// Bandtasten
				if(!sf_autoband)
 80115ea:	4b41      	ldr	r3, [pc, #260]	; (80116f0 <process_button+0x444>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d138      	bne.n	8011664 <process_button+0x3b8>
				{
					for(int i=TB_BAND1; i<=TB_BAND11; i++)
 80115f2:	2304      	movs	r3, #4
 80115f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115f6:	e032      	b.n	801165e <process_button+0x3b2>
					{
						if(i != touchbutton)
 80115f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d014      	beq.n	801162a <process_button+0x37e>
						{
							tb_buttons[i].pressed = 0;
 8011600:	493c      	ldr	r1, [pc, #240]	; (80116f4 <process_button+0x448>)
 8011602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011604:	4613      	mov	r3, r2
 8011606:	005b      	lsls	r3, r3, #1
 8011608:	4413      	add	r3, r2
 801160a:	015b      	lsls	r3, r3, #5
 801160c:	440b      	add	r3, r1
 801160e:	335c      	adds	r3, #92	; 0x5c
 8011610:	2200      	movs	r2, #0
 8011612:	701a      	strb	r2, [r3, #0]
							draw_touchbutton(&tb_buttons[i]);
 8011614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011616:	4613      	mov	r3, r2
 8011618:	005b      	lsls	r3, r3, #1
 801161a:	4413      	add	r3, r2
 801161c:	015b      	lsls	r3, r3, #5
 801161e:	4a35      	ldr	r2, [pc, #212]	; (80116f4 <process_button+0x448>)
 8011620:	4413      	add	r3, r2
 8011622:	4618      	mov	r0, r3
 8011624:	f008 fcf2 	bl	801a00c <draw_touchbutton>
 8011628:	e016      	b.n	8011658 <process_button+0x3ac>
						}
						else
						{
							tb_buttons[i].pressed = 1;
 801162a:	4932      	ldr	r1, [pc, #200]	; (80116f4 <process_button+0x448>)
 801162c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801162e:	4613      	mov	r3, r2
 8011630:	005b      	lsls	r3, r3, #1
 8011632:	4413      	add	r3, r2
 8011634:	015b      	lsls	r3, r3, #5
 8011636:	440b      	add	r3, r1
 8011638:	335c      	adds	r3, #92	; 0x5c
 801163a:	2201      	movs	r2, #1
 801163c:	701a      	strb	r2, [r3, #0]
							draw_touchbutton(&tb_buttons[i]);
 801163e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011640:	4613      	mov	r3, r2
 8011642:	005b      	lsls	r3, r3, #1
 8011644:	4413      	add	r3, r2
 8011646:	015b      	lsls	r3, r3, #5
 8011648:	4a2a      	ldr	r2, [pc, #168]	; (80116f4 <process_button+0x448>)
 801164a:	4413      	add	r3, r2
 801164c:	4618      	mov	r0, r3
 801164e:	f008 fcdd 	bl	801a00c <draw_touchbutton>
							select_band(touchbutton);
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f7f9 febc 	bl	800b3d0 <select_band>
					for(int i=TB_BAND1; i<=TB_BAND11; i++)
 8011658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165a:	3301      	adds	r3, #1
 801165c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011660:	2b0e      	cmp	r3, #14
 8011662:	ddc9      	ble.n	80115f8 <process_button+0x34c>
						}
					}
				}

				// die AUTO Band Taste schaltet immer hin und her
				if(touchbutton == TB_BAND12)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2b0f      	cmp	r3, #15
 8011668:	d115      	bne.n	8011696 <process_button+0x3ea>
				{
					if(tb_buttons[TB_BAND12].pressed)
 801166a:	4b22      	ldr	r3, [pc, #136]	; (80116f4 <process_button+0x448>)
 801166c:	f893 35fc 	ldrb.w	r3, [r3, #1532]	; 0x5fc
 8011670:	2b00      	cmp	r3, #0
 8011672:	d006      	beq.n	8011682 <process_button+0x3d6>
					{
						tb_buttons[TB_BAND12].pressed = 0;
 8011674:	4b1f      	ldr	r3, [pc, #124]	; (80116f4 <process_button+0x448>)
 8011676:	2200      	movs	r2, #0
 8011678:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
						autoband_off();
 801167c:	f7f9 ff22 	bl	800b4c4 <autoband_off>
 8011680:	e006      	b.n	8011690 <process_button+0x3e4>
					}
					else
					{
						tb_buttons[TB_BAND12].pressed = 1;
 8011682:	4b1c      	ldr	r3, [pc, #112]	; (80116f4 <process_button+0x448>)
 8011684:	2201      	movs	r2, #1
 8011686:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
						select_band(touchbutton);
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f7f9 fea0 	bl	800b3d0 <select_band>
					}
					draw_touchbutton(&tb_buttons[TB_BAND12]);
 8011690:	4819      	ldr	r0, [pc, #100]	; (80116f8 <process_button+0x44c>)
 8011692:	f008 fcbb 	bl	801a00c <draw_touchbutton>
				}
				return 1;
 8011696:	2301      	movs	r3, #1
 8011698:	e024      	b.n	80116e4 <process_button+0x438>
			}
		}
	}

	if(menunum == MENU_SETUP)
 801169a:	4b14      	ldr	r3, [pc, #80]	; (80116ec <process_button+0x440>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b0b      	cmp	r3, #11
 80116a0:	d104      	bne.n	80116ac <process_button+0x400>
	{
		return do_button_setup(touchbutton);
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f004 fd0e 	bl	80160c4 <do_button_setup>
 80116a8:	4603      	mov	r3, r0
 80116aa:	e01b      	b.n	80116e4 <process_button+0x438>
	}

	if(menunum == MENU_CALIB)
 80116ac:	4b0f      	ldr	r3, [pc, #60]	; (80116ec <process_button+0x440>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2b0c      	cmp	r3, #12
 80116b2:	d104      	bne.n	80116be <process_button+0x412>
	{
		// behandle Standard und Ziffer Buttons
		return do_button_calib(touchbutton);
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f7fc fda9 	bl	800e20c <do_button_calib>
 80116ba:	4603      	mov	r3, r0
 80116bc:	e012      	b.n	80116e4 <process_button+0x438>
	}

	if(menunum == MENU_SYSTEM1)
 80116be:	4b0b      	ldr	r3, [pc, #44]	; (80116ec <process_button+0x440>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2b0d      	cmp	r3, #13
 80116c4:	d104      	bne.n	80116d0 <process_button+0x424>
	{
		return do_button_system(touchbutton);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f005 fa22 	bl	8016b10 <do_button_system>
 80116cc:	4603      	mov	r3, r0
 80116ce:	e009      	b.n	80116e4 <process_button+0x438>
	}

	if(menunum == MENU_SYSTEM2)
 80116d0:	4b06      	ldr	r3, [pc, #24]	; (80116ec <process_button+0x440>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2b0e      	cmp	r3, #14
 80116d6:	d104      	bne.n	80116e2 <process_button+0x436>
	{
		return do_button_system2(touchbutton);
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f005 fd9d 	bl	8017218 <do_button_system2>
 80116de:	4603      	mov	r3, r0
 80116e0:	e000      	b.n	80116e4 <process_button+0x438>
	}

	return 0;
 80116e2:	2300      	movs	r3, #0
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3738      	adds	r7, #56	; 0x38
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	20000c24 	.word	0x20000c24
 80116f0:	20001744 	.word	0x20001744
 80116f4:	20007078 	.word	0x20007078
 80116f8:	20007618 	.word	0x20007618

080116fc <show_selectionmenu>:
};

char (*icons)[20];

void show_selectionmenu()
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b096      	sub	sp, #88	; 0x58
 8011700:	af04      	add	r7, sp, #16
int x,y,num=0;
 8011702:	2300      	movs	r3, #0
 8011704:	63fb      	str	r3, [r7, #60]	; 0x3c
char fn[25];

	TFT_Fill_Screen(BLACK);
 8011706:	2000      	movs	r0, #0
 8011708:	f006 f8d6 	bl	80178b8 <TFT_Fill_Screen>

	icons = eicons;
 801170c:	4b84      	ldr	r3, [pc, #528]	; (8011920 <show_selectionmenu+0x224>)
 801170e:	4a85      	ldr	r2, [pc, #532]	; (8011924 <show_selectionmenu+0x228>)
 8011710:	601a      	str	r2, [r3, #0]
	if(pcfgdata->language == 1) icons = dicons;
 8011712:	4b85      	ldr	r3, [pc, #532]	; (8011928 <show_selectionmenu+0x22c>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801171a:	2b01      	cmp	r3, #1
 801171c:	d102      	bne.n	8011724 <show_selectionmenu+0x28>
 801171e:	4b80      	ldr	r3, [pc, #512]	; (8011920 <show_selectionmenu+0x224>)
 8011720:	4a82      	ldr	r2, [pc, #520]	; (801192c <show_selectionmenu+0x230>)
 8011722:	601a      	str	r2, [r3, #0]

	for(y=bmp_yspace; y<TFT_HEIGHT; y+=(bmp_height+bmp_yspace))
 8011724:	232d      	movs	r3, #45	; 0x2d
 8011726:	643b      	str	r3, [r7, #64]	; 0x40
 8011728:	e0b6      	b.n	8011898 <show_selectionmenu+0x19c>
	{
		for(x=bmp_xspace; x<TFT_WIDTH; x+=(bmp_xspace+bmp_width))
 801172a:	232d      	movs	r3, #45	; 0x2d
 801172c:	647b      	str	r3, [r7, #68]	; 0x44
 801172e:	e0ab      	b.n	8011888 <show_selectionmenu+0x18c>
		{
			if(icons[num][0] != 0)
 8011730:	4b7b      	ldr	r3, [pc, #492]	; (8011920 <show_selectionmenu+0x224>)
 8011732:	6819      	ldr	r1, [r3, #0]
 8011734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011736:	4613      	mov	r3, r2
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	4413      	add	r3, r2
 801173c:	009b      	lsls	r3, r3, #2
 801173e:	440b      	add	r3, r1
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	f000 809a 	beq.w	801187c <show_selectionmenu+0x180>
			{
				strcpy(fn,eicons[num]);
 8011748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801174a:	4613      	mov	r3, r2
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	4413      	add	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	4a74      	ldr	r2, [pc, #464]	; (8011924 <show_selectionmenu+0x228>)
 8011754:	441a      	add	r2, r3
 8011756:	f107 0308 	add.w	r3, r7, #8
 801175a:	4611      	mov	r1, r2
 801175c:	4618      	mov	r0, r3
 801175e:	f00d fd8b 	bl	801f278 <strcpy>
				int ret = TFT_DrawFlash(fn,x,y);
 8011762:	f107 0308 	add.w	r3, r7, #8
 8011766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011768:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801176a:	4618      	mov	r0, r3
 801176c:	f006 ff06 	bl	801857c <TFT_DrawFlash>
 8011770:	62b8      	str	r0, [r7, #40]	; 0x28
				strcpy(fn,icons[num]);
 8011772:	4b6b      	ldr	r3, [pc, #428]	; (8011920 <show_selectionmenu+0x224>)
 8011774:	6819      	ldr	r1, [r3, #0]
 8011776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011778:	4613      	mov	r3, r2
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	4413      	add	r3, r2
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	18ca      	adds	r2, r1, r3
 8011782:	f107 0308 	add.w	r3, r7, #8
 8011786:	4611      	mov	r1, r2
 8011788:	4618      	mov	r0, r3
 801178a:	f00d fd75 	bl	801f278 <strcpy>
				if(ret)
 801178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011790:	2b00      	cmp	r3, #0
 8011792:	d073      	beq.n	801187c <show_selectionmenu+0x180>
				{
					for(int i=0; i<strlen(fn); i++)
 8011794:	2300      	movs	r3, #0
 8011796:	63bb      	str	r3, [r7, #56]	; 0x38
 8011798:	e022      	b.n	80117e0 <show_selectionmenu+0xe4>
						fn[i] = toupper(fn[i]);
 801179a:	f107 0208 	add.w	r2, r7, #8
 801179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a0:	4413      	add	r3, r2
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80117a8:	f00d fa9c 	bl	801ece4 <__locale_ctype_ptr>
 80117ac:	4602      	mov	r2, r0
 80117ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80117b2:	3301      	adds	r3, #1
 80117b4:	4413      	add	r3, r2
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	f003 0303 	and.w	r3, r3, #3
 80117bc:	2b02      	cmp	r3, #2
 80117be:	d103      	bne.n	80117c8 <show_selectionmenu+0xcc>
 80117c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80117c4:	3b20      	subs	r3, #32
 80117c6:	e001      	b.n	80117cc <show_selectionmenu+0xd0>
 80117c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80117cc:	b2d9      	uxtb	r1, r3
 80117ce:	f107 0208 	add.w	r2, r7, #8
 80117d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d4:	4413      	add	r3, r2
 80117d6:	460a      	mov	r2, r1
 80117d8:	701a      	strb	r2, [r3, #0]
					for(int i=0; i<strlen(fn); i++)
 80117da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117dc:	3301      	adds	r3, #1
 80117de:	63bb      	str	r3, [r7, #56]	; 0x38
 80117e0:	f107 0308 	add.w	r3, r7, #8
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7f6 fc2b 	bl	8008040 <strlen>
 80117ea:	4602      	mov	r2, r0
 80117ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d8d3      	bhi.n	801179a <show_selectionmenu+0x9e>
					if(strstr(fn,"EFFIC")) strcpy(fn,"EFFICIENCY");
 80117f2:	f107 0308 	add.w	r3, r7, #8
 80117f6:	494e      	ldr	r1, [pc, #312]	; (8011930 <show_selectionmenu+0x234>)
 80117f8:	4618      	mov	r0, r3
 80117fa:	f00d fd5a 	bl	801f2b2 <strstr>
 80117fe:	4603      	mov	r3, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	d008      	beq.n	8011816 <show_selectionmenu+0x11a>
 8011804:	f107 0308 	add.w	r3, r7, #8
 8011808:	4a4a      	ldr	r2, [pc, #296]	; (8011934 <show_selectionmenu+0x238>)
 801180a:	ca07      	ldmia	r2, {r0, r1, r2}
 801180c:	c303      	stmia	r3!, {r0, r1}
 801180e:	801a      	strh	r2, [r3, #0]
 8011810:	3302      	adds	r3, #2
 8011812:	0c12      	lsrs	r2, r2, #16
 8011814:	701a      	strb	r2, [r3, #0]
					if(strstr(fn,"ANTSW")) strcpy(fn,"ANTENNA");
 8011816:	f107 0308 	add.w	r3, r7, #8
 801181a:	4947      	ldr	r1, [pc, #284]	; (8011938 <show_selectionmenu+0x23c>)
 801181c:	4618      	mov	r0, r3
 801181e:	f00d fd48 	bl	801f2b2 <strstr>
 8011822:	4603      	mov	r3, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	d006      	beq.n	8011836 <show_selectionmenu+0x13a>
 8011828:	f107 0308 	add.w	r3, r7, #8
 801182c:	4a43      	ldr	r2, [pc, #268]	; (801193c <show_selectionmenu+0x240>)
 801182e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011832:	e883 0003 	stmia.w	r3, {r0, r1}

					// damit die Beschriftung mittig ist, messe die Breite des Textes
					int w,h;
					tft_textwidth_pixel(&lucidaConsole_18ptFontInfo, fn, &w, &h);
 8011836:	463b      	mov	r3, r7
 8011838:	1d3a      	adds	r2, r7, #4
 801183a:	f107 0108 	add.w	r1, r7, #8
 801183e:	4840      	ldr	r0, [pc, #256]	; (8011940 <show_selectionmenu+0x244>)
 8011840:	f00d f9c9 	bl	801ebd6 <tft_textwidth_pixel>
					int xtext = x + bmp_width/2 - w/2 - 10;
 8011844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011846:	f103 0235 	add.w	r2, r3, #53	; 0x35
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	0fd9      	lsrs	r1, r3, #31
 801184e:	440b      	add	r3, r1
 8011850:	105b      	asrs	r3, r3, #1
 8011852:	425b      	negs	r3, r3
 8011854:	4413      	add	r3, r2
 8011856:	3b0a      	subs	r3, #10
 8011858:	627b      	str	r3, [r7, #36]	; 0x24

					tft_print(&lucidaConsole_18ptFontInfo, fn, xtext, y+bmp_height, 2, WHITE , BLACK);
 801185a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801185c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8011860:	f107 0108 	add.w	r1, r7, #8
 8011864:	2300      	movs	r3, #0
 8011866:	9302      	str	r3, [sp, #8]
 8011868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801186c:	9301      	str	r3, [sp, #4]
 801186e:	2302      	movs	r3, #2
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	4613      	mov	r3, r2
 8011874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011876:	4832      	ldr	r0, [pc, #200]	; (8011940 <show_selectionmenu+0x244>)
 8011878:	f00d f994 	bl	801eba4 <tft_print>
				}
			}
			num++;
 801187c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801187e:	3301      	adds	r3, #1
 8011880:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(x=bmp_xspace; x<TFT_WIDTH; x+=(bmp_xspace+bmp_width))
 8011882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011884:	3397      	adds	r3, #151	; 0x97
 8011886:	647b      	str	r3, [r7, #68]	; 0x44
 8011888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801188a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801188e:	f4ff af4f 	bcc.w	8011730 <show_selectionmenu+0x34>
	for(y=bmp_yspace; y<TFT_HEIGHT; y+=(bmp_height+bmp_yspace))
 8011892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011894:	3391      	adds	r3, #145	; 0x91
 8011896:	643b      	str	r3, [r7, #64]	; 0x40
 8011898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801189a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801189e:	f4ff af44 	bcc.w	801172a <show_selectionmenu+0x2e>
		}
	}

	int yver = TFT_HEIGHT - 14;
 80118a2:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 80118a6:	637b      	str	r3, [r7, #52]	; 0x34
	int bcol = BLACK;
 80118a8:	2300      	movs	r3, #0
 80118aa:	633b      	str	r3, [r7, #48]	; 0x30
	int fcol = DARKGREY;
 80118ac:	f244 2328 	movw	r3, #16936	; 0x4228
 80118b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	tft_print(&verdana_10ptFontInfo, "Amateur Radio Controller", 10, yver, 3, fcol , bcol);
 80118b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118b6:	9202      	str	r2, [sp, #8]
 80118b8:	9301      	str	r3, [sp, #4]
 80118ba:	2303      	movs	r3, #3
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118c0:	220a      	movs	r2, #10
 80118c2:	4920      	ldr	r1, [pc, #128]	; (8011944 <show_selectionmenu+0x248>)
 80118c4:	4820      	ldr	r0, [pc, #128]	; (8011948 <show_selectionmenu+0x24c>)
 80118c6:	f00d f96d 	bl	801eba4 <tft_print>
	tft_print(&verdana_10ptFontInfo, ipadr, 300, yver, 3, fcol , bcol);
 80118ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118ce:	9202      	str	r2, [sp, #8]
 80118d0:	9301      	str	r3, [sp, #4]
 80118d2:	2303      	movs	r3, #3
 80118d4:	9300      	str	r3, [sp, #0]
 80118d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80118dc:	491b      	ldr	r1, [pc, #108]	; (801194c <show_selectionmenu+0x250>)
 80118de:	481a      	ldr	r0, [pc, #104]	; (8011948 <show_selectionmenu+0x24c>)
 80118e0:	f00d f960 	bl	801eba4 <tft_print>
	tft_print(&verdana_10ptFontInfo, FWVERSION, 580, yver, 2, fcol , bcol);
 80118e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118e8:	9202      	str	r2, [sp, #8]
 80118ea:	9301      	str	r3, [sp, #4]
 80118ec:	2302      	movs	r3, #2
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f2:	f44f 7211 	mov.w	r2, #580	; 0x244
 80118f6:	4916      	ldr	r1, [pc, #88]	; (8011950 <show_selectionmenu+0x254>)
 80118f8:	4813      	ldr	r0, [pc, #76]	; (8011948 <show_selectionmenu+0x24c>)
 80118fa:	f00d f953 	bl	801eba4 <tft_print>
	tft_print(&verdana_10ptFontInfo, "by helitron.de", 680, yver, 2, fcol , bcol);
 80118fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011902:	9202      	str	r2, [sp, #8]
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	2302      	movs	r3, #2
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801190c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011910:	4910      	ldr	r1, [pc, #64]	; (8011954 <show_selectionmenu+0x258>)
 8011912:	480d      	ldr	r0, [pc, #52]	; (8011948 <show_selectionmenu+0x24c>)
 8011914:	f00d f946 	bl	801eba4 <tft_print>
}
 8011918:	bf00      	nop
 801191a:	3748      	adds	r7, #72	; 0x48
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	200055e0 	.word	0x200055e0
 8011924:	20000c38 	.word	0x20000c38
 8011928:	20000bf0 	.word	0x20000bf0
 801192c:	20000d78 	.word	0x20000d78
 8011930:	08026964 	.word	0x08026964
 8011934:	0802696c 	.word	0x0802696c
 8011938:	08026978 	.word	0x08026978
 801193c:	08026980 	.word	0x08026980
 8011940:	20001c34 	.word	0x20001c34
 8011944:	08026988 	.word	0x08026988
 8011948:	20001c58 	.word	0x20001c58
 801194c:	20001b4c 	.word	0x20001b4c
 8011950:	080269a4 	.word	0x080269a4
 8011954:	080269b4 	.word	0x080269b4

08011958 <selection_menu>:


// falls das Slectionsmenü offen ist, bearbeite hier die Buttons
void selection_menu(int x, int y)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b086      	sub	sp, #24
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
int spalte=0, zeile=0;
 8011962:	2300      	movs	r3, #0
 8011964:	617b      	str	r3, [r7, #20]
 8011966:	2300      	movs	r3, #0
 8011968:	613b      	str	r3, [r7, #16]
int tmp;

	// ermittle Spalte
	tmp = bmp_width + (bmp_xspace*3)/2;
 801196a:	23ad      	movs	r3, #173	; 0xad
 801196c:	60fb      	str	r3, [r7, #12]
	if(x < tmp) spalte = 0;
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	429a      	cmp	r2, r3
 8011974:	da02      	bge.n	801197c <selection_menu+0x24>
 8011976:	2300      	movs	r3, #0
 8011978:	617b      	str	r3, [r7, #20]
 801197a:	e01f      	b.n	80119bc <selection_menu+0x64>
	else
	{
		tmp += (bmp_width + bmp_xspace);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	3397      	adds	r3, #151	; 0x97
 8011980:	60fb      	str	r3, [r7, #12]
		if( x < tmp) spalte = 1;
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	429a      	cmp	r2, r3
 8011988:	da02      	bge.n	8011990 <selection_menu+0x38>
 801198a:	2301      	movs	r3, #1
 801198c:	617b      	str	r3, [r7, #20]
 801198e:	e015      	b.n	80119bc <selection_menu+0x64>
		else
		{
			tmp += (bmp_width + bmp_xspace);
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	3397      	adds	r3, #151	; 0x97
 8011994:	60fb      	str	r3, [r7, #12]
			if( x < tmp) spalte = 2;
 8011996:	687a      	ldr	r2, [r7, #4]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	429a      	cmp	r2, r3
 801199c:	da02      	bge.n	80119a4 <selection_menu+0x4c>
 801199e:	2302      	movs	r3, #2
 80119a0:	617b      	str	r3, [r7, #20]
 80119a2:	e00b      	b.n	80119bc <selection_menu+0x64>
			else
			{
				tmp += (bmp_width + bmp_xspace);
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	3397      	adds	r3, #151	; 0x97
 80119a8:	60fb      	str	r3, [r7, #12]
				if( x < tmp) spalte = 3;
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	da02      	bge.n	80119b8 <selection_menu+0x60>
 80119b2:	2303      	movs	r3, #3
 80119b4:	617b      	str	r3, [r7, #20]
 80119b6:	e001      	b.n	80119bc <selection_menu+0x64>
				else spalte = 4;
 80119b8:	2304      	movs	r3, #4
 80119ba:	617b      	str	r3, [r7, #20]
			}
		}
	}

	// ermittle Zeile
	tmp = bmp_height + (bmp_yspace*3)/2;
 80119bc:	23a7      	movs	r3, #167	; 0xa7
 80119be:	60fb      	str	r3, [r7, #12]
	if(y < tmp) zeile = 0;
 80119c0:	683a      	ldr	r2, [r7, #0]
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	da02      	bge.n	80119ce <selection_menu+0x76>
 80119c8:	2300      	movs	r3, #0
 80119ca:	613b      	str	r3, [r7, #16]
 80119cc:	e00b      	b.n	80119e6 <selection_menu+0x8e>
	else
	{
		tmp += (bmp_height + bmp_yspace);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	3391      	adds	r3, #145	; 0x91
 80119d2:	60fb      	str	r3, [r7, #12]
		if( y < tmp) zeile = 1;
 80119d4:	683a      	ldr	r2, [r7, #0]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	429a      	cmp	r2, r3
 80119da:	da02      	bge.n	80119e2 <selection_menu+0x8a>
 80119dc:	2301      	movs	r3, #1
 80119de:	613b      	str	r3, [r7, #16]
 80119e0:	e001      	b.n	80119e6 <selection_menu+0x8e>
		else zeile = 2;
 80119e2:	2302      	movs	r3, #2
 80119e4:	613b      	str	r3, [r7, #16]
	/*char s[50] = {"                      "};
	sprintf(s,"Z:%d S:%d           ",zeile, spalte);
	tft_print(&lucidaConsole_12ptFontInfo, s, 400, 400, 4, WHITE , BLACK);*/

	// ermittle neue Menünummer
	if(zeile == 0)
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d11d      	bne.n	8011a28 <selection_menu+0xd0>
	{
		if(spalte == 0) menunum = MENU_OVERVIEW;
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d102      	bne.n	80119f8 <selection_menu+0xa0>
 80119f2:	4b33      	ldr	r3, [pc, #204]	; (8011ac0 <selection_menu+0x168>)
 80119f4:	2201      	movs	r2, #1
 80119f6:	601a      	str	r2, [r3, #0]
		if(spalte == 1) menunum = MENU_BAR;
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d102      	bne.n	8011a04 <selection_menu+0xac>
 80119fe:	4b30      	ldr	r3, [pc, #192]	; (8011ac0 <selection_menu+0x168>)
 8011a00:	2202      	movs	r2, #2
 8011a02:	601a      	str	r2, [r3, #0]
		if(spalte == 2) menunum = MENU_METER;
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	2b02      	cmp	r3, #2
 8011a08:	d102      	bne.n	8011a10 <selection_menu+0xb8>
 8011a0a:	4b2d      	ldr	r3, [pc, #180]	; (8011ac0 <selection_menu+0x168>)
 8011a0c:	2203      	movs	r2, #3
 8011a0e:	601a      	str	r2, [r3, #0]
		if(spalte == 3) menunum = MENU_BRIDGES;
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	2b03      	cmp	r3, #3
 8011a14:	d102      	bne.n	8011a1c <selection_menu+0xc4>
 8011a16:	4b2a      	ldr	r3, [pc, #168]	; (8011ac0 <selection_menu+0x168>)
 8011a18:	2204      	movs	r2, #4
 8011a1a:	601a      	str	r2, [r3, #0]
		if(spalte == 4) menunum = MENU_HISTORY;
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	2b04      	cmp	r3, #4
 8011a20:	d102      	bne.n	8011a28 <selection_menu+0xd0>
 8011a22:	4b27      	ldr	r3, [pc, #156]	; (8011ac0 <selection_menu+0x168>)
 8011a24:	2205      	movs	r2, #5
 8011a26:	601a      	str	r2, [r3, #0]
	}
	if(zeile == 1)
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d11d      	bne.n	8011a6a <selection_menu+0x112>
	{
		if(spalte == 0) menunum = MENU_ADC;
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d102      	bne.n	8011a3a <selection_menu+0xe2>
 8011a34:	4b22      	ldr	r3, [pc, #136]	; (8011ac0 <selection_menu+0x168>)
 8011a36:	2206      	movs	r2, #6
 8011a38:	601a      	str	r2, [r3, #0]
		if(spalte == 1) menunum = MENU_VALUES;
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d102      	bne.n	8011a46 <selection_menu+0xee>
 8011a40:	4b1f      	ldr	r3, [pc, #124]	; (8011ac0 <selection_menu+0x168>)
 8011a42:	2207      	movs	r2, #7
 8011a44:	601a      	str	r2, [r3, #0]
		if(spalte == 2) menunum = MENU_STATUS;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	2b02      	cmp	r3, #2
 8011a4a:	d102      	bne.n	8011a52 <selection_menu+0xfa>
 8011a4c:	4b1c      	ldr	r3, [pc, #112]	; (8011ac0 <selection_menu+0x168>)
 8011a4e:	2208      	movs	r2, #8
 8011a50:	601a      	str	r2, [r3, #0]
		if(spalte == 3) menunum = MENU_SWITCH;
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	2b03      	cmp	r3, #3
 8011a56:	d102      	bne.n	8011a5e <selection_menu+0x106>
 8011a58:	4b19      	ldr	r3, [pc, #100]	; (8011ac0 <selection_menu+0x168>)
 8011a5a:	2209      	movs	r2, #9
 8011a5c:	601a      	str	r2, [r3, #0]
		if(spalte == 4) menunum = MENU_ANTSW;
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	2b04      	cmp	r3, #4
 8011a62:	d102      	bne.n	8011a6a <selection_menu+0x112>
 8011a64:	4b16      	ldr	r3, [pc, #88]	; (8011ac0 <selection_menu+0x168>)
 8011a66:	220a      	movs	r2, #10
 8011a68:	601a      	str	r2, [r3, #0]
	}
	if(zeile == 2)
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	2b02      	cmp	r3, #2
 8011a6e:	d11d      	bne.n	8011aac <selection_menu+0x154>
	{
		if(spalte == 0) menunum = MENU_SETUP;
 8011a70:	697b      	ldr	r3, [r7, #20]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d102      	bne.n	8011a7c <selection_menu+0x124>
 8011a76:	4b12      	ldr	r3, [pc, #72]	; (8011ac0 <selection_menu+0x168>)
 8011a78:	220b      	movs	r2, #11
 8011a7a:	601a      	str	r2, [r3, #0]
		if(spalte == 1) menunum = MENU_CALIB;
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	d102      	bne.n	8011a88 <selection_menu+0x130>
 8011a82:	4b0f      	ldr	r3, [pc, #60]	; (8011ac0 <selection_menu+0x168>)
 8011a84:	220c      	movs	r2, #12
 8011a86:	601a      	str	r2, [r3, #0]
		if(spalte == 2) menunum = MENU_TOUCHCAL;
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	2b02      	cmp	r3, #2
 8011a8c:	d102      	bne.n	8011a94 <selection_menu+0x13c>
 8011a8e:	4b0c      	ldr	r3, [pc, #48]	; (8011ac0 <selection_menu+0x168>)
 8011a90:	220f      	movs	r2, #15
 8011a92:	601a      	str	r2, [r3, #0]
		if(spalte == 3) menunum = MENU_SYSTEM1;
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	2b03      	cmp	r3, #3
 8011a98:	d102      	bne.n	8011aa0 <selection_menu+0x148>
 8011a9a:	4b09      	ldr	r3, [pc, #36]	; (8011ac0 <selection_menu+0x168>)
 8011a9c:	220d      	movs	r2, #13
 8011a9e:	601a      	str	r2, [r3, #0]
		if(spalte == 4) menunum = MENU_SYSTEM2;
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	2b04      	cmp	r3, #4
 8011aa4:	d102      	bne.n	8011aac <selection_menu+0x154>
 8011aa6:	4b06      	ldr	r3, [pc, #24]	; (8011ac0 <selection_menu+0x168>)
 8011aa8:	220e      	movs	r2, #14
 8011aaa:	601a      	str	r2, [r3, #0]
	}

	// Zeichne die Fixteile des neuen Fensters
	draw_menu_frame();
 8011aac:	f000 ff8e 	bl	80129cc <draw_menu_frame>
	showstatus = 1;
 8011ab0:	4b04      	ldr	r3, [pc, #16]	; (8011ac4 <selection_menu+0x16c>)
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	701a      	strb	r2, [r3, #0]
}
 8011ab6:	bf00      	nop
 8011ab8:	3718      	adds	r7, #24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	20000c24 	.word	0x20000c24
 8011ac4:	20002704 	.word	0x20002704

08011ac8 <draw_menu_startup>:

void draw_menu_startup()
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b086      	sub	sp, #24
 8011acc:	af04      	add	r7, sp, #16
uint16_t bgcol = WHITE;
 8011ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ad2:	80fb      	strh	r3, [r7, #6]

	TFT_Fill_Screen(bgcol);
 8011ad4:	88fb      	ldrh	r3, [r7, #6]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f005 feee 	bl	80178b8 <TFT_Fill_Screen>

	if(pcfgdata->systemMode == 0)
 8011adc:	4b4e      	ldr	r3, [pc, #312]	; (8011c18 <draw_menu_startup+0x150>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d102      	bne.n	8011aee <draw_menu_startup+0x26>
		draw_touchbutton(&tb_buttons[TB_EMERG_OFF]);
 8011ae8:	484c      	ldr	r0, [pc, #304]	; (8011c1c <draw_menu_startup+0x154>)
 8011aea:	f008 fa8f 	bl	801a00c <draw_touchbutton>

	int y = 50;
 8011aee:	2332      	movs	r3, #50	; 0x32
 8011af0:	603b      	str	r3, [r7, #0]
	tft_print(&verdana_36ptFontInfo, "DSP-7", 330,y, 8, BLUE , bgcol);
 8011af2:	88fb      	ldrh	r3, [r7, #6]
 8011af4:	9302      	str	r3, [sp, #8]
 8011af6:	231f      	movs	r3, #31
 8011af8:	9301      	str	r3, [sp, #4]
 8011afa:	2308      	movs	r3, #8
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011b04:	4946      	ldr	r1, [pc, #280]	; (8011c20 <draw_menu_startup+0x158>)
 8011b06:	4847      	ldr	r0, [pc, #284]	; (8011c24 <draw_menu_startup+0x15c>)
 8011b08:	f00d f84c 	bl	801eba4 <tft_print>
	if(pcfgdata->systemMode == 0)
 8011b0c:	4b42      	ldr	r3, [pc, #264]	; (8011c18 <draw_menu_startup+0x150>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d121      	bne.n	8011b5c <draw_menu_startup+0x94>
	{
		tft_print(&verdana_36ptFontInfo, "Power Amp Controller", 140,y+70, 6, BLUE , bgcol);
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8011b1e:	88fb      	ldrh	r3, [r7, #6]
 8011b20:	9302      	str	r3, [sp, #8]
 8011b22:	231f      	movs	r3, #31
 8011b24:	9301      	str	r3, [sp, #4]
 8011b26:	2306      	movs	r3, #6
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	228c      	movs	r2, #140	; 0x8c
 8011b2e:	493e      	ldr	r1, [pc, #248]	; (8011c28 <draw_menu_startup+0x160>)
 8011b30:	483c      	ldr	r0, [pc, #240]	; (8011c24 <draw_menu_startup+0x15c>)
 8011b32:	f00d f837 	bl	801eba4 <tft_print>
		tft_print(&lucidaConsole_18ptFontInfo, getLang(SWITCHON), 120,y+180, 6, BLUE , bgcol);
 8011b36:	2037      	movs	r0, #55	; 0x37
 8011b38:	f7ff f954 	bl	8010de4 <getLang>
 8011b3c:	4601      	mov	r1, r0
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8011b44:	88fb      	ldrh	r3, [r7, #6]
 8011b46:	9302      	str	r3, [sp, #8]
 8011b48:	231f      	movs	r3, #31
 8011b4a:	9301      	str	r3, [sp, #4]
 8011b4c:	2306      	movs	r3, #6
 8011b4e:	9300      	str	r3, [sp, #0]
 8011b50:	4613      	mov	r3, r2
 8011b52:	2278      	movs	r2, #120	; 0x78
 8011b54:	4835      	ldr	r0, [pc, #212]	; (8011c2c <draw_menu_startup+0x164>)
 8011b56:	f00d f825 	bl	801eba4 <tft_print>
 8011b5a:	e02d      	b.n	8011bb8 <draw_menu_startup+0xf0>
	}
	else if(pcfgdata->systemMode == 1)
 8011b5c:	4b2e      	ldr	r3, [pc, #184]	; (8011c18 <draw_menu_startup+0x150>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d127      	bne.n	8011bb8 <draw_menu_startup+0xf0>
	{
		y += 20;
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	3314      	adds	r3, #20
 8011b6c:	603b      	str	r3, [r7, #0]
		tft_print(&verdana_36ptFontInfo, getLang(MODETITLE1), 320,y+70, 6, BLUE , bgcol);
 8011b6e:	2045      	movs	r0, #69	; 0x45
 8011b70:	f7ff f938 	bl	8010de4 <getLang>
 8011b74:	4601      	mov	r1, r0
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8011b7c:	88fb      	ldrh	r3, [r7, #6]
 8011b7e:	9302      	str	r3, [sp, #8]
 8011b80:	231f      	movs	r3, #31
 8011b82:	9301      	str	r3, [sp, #4]
 8011b84:	2306      	movs	r3, #6
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	4613      	mov	r3, r2
 8011b8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011b8e:	4825      	ldr	r0, [pc, #148]	; (8011c24 <draw_menu_startup+0x15c>)
 8011b90:	f00d f808 	bl	801eba4 <tft_print>
		tft_print(&verdana_36ptFontInfo, getLang(MODETITLE2), 160,y+130, 6, BLUE , bgcol);
 8011b94:	2046      	movs	r0, #70	; 0x46
 8011b96:	f7ff f925 	bl	8010de4 <getLang>
 8011b9a:	4601      	mov	r1, r0
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	f103 0282 	add.w	r2, r3, #130	; 0x82
 8011ba2:	88fb      	ldrh	r3, [r7, #6]
 8011ba4:	9302      	str	r3, [sp, #8]
 8011ba6:	231f      	movs	r3, #31
 8011ba8:	9301      	str	r3, [sp, #4]
 8011baa:	2306      	movs	r3, #6
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	4613      	mov	r3, r2
 8011bb0:	22a0      	movs	r2, #160	; 0xa0
 8011bb2:	481c      	ldr	r0, [pc, #112]	; (8011c24 <draw_menu_startup+0x15c>)
 8011bb4:	f00c fff6 	bl	801eba4 <tft_print>
	}
	tft_print(&verdana_10ptFontInfo, "made in Germany by helitron.de", 530,465, 2, BLUE , bgcol);
 8011bb8:	88fb      	ldrh	r3, [r7, #6]
 8011bba:	9302      	str	r3, [sp, #8]
 8011bbc:	231f      	movs	r3, #31
 8011bbe:	9301      	str	r3, [sp, #4]
 8011bc0:	2302      	movs	r3, #2
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	f240 13d1 	movw	r3, #465	; 0x1d1
 8011bc8:	f240 2212 	movw	r2, #530	; 0x212
 8011bcc:	4918      	ldr	r1, [pc, #96]	; (8011c30 <draw_menu_startup+0x168>)
 8011bce:	4819      	ldr	r0, [pc, #100]	; (8011c34 <draw_menu_startup+0x16c>)
 8011bd0:	f00c ffe8 	bl	801eba4 <tft_print>

	TFT_DrawFlash("splash",450,300);
 8011bd4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011bd8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8011bdc:	4816      	ldr	r0, [pc, #88]	; (8011c38 <draw_menu_startup+0x170>)
 8011bde:	f006 fccd 	bl	801857c <TFT_DrawFlash>

	if(pcfgdata->systemMode == 1)
 8011be2:	4b0d      	ldr	r3, [pc, #52]	; (8011c18 <draw_menu_startup+0x150>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d10f      	bne.n	8011c0e <draw_menu_startup+0x146>
	{
		// PwrSwr Mode
		delay_1ms(2000);
 8011bee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011bf2:	f007 f86d 	bl	8018cd0 <delay_1ms>

		tb_buttons[TB_KOP1].pressed = 1;
 8011bf6:	4b11      	ldr	r3, [pc, #68]	; (8011c3c <draw_menu_startup+0x174>)
 8011bf8:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8011bfc:	331c      	adds	r3, #28
 8011bfe:	2201      	movs	r2, #1
 8011c00:	701a      	strb	r2, [r3, #0]
		menunum = sf_startmenu;
 8011c02:	4b0f      	ldr	r3, [pc, #60]	; (8011c40 <draw_menu_startup+0x178>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	4a0f      	ldr	r2, [pc, #60]	; (8011c44 <draw_menu_startup+0x17c>)
 8011c08:	6013      	str	r3, [r2, #0]
		draw_menu_frame();
 8011c0a:	f000 fedf 	bl	80129cc <draw_menu_frame>
	}
}
 8011c0e:	bf00      	nop
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	20000bf0 	.word	0x20000bf0
 8011c1c:	20007138 	.word	0x20007138
 8011c20:	080269c4 	.word	0x080269c4
 8011c24:	20001c88 	.word	0x20001c88
 8011c28:	080269cc 	.word	0x080269cc
 8011c2c:	20001c34 	.word	0x20001c34
 8011c30:	080269e4 	.word	0x080269e4
 8011c34:	20001c58 	.word	0x20001c58
 8011c38:	08026a04 	.word	0x08026a04
 8011c3c:	20007078 	.word	0x20007078
 8011c40:	20001748 	.word	0x20001748
 8011c44:	20000c24 	.word	0x20000c24

08011c48 <draw_menu_overview>:

void draw_menu_overview()
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	af00      	add	r7, sp, #0
	TFT_Fill_Screen(BLACK);
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	f005 fe33 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_mainmenu();
 8011c52:	f008 fa7d 	bl	801a150 <draw_touchbuttons_mainmenu>
	show_mainbars();
 8011c56:	f7fb fe55 	bl	800d904 <show_mainbars>
}
 8011c5a:	bf00      	nop
 8011c5c:	bd80      	pop	{r7, pc}
	...

08011c60 <draw_menu_bridges>:

void draw_menu_bridges()
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b08c      	sub	sp, #48	; 0x30
 8011c64:	af04      	add	r7, sp, #16
	TFT_Fill_Screen(BLACK);
 8011c66:	2000      	movs	r0, #0
 8011c68:	f005 fe26 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_mainmenu();
 8011c6c:	f008 fa70 	bl	801a150 <draw_touchbuttons_mainmenu>
	show_bridge_bars();
 8011c70:	f7fb fe90 	bl	800d994 <show_bridge_bars>

	// Trennlinien zwischen den Bridges
	TFT_Hor_Line(0, 650, 136, YELLOW, BLACK, 2, 0);
 8011c74:	2300      	movs	r3, #0
 8011c76:	9302      	str	r3, [sp, #8]
 8011c78:	2302      	movs	r3, #2
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011c84:	2288      	movs	r2, #136	; 0x88
 8011c86:	f240 218a 	movw	r1, #650	; 0x28a
 8011c8a:	2000      	movs	r0, #0
 8011c8c:	f005 fe7e 	bl	801798c <TFT_Hor_Line>
	TFT_Hor_Line(0, 650, 272, YELLOW, BLACK, 2, 0);
 8011c90:	2300      	movs	r3, #0
 8011c92:	9302      	str	r3, [sp, #8]
 8011c94:	2302      	movs	r3, #2
 8011c96:	9301      	str	r3, [sp, #4]
 8011c98:	2300      	movs	r3, #0
 8011c9a:	9300      	str	r3, [sp, #0]
 8011c9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011ca0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011ca4:	f240 218a 	movw	r1, #650	; 0x28a
 8011ca8:	2000      	movs	r0, #0
 8011caa:	f005 fe6f 	bl	801798c <TFT_Hor_Line>

	TFT_Vert_Line(230, 0, 410, YELLOW, BLACK, 2, 8);
 8011cae:	2308      	movs	r3, #8
 8011cb0:	9302      	str	r3, [sp, #8]
 8011cb2:	2302      	movs	r3, #2
 8011cb4:	9301      	str	r3, [sp, #4]
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011cbe:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8011cc2:	2100      	movs	r1, #0
 8011cc4:	20e6      	movs	r0, #230	; 0xe6
 8011cc6:	f005 feb1 	bl	8017a2c <TFT_Vert_Line>

	// Beschriftung der Zahlenwerte
	int x = 1;
 8011cca:	2301      	movs	r3, #1
 8011ccc:	617b      	str	r3, [r7, #20]
	int xdoppelpunkt = 83;
 8011cce:	2353      	movs	r3, #83	; 0x53
 8011cd0:	613b      	str	r3, [r7, #16]
	int xeinheit = 178;
 8011cd2:	23b2      	movs	r3, #178	; 0xb2
 8011cd4:	60fb      	str	r3, [r7, #12]
	int y = 10;
 8011cd6:	230a      	movs	r3, #10
 8011cd8:	60bb      	str	r3, [r7, #8]
	int yspace = 18;
 8011cda:	2312      	movs	r3, #18
 8011cdc:	607b      	str	r3, [r7, #4]
	int line = 0;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	603b      	str	r3, [r7, #0]
	for(int bg=0; bg<3; bg++)
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	61fb      	str	r3, [r7, #28]
 8011ce6:	e140      	b.n	8011f6a <draw_menu_bridges+0x30a>
	{
		line = 0;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	603b      	str	r3, [r7, #0]
		y = 8 + bg * 136;
 8011cec:	69fa      	ldr	r2, [r7, #28]
 8011cee:	4613      	mov	r3, r2
 8011cf0:	011b      	lsls	r3, r3, #4
 8011cf2:	4413      	add	r3, r2
 8011cf4:	00db      	lsls	r3, r3, #3
 8011cf6:	3308      	adds	r3, #8
 8011cf8:	60bb      	str	r3, [r7, #8]
		tft_print(&verdana_12ptFontInfo, "FWDpk", x, y + line * yspace, 3, WHITE , BLACK);
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	fb02 f203 	mul.w	r2, r2, r3
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	441a      	add	r2, r3
 8011d06:	2300      	movs	r3, #0
 8011d08:	9302      	str	r3, [sp, #8]
 8011d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d0e:	9301      	str	r3, [sp, #4]
 8011d10:	2303      	movs	r3, #3
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	4613      	mov	r3, r2
 8011d16:	697a      	ldr	r2, [r7, #20]
 8011d18:	4998      	ldr	r1, [pc, #608]	; (8011f7c <draw_menu_bridges+0x31c>)
 8011d1a:	4899      	ldr	r0, [pc, #612]	; (8011f80 <draw_menu_bridges+0x320>)
 8011d1c:	f00c ff42 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "W", xeinheit, y + line++ * yspace, 1, WHITE , BLACK);
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	1c5a      	adds	r2, r3, #1
 8011d24:	603a      	str	r2, [r7, #0]
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	fb02 f203 	mul.w	r2, r2, r3
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	441a      	add	r2, r3
 8011d30:	2300      	movs	r3, #0
 8011d32:	9302      	str	r3, [sp, #8]
 8011d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d38:	9301      	str	r3, [sp, #4]
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	9300      	str	r3, [sp, #0]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	68fa      	ldr	r2, [r7, #12]
 8011d42:	4990      	ldr	r1, [pc, #576]	; (8011f84 <draw_menu_bridges+0x324>)
 8011d44:	488e      	ldr	r0, [pc, #568]	; (8011f80 <draw_menu_bridges+0x320>)
 8011d46:	f00c ff2d 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "REV", x, y + line * yspace, 3, WHITE , BLACK);
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	fb02 f203 	mul.w	r2, r2, r3
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	441a      	add	r2, r3
 8011d56:	2300      	movs	r3, #0
 8011d58:	9302      	str	r3, [sp, #8]
 8011d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d5e:	9301      	str	r3, [sp, #4]
 8011d60:	2303      	movs	r3, #3
 8011d62:	9300      	str	r3, [sp, #0]
 8011d64:	4613      	mov	r3, r2
 8011d66:	697a      	ldr	r2, [r7, #20]
 8011d68:	4987      	ldr	r1, [pc, #540]	; (8011f88 <draw_menu_bridges+0x328>)
 8011d6a:	4885      	ldr	r0, [pc, #532]	; (8011f80 <draw_menu_bridges+0x320>)
 8011d6c:	f00c ff1a 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "W", xeinheit, y + line++ * yspace, 1, WHITE , BLACK);
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	1c5a      	adds	r2, r3, #1
 8011d74:	603a      	str	r2, [r7, #0]
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	fb02 f203 	mul.w	r2, r2, r3
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	441a      	add	r2, r3
 8011d80:	2300      	movs	r3, #0
 8011d82:	9302      	str	r3, [sp, #8]
 8011d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d88:	9301      	str	r3, [sp, #4]
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	4613      	mov	r3, r2
 8011d90:	68fa      	ldr	r2, [r7, #12]
 8011d92:	497c      	ldr	r1, [pc, #496]	; (8011f84 <draw_menu_bridges+0x324>)
 8011d94:	487a      	ldr	r0, [pc, #488]	; (8011f80 <draw_menu_bridges+0x320>)
 8011d96:	f00c ff05 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "FWDpk", x, y + line * yspace, 3, WHITE , BLACK);
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	fb02 f203 	mul.w	r2, r2, r3
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	441a      	add	r2, r3
 8011da6:	2300      	movs	r3, #0
 8011da8:	9302      	str	r3, [sp, #8]
 8011daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dae:	9301      	str	r3, [sp, #4]
 8011db0:	2303      	movs	r3, #3
 8011db2:	9300      	str	r3, [sp, #0]
 8011db4:	4613      	mov	r3, r2
 8011db6:	697a      	ldr	r2, [r7, #20]
 8011db8:	4970      	ldr	r1, [pc, #448]	; (8011f7c <draw_menu_bridges+0x31c>)
 8011dba:	4871      	ldr	r0, [pc, #452]	; (8011f80 <draw_menu_bridges+0x320>)
 8011dbc:	f00c fef2 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "dBm", xeinheit, y + line++ * yspace, 2, WHITE , BLACK);
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	1c5a      	adds	r2, r3, #1
 8011dc4:	603a      	str	r2, [r7, #0]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	fb02 f203 	mul.w	r2, r2, r3
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	441a      	add	r2, r3
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	9302      	str	r3, [sp, #8]
 8011dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dd8:	9301      	str	r3, [sp, #4]
 8011dda:	2302      	movs	r3, #2
 8011ddc:	9300      	str	r3, [sp, #0]
 8011dde:	4613      	mov	r3, r2
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	496a      	ldr	r1, [pc, #424]	; (8011f8c <draw_menu_bridges+0x32c>)
 8011de4:	4866      	ldr	r0, [pc, #408]	; (8011f80 <draw_menu_bridges+0x320>)
 8011de6:	f00c fedd 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "REV", x, y + line * yspace, 3, WHITE , BLACK);
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	fb02 f203 	mul.w	r2, r2, r3
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	441a      	add	r2, r3
 8011df6:	2300      	movs	r3, #0
 8011df8:	9302      	str	r3, [sp, #8]
 8011dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dfe:	9301      	str	r3, [sp, #4]
 8011e00:	2303      	movs	r3, #3
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	4613      	mov	r3, r2
 8011e06:	697a      	ldr	r2, [r7, #20]
 8011e08:	495f      	ldr	r1, [pc, #380]	; (8011f88 <draw_menu_bridges+0x328>)
 8011e0a:	485d      	ldr	r0, [pc, #372]	; (8011f80 <draw_menu_bridges+0x320>)
 8011e0c:	f00c feca 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "dBm", xeinheit, y + line++ * yspace, 2, WHITE , BLACK);
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	1c5a      	adds	r2, r3, #1
 8011e14:	603a      	str	r2, [r7, #0]
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	fb02 f203 	mul.w	r2, r2, r3
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	441a      	add	r2, r3
 8011e20:	2300      	movs	r3, #0
 8011e22:	9302      	str	r3, [sp, #8]
 8011e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e28:	9301      	str	r3, [sp, #4]
 8011e2a:	2302      	movs	r3, #2
 8011e2c:	9300      	str	r3, [sp, #0]
 8011e2e:	4613      	mov	r3, r2
 8011e30:	68fa      	ldr	r2, [r7, #12]
 8011e32:	4956      	ldr	r1, [pc, #344]	; (8011f8c <draw_menu_bridges+0x32c>)
 8011e34:	4852      	ldr	r0, [pc, #328]	; (8011f80 <draw_menu_bridges+0x320>)
 8011e36:	f00c feb5 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "X", x, y + line * yspace, 3, WHITE , BLACK);
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	fb02 f203 	mul.w	r2, r2, r3
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	441a      	add	r2, r3
 8011e46:	2300      	movs	r3, #0
 8011e48:	9302      	str	r3, [sp, #8]
 8011e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e4e:	9301      	str	r3, [sp, #4]
 8011e50:	2303      	movs	r3, #3
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	4613      	mov	r3, r2
 8011e56:	697a      	ldr	r2, [r7, #20]
 8011e58:	494d      	ldr	r1, [pc, #308]	; (8011f90 <draw_menu_bridges+0x330>)
 8011e5a:	4849      	ldr	r0, [pc, #292]	; (8011f80 <draw_menu_bridges+0x320>)
 8011e5c:	f00c fea2 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "ohms", xeinheit, y + line++ * yspace, 2, WHITE , BLACK);
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	603a      	str	r2, [r7, #0]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	fb02 f203 	mul.w	r2, r2, r3
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	441a      	add	r2, r3
 8011e70:	2300      	movs	r3, #0
 8011e72:	9302      	str	r3, [sp, #8]
 8011e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e78:	9301      	str	r3, [sp, #4]
 8011e7a:	2302      	movs	r3, #2
 8011e7c:	9300      	str	r3, [sp, #0]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	4944      	ldr	r1, [pc, #272]	; (8011f94 <draw_menu_bridges+0x334>)
 8011e84:	483e      	ldr	r0, [pc, #248]	; (8011f80 <draw_menu_bridges+0x320>)
 8011e86:	f00c fe8d 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "SWR", x, y + line * yspace, 3, WHITE , BLACK);
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	fb02 f203 	mul.w	r2, r2, r3
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	441a      	add	r2, r3
 8011e96:	2300      	movs	r3, #0
 8011e98:	9302      	str	r3, [sp, #8]
 8011e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e9e:	9301      	str	r3, [sp, #4]
 8011ea0:	2303      	movs	r3, #3
 8011ea2:	9300      	str	r3, [sp, #0]
 8011ea4:	4613      	mov	r3, r2
 8011ea6:	697a      	ldr	r2, [r7, #20]
 8011ea8:	493b      	ldr	r1, [pc, #236]	; (8011f98 <draw_menu_bridges+0x338>)
 8011eaa:	4835      	ldr	r0, [pc, #212]	; (8011f80 <draw_menu_bridges+0x320>)
 8011eac:	f00c fe7a 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, " ", xeinheit, y + line++ * yspace, 4, WHITE , BLACK); // :1 wird mit Value gedruckt
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	1c5a      	adds	r2, r3, #1
 8011eb4:	603a      	str	r2, [r7, #0]
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	fb02 f203 	mul.w	r2, r2, r3
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	441a      	add	r2, r3
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	9302      	str	r3, [sp, #8]
 8011ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ec8:	9301      	str	r3, [sp, #4]
 8011eca:	2304      	movs	r3, #4
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	4613      	mov	r3, r2
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	4932      	ldr	r1, [pc, #200]	; (8011f9c <draw_menu_bridges+0x33c>)
 8011ed4:	482a      	ldr	r0, [pc, #168]	; (8011f80 <draw_menu_bridges+0x320>)
 8011ed6:	f00c fe65 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "Refl.Att.", x, y + line * yspace, 2, WHITE , BLACK);
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	fb02 f203 	mul.w	r2, r2, r3
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	441a      	add	r2, r3
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	9302      	str	r3, [sp, #8]
 8011eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011eee:	9301      	str	r3, [sp, #4]
 8011ef0:	2302      	movs	r3, #2
 8011ef2:	9300      	str	r3, [sp, #0]
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	697a      	ldr	r2, [r7, #20]
 8011ef8:	4929      	ldr	r1, [pc, #164]	; (8011fa0 <draw_menu_bridges+0x340>)
 8011efa:	4821      	ldr	r0, [pc, #132]	; (8011f80 <draw_menu_bridges+0x320>)
 8011efc:	f00c fe52 	bl	801eba4 <tft_print>
		tft_print(&verdana_12ptFontInfo, "dB", xeinheit, y + line++ * yspace, 2, WHITE , BLACK);
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	1c5a      	adds	r2, r3, #1
 8011f04:	603a      	str	r2, [r7, #0]
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	fb02 f203 	mul.w	r2, r2, r3
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	441a      	add	r2, r3
 8011f10:	2300      	movs	r3, #0
 8011f12:	9302      	str	r3, [sp, #8]
 8011f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f18:	9301      	str	r3, [sp, #4]
 8011f1a:	2302      	movs	r3, #2
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	4613      	mov	r3, r2
 8011f20:	68fa      	ldr	r2, [r7, #12]
 8011f22:	4920      	ldr	r1, [pc, #128]	; (8011fa4 <draw_menu_bridges+0x344>)
 8011f24:	4816      	ldr	r0, [pc, #88]	; (8011f80 <draw_menu_bridges+0x320>)
 8011f26:	f00c fe3d 	bl	801eba4 <tft_print>

		for(int i=0; i<line; i++)
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	61bb      	str	r3, [r7, #24]
 8011f2e:	e015      	b.n	8011f5c <draw_menu_bridges+0x2fc>
			tft_print(&verdana_12ptFontInfo, ":", xdoppelpunkt, y + i * yspace, 1, WHITE , BLACK);
 8011f30:	69bb      	ldr	r3, [r7, #24]
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	fb02 f203 	mul.w	r2, r2, r3
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	441a      	add	r2, r3
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	9302      	str	r3, [sp, #8]
 8011f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f44:	9301      	str	r3, [sp, #4]
 8011f46:	2301      	movs	r3, #1
 8011f48:	9300      	str	r3, [sp, #0]
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	693a      	ldr	r2, [r7, #16]
 8011f4e:	4916      	ldr	r1, [pc, #88]	; (8011fa8 <draw_menu_bridges+0x348>)
 8011f50:	480b      	ldr	r0, [pc, #44]	; (8011f80 <draw_menu_bridges+0x320>)
 8011f52:	f00c fe27 	bl	801eba4 <tft_print>
		for(int i=0; i<line; i++)
 8011f56:	69bb      	ldr	r3, [r7, #24]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	61bb      	str	r3, [r7, #24]
 8011f5c:	69ba      	ldr	r2, [r7, #24]
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	dbe5      	blt.n	8011f30 <draw_menu_bridges+0x2d0>
	for(int bg=0; bg<3; bg++)
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	3301      	adds	r3, #1
 8011f68:	61fb      	str	r3, [r7, #28]
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	f77f aebb 	ble.w	8011ce8 <draw_menu_bridges+0x88>
	}
}
 8011f72:	bf00      	nop
 8011f74:	3720      	adds	r7, #32
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	08026a0c 	.word	0x08026a0c
 8011f80:	20001c64 	.word	0x20001c64
 8011f84:	08026a14 	.word	0x08026a14
 8011f88:	08026a18 	.word	0x08026a18
 8011f8c:	08026a1c 	.word	0x08026a1c
 8011f90:	08026a20 	.word	0x08026a20
 8011f94:	08026a24 	.word	0x08026a24
 8011f98:	08026944 	.word	0x08026944
 8011f9c:	08026a2c 	.word	0x08026a2c
 8011fa0:	08026a30 	.word	0x08026a30
 8011fa4:	08026a3c 	.word	0x08026a3c
 8011fa8:	08026a40 	.word	0x08026a40

08011fac <draw_menu_hist>:

void draw_menu_hist()
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	af00      	add	r7, sp, #0
	TFT_Fill_Screen(BLACK);
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	f005 fc81 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_mainmenu();
 8011fb6:	f008 f8cb 	bl	801a150 <draw_touchbuttons_mainmenu>
	draw_touchbuttons_history();
 8011fba:	f008 f891 	bl	801a0e0 <draw_touchbuttons_history>

	hist_draw_frame();
 8011fbe:	f7fd fd47 	bl	800fa50 <hist_draw_frame>
}
 8011fc2:	bf00      	nop
 8011fc4:	bd80      	pop	{r7, pc}
	...

08011fc8 <draw_menu_adcvals>:
uint8_t adc_order[20]  = {UMESS,IMESS,UTEMP,UTEMP2,UBAND,UFWDANT,UANTFWDPEAK,UREVANT,UFWDFLT,UREVFLT,UFWDIN,UREVIN,CALC_EFF,CALC_POWER,MFREQUENCY};
uint16_t col_order[20] = {LIGHTRED,LIGHTRED,LIGHTGREEN,LIGHTGREEN,WHITE,LIGHTBL1,LIGHTBL1,LIGHTBL1,LIGHTBL2,LIGHTBL2,LIGHTBL3,LIGHTBL3,WHITE,LIGHTRED,WHITE};

 // Ausgangsleistung und SWR
void draw_menu_adcvals()
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b094      	sub	sp, #80	; 0x50
 8011fcc:	af04      	add	r7, sp, #16
	adc_title = eadc_title;
 8011fce:	4b33      	ldr	r3, [pc, #204]	; (801209c <draw_menu_adcvals+0xd4>)
 8011fd0:	4a33      	ldr	r2, [pc, #204]	; (80120a0 <draw_menu_adcvals+0xd8>)
 8011fd2:	601a      	str	r2, [r3, #0]
	if(pcfgdata->language == 1) adc_title = dadc_title;
 8011fd4:	4b33      	ldr	r3, [pc, #204]	; (80120a4 <draw_menu_adcvals+0xdc>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d102      	bne.n	8011fe6 <draw_menu_adcvals+0x1e>
 8011fe0:	4b2e      	ldr	r3, [pc, #184]	; (801209c <draw_menu_adcvals+0xd4>)
 8011fe2:	4a31      	ldr	r2, [pc, #196]	; (80120a8 <draw_menu_adcvals+0xe0>)
 8011fe4:	601a      	str	r2, [r3, #0]

	TFT_Fill_Screen(BLACK);
 8011fe6:	2000      	movs	r0, #0
 8011fe8:	f005 fc66 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_mainmenu();
 8011fec:	f008 f8b0 	bl	801a150 <draw_touchbuttons_mainmenu>
	TFT_Hor_Line(0, 600, 56, YELLOW, BLACK, 2, 0);
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	9302      	str	r3, [sp, #8]
 8011ff4:	2302      	movs	r3, #2
 8011ff6:	9301      	str	r3, [sp, #4]
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	9300      	str	r3, [sp, #0]
 8011ffc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012000:	2238      	movs	r2, #56	; 0x38
 8012002:	f44f 7116 	mov.w	r1, #600	; 0x258
 8012006:	2000      	movs	r0, #0
 8012008:	f005 fcc0 	bl	801798c <TFT_Hor_Line>
	tft_print(&verdana_36ptFontInfo, getLang(RAW_ADC_Values), 14, 1, 5, WHITE , BLACK);
 801200c:	200e      	movs	r0, #14
 801200e:	f7fe fee9 	bl	8010de4 <getLang>
 8012012:	4601      	mov	r1, r0
 8012014:	2300      	movs	r3, #0
 8012016:	9302      	str	r3, [sp, #8]
 8012018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801201c:	9301      	str	r3, [sp, #4]
 801201e:	2305      	movs	r3, #5
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	2301      	movs	r3, #1
 8012024:	220e      	movs	r2, #14
 8012026:	4821      	ldr	r0, [pc, #132]	; (80120ac <draw_menu_adcvals+0xe4>)
 8012028:	f00c fdbc 	bl	801eba4 <tft_print>

	int y=70;
 801202c:	2346      	movs	r3, #70	; 0x46
 801202e:	63bb      	str	r3, [r7, #56]	; 0x38
	int linespace = 28;
 8012030:	231c      	movs	r3, #28
 8012032:	637b      	str	r3, [r7, #52]	; 0x34

	char s[50];
	for(int i=0; i<12; i++)
 8012034:	2300      	movs	r3, #0
 8012036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012038:	e029      	b.n	801208e <draw_menu_adcvals+0xc6>
	{
		sprintf(s,"%s :",adc_title[adc_order[i]]);
 801203a:	4b18      	ldr	r3, [pc, #96]	; (801209c <draw_menu_adcvals+0xd4>)
 801203c:	681a      	ldr	r2, [r3, #0]
 801203e:	491c      	ldr	r1, [pc, #112]	; (80120b0 <draw_menu_adcvals+0xe8>)
 8012040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012042:	440b      	add	r3, r1
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	4619      	mov	r1, r3
 8012048:	460b      	mov	r3, r1
 801204a:	011b      	lsls	r3, r3, #4
 801204c:	1a5b      	subs	r3, r3, r1
 801204e:	005b      	lsls	r3, r3, #1
 8012050:	441a      	add	r2, r3
 8012052:	463b      	mov	r3, r7
 8012054:	4917      	ldr	r1, [pc, #92]	; (80120b4 <draw_menu_adcvals+0xec>)
 8012056:	4618      	mov	r0, r3
 8012058:	f00d f8ee 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, 10, y + linespace*i, 1, col_order[i] , BLACK);
 801205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012060:	fb02 f203 	mul.w	r2, r2, r3
 8012064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012066:	18d0      	adds	r0, r2, r3
 8012068:	4a13      	ldr	r2, [pc, #76]	; (80120b8 <draw_menu_adcvals+0xf0>)
 801206a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801206c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012070:	461a      	mov	r2, r3
 8012072:	4639      	mov	r1, r7
 8012074:	2300      	movs	r3, #0
 8012076:	9302      	str	r3, [sp, #8]
 8012078:	9201      	str	r2, [sp, #4]
 801207a:	2301      	movs	r3, #1
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	4603      	mov	r3, r0
 8012080:	220a      	movs	r2, #10
 8012082:	480e      	ldr	r0, [pc, #56]	; (80120bc <draw_menu_adcvals+0xf4>)
 8012084:	f00c fd8e 	bl	801eba4 <tft_print>
	for(int i=0; i<12; i++)
 8012088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801208a:	3301      	adds	r3, #1
 801208c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012090:	2b0b      	cmp	r3, #11
 8012092:	ddd2      	ble.n	801203a <draw_menu_adcvals+0x72>
	}
}
 8012094:	bf00      	nop
 8012096:	3740      	adds	r7, #64	; 0x40
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	200055c8 	.word	0x200055c8
 80120a0:	20000eb8 	.word	0x20000eb8
 80120a4:	20000bf0 	.word	0x20000bf0
 80120a8:	20001110 	.word	0x20001110
 80120ac:	20001c88 	.word	0x20001c88
 80120b0:	20001368 	.word	0x20001368
 80120b4:	08026a44 	.word	0x08026a44
 80120b8:	2000137c 	.word	0x2000137c
 80120bc:	20001c34 	.word	0x20001c34

080120c0 <draw_menu_realvals>:

void draw_menu_realvals()
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b094      	sub	sp, #80	; 0x50
 80120c4:	af04      	add	r7, sp, #16
	adc_title = eadc_title;
 80120c6:	4b33      	ldr	r3, [pc, #204]	; (8012194 <draw_menu_realvals+0xd4>)
 80120c8:	4a33      	ldr	r2, [pc, #204]	; (8012198 <draw_menu_realvals+0xd8>)
 80120ca:	601a      	str	r2, [r3, #0]
	if(pcfgdata->language == 1) adc_title = dadc_title;
 80120cc:	4b33      	ldr	r3, [pc, #204]	; (801219c <draw_menu_realvals+0xdc>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d102      	bne.n	80120de <draw_menu_realvals+0x1e>
 80120d8:	4b2e      	ldr	r3, [pc, #184]	; (8012194 <draw_menu_realvals+0xd4>)
 80120da:	4a31      	ldr	r2, [pc, #196]	; (80121a0 <draw_menu_realvals+0xe0>)
 80120dc:	601a      	str	r2, [r3, #0]

	TFT_Fill_Screen(BLACK);
 80120de:	2000      	movs	r0, #0
 80120e0:	f005 fbea 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_mainmenu();
 80120e4:	f008 f834 	bl	801a150 <draw_touchbuttons_mainmenu>
	tft_print(&verdana_36ptFontInfo, getLang(Real_Values), 14, 1, 5, WHITE , BLACK);
 80120e8:	200f      	movs	r0, #15
 80120ea:	f7fe fe7b 	bl	8010de4 <getLang>
 80120ee:	4601      	mov	r1, r0
 80120f0:	2300      	movs	r3, #0
 80120f2:	9302      	str	r3, [sp, #8]
 80120f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120f8:	9301      	str	r3, [sp, #4]
 80120fa:	2305      	movs	r3, #5
 80120fc:	9300      	str	r3, [sp, #0]
 80120fe:	2301      	movs	r3, #1
 8012100:	220e      	movs	r2, #14
 8012102:	4828      	ldr	r0, [pc, #160]	; (80121a4 <draw_menu_realvals+0xe4>)
 8012104:	f00c fd4e 	bl	801eba4 <tft_print>
	TFT_Hor_Line(0, 600, 50, YELLOW, BLACK, 2, 0);
 8012108:	2300      	movs	r3, #0
 801210a:	9302      	str	r3, [sp, #8]
 801210c:	2302      	movs	r3, #2
 801210e:	9301      	str	r3, [sp, #4]
 8012110:	2300      	movs	r3, #0
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012118:	2232      	movs	r2, #50	; 0x32
 801211a:	f44f 7116 	mov.w	r1, #600	; 0x258
 801211e:	2000      	movs	r0, #0
 8012120:	f005 fc34 	bl	801798c <TFT_Hor_Line>

	int y=55;
 8012124:	2337      	movs	r3, #55	; 0x37
 8012126:	63bb      	str	r3, [r7, #56]	; 0x38
	int linespace = 24;
 8012128:	2318      	movs	r3, #24
 801212a:	637b      	str	r3, [r7, #52]	; 0x34

	char s[50];
	for(int i=0; i<15; i++)
 801212c:	2300      	movs	r3, #0
 801212e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012130:	e029      	b.n	8012186 <draw_menu_realvals+0xc6>
	{
		sprintf(s,"%s :",adc_title[adc_order[i]]);
 8012132:	4b18      	ldr	r3, [pc, #96]	; (8012194 <draw_menu_realvals+0xd4>)
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	491c      	ldr	r1, [pc, #112]	; (80121a8 <draw_menu_realvals+0xe8>)
 8012138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801213a:	440b      	add	r3, r1
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	4619      	mov	r1, r3
 8012140:	460b      	mov	r3, r1
 8012142:	011b      	lsls	r3, r3, #4
 8012144:	1a5b      	subs	r3, r3, r1
 8012146:	005b      	lsls	r3, r3, #1
 8012148:	441a      	add	r2, r3
 801214a:	463b      	mov	r3, r7
 801214c:	4917      	ldr	r1, [pc, #92]	; (80121ac <draw_menu_realvals+0xec>)
 801214e:	4618      	mov	r0, r3
 8012150:	f00d f872 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, 10, y + linespace*i, 1, col_order[i] , BLACK);
 8012154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012158:	fb02 f203 	mul.w	r2, r2, r3
 801215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215e:	18d0      	adds	r0, r2, r3
 8012160:	4a13      	ldr	r2, [pc, #76]	; (80121b0 <draw_menu_realvals+0xf0>)
 8012162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012168:	461a      	mov	r2, r3
 801216a:	4639      	mov	r1, r7
 801216c:	2300      	movs	r3, #0
 801216e:	9302      	str	r3, [sp, #8]
 8012170:	9201      	str	r2, [sp, #4]
 8012172:	2301      	movs	r3, #1
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	4603      	mov	r3, r0
 8012178:	220a      	movs	r2, #10
 801217a:	480e      	ldr	r0, [pc, #56]	; (80121b4 <draw_menu_realvals+0xf4>)
 801217c:	f00c fd12 	bl	801eba4 <tft_print>
	for(int i=0; i<15; i++)
 8012180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012182:	3301      	adds	r3, #1
 8012184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012188:	2b0e      	cmp	r3, #14
 801218a:	ddd2      	ble.n	8012132 <draw_menu_realvals+0x72>
	}
}
 801218c:	bf00      	nop
 801218e:	3740      	adds	r7, #64	; 0x40
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	200055c8 	.word	0x200055c8
 8012198:	20000eb8 	.word	0x20000eb8
 801219c:	20000bf0 	.word	0x20000bf0
 80121a0:	20001110 	.word	0x20001110
 80121a4:	20001c88 	.word	0x20001c88
 80121a8:	20001368 	.word	0x20001368
 80121ac:	08026a44 	.word	0x08026a44
 80121b0:	2000137c 	.word	0x2000137c
 80121b4:	20001c34 	.word	0x20001c34

080121b8 <draw_menu_status>:

void draw_menu_status()
{
 80121b8:	b590      	push	{r4, r7, lr}
 80121ba:	b093      	sub	sp, #76	; 0x4c
 80121bc:	af04      	add	r7, sp, #16
	first_statdisplay = 1;
 80121be:	4b4b      	ldr	r3, [pc, #300]	; (80122ec <draw_menu_status+0x134>)
 80121c0:	2201      	movs	r2, #1
 80121c2:	601a      	str	r2, [r3, #0]

	TFT_Fill_Screen(BLACK);
 80121c4:	2000      	movs	r0, #0
 80121c6:	f005 fb77 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_mainmenu();
 80121ca:	f007 ffc1 	bl	801a150 <draw_touchbuttons_mainmenu>
	TFT_Hor_Line(0, 600, 33, YELLOW, BLACK, 2, 0);
 80121ce:	2300      	movs	r3, #0
 80121d0:	9302      	str	r3, [sp, #8]
 80121d2:	2302      	movs	r3, #2
 80121d4:	9301      	str	r3, [sp, #4]
 80121d6:	2300      	movs	r3, #0
 80121d8:	9300      	str	r3, [sp, #0]
 80121da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80121de:	2221      	movs	r2, #33	; 0x21
 80121e0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80121e4:	2000      	movs	r0, #0
 80121e6:	f005 fbd1 	bl	801798c <TFT_Hor_Line>
	tft_print(&lucidaConsole_22ptFontInfo, getLang(Line_Status), 14, 1, 4, WHITE , BLACK);
 80121ea:	201b      	movs	r0, #27
 80121ec:	f7fe fdfa 	bl	8010de4 <getLang>
 80121f0:	4601      	mov	r1, r0
 80121f2:	2300      	movs	r3, #0
 80121f4:	9302      	str	r3, [sp, #8]
 80121f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80121fa:	9301      	str	r3, [sp, #4]
 80121fc:	2304      	movs	r3, #4
 80121fe:	9300      	str	r3, [sp, #0]
 8012200:	2301      	movs	r3, #1
 8012202:	220e      	movs	r2, #14
 8012204:	483a      	ldr	r0, [pc, #232]	; (80122f0 <draw_menu_status+0x138>)
 8012206:	f00c fccd 	bl	801eba4 <tft_print>

	int x = 20 + 40;
 801220a:	233c      	movs	r3, #60	; 0x3c
 801220c:	62bb      	str	r3, [r7, #40]	; 0x28
	int y = 45 + 4;
 801220e:	2331      	movs	r3, #49	; 0x31
 8012210:	637b      	str	r3, [r7, #52]	; 0x34
	int linespace = 28;
 8012212:	231c      	movs	r3, #28
 8012214:	627b      	str	r3, [r7, #36]	; 0x24
	char s[30];

	// Eingänge
	tft_print(&lucidaConsole_18ptFontInfo, getLang(ON_switch), x, y, 2, WHITE , BLACK); 	y += linespace;
 8012216:	201c      	movs	r0, #28
 8012218:	f7fe fde4 	bl	8010de4 <getLang>
 801221c:	4601      	mov	r1, r0
 801221e:	2300      	movs	r3, #0
 8012220:	9302      	str	r3, [sp, #8]
 8012222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012226:	9301      	str	r3, [sp, #4]
 8012228:	2302      	movs	r3, #2
 801222a:	9300      	str	r3, [sp, #0]
 801222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012230:	4830      	ldr	r0, [pc, #192]	; (80122f4 <draw_menu_status+0x13c>)
 8012232:	f00c fcb7 	bl	801eba4 <tft_print>
 8012236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	4413      	add	r3, r2
 801223c:	637b      	str	r3, [r7, #52]	; 0x34
	tft_print(&lucidaConsole_18ptFontInfo, getLang(Emerg_OFF_switch), x, y, 2, WHITE , BLACK); 	y += linespace;
 801223e:	201d      	movs	r0, #29
 8012240:	f7fe fdd0 	bl	8010de4 <getLang>
 8012244:	4601      	mov	r1, r0
 8012246:	2300      	movs	r3, #0
 8012248:	9302      	str	r3, [sp, #8]
 801224a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801224e:	9301      	str	r3, [sp, #4]
 8012250:	2302      	movs	r3, #2
 8012252:	9300      	str	r3, [sp, #0]
 8012254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012258:	4826      	ldr	r0, [pc, #152]	; (80122f4 <draw_menu_status+0x13c>)
 801225a:	f00c fca3 	bl	801eba4 <tft_print>
 801225e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012262:	4413      	add	r3, r2
 8012264:	637b      	str	r3, [r7, #52]	; 0x34
	if(pcfgdata->systemMode == 0)
 8012266:	4b24      	ldr	r3, [pc, #144]	; (80122f8 <draw_menu_status+0x140>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801226e:	2b00      	cmp	r3, #0
 8012270:	f040 8090 	bne.w	8012394 <draw_menu_status+0x1dc>
	{
		tft_print(&lucidaConsole_18ptFontInfo, getLang(STANDBY_switch), x, y, 2, WHITE , BLACK);	y += linespace;
 8012274:	201e      	movs	r0, #30
 8012276:	f7fe fdb5 	bl	8010de4 <getLang>
 801227a:	4601      	mov	r1, r0
 801227c:	2300      	movs	r3, #0
 801227e:	9302      	str	r3, [sp, #8]
 8012280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012284:	9301      	str	r3, [sp, #4]
 8012286:	2302      	movs	r3, #2
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801228c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801228e:	4819      	ldr	r0, [pc, #100]	; (80122f4 <draw_menu_status+0x13c>)
 8012290:	f00c fc88 	bl	801eba4 <tft_print>
 8012294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012298:	4413      	add	r3, r2
 801229a:	637b      	str	r3, [r7, #52]	; 0x34
		tft_print(&lucidaConsole_18ptFontInfo, getLang(PTT_from_TRX), x, y, 2, WHITE , BLACK); 	y += linespace;
 801229c:	201f      	movs	r0, #31
 801229e:	f7fe fda1 	bl	8010de4 <getLang>
 80122a2:	4601      	mov	r1, r0
 80122a4:	2300      	movs	r3, #0
 80122a6:	9302      	str	r3, [sp, #8]
 80122a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122ac:	9301      	str	r3, [sp, #4]
 80122ae:	2302      	movs	r3, #2
 80122b0:	9300      	str	r3, [sp, #0]
 80122b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122b6:	480f      	ldr	r0, [pc, #60]	; (80122f4 <draw_menu_status+0x13c>)
 80122b8:	f00c fc74 	bl	801eba4 <tft_print>
 80122bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	4413      	add	r3, r2
 80122c2:	637b      	str	r3, [r7, #52]	; 0x34
		tft_print(&lucidaConsole_18ptFontInfo, "ICOM TKEY", x, y, 2, WHITE , BLACK); 	y += linespace;
 80122c4:	2300      	movs	r3, #0
 80122c6:	9302      	str	r3, [sp, #8]
 80122c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122cc:	9301      	str	r3, [sp, #4]
 80122ce:	2302      	movs	r3, #2
 80122d0:	9300      	str	r3, [sp, #0]
 80122d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122d6:	4909      	ldr	r1, [pc, #36]	; (80122fc <draw_menu_status+0x144>)
 80122d8:	4806      	ldr	r0, [pc, #24]	; (80122f4 <draw_menu_status+0x13c>)
 80122da:	f00c fc63 	bl	801eba4 <tft_print>
 80122de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	4413      	add	r3, r2
 80122e4:	637b      	str	r3, [r7, #52]	; 0x34
		for(int i=0; i<7; i++)
 80122e6:	2300      	movs	r3, #0
 80122e8:	633b      	str	r3, [r7, #48]	; 0x30
 80122ea:	e036      	b.n	801235a <draw_menu_status+0x1a2>
 80122ec:	20000c2c 	.word	0x20000c2c
 80122f0:	20001c40 	.word	0x20001c40
 80122f4:	20001c34 	.word	0x20001c34
 80122f8:	20000bf0 	.word	0x20000bf0
 80122fc:	08026a4c 	.word	0x08026a4c
		{
			sprintf(s,"%s %s",band_text_SW[pcfgdata->bandmode][i],getLang(SWITCH));
 8012300:	4b88      	ldr	r3, [pc, #544]	; (8012524 <draw_menu_status+0x36c>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012308:	4619      	mov	r1, r3
 801230a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801230c:	4613      	mov	r3, r2
 801230e:	009b      	lsls	r3, r3, #2
 8012310:	4413      	add	r3, r2
 8012312:	005b      	lsls	r3, r3, #1
 8012314:	2246      	movs	r2, #70	; 0x46
 8012316:	fb02 f201 	mul.w	r2, r2, r1
 801231a:	4413      	add	r3, r2
 801231c:	4a82      	ldr	r2, [pc, #520]	; (8012528 <draw_menu_status+0x370>)
 801231e:	189c      	adds	r4, r3, r2
 8012320:	2020      	movs	r0, #32
 8012322:	f7fe fd5f 	bl	8010de4 <getLang>
 8012326:	4603      	mov	r3, r0
 8012328:	1d38      	adds	r0, r7, #4
 801232a:	4622      	mov	r2, r4
 801232c:	497f      	ldr	r1, [pc, #508]	; (801252c <draw_menu_status+0x374>)
 801232e:	f00c ff83 	bl	801f238 <sprintf>
			tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += linespace;
 8012332:	1d39      	adds	r1, r7, #4
 8012334:	2300      	movs	r3, #0
 8012336:	9302      	str	r3, [sp, #8]
 8012338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801233c:	9301      	str	r3, [sp, #4]
 801233e:	2302      	movs	r3, #2
 8012340:	9300      	str	r3, [sp, #0]
 8012342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012346:	487a      	ldr	r0, [pc, #488]	; (8012530 <draw_menu_status+0x378>)
 8012348:	f00c fc2c 	bl	801eba4 <tft_print>
 801234c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012350:	4413      	add	r3, r2
 8012352:	637b      	str	r3, [r7, #52]	; 0x34
		for(int i=0; i<7; i++)
 8012354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012356:	3301      	adds	r3, #1
 8012358:	633b      	str	r3, [r7, #48]	; 0x30
 801235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235c:	2b06      	cmp	r3, #6
 801235e:	ddcf      	ble.n	8012300 <draw_menu_status+0x148>
		}
		sprintf(s,"%s %s","Auto Band",getLang(SWITCH));
 8012360:	2020      	movs	r0, #32
 8012362:	f7fe fd3f 	bl	8010de4 <getLang>
 8012366:	4603      	mov	r3, r0
 8012368:	1d38      	adds	r0, r7, #4
 801236a:	4a72      	ldr	r2, [pc, #456]	; (8012534 <draw_menu_status+0x37c>)
 801236c:	496f      	ldr	r1, [pc, #444]	; (801252c <draw_menu_status+0x374>)
 801236e:	f00c ff63 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += linespace;
 8012372:	1d39      	adds	r1, r7, #4
 8012374:	2300      	movs	r3, #0
 8012376:	9302      	str	r3, [sp, #8]
 8012378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	2302      	movs	r3, #2
 8012380:	9300      	str	r3, [sp, #0]
 8012382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012386:	486a      	ldr	r0, [pc, #424]	; (8012530 <draw_menu_status+0x378>)
 8012388:	f00c fc0c 	bl	801eba4 <tft_print>
 801238c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012390:	4413      	add	r3, r2
 8012392:	637b      	str	r3, [r7, #52]	; 0x34
	}

	// Ausgänge
	x = 370 + 40;
 8012394:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8012398:	62bb      	str	r3, [r7, #40]	; 0x28
	y = 45 + 4;
 801239a:	2331      	movs	r3, #49	; 0x31
 801239c:	637b      	str	r3, [r7, #52]	; 0x34
	tft_print(&lucidaConsole_18ptFontInfo, getLang(Antenna_1), x, y, 2, WHITE , BLACK); 	y += linespace;
 801239e:	2021      	movs	r0, #33	; 0x21
 80123a0:	f7fe fd20 	bl	8010de4 <getLang>
 80123a4:	4601      	mov	r1, r0
 80123a6:	2300      	movs	r3, #0
 80123a8:	9302      	str	r3, [sp, #8]
 80123aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123ae:	9301      	str	r3, [sp, #4]
 80123b0:	2302      	movs	r3, #2
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123b8:	485d      	ldr	r0, [pc, #372]	; (8012530 <draw_menu_status+0x378>)
 80123ba:	f00c fbf3 	bl	801eba4 <tft_print>
 80123be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c2:	4413      	add	r3, r2
 80123c4:	637b      	str	r3, [r7, #52]	; 0x34
	tft_print(&lucidaConsole_18ptFontInfo, getLang(Antenna_2), x, y, 2, WHITE , BLACK); 	y += linespace;
 80123c6:	2022      	movs	r0, #34	; 0x22
 80123c8:	f7fe fd0c 	bl	8010de4 <getLang>
 80123cc:	4601      	mov	r1, r0
 80123ce:	2300      	movs	r3, #0
 80123d0:	9302      	str	r3, [sp, #8]
 80123d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123d6:	9301      	str	r3, [sp, #4]
 80123d8:	2302      	movs	r3, #2
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123e0:	4853      	ldr	r0, [pc, #332]	; (8012530 <draw_menu_status+0x378>)
 80123e2:	f00c fbdf 	bl	801eba4 <tft_print>
 80123e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	4413      	add	r3, r2
 80123ec:	637b      	str	r3, [r7, #52]	; 0x34
	tft_print(&lucidaConsole_18ptFontInfo, getLang(PS_Enable), x, y, 2, WHITE , BLACK); 	y += linespace;
 80123ee:	2023      	movs	r0, #35	; 0x23
 80123f0:	f7fe fcf8 	bl	8010de4 <getLang>
 80123f4:	4601      	mov	r1, r0
 80123f6:	2300      	movs	r3, #0
 80123f8:	9302      	str	r3, [sp, #8]
 80123fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123fe:	9301      	str	r3, [sp, #4]
 8012400:	2302      	movs	r3, #2
 8012402:	9300      	str	r3, [sp, #0]
 8012404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012408:	4849      	ldr	r0, [pc, #292]	; (8012530 <draw_menu_status+0x378>)
 801240a:	f00c fbcb 	bl	801eba4 <tft_print>
 801240e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012412:	4413      	add	r3, r2
 8012414:	637b      	str	r3, [r7, #52]	; 0x34
	tft_print(&lucidaConsole_18ptFontInfo, getLang(Power_Relais), x, y, 2, WHITE , BLACK); 	y += linespace;
 8012416:	2024      	movs	r0, #36	; 0x24
 8012418:	f7fe fce4 	bl	8010de4 <getLang>
 801241c:	4601      	mov	r1, r0
 801241e:	2300      	movs	r3, #0
 8012420:	9302      	str	r3, [sp, #8]
 8012422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012426:	9301      	str	r3, [sp, #4]
 8012428:	2302      	movs	r3, #2
 801242a:	9300      	str	r3, [sp, #0]
 801242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801242e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012430:	483f      	ldr	r0, [pc, #252]	; (8012530 <draw_menu_status+0x378>)
 8012432:	f00c fbb7 	bl	801eba4 <tft_print>
 8012436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	4413      	add	r3, r2
 801243c:	637b      	str	r3, [r7, #52]	; 0x34
	tft_print(&lucidaConsole_18ptFontInfo, getLang(FAN), x, y, 2, WHITE , BLACK); 	y += linespace;
 801243e:	2025      	movs	r0, #37	; 0x25
 8012440:	f7fe fcd0 	bl	8010de4 <getLang>
 8012444:	4601      	mov	r1, r0
 8012446:	2300      	movs	r3, #0
 8012448:	9302      	str	r3, [sp, #8]
 801244a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801244e:	9301      	str	r3, [sp, #4]
 8012450:	2302      	movs	r3, #2
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012458:	4835      	ldr	r0, [pc, #212]	; (8012530 <draw_menu_status+0x378>)
 801245a:	f00c fba3 	bl	801eba4 <tft_print>
 801245e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	4413      	add	r3, r2
 8012464:	637b      	str	r3, [r7, #52]	; 0x34
	if(pcfgdata->systemMode == 0)
 8012466:	4b2f      	ldr	r3, [pc, #188]	; (8012524 <draw_menu_status+0x36c>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801246e:	2b00      	cmp	r3, #0
 8012470:	d153      	bne.n	801251a <draw_menu_status+0x362>
	{
		tft_print(&lucidaConsole_18ptFontInfo, "BIAS", x, y, 2, WHITE , BLACK); 	y += linespace;
 8012472:	2300      	movs	r3, #0
 8012474:	9302      	str	r3, [sp, #8]
 8012476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801247a:	9301      	str	r3, [sp, #4]
 801247c:	2302      	movs	r3, #2
 801247e:	9300      	str	r3, [sp, #0]
 8012480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012484:	492c      	ldr	r1, [pc, #176]	; (8012538 <draw_menu_status+0x380>)
 8012486:	482a      	ldr	r0, [pc, #168]	; (8012530 <draw_menu_status+0x378>)
 8012488:	f00c fb8c 	bl	801eba4 <tft_print>
 801248c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012490:	4413      	add	r3, r2
 8012492:	637b      	str	r3, [r7, #52]	; 0x34
		tft_print(&lucidaConsole_18ptFontInfo, getLang(PTT_out), x, y, 2, WHITE , BLACK); 	y += linespace;
 8012494:	2026      	movs	r0, #38	; 0x26
 8012496:	f7fe fca5 	bl	8010de4 <getLang>
 801249a:	4601      	mov	r1, r0
 801249c:	2300      	movs	r3, #0
 801249e:	9302      	str	r3, [sp, #8]
 80124a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124a4:	9301      	str	r3, [sp, #4]
 80124a6:	2302      	movs	r3, #2
 80124a8:	9300      	str	r3, [sp, #0]
 80124aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124ae:	4820      	ldr	r0, [pc, #128]	; (8012530 <draw_menu_status+0x378>)
 80124b0:	f00c fb78 	bl	801eba4 <tft_print>
 80124b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b8:	4413      	add	r3, r2
 80124ba:	637b      	str	r3, [r7, #52]	; 0x34
		for(int i=1; i<7; i++)
 80124bc:	2301      	movs	r3, #1
 80124be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124c0:	e028      	b.n	8012514 <draw_menu_status+0x35c>
		{
			sprintf(s,"%s Relais",band_text_SW[pcfgdata->bandmode][i]);
 80124c2:	4b18      	ldr	r3, [pc, #96]	; (8012524 <draw_menu_status+0x36c>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124ca:	4619      	mov	r1, r3
 80124cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124ce:	4613      	mov	r3, r2
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	4413      	add	r3, r2
 80124d4:	005b      	lsls	r3, r3, #1
 80124d6:	2246      	movs	r2, #70	; 0x46
 80124d8:	fb02 f201 	mul.w	r2, r2, r1
 80124dc:	4413      	add	r3, r2
 80124de:	4a12      	ldr	r2, [pc, #72]	; (8012528 <draw_menu_status+0x370>)
 80124e0:	441a      	add	r2, r3
 80124e2:	1d3b      	adds	r3, r7, #4
 80124e4:	4915      	ldr	r1, [pc, #84]	; (801253c <draw_menu_status+0x384>)
 80124e6:	4618      	mov	r0, r3
 80124e8:	f00c fea6 	bl	801f238 <sprintf>
			tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += linespace;
 80124ec:	1d39      	adds	r1, r7, #4
 80124ee:	2300      	movs	r3, #0
 80124f0:	9302      	str	r3, [sp, #8]
 80124f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124f6:	9301      	str	r3, [sp, #4]
 80124f8:	2302      	movs	r3, #2
 80124fa:	9300      	str	r3, [sp, #0]
 80124fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012500:	480b      	ldr	r0, [pc, #44]	; (8012530 <draw_menu_status+0x378>)
 8012502:	f00c fb4f 	bl	801eba4 <tft_print>
 8012506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250a:	4413      	add	r3, r2
 801250c:	637b      	str	r3, [r7, #52]	; 0x34
		for(int i=1; i<7; i++)
 801250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012510:	3301      	adds	r3, #1
 8012512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012516:	2b06      	cmp	r3, #6
 8012518:	ddd3      	ble.n	80124c2 <draw_menu_status+0x30a>
		}
	}
}
 801251a:	bf00      	nop
 801251c:	373c      	adds	r7, #60	; 0x3c
 801251e:	46bd      	mov	sp, r7
 8012520:	bd90      	pop	{r4, r7, pc}
 8012522:	bf00      	nop
 8012524:	20000bf0 	.word	0x20000bf0
 8012528:	200007ac 	.word	0x200007ac
 801252c:	08026a58 	.word	0x08026a58
 8012530:	20001c34 	.word	0x20001c34
 8012534:	08026a60 	.word	0x08026a60
 8012538:	08026a6c 	.word	0x08026a6c
 801253c:	08026a74 	.word	0x08026a74

08012540 <draw_menu_switch>:

void draw_menu_switch()
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b08e      	sub	sp, #56	; 0x38
 8012544:	af04      	add	r7, sp, #16
	char s[30];

	first_statdisplay = 1;
 8012546:	4bb8      	ldr	r3, [pc, #736]	; (8012828 <draw_menu_switch+0x2e8>)
 8012548:	2201      	movs	r2, #1
 801254a:	601a      	str	r2, [r3, #0]

	TFT_Fill_Screen(BLACK);
 801254c:	2000      	movs	r0, #0
 801254e:	f005 f9b3 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_bottom();
 8012552:	f007 fde1 	bl	801a118 <draw_touchbuttons_bottom>
	TFT_Hor_Line(0, 600, 33, YELLOW, BLACK, 2, 0);
 8012556:	2300      	movs	r3, #0
 8012558:	9302      	str	r3, [sp, #8]
 801255a:	2302      	movs	r3, #2
 801255c:	9301      	str	r3, [sp, #4]
 801255e:	2300      	movs	r3, #0
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012566:	2221      	movs	r2, #33	; 0x21
 8012568:	f44f 7116 	mov.w	r1, #600	; 0x258
 801256c:	2000      	movs	r0, #0
 801256e:	f005 fa0d 	bl	801798c <TFT_Hor_Line>
	tft_print(&lucidaConsole_22ptFontInfo, "Outputs: Manual ON/OFF", 14, 1, 8, WHITE , BLACK);
 8012572:	2300      	movs	r3, #0
 8012574:	9302      	str	r3, [sp, #8]
 8012576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801257a:	9301      	str	r3, [sp, #4]
 801257c:	2308      	movs	r3, #8
 801257e:	9300      	str	r3, [sp, #0]
 8012580:	2301      	movs	r3, #1
 8012582:	220e      	movs	r2, #14
 8012584:	49a9      	ldr	r1, [pc, #676]	; (801282c <draw_menu_switch+0x2ec>)
 8012586:	48aa      	ldr	r0, [pc, #680]	; (8012830 <draw_menu_switch+0x2f0>)
 8012588:	f00c fb0c 	bl	801eba4 <tft_print>

	int x = SWITCH_XROW1 + 55;
 801258c:	234b      	movs	r3, #75	; 0x4b
 801258e:	627b      	str	r3, [r7, #36]	; 0x24
	int y = SWITCH_YSTART + 12;
 8012590:	233e      	movs	r3, #62	; 0x3e
 8012592:	623b      	str	r3, [r7, #32]

	tft_print(&lucidaConsole_18ptFontInfo, getLang(Antenna_1), x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 8012594:	2021      	movs	r0, #33	; 0x21
 8012596:	f7fe fc25 	bl	8010de4 <getLang>
 801259a:	4601      	mov	r1, r0
 801259c:	2300      	movs	r3, #0
 801259e:	9302      	str	r3, [sp, #8]
 80125a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125a4:	9301      	str	r3, [sp, #4]
 80125a6:	2302      	movs	r3, #2
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	6a3b      	ldr	r3, [r7, #32]
 80125ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ae:	48a1      	ldr	r0, [pc, #644]	; (8012834 <draw_menu_switch+0x2f4>)
 80125b0:	f00c faf8 	bl	801eba4 <tft_print>
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	3346      	adds	r3, #70	; 0x46
 80125b8:	623b      	str	r3, [r7, #32]
	tft_print(&lucidaConsole_18ptFontInfo, getLang(Antenna_2), x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 80125ba:	2022      	movs	r0, #34	; 0x22
 80125bc:	f7fe fc12 	bl	8010de4 <getLang>
 80125c0:	4601      	mov	r1, r0
 80125c2:	2300      	movs	r3, #0
 80125c4:	9302      	str	r3, [sp, #8]
 80125c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125ca:	9301      	str	r3, [sp, #4]
 80125cc:	2302      	movs	r3, #2
 80125ce:	9300      	str	r3, [sp, #0]
 80125d0:	6a3b      	ldr	r3, [r7, #32]
 80125d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d4:	4897      	ldr	r0, [pc, #604]	; (8012834 <draw_menu_switch+0x2f4>)
 80125d6:	f00c fae5 	bl	801eba4 <tft_print>
 80125da:	6a3b      	ldr	r3, [r7, #32]
 80125dc:	3346      	adds	r3, #70	; 0x46
 80125de:	623b      	str	r3, [r7, #32]
	tft_print(&lucidaConsole_18ptFontInfo, getLang(PS_Enable), x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 80125e0:	2023      	movs	r0, #35	; 0x23
 80125e2:	f7fe fbff 	bl	8010de4 <getLang>
 80125e6:	4601      	mov	r1, r0
 80125e8:	2300      	movs	r3, #0
 80125ea:	9302      	str	r3, [sp, #8]
 80125ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125f0:	9301      	str	r3, [sp, #4]
 80125f2:	2302      	movs	r3, #2
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	6a3b      	ldr	r3, [r7, #32]
 80125f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125fa:	488e      	ldr	r0, [pc, #568]	; (8012834 <draw_menu_switch+0x2f4>)
 80125fc:	f00c fad2 	bl	801eba4 <tft_print>
 8012600:	6a3b      	ldr	r3, [r7, #32]
 8012602:	3346      	adds	r3, #70	; 0x46
 8012604:	623b      	str	r3, [r7, #32]
	tft_print(&lucidaConsole_18ptFontInfo, getLang(Power_Relais), x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 8012606:	2024      	movs	r0, #36	; 0x24
 8012608:	f7fe fbec 	bl	8010de4 <getLang>
 801260c:	4601      	mov	r1, r0
 801260e:	2300      	movs	r3, #0
 8012610:	9302      	str	r3, [sp, #8]
 8012612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012616:	9301      	str	r3, [sp, #4]
 8012618:	2302      	movs	r3, #2
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	6a3b      	ldr	r3, [r7, #32]
 801261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012620:	4884      	ldr	r0, [pc, #528]	; (8012834 <draw_menu_switch+0x2f4>)
 8012622:	f00c fabf 	bl	801eba4 <tft_print>
 8012626:	6a3b      	ldr	r3, [r7, #32]
 8012628:	3346      	adds	r3, #70	; 0x46
 801262a:	623b      	str	r3, [r7, #32]
	tft_print(&lucidaConsole_18ptFontInfo, getLang(FAN), x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 801262c:	2025      	movs	r0, #37	; 0x25
 801262e:	f7fe fbd9 	bl	8010de4 <getLang>
 8012632:	4601      	mov	r1, r0
 8012634:	2300      	movs	r3, #0
 8012636:	9302      	str	r3, [sp, #8]
 8012638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801263c:	9301      	str	r3, [sp, #4]
 801263e:	2302      	movs	r3, #2
 8012640:	9300      	str	r3, [sp, #0]
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012646:	487b      	ldr	r0, [pc, #492]	; (8012834 <draw_menu_switch+0x2f4>)
 8012648:	f00c faac 	bl	801eba4 <tft_print>
 801264c:	6a3b      	ldr	r3, [r7, #32]
 801264e:	3346      	adds	r3, #70	; 0x46
 8012650:	623b      	str	r3, [r7, #32]

	if(pcfgdata->systemMode == 0)
 8012652:	4b79      	ldr	r3, [pc, #484]	; (8012838 <draw_menu_switch+0x2f8>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801265a:	2b00      	cmp	r3, #0
 801265c:	f040 80ff 	bne.w	801285e <draw_menu_switch+0x31e>
	{
		x = SWITCH_XROW2 + 55;
 8012660:	f240 1345 	movw	r3, #325	; 0x145
 8012664:	627b      	str	r3, [r7, #36]	; 0x24
		y = SWITCH_YSTART + 12;
 8012666:	233e      	movs	r3, #62	; 0x3e
 8012668:	623b      	str	r3, [r7, #32]

		tft_print(&lucidaConsole_18ptFontInfo, "BIAS", x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 801266a:	2300      	movs	r3, #0
 801266c:	9302      	str	r3, [sp, #8]
 801266e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012672:	9301      	str	r3, [sp, #4]
 8012674:	2302      	movs	r3, #2
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	6a3b      	ldr	r3, [r7, #32]
 801267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801267c:	496f      	ldr	r1, [pc, #444]	; (801283c <draw_menu_switch+0x2fc>)
 801267e:	486d      	ldr	r0, [pc, #436]	; (8012834 <draw_menu_switch+0x2f4>)
 8012680:	f00c fa90 	bl	801eba4 <tft_print>
 8012684:	6a3b      	ldr	r3, [r7, #32]
 8012686:	3346      	adds	r3, #70	; 0x46
 8012688:	623b      	str	r3, [r7, #32]
		tft_print(&lucidaConsole_18ptFontInfo, getLang(PTT_out), x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 801268a:	2026      	movs	r0, #38	; 0x26
 801268c:	f7fe fbaa 	bl	8010de4 <getLang>
 8012690:	4601      	mov	r1, r0
 8012692:	2300      	movs	r3, #0
 8012694:	9302      	str	r3, [sp, #8]
 8012696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801269a:	9301      	str	r3, [sp, #4]
 801269c:	2302      	movs	r3, #2
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	6a3b      	ldr	r3, [r7, #32]
 80126a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126a4:	4863      	ldr	r0, [pc, #396]	; (8012834 <draw_menu_switch+0x2f4>)
 80126a6:	f00c fa7d 	bl	801eba4 <tft_print>
 80126aa:	6a3b      	ldr	r3, [r7, #32]
 80126ac:	3346      	adds	r3, #70	; 0x46
 80126ae:	623b      	str	r3, [r7, #32]
		sprintf(s,"%s Rel",band_text_SW[pcfgdata->bandmode][1]);
 80126b0:	4b61      	ldr	r3, [pc, #388]	; (8012838 <draw_menu_switch+0x2f8>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126b8:	461a      	mov	r2, r3
 80126ba:	2346      	movs	r3, #70	; 0x46
 80126bc:	fb03 f302 	mul.w	r3, r3, r2
 80126c0:	330a      	adds	r3, #10
 80126c2:	4a5f      	ldr	r2, [pc, #380]	; (8012840 <draw_menu_switch+0x300>)
 80126c4:	441a      	add	r2, r3
 80126c6:	463b      	mov	r3, r7
 80126c8:	495e      	ldr	r1, [pc, #376]	; (8012844 <draw_menu_switch+0x304>)
 80126ca:	4618      	mov	r0, r3
 80126cc:	f00c fdb4 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 80126d0:	4639      	mov	r1, r7
 80126d2:	2300      	movs	r3, #0
 80126d4:	9302      	str	r3, [sp, #8]
 80126d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126da:	9301      	str	r3, [sp, #4]
 80126dc:	2302      	movs	r3, #2
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	6a3b      	ldr	r3, [r7, #32]
 80126e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126e4:	4853      	ldr	r0, [pc, #332]	; (8012834 <draw_menu_switch+0x2f4>)
 80126e6:	f00c fa5d 	bl	801eba4 <tft_print>
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	3346      	adds	r3, #70	; 0x46
 80126ee:	623b      	str	r3, [r7, #32]
		sprintf(s,"%s Rel",band_text_SW[pcfgdata->bandmode][2]);
 80126f0:	4b51      	ldr	r3, [pc, #324]	; (8012838 <draw_menu_switch+0x2f8>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126f8:	461a      	mov	r2, r3
 80126fa:	2346      	movs	r3, #70	; 0x46
 80126fc:	fb03 f302 	mul.w	r3, r3, r2
 8012700:	3314      	adds	r3, #20
 8012702:	4a4f      	ldr	r2, [pc, #316]	; (8012840 <draw_menu_switch+0x300>)
 8012704:	441a      	add	r2, r3
 8012706:	463b      	mov	r3, r7
 8012708:	494e      	ldr	r1, [pc, #312]	; (8012844 <draw_menu_switch+0x304>)
 801270a:	4618      	mov	r0, r3
 801270c:	f00c fd94 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 8012710:	4639      	mov	r1, r7
 8012712:	2300      	movs	r3, #0
 8012714:	9302      	str	r3, [sp, #8]
 8012716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801271a:	9301      	str	r3, [sp, #4]
 801271c:	2302      	movs	r3, #2
 801271e:	9300      	str	r3, [sp, #0]
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012724:	4843      	ldr	r0, [pc, #268]	; (8012834 <draw_menu_switch+0x2f4>)
 8012726:	f00c fa3d 	bl	801eba4 <tft_print>
 801272a:	6a3b      	ldr	r3, [r7, #32]
 801272c:	3346      	adds	r3, #70	; 0x46
 801272e:	623b      	str	r3, [r7, #32]
		sprintf(s,"%s Rel",band_text_SW[pcfgdata->bandmode][3]);
 8012730:	4b41      	ldr	r3, [pc, #260]	; (8012838 <draw_menu_switch+0x2f8>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012738:	461a      	mov	r2, r3
 801273a:	2346      	movs	r3, #70	; 0x46
 801273c:	fb03 f302 	mul.w	r3, r3, r2
 8012740:	331e      	adds	r3, #30
 8012742:	4a3f      	ldr	r2, [pc, #252]	; (8012840 <draw_menu_switch+0x300>)
 8012744:	441a      	add	r2, r3
 8012746:	463b      	mov	r3, r7
 8012748:	493e      	ldr	r1, [pc, #248]	; (8012844 <draw_menu_switch+0x304>)
 801274a:	4618      	mov	r0, r3
 801274c:	f00c fd74 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 8012750:	4639      	mov	r1, r7
 8012752:	2300      	movs	r3, #0
 8012754:	9302      	str	r3, [sp, #8]
 8012756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801275a:	9301      	str	r3, [sp, #4]
 801275c:	2302      	movs	r3, #2
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	6a3b      	ldr	r3, [r7, #32]
 8012762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012764:	4833      	ldr	r0, [pc, #204]	; (8012834 <draw_menu_switch+0x2f4>)
 8012766:	f00c fa1d 	bl	801eba4 <tft_print>
 801276a:	6a3b      	ldr	r3, [r7, #32]
 801276c:	3346      	adds	r3, #70	; 0x46
 801276e:	623b      	str	r3, [r7, #32]

		x = SWITCH_XROW3 + 55;
 8012770:	f240 233f 	movw	r3, #575	; 0x23f
 8012774:	627b      	str	r3, [r7, #36]	; 0x24
		y = SWITCH_YSTART + 12;
 8012776:	233e      	movs	r3, #62	; 0x3e
 8012778:	623b      	str	r3, [r7, #32]

		sprintf(s,"%s Rel",band_text_SW[pcfgdata->bandmode][4]);
 801277a:	4b2f      	ldr	r3, [pc, #188]	; (8012838 <draw_menu_switch+0x2f8>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012782:	461a      	mov	r2, r3
 8012784:	2346      	movs	r3, #70	; 0x46
 8012786:	fb03 f302 	mul.w	r3, r3, r2
 801278a:	3328      	adds	r3, #40	; 0x28
 801278c:	4a2c      	ldr	r2, [pc, #176]	; (8012840 <draw_menu_switch+0x300>)
 801278e:	441a      	add	r2, r3
 8012790:	463b      	mov	r3, r7
 8012792:	492c      	ldr	r1, [pc, #176]	; (8012844 <draw_menu_switch+0x304>)
 8012794:	4618      	mov	r0, r3
 8012796:	f00c fd4f 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 801279a:	4639      	mov	r1, r7
 801279c:	2300      	movs	r3, #0
 801279e:	9302      	str	r3, [sp, #8]
 80127a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80127a4:	9301      	str	r3, [sp, #4]
 80127a6:	2302      	movs	r3, #2
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	6a3b      	ldr	r3, [r7, #32]
 80127ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127ae:	4821      	ldr	r0, [pc, #132]	; (8012834 <draw_menu_switch+0x2f4>)
 80127b0:	f00c f9f8 	bl	801eba4 <tft_print>
 80127b4:	6a3b      	ldr	r3, [r7, #32]
 80127b6:	3346      	adds	r3, #70	; 0x46
 80127b8:	623b      	str	r3, [r7, #32]
		sprintf(s,"%s Rel",band_text_SW[pcfgdata->bandmode][5]);
 80127ba:	4b1f      	ldr	r3, [pc, #124]	; (8012838 <draw_menu_switch+0x2f8>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80127c2:	461a      	mov	r2, r3
 80127c4:	2346      	movs	r3, #70	; 0x46
 80127c6:	fb03 f302 	mul.w	r3, r3, r2
 80127ca:	3332      	adds	r3, #50	; 0x32
 80127cc:	4a1c      	ldr	r2, [pc, #112]	; (8012840 <draw_menu_switch+0x300>)
 80127ce:	441a      	add	r2, r3
 80127d0:	463b      	mov	r3, r7
 80127d2:	491c      	ldr	r1, [pc, #112]	; (8012844 <draw_menu_switch+0x304>)
 80127d4:	4618      	mov	r0, r3
 80127d6:	f00c fd2f 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 80127da:	4639      	mov	r1, r7
 80127dc:	2300      	movs	r3, #0
 80127de:	9302      	str	r3, [sp, #8]
 80127e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80127e4:	9301      	str	r3, [sp, #4]
 80127e6:	2302      	movs	r3, #2
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	6a3b      	ldr	r3, [r7, #32]
 80127ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127ee:	4811      	ldr	r0, [pc, #68]	; (8012834 <draw_menu_switch+0x2f4>)
 80127f0:	f00c f9d8 	bl	801eba4 <tft_print>
 80127f4:	6a3b      	ldr	r3, [r7, #32]
 80127f6:	3346      	adds	r3, #70	; 0x46
 80127f8:	623b      	str	r3, [r7, #32]
		sprintf(s,"%s Rel",band_text_SW[pcfgdata->bandmode][6]);
 80127fa:	4b0f      	ldr	r3, [pc, #60]	; (8012838 <draw_menu_switch+0x2f8>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012802:	461a      	mov	r2, r3
 8012804:	2346      	movs	r3, #70	; 0x46
 8012806:	fb03 f302 	mul.w	r3, r3, r2
 801280a:	333c      	adds	r3, #60	; 0x3c
 801280c:	4a0c      	ldr	r2, [pc, #48]	; (8012840 <draw_menu_switch+0x300>)
 801280e:	441a      	add	r2, r3
 8012810:	463b      	mov	r3, r7
 8012812:	490c      	ldr	r1, [pc, #48]	; (8012844 <draw_menu_switch+0x304>)
 8012814:	4618      	mov	r0, r3
 8012816:	f00c fd0f 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 2, WHITE , BLACK); 	y += SWITCH_LINESPACE;
 801281a:	4639      	mov	r1, r7
 801281c:	2300      	movs	r3, #0
 801281e:	9302      	str	r3, [sp, #8]
 8012820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012824:	e010      	b.n	8012848 <draw_menu_switch+0x308>
 8012826:	bf00      	nop
 8012828:	20000c2c 	.word	0x20000c2c
 801282c:	08026a80 	.word	0x08026a80
 8012830:	20001c40 	.word	0x20001c40
 8012834:	20001c34 	.word	0x20001c34
 8012838:	20000bf0 	.word	0x20000bf0
 801283c:	08026a6c 	.word	0x08026a6c
 8012840:	200007ac 	.word	0x200007ac
 8012844:	08026a98 	.word	0x08026a98
 8012848:	9301      	str	r3, [sp, #4]
 801284a:	2302      	movs	r3, #2
 801284c:	9300      	str	r3, [sp, #0]
 801284e:	6a3b      	ldr	r3, [r7, #32]
 8012850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012852:	481c      	ldr	r0, [pc, #112]	; (80128c4 <draw_menu_switch+0x384>)
 8012854:	f00c f9a6 	bl	801eba4 <tft_print>
 8012858:	6a3b      	ldr	r3, [r7, #32]
 801285a:	3346      	adds	r3, #70	; 0x46
 801285c:	623b      	str	r3, [r7, #32]
	}

	x = 650;
 801285e:	f240 238a 	movw	r3, #650	; 0x28a
 8012862:	627b      	str	r3, [r7, #36]	; 0x24
	TFT_DrawFlash("attentio", x, 300);
 8012864:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801286a:	4817      	ldr	r0, [pc, #92]	; (80128c8 <draw_menu_switch+0x388>)
 801286c:	f005 fe86 	bl	801857c <TFT_DrawFlash>
	tft_print(&lucidaConsole_18ptFontInfo, getLang(Security), x-40, 355, 2, RED , BLACK);
 8012870:	2027      	movs	r0, #39	; 0x27
 8012872:	f7fe fab7 	bl	8010de4 <getLang>
 8012876:	4601      	mov	r1, r0
 8012878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287a:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 801287e:	2300      	movs	r3, #0
 8012880:	9302      	str	r3, [sp, #8]
 8012882:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8012886:	9301      	str	r3, [sp, #4]
 8012888:	2302      	movs	r3, #2
 801288a:	9300      	str	r3, [sp, #0]
 801288c:	f240 1363 	movw	r3, #355	; 0x163
 8012890:	480c      	ldr	r0, [pc, #48]	; (80128c4 <draw_menu_switch+0x384>)
 8012892:	f00c f987 	bl	801eba4 <tft_print>
	tft_print(&lucidaConsole_18ptFontInfo, getLang(_OFF), x-32, 380, 2, RED , BLACK);
 8012896:	2028      	movs	r0, #40	; 0x28
 8012898:	f7fe faa4 	bl	8010de4 <getLang>
 801289c:	4601      	mov	r1, r0
 801289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a0:	f1a3 0220 	sub.w	r2, r3, #32
 80128a4:	2300      	movs	r3, #0
 80128a6:	9302      	str	r3, [sp, #8]
 80128a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80128ac:	9301      	str	r3, [sp, #4]
 80128ae:	2302      	movs	r3, #2
 80128b0:	9300      	str	r3, [sp, #0]
 80128b2:	f44f 73be 	mov.w	r3, #380	; 0x17c
 80128b6:	4803      	ldr	r0, [pc, #12]	; (80128c4 <draw_menu_switch+0x384>)
 80128b8:	f00c f974 	bl	801eba4 <tft_print>
}
 80128bc:	bf00      	nop
 80128be:	3728      	adds	r7, #40	; 0x28
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	20001c34 	.word	0x20001c34
 80128c8:	08026aa0 	.word	0x08026aa0

080128cc <draw_menu_antsw>:

void draw_menu_antsw()
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af04      	add	r7, sp, #16
	TFT_Fill_Screen(BLACK);
 80128d2:	2000      	movs	r0, #0
 80128d4:	f004 fff0 	bl	80178b8 <TFT_Fill_Screen>

	draw_touchbutton(&tb_buttons[TB_EMERG_OFF]);
 80128d8:	4823      	ldr	r0, [pc, #140]	; (8012968 <draw_menu_antsw+0x9c>)
 80128da:	f007 fb97 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_MENU]);
 80128de:	4823      	ldr	r0, [pc, #140]	; (801296c <draw_menu_antsw+0xa0>)
 80128e0:	f007 fb94 	bl	801a00c <draw_touchbutton>

	if(pcfgdata->systemMode == 0)
 80128e4:	4b22      	ldr	r3, [pc, #136]	; (8012970 <draw_menu_antsw+0xa4>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d106      	bne.n	80128fe <draw_menu_antsw+0x32>
	{
		draw_touchbutton(&tb_buttons[TB_ACTIVE]);
 80128f0:	4820      	ldr	r0, [pc, #128]	; (8012974 <draw_menu_antsw+0xa8>)
 80128f2:	f007 fb8b 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_STANDBY]);
 80128f6:	4820      	ldr	r0, [pc, #128]	; (8012978 <draw_menu_antsw+0xac>)
 80128f8:	f007 fb88 	bl	801a00c <draw_touchbutton>
 80128fc:	e00e      	b.n	801291c <draw_menu_antsw+0x50>
	}
	else if(pcfgdata->systemMode == 1)
 80128fe:	4b1c      	ldr	r3, [pc, #112]	; (8012970 <draw_menu_antsw+0xa4>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012906:	2b01      	cmp	r3, #1
 8012908:	d108      	bne.n	801291c <draw_menu_antsw+0x50>
	{
		draw_touchbutton(&tb_buttons[TB_KOP1]);
 801290a:	481c      	ldr	r0, [pc, #112]	; (801297c <draw_menu_antsw+0xb0>)
 801290c:	f007 fb7e 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_KOP2]);
 8012910:	481b      	ldr	r0, [pc, #108]	; (8012980 <draw_menu_antsw+0xb4>)
 8012912:	f007 fb7b 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_KOP3]);
 8012916:	481b      	ldr	r0, [pc, #108]	; (8012984 <draw_menu_antsw+0xb8>)
 8012918:	f007 fb78 	bl	801a00c <draw_touchbutton>
	}

	draw_touchbuttons_antswitch();
 801291c:	f7f8 fbba 	bl	800b094 <draw_touchbuttons_antswitch>
	TFT_Hor_Line(0, 600, 56, YELLOW, BLACK, 2, 0);
 8012920:	2300      	movs	r3, #0
 8012922:	9302      	str	r3, [sp, #8]
 8012924:	2302      	movs	r3, #2
 8012926:	9301      	str	r3, [sp, #4]
 8012928:	2300      	movs	r3, #0
 801292a:	9300      	str	r3, [sp, #0]
 801292c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012930:	2238      	movs	r2, #56	; 0x38
 8012932:	f44f 7116 	mov.w	r1, #600	; 0x258
 8012936:	2000      	movs	r0, #0
 8012938:	f005 f828 	bl	801798c <TFT_Hor_Line>

	draw_antswmenu();
 801293c:	f7f8 fc8e 	bl	800b25c <draw_antswmenu>
	tft_print(&verdana_36ptFontInfo, getLang(AntSwitch), 14, 1, 5, WHITE , BLACK);
 8012940:	2032      	movs	r0, #50	; 0x32
 8012942:	f7fe fa4f 	bl	8010de4 <getLang>
 8012946:	4601      	mov	r1, r0
 8012948:	2300      	movs	r3, #0
 801294a:	9302      	str	r3, [sp, #8]
 801294c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012950:	9301      	str	r3, [sp, #4]
 8012952:	2305      	movs	r3, #5
 8012954:	9300      	str	r3, [sp, #0]
 8012956:	2301      	movs	r3, #1
 8012958:	220e      	movs	r2, #14
 801295a:	480b      	ldr	r0, [pc, #44]	; (8012988 <draw_menu_antsw+0xbc>)
 801295c:	f00c f922 	bl	801eba4 <tft_print>
}
 8012960:	bf00      	nop
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	20007138 	.word	0x20007138
 801296c:	20007198 	.word	0x20007198
 8012970:	20000bf0 	.word	0x20000bf0
 8012974:	20007078 	.word	0x20007078
 8012978:	200070d8 	.word	0x200070d8
 801297c:	200084b8 	.word	0x200084b8
 8012980:	20008518 	.word	0x20008518
 8012984:	20008578 	.word	0x20008578
 8012988:	20001c88 	.word	0x20001c88

0801298c <draw_menu_touchcal>:

void draw_menu_touchcal()
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b084      	sub	sp, #16
 8012990:	af04      	add	r7, sp, #16
	first_touchcal = 1;
 8012992:	4b0c      	ldr	r3, [pc, #48]	; (80129c4 <draw_menu_touchcal+0x38>)
 8012994:	2201      	movs	r2, #1
 8012996:	601a      	str	r2, [r3, #0]
	TFT_Fill_Screen(BLACK);
 8012998:	2000      	movs	r0, #0
 801299a:	f004 ff8d 	bl	80178b8 <TFT_Fill_Screen>
	tft_print(&lucidaConsole_22ptFontInfo, getLang(Touch_Panel_Calibration), 100, 1, 8, WHITE , BLACK);
 801299e:	2029      	movs	r0, #41	; 0x29
 80129a0:	f7fe fa20 	bl	8010de4 <getLang>
 80129a4:	4601      	mov	r1, r0
 80129a6:	2300      	movs	r3, #0
 80129a8:	9302      	str	r3, [sp, #8]
 80129aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129ae:	9301      	str	r3, [sp, #4]
 80129b0:	2308      	movs	r3, #8
 80129b2:	9300      	str	r3, [sp, #0]
 80129b4:	2301      	movs	r3, #1
 80129b6:	2264      	movs	r2, #100	; 0x64
 80129b8:	4803      	ldr	r0, [pc, #12]	; (80129c8 <draw_menu_touchcal+0x3c>)
 80129ba:	f00c f8f3 	bl	801eba4 <tft_print>
}
 80129be:	bf00      	nop
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	20000c30 	.word	0x20000c30
 80129c8:	20001c40 	.word	0x20001c40

080129cc <draw_menu_frame>:

 // zeichnet die festen Bestandteile eines Menüs
 void draw_menu_frame()
 {
 80129cc:	b580      	push	{r7, lr}
 80129ce:	af00      	add	r7, sp, #0
	showstatus = 1;
 80129d0:	4b3b      	ldr	r3, [pc, #236]	; (8012ac0 <draw_menu_frame+0xf4>)
 80129d2:	2201      	movs	r2, #1
 80129d4:	701a      	strb	r2, [r3, #0]
	if(menunum == MENU_OVERVIEW) draw_menu_overview();
 80129d6:	4b3b      	ldr	r3, [pc, #236]	; (8012ac4 <draw_menu_frame+0xf8>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d102      	bne.n	80129e4 <draw_menu_frame+0x18>
 80129de:	f7ff f933 	bl	8011c48 <draw_menu_overview>
		{
			oldsystemMode = pcfgdata->systemMode;
			draw_menu_system2();
		}
	else menunum = MENU_SELECTION; // wenn das gewählte Menü nicht existiert
 }
 80129e2:	e06a      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_BAR) draw_menu_bar();
 80129e4:	4b37      	ldr	r3, [pc, #220]	; (8012ac4 <draw_menu_frame+0xf8>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2b02      	cmp	r3, #2
 80129ea:	d102      	bne.n	80129f2 <draw_menu_frame+0x26>
 80129ec:	f001 fdca 	bl	8014584 <draw_menu_bar>
 }
 80129f0:	e063      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_METER) draw_menu_meter();
 80129f2:	4b34      	ldr	r3, [pc, #208]	; (8012ac4 <draw_menu_frame+0xf8>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	2b03      	cmp	r3, #3
 80129f8:	d102      	bne.n	8012a00 <draw_menu_frame+0x34>
 80129fa:	f002 f85f 	bl	8014abc <draw_menu_meter>
 }
 80129fe:	e05c      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_BRIDGES) draw_menu_bridges();
 8012a00:	4b30      	ldr	r3, [pc, #192]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	2b04      	cmp	r3, #4
 8012a06:	d102      	bne.n	8012a0e <draw_menu_frame+0x42>
 8012a08:	f7ff f92a 	bl	8011c60 <draw_menu_bridges>
 }
 8012a0c:	e055      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_HISTORY) draw_menu_hist();
 8012a0e:	4b2d      	ldr	r3, [pc, #180]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2b05      	cmp	r3, #5
 8012a14:	d102      	bne.n	8012a1c <draw_menu_frame+0x50>
 8012a16:	f7ff fac9 	bl	8011fac <draw_menu_hist>
 }
 8012a1a:	e04e      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_ADC) draw_menu_adcvals();
 8012a1c:	4b29      	ldr	r3, [pc, #164]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2b06      	cmp	r3, #6
 8012a22:	d102      	bne.n	8012a2a <draw_menu_frame+0x5e>
 8012a24:	f7ff fad0 	bl	8011fc8 <draw_menu_adcvals>
 }
 8012a28:	e047      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_VALUES) draw_menu_realvals();
 8012a2a:	4b26      	ldr	r3, [pc, #152]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	2b07      	cmp	r3, #7
 8012a30:	d102      	bne.n	8012a38 <draw_menu_frame+0x6c>
 8012a32:	f7ff fb45 	bl	80120c0 <draw_menu_realvals>
 }
 8012a36:	e040      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_STATUS) draw_menu_status();
 8012a38:	4b22      	ldr	r3, [pc, #136]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	2b08      	cmp	r3, #8
 8012a3e:	d102      	bne.n	8012a46 <draw_menu_frame+0x7a>
 8012a40:	f7ff fbba 	bl	80121b8 <draw_menu_status>
 }
 8012a44:	e039      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_SWITCH) draw_menu_switch();
 8012a46:	4b1f      	ldr	r3, [pc, #124]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	2b09      	cmp	r3, #9
 8012a4c:	d102      	bne.n	8012a54 <draw_menu_frame+0x88>
 8012a4e:	f7ff fd77 	bl	8012540 <draw_menu_switch>
 }
 8012a52:	e032      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_ANTSW) draw_menu_antsw();
 8012a54:	4b1b      	ldr	r3, [pc, #108]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	2b0a      	cmp	r3, #10
 8012a5a:	d102      	bne.n	8012a62 <draw_menu_frame+0x96>
 8012a5c:	f7ff ff36 	bl	80128cc <draw_menu_antsw>
 }
 8012a60:	e02b      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_SETUP) draw_menu_setup();
 8012a62:	4b18      	ldr	r3, [pc, #96]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2b0b      	cmp	r3, #11
 8012a68:	d102      	bne.n	8012a70 <draw_menu_frame+0xa4>
 8012a6a:	f003 fa13 	bl	8015e94 <draw_menu_setup>
 }
 8012a6e:	e024      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_CALIB) draw_menu_calib();
 8012a70:	4b14      	ldr	r3, [pc, #80]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b0c      	cmp	r3, #12
 8012a76:	d102      	bne.n	8012a7e <draw_menu_frame+0xb2>
 8012a78:	f7fb f95a 	bl	800dd30 <draw_menu_calib>
 }
 8012a7c:	e01d      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_TOUCHCAL) draw_menu_touchcal();
 8012a7e:	4b11      	ldr	r3, [pc, #68]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b0f      	cmp	r3, #15
 8012a84:	d102      	bne.n	8012a8c <draw_menu_frame+0xc0>
 8012a86:	f7ff ff81 	bl	801298c <draw_menu_touchcal>
 }
 8012a8a:	e016      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_SYSTEM1) draw_menu_system();
 8012a8c:	4b0d      	ldr	r3, [pc, #52]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	2b0d      	cmp	r3, #13
 8012a92:	d102      	bne.n	8012a9a <draw_menu_frame+0xce>
 8012a94:	f003 ff42 	bl	801691c <draw_menu_system>
 }
 8012a98:	e00f      	b.n	8012aba <draw_menu_frame+0xee>
	else if(menunum == MENU_SYSTEM2)
 8012a9a:	4b0a      	ldr	r3, [pc, #40]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	2b0e      	cmp	r3, #14
 8012aa0:	d108      	bne.n	8012ab4 <draw_menu_frame+0xe8>
			oldsystemMode = pcfgdata->systemMode;
 8012aa2:	4b09      	ldr	r3, [pc, #36]	; (8012ac8 <draw_menu_frame+0xfc>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8012aaa:	4b08      	ldr	r3, [pc, #32]	; (8012acc <draw_menu_frame+0x100>)
 8012aac:	701a      	strb	r2, [r3, #0]
			draw_menu_system2();
 8012aae:	f004 fad7 	bl	8017060 <draw_menu_system2>
 }
 8012ab2:	e002      	b.n	8012aba <draw_menu_frame+0xee>
	else menunum = MENU_SELECTION; // wenn das gewählte Menü nicht existiert
 8012ab4:	4b03      	ldr	r3, [pc, #12]	; (8012ac4 <draw_menu_frame+0xf8>)
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	601a      	str	r2, [r3, #0]
 }
 8012aba:	bf00      	nop
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	20002704 	.word	0x20002704
 8012ac4:	20000c24 	.word	0x20000c24
 8012ac8:	20000bf0 	.word	0x20000bf0
 8012acc:	200055d4 	.word	0x200055d4

08012ad0 <draw_values_overviewbar>:


 // ============== Einfügen der aktuellen Werte =====================

void draw_values_overviewbar()
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b084      	sub	sp, #16
 8012ad4:	af00      	add	r7, sp, #0
float watt=0,peakwatt=0,swr=0;
 8012ad6:	f04f 0300 	mov.w	r3, #0
 8012ada:	60fb      	str	r3, [r7, #12]
 8012adc:	f04f 0300 	mov.w	r3, #0
 8012ae0:	60bb      	str	r3, [r7, #8]
 8012ae2:	f04f 0300 	mov.w	r3, #0
 8012ae6:	607b      	str	r3, [r7, #4]

	if(pcfgdata->systemMode == 0 || act_coupler == 1)
 8012ae8:	4b4d      	ldr	r3, [pc, #308]	; (8012c20 <draw_values_overviewbar+0x150>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d003      	beq.n	8012afc <draw_values_overviewbar+0x2c>
 8012af4:	4b4b      	ldr	r3, [pc, #300]	; (8012c24 <draw_values_overviewbar+0x154>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d109      	bne.n	8012b10 <draw_values_overviewbar+0x40>
	{
		watt = pwrswr_antenna.fwd_watt;
 8012afc:	4b4a      	ldr	r3, [pc, #296]	; (8012c28 <draw_values_overviewbar+0x158>)
 8012afe:	689b      	ldr	r3, [r3, #8]
 8012b00:	60fb      	str	r3, [r7, #12]
		peakwatt = pwrswr_antenna.fwd_peakwatt;
 8012b02:	4b49      	ldr	r3, [pc, #292]	; (8012c28 <draw_values_overviewbar+0x158>)
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	60bb      	str	r3, [r7, #8]
		swr = pwrswr_antenna.swr;
 8012b08:	4b47      	ldr	r3, [pc, #284]	; (8012c28 <draw_values_overviewbar+0x158>)
 8012b0a:	699b      	ldr	r3, [r3, #24]
 8012b0c:	607b      	str	r3, [r7, #4]
 8012b0e:	e026      	b.n	8012b5e <draw_values_overviewbar+0x8e>
	}
	else if(pcfgdata->systemMode == 1 && act_coupler == 2)
 8012b10:	4b43      	ldr	r3, [pc, #268]	; (8012c20 <draw_values_overviewbar+0x150>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d10d      	bne.n	8012b38 <draw_values_overviewbar+0x68>
 8012b1c:	4b41      	ldr	r3, [pc, #260]	; (8012c24 <draw_values_overviewbar+0x154>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b02      	cmp	r3, #2
 8012b22:	d109      	bne.n	8012b38 <draw_values_overviewbar+0x68>
	{
		watt = pwrswr_filter.fwd_watt;
 8012b24:	4b41      	ldr	r3, [pc, #260]	; (8012c2c <draw_values_overviewbar+0x15c>)
 8012b26:	689b      	ldr	r3, [r3, #8]
 8012b28:	60fb      	str	r3, [r7, #12]
		peakwatt = pwrswr_filter.fwd_peakwatt;
 8012b2a:	4b40      	ldr	r3, [pc, #256]	; (8012c2c <draw_values_overviewbar+0x15c>)
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	60bb      	str	r3, [r7, #8]
		swr = pwrswr_filter.swr;
 8012b30:	4b3e      	ldr	r3, [pc, #248]	; (8012c2c <draw_values_overviewbar+0x15c>)
 8012b32:	699b      	ldr	r3, [r3, #24]
 8012b34:	607b      	str	r3, [r7, #4]
 8012b36:	e012      	b.n	8012b5e <draw_values_overviewbar+0x8e>
	}
	else if(pcfgdata->systemMode == 1 && act_coupler == 3)
 8012b38:	4b39      	ldr	r3, [pc, #228]	; (8012c20 <draw_values_overviewbar+0x150>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d10c      	bne.n	8012b5e <draw_values_overviewbar+0x8e>
 8012b44:	4b37      	ldr	r3, [pc, #220]	; (8012c24 <draw_values_overviewbar+0x154>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	2b03      	cmp	r3, #3
 8012b4a:	d108      	bne.n	8012b5e <draw_values_overviewbar+0x8e>
	{
		watt = pwrswr_input.fwd_watt;
 8012b4c:	4b38      	ldr	r3, [pc, #224]	; (8012c30 <draw_values_overviewbar+0x160>)
 8012b4e:	689b      	ldr	r3, [r3, #8]
 8012b50:	60fb      	str	r3, [r7, #12]
		peakwatt = pwrswr_input.fwd_peakwatt;
 8012b52:	4b37      	ldr	r3, [pc, #220]	; (8012c30 <draw_values_overviewbar+0x160>)
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	60bb      	str	r3, [r7, #8]
		swr = pwrswr_input.swr;
 8012b58:	4b35      	ldr	r3, [pc, #212]	; (8012c30 <draw_values_overviewbar+0x160>)
 8012b5a:	699b      	ldr	r3, [r3, #24]
 8012b5c:	607b      	str	r3, [r7, #4]
	}

	fill_bar(&bar_out_power, watt, peakwatt);
 8012b5e:	edd7 0a02 	vldr	s1, [r7, #8]
 8012b62:	ed97 0a03 	vldr	s0, [r7, #12]
 8012b66:	4833      	ldr	r0, [pc, #204]	; (8012c34 <draw_values_overviewbar+0x164>)
 8012b68:	f7f9 fb96 	bl	800c298 <fill_bar>
	fill_bar(&bar_out_swr, swr,-1);
 8012b6c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8012b70:	ed97 0a01 	vldr	s0, [r7, #4]
 8012b74:	4830      	ldr	r0, [pc, #192]	; (8012c38 <draw_values_overviewbar+0x168>)
 8012b76:	f7f9 fb8f 	bl	800c298 <fill_bar>
	if(pcfgdata->systemMode == 0)
 8012b7a:	4b29      	ldr	r3, [pc, #164]	; (8012c20 <draw_values_overviewbar+0x150>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d116      	bne.n	8012bb4 <draw_values_overviewbar+0xe4>
	{
		fill_bar(&bar_in_power, pwrswr_input.fwd_watt,pwrswr_input.fwd_peakwatt);
 8012b86:	4b2a      	ldr	r3, [pc, #168]	; (8012c30 <draw_values_overviewbar+0x160>)
 8012b88:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b8c:	4b28      	ldr	r3, [pc, #160]	; (8012c30 <draw_values_overviewbar+0x160>)
 8012b8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8012b92:	eef0 0a47 	vmov.f32	s1, s14
 8012b96:	eeb0 0a67 	vmov.f32	s0, s15
 8012b9a:	4828      	ldr	r0, [pc, #160]	; (8012c3c <draw_values_overviewbar+0x16c>)
 8012b9c:	f7f9 fb7c 	bl	800c298 <fill_bar>
		fill_bar(&bar_efficiency, adc_realvals[CALC_EFF],-1);
 8012ba0:	4b27      	ldr	r3, [pc, #156]	; (8012c40 <draw_values_overviewbar+0x170>)
 8012ba2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8012ba6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8012baa:	eeb0 0a67 	vmov.f32	s0, s15
 8012bae:	4825      	ldr	r0, [pc, #148]	; (8012c44 <draw_values_overviewbar+0x174>)
 8012bb0:	f7f9 fb72 	bl	800c298 <fill_bar>
	}
	fill_bar(&bar_temperature1, adc_realvals[UTEMP],-1);
 8012bb4:	4b22      	ldr	r3, [pc, #136]	; (8012c40 <draw_values_overviewbar+0x170>)
 8012bb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8012bba:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8012bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8012bc2:	4821      	ldr	r0, [pc, #132]	; (8012c48 <draw_values_overviewbar+0x178>)
 8012bc4:	f7f9 fb68 	bl	800c298 <fill_bar>
	fill_bar(&bar_temperature2, adc_realvals[UTEMP2],-1);
 8012bc8:	4b1d      	ldr	r3, [pc, #116]	; (8012c40 <draw_values_overviewbar+0x170>)
 8012bca:	edd3 7a08 	vldr	s15, [r3, #32]
 8012bce:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8012bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8012bd6:	481d      	ldr	r0, [pc, #116]	; (8012c4c <draw_values_overviewbar+0x17c>)
 8012bd8:	f7f9 fb5e 	bl	800c298 <fill_bar>
	fill_bar(&bar_voltage, adc_realvals[UMESS],-1);
 8012bdc:	4b18      	ldr	r3, [pc, #96]	; (8012c40 <draw_values_overviewbar+0x170>)
 8012bde:	edd3 7a01 	vldr	s15, [r3, #4]
 8012be2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8012be6:	eeb0 0a67 	vmov.f32	s0, s15
 8012bea:	4819      	ldr	r0, [pc, #100]	; (8012c50 <draw_values_overviewbar+0x180>)
 8012bec:	f7f9 fb54 	bl	800c298 <fill_bar>
	fill_bar(&bar_current, adc_realvals[IMESS],-1);
 8012bf0:	4b13      	ldr	r3, [pc, #76]	; (8012c40 <draw_values_overviewbar+0x170>)
 8012bf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8012bf6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8012bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8012bfe:	4815      	ldr	r0, [pc, #84]	; (8012c54 <draw_values_overviewbar+0x184>)
 8012c00:	f7f9 fb4a 	bl	800c298 <fill_bar>
	fill_bar(&bar_dc_power, adc_realvals[CALC_POWER],-1);
 8012c04:	4b0e      	ldr	r3, [pc, #56]	; (8012c40 <draw_values_overviewbar+0x170>)
 8012c06:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8012c0a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8012c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8012c12:	4811      	ldr	r0, [pc, #68]	; (8012c58 <draw_values_overviewbar+0x188>)
 8012c14:	f7f9 fb40 	bl	800c298 <fill_bar>
}
 8012c18:	bf00      	nop
 8012c1a:	3710      	adds	r7, #16
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	20000bf0 	.word	0x20000bf0
 8012c24:	20000c34 	.word	0x20000c34
 8012c28:	20005684 	.word	0x20005684
 8012c2c:	20005634 	.word	0x20005634
 8012c30:	200055e4 	.word	0x200055e4
 8012c34:	200036a4 	.word	0x200036a4
 8012c38:	20003cf8 	.word	0x20003cf8
 8012c3c:	20003bb4 	.word	0x20003bb4
 8012c40:	2000314c 	.word	0x2000314c
 8012c44:	20003a70 	.word	0x20003a70
 8012c48:	2000392c 	.word	0x2000392c
 8012c4c:	20003194 	.word	0x20003194
 8012c50:	200032d8 	.word	0x200032d8
 8012c54:	2000341c 	.word	0x2000341c
 8012c58:	20003e3c 	.word	0x20003e3c
 8012c5c:	00000000 	.word	0x00000000

08012c60 <draw_value_bridges>:

 void draw_value_bridges()
{
 8012c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c62:	b0a5      	sub	sp, #148	; 0x94
 8012c64:	af04      	add	r7, sp, #16
	char s1[20] = {0};
 8012c66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	601a      	str	r2, [r3, #0]
 8012c6e:	605a      	str	r2, [r3, #4]
 8012c70:	609a      	str	r2, [r3, #8]
 8012c72:	60da      	str	r2, [r3, #12]
 8012c74:	611a      	str	r2, [r3, #16]
	char s2[20] = {0};
 8012c76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	601a      	str	r2, [r3, #0]
 8012c7e:	605a      	str	r2, [r3, #4]
 8012c80:	609a      	str	r2, [r3, #8]
 8012c82:	60da      	str	r2, [r3, #12]
 8012c84:	611a      	str	r2, [r3, #16]
	char s3[20] = {0};
 8012c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	601a      	str	r2, [r3, #0]
 8012c8e:	605a      	str	r2, [r3, #4]
 8012c90:	609a      	str	r2, [r3, #8]
 8012c92:	60da      	str	r2, [r3, #12]
 8012c94:	611a      	str	r2, [r3, #16]
	char s4[20] = {0};
 8012c96:	f107 0314 	add.w	r3, r7, #20
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	601a      	str	r2, [r3, #0]
 8012c9e:	605a      	str	r2, [r3, #4]
 8012ca0:	609a      	str	r2, [r3, #8]
 8012ca2:	60da      	str	r2, [r3, #12]
 8012ca4:	611a      	str	r2, [r3, #16]
	char s5[20] = {0};
 8012ca6:	463b      	mov	r3, r7
 8012ca8:	2200      	movs	r2, #0
 8012caa:	601a      	str	r2, [r3, #0]
 8012cac:	605a      	str	r2, [r3, #4]
 8012cae:	609a      	str	r2, [r3, #8]
 8012cb0:	60da      	str	r2, [r3, #12]
 8012cb2:	611a      	str	r2, [r3, #16]
	t_pwrswr *p = &pwrswr_antenna;
 8012cb4:	4b78      	ldr	r3, [pc, #480]	; (8012e98 <draw_value_bridges+0x238>)
 8012cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
	int x = 100;
 8012cb8:	2364      	movs	r3, #100	; 0x64
 8012cba:	677b      	str	r3, [r7, #116]	; 0x74
	int restclear = 158;
 8012cbc:	239e      	movs	r3, #158	; 0x9e
 8012cbe:	673b      	str	r3, [r7, #112]	; 0x70
	int y = 1;
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
	int yspace = 18;
 8012cc4:	2312      	movs	r3, #18
 8012cc6:	66bb      	str	r3, [r7, #104]	; 0x68
	int line = 0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	667b      	str	r3, [r7, #100]	; 0x64

	for(int bg=0; bg<3; bg++)
 8012ccc:	2300      	movs	r3, #0
 8012cce:	67bb      	str	r3, [r7, #120]	; 0x78
 8012cd0:	e1a1      	b.n	8013016 <draw_value_bridges+0x3b6>
	{
		line = 0;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	667b      	str	r3, [r7, #100]	; 0x64
		y = 8 + bg * 136;
 8012cd6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012cd8:	4613      	mov	r3, r2
 8012cda:	011b      	lsls	r3, r3, #4
 8012cdc:	4413      	add	r3, r2
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	3308      	adds	r3, #8
 8012ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
		if(bg == 0) p = &pwrswr_antenna;
 8012ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d102      	bne.n	8012cf0 <draw_value_bridges+0x90>
 8012cea:	4b6b      	ldr	r3, [pc, #428]	; (8012e98 <draw_value_bridges+0x238>)
 8012cec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012cee:	e00a      	b.n	8012d06 <draw_value_bridges+0xa6>
		else if(bg == 1) p = &pwrswr_filter;
 8012cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012cf2:	2b01      	cmp	r3, #1
 8012cf4:	d102      	bne.n	8012cfc <draw_value_bridges+0x9c>
 8012cf6:	4b69      	ldr	r3, [pc, #420]	; (8012e9c <draw_value_bridges+0x23c>)
 8012cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012cfa:	e004      	b.n	8012d06 <draw_value_bridges+0xa6>
		else if(bg == 2) p = &pwrswr_input;
 8012cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012cfe:	2b02      	cmp	r3, #2
 8012d00:	d101      	bne.n	8012d06 <draw_value_bridges+0xa6>
 8012d02:	4b67      	ldr	r3, [pc, #412]	; (8012ea0 <draw_value_bridges+0x240>)
 8012d04:	67fb      	str	r3, [r7, #124]	; 0x7c

		sprintf(s1,"%6.1f",(float)((int)(p->fwd_peakwatt+0.5)));
 8012d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d08:	68db      	ldr	r3, [r3, #12]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7f5 fb54 	bl	80083b8 <__aeabi_f2d>
 8012d10:	f04f 0200 	mov.w	r2, #0
 8012d14:	4b63      	ldr	r3, [pc, #396]	; (8012ea4 <draw_value_bridges+0x244>)
 8012d16:	f7f5 f9f1 	bl	80080fc <__adddf3>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	460c      	mov	r4, r1
 8012d1e:	4618      	mov	r0, r3
 8012d20:	4621      	mov	r1, r4
 8012d22:	f7f5 fe51 	bl	80089c8 <__aeabi_d2iz>
 8012d26:	ee07 0a90 	vmov	s15, r0
 8012d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d2e:	ee17 0a90 	vmov	r0, s15
 8012d32:	f7f5 fb41 	bl	80083b8 <__aeabi_f2d>
 8012d36:	4603      	mov	r3, r0
 8012d38:	460c      	mov	r4, r1
 8012d3a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8012d3e:	461a      	mov	r2, r3
 8012d40:	4623      	mov	r3, r4
 8012d42:	4959      	ldr	r1, [pc, #356]	; (8012ea8 <draw_value_bridges+0x248>)
 8012d44:	f00c fa78 	bl	801f238 <sprintf>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s1, x, y + line++ * yspace, 1, GREEN , BLACK, restclear);
 8012d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d4a:	1c5a      	adds	r2, r3, #1
 8012d4c:	667a      	str	r2, [r7, #100]	; 0x64
 8012d4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012d50:	fb02 f203 	mul.w	r2, r2, r3
 8012d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d56:	441a      	add	r2, r3
 8012d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d5a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012d5e:	9303      	str	r3, [sp, #12]
 8012d60:	2300      	movs	r3, #0
 8012d62:	9302      	str	r3, [sp, #8]
 8012d64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012d68:	9301      	str	r3, [sp, #4]
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	9300      	str	r3, [sp, #0]
 8012d6e:	4613      	mov	r3, r2
 8012d70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012d72:	484e      	ldr	r0, [pc, #312]	; (8012eac <draw_value_bridges+0x24c>)
 8012d74:	f00b fe4e 	bl	801ea14 <tft_print_restclear>
		sprintf(s1,"%6.1f",p->rev_watt);
 8012d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d7a:	695b      	ldr	r3, [r3, #20]
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7f5 fb1b 	bl	80083b8 <__aeabi_f2d>
 8012d82:	4603      	mov	r3, r0
 8012d84:	460c      	mov	r4, r1
 8012d86:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	4623      	mov	r3, r4
 8012d8e:	4946      	ldr	r1, [pc, #280]	; (8012ea8 <draw_value_bridges+0x248>)
 8012d90:	f00c fa52 	bl	801f238 <sprintf>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s1, x, y + line++ * yspace, 1, RED , BLACK, restclear);
 8012d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d96:	1c5a      	adds	r2, r3, #1
 8012d98:	667a      	str	r2, [r7, #100]	; 0x64
 8012d9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012d9c:	fb02 f203 	mul.w	r2, r2, r3
 8012da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012da2:	441a      	add	r2, r3
 8012da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012da6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012daa:	9303      	str	r3, [sp, #12]
 8012dac:	2300      	movs	r3, #0
 8012dae:	9302      	str	r3, [sp, #8]
 8012db0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8012db4:	9301      	str	r3, [sp, #4]
 8012db6:	2301      	movs	r3, #1
 8012db8:	9300      	str	r3, [sp, #0]
 8012dba:	4613      	mov	r3, r2
 8012dbc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012dbe:	483b      	ldr	r0, [pc, #236]	; (8012eac <draw_value_bridges+0x24c>)
 8012dc0:	f00b fe28 	bl	801ea14 <tft_print_restclear>

		// wenn keine TX Leistung, dann folgende Daten nicht anzeigen
		if(p->fwd_watt >= 0.1)
 8012dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7f5 faf5 	bl	80083b8 <__aeabi_f2d>
 8012dce:	a32e      	add	r3, pc, #184	; (adr r3, 8012e88 <draw_value_bridges+0x228>)
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	f7f5 fdce 	bl	8008974 <__aeabi_dcmpge>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d06c      	beq.n	8012eb8 <draw_value_bridges+0x258>
		{
			sprintf(s5,"%6.1f",p->fwd_dBmpeak);
 8012dde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7f5 fae8 	bl	80083b8 <__aeabi_f2d>
 8012de8:	4603      	mov	r3, r0
 8012dea:	460c      	mov	r4, r1
 8012dec:	4638      	mov	r0, r7
 8012dee:	461a      	mov	r2, r3
 8012df0:	4623      	mov	r3, r4
 8012df2:	492d      	ldr	r1, [pc, #180]	; (8012ea8 <draw_value_bridges+0x248>)
 8012df4:	f00c fa20 	bl	801f238 <sprintf>
			sprintf(s1,"%6.1f",p->rev_dBm);
 8012df8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012dfa:	691b      	ldr	r3, [r3, #16]
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7f5 fadb 	bl	80083b8 <__aeabi_f2d>
 8012e02:	4603      	mov	r3, r0
 8012e04:	460c      	mov	r4, r1
 8012e06:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	4623      	mov	r3, r4
 8012e0e:	4926      	ldr	r1, [pc, #152]	; (8012ea8 <draw_value_bridges+0x248>)
 8012e10:	f00c fa12 	bl	801f238 <sprintf>
			sprintf(s2,"%3.0f-%3.0f",p->imp_min,p->imp_max);
 8012e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e16:	69db      	ldr	r3, [r3, #28]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f5 facd 	bl	80083b8 <__aeabi_f2d>
 8012e1e:	4605      	mov	r5, r0
 8012e20:	460e      	mov	r6, r1
 8012e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e24:	6a1b      	ldr	r3, [r3, #32]
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f5 fac6 	bl	80083b8 <__aeabi_f2d>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	460c      	mov	r4, r1
 8012e30:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8012e34:	e9cd 3400 	strd	r3, r4, [sp]
 8012e38:	462a      	mov	r2, r5
 8012e3a:	4633      	mov	r3, r6
 8012e3c:	491c      	ldr	r1, [pc, #112]	; (8012eb0 <draw_value_bridges+0x250>)
 8012e3e:	f00c f9fb 	bl	801f238 <sprintf>
			sprintf(s3,"%7.2f :1",p->swr);
 8012e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e44:	699b      	ldr	r3, [r3, #24]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7f5 fab6 	bl	80083b8 <__aeabi_f2d>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	460c      	mov	r4, r1
 8012e50:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8012e54:	461a      	mov	r2, r3
 8012e56:	4623      	mov	r3, r4
 8012e58:	4916      	ldr	r1, [pc, #88]	; (8012eb4 <draw_value_bridges+0x254>)
 8012e5a:	f00c f9ed 	bl	801f238 <sprintf>
			sprintf(s4,"%6.1f",p->refl_attenuation+0.05);
 8012e5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7f5 faa8 	bl	80083b8 <__aeabi_f2d>
 8012e68:	a309      	add	r3, pc, #36	; (adr r3, 8012e90 <draw_value_bridges+0x230>)
 8012e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6e:	f7f5 f945 	bl	80080fc <__adddf3>
 8012e72:	4603      	mov	r3, r0
 8012e74:	460c      	mov	r4, r1
 8012e76:	f107 0014 	add.w	r0, r7, #20
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	4623      	mov	r3, r4
 8012e7e:	490a      	ldr	r1, [pc, #40]	; (8012ea8 <draw_value_bridges+0x248>)
 8012e80:	f00c f9da 	bl	801f238 <sprintf>
 8012e84:	e04a      	b.n	8012f1c <draw_value_bridges+0x2bc>
 8012e86:	bf00      	nop
 8012e88:	9999999a 	.word	0x9999999a
 8012e8c:	3fb99999 	.word	0x3fb99999
 8012e90:	9999999a 	.word	0x9999999a
 8012e94:	3fa99999 	.word	0x3fa99999
 8012e98:	20005684 	.word	0x20005684
 8012e9c:	20005634 	.word	0x20005634
 8012ea0:	200055e4 	.word	0x200055e4
 8012ea4:	3fe00000 	.word	0x3fe00000
 8012ea8:	08026aac 	.word	0x08026aac
 8012eac:	20001c1c 	.word	0x20001c1c
 8012eb0:	08026ab4 	.word	0x08026ab4
 8012eb4:	08026ac0 	.word	0x08026ac0
		}
		else
		{
			sprintf(s5,"------");
 8012eb8:	463b      	mov	r3, r7
 8012eba:	4a7d      	ldr	r2, [pc, #500]	; (80130b0 <draw_value_bridges+0x450>)
 8012ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ec0:	6018      	str	r0, [r3, #0]
 8012ec2:	3304      	adds	r3, #4
 8012ec4:	8019      	strh	r1, [r3, #0]
 8012ec6:	3302      	adds	r3, #2
 8012ec8:	0c0a      	lsrs	r2, r1, #16
 8012eca:	701a      	strb	r2, [r3, #0]
			sprintf(s1,"------");
 8012ecc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012ed0:	4a77      	ldr	r2, [pc, #476]	; (80130b0 <draw_value_bridges+0x450>)
 8012ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ed6:	6018      	str	r0, [r3, #0]
 8012ed8:	3304      	adds	r3, #4
 8012eda:	8019      	strh	r1, [r3, #0]
 8012edc:	3302      	adds	r3, #2
 8012ede:	0c0a      	lsrs	r2, r1, #16
 8012ee0:	701a      	strb	r2, [r3, #0]
			sprintf(s2,"-------");
 8012ee2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ee6:	4a73      	ldr	r2, [pc, #460]	; (80130b4 <draw_value_bridges+0x454>)
 8012ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012eec:	e883 0003 	stmia.w	r3, {r0, r1}
			sprintf(s3,"------");
 8012ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012ef4:	4a6e      	ldr	r2, [pc, #440]	; (80130b0 <draw_value_bridges+0x450>)
 8012ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012efa:	6018      	str	r0, [r3, #0]
 8012efc:	3304      	adds	r3, #4
 8012efe:	8019      	strh	r1, [r3, #0]
 8012f00:	3302      	adds	r3, #2
 8012f02:	0c0a      	lsrs	r2, r1, #16
 8012f04:	701a      	strb	r2, [r3, #0]
			sprintf(s4,"------");
 8012f06:	f107 0314 	add.w	r3, r7, #20
 8012f0a:	4a69      	ldr	r2, [pc, #420]	; (80130b0 <draw_value_bridges+0x450>)
 8012f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f10:	6018      	str	r0, [r3, #0]
 8012f12:	3304      	adds	r3, #4
 8012f14:	8019      	strh	r1, [r3, #0]
 8012f16:	3302      	adds	r3, #2
 8012f18:	0c0a      	lsrs	r2, r1, #16
 8012f1a:	701a      	strb	r2, [r3, #0]
		}
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s5, x, y + line++ * yspace, 1, GREEN , BLACK, restclear);
 8012f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f1e:	1c5a      	adds	r2, r3, #1
 8012f20:	667a      	str	r2, [r7, #100]	; 0x64
 8012f22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012f24:	fb02 f203 	mul.w	r2, r2, r3
 8012f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f2a:	441a      	add	r2, r3
 8012f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f2e:	4639      	mov	r1, r7
 8012f30:	9303      	str	r3, [sp, #12]
 8012f32:	2300      	movs	r3, #0
 8012f34:	9302      	str	r3, [sp, #8]
 8012f36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012f3a:	9301      	str	r3, [sp, #4]
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	9300      	str	r3, [sp, #0]
 8012f40:	4613      	mov	r3, r2
 8012f42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012f44:	485c      	ldr	r0, [pc, #368]	; (80130b8 <draw_value_bridges+0x458>)
 8012f46:	f00b fd65 	bl	801ea14 <tft_print_restclear>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s1, x, y + line++ * yspace, 1, RED , BLACK, restclear);
 8012f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f4c:	1c5a      	adds	r2, r3, #1
 8012f4e:	667a      	str	r2, [r7, #100]	; 0x64
 8012f50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012f52:	fb02 f203 	mul.w	r2, r2, r3
 8012f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f58:	441a      	add	r2, r3
 8012f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f5c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012f60:	9303      	str	r3, [sp, #12]
 8012f62:	2300      	movs	r3, #0
 8012f64:	9302      	str	r3, [sp, #8]
 8012f66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8012f6a:	9301      	str	r3, [sp, #4]
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	9300      	str	r3, [sp, #0]
 8012f70:	4613      	mov	r3, r2
 8012f72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012f74:	4850      	ldr	r0, [pc, #320]	; (80130b8 <draw_value_bridges+0x458>)
 8012f76:	f00b fd4d 	bl	801ea14 <tft_print_restclear>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s2, x-12, y + line++ * yspace, 1, YELLOW , BLACK, restclear);
 8012f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012f7c:	f1a3 000c 	sub.w	r0, r3, #12
 8012f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f82:	1c5a      	adds	r2, r3, #1
 8012f84:	667a      	str	r2, [r7, #100]	; 0x64
 8012f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012f88:	fb02 f203 	mul.w	r2, r2, r3
 8012f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f8e:	441a      	add	r2, r3
 8012f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f92:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012f96:	9303      	str	r3, [sp, #12]
 8012f98:	2300      	movs	r3, #0
 8012f9a:	9302      	str	r3, [sp, #8]
 8012f9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012fa0:	9301      	str	r3, [sp, #4]
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	4602      	mov	r2, r0
 8012faa:	4843      	ldr	r0, [pc, #268]	; (80130b8 <draw_value_bridges+0x458>)
 8012fac:	f00b fd32 	bl	801ea14 <tft_print_restclear>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s3, x, y + line++ * yspace, 1, YELLOW , BLACK, restclear);
 8012fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fb2:	1c5a      	adds	r2, r3, #1
 8012fb4:	667a      	str	r2, [r7, #100]	; 0x64
 8012fb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012fb8:	fb02 f203 	mul.w	r2, r2, r3
 8012fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012fbe:	441a      	add	r2, r3
 8012fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012fc2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8012fc6:	9303      	str	r3, [sp, #12]
 8012fc8:	2300      	movs	r3, #0
 8012fca:	9302      	str	r3, [sp, #8]
 8012fcc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012fd0:	9301      	str	r3, [sp, #4]
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012fda:	4837      	ldr	r0, [pc, #220]	; (80130b8 <draw_value_bridges+0x458>)
 8012fdc:	f00b fd1a 	bl	801ea14 <tft_print_restclear>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s4, x, y + line++ * yspace, 1, YELLOW , BLACK, restclear);
 8012fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fe2:	1c5a      	adds	r2, r3, #1
 8012fe4:	667a      	str	r2, [r7, #100]	; 0x64
 8012fe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012fe8:	fb02 f203 	mul.w	r2, r2, r3
 8012fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012fee:	441a      	add	r2, r3
 8012ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ff2:	f107 0114 	add.w	r1, r7, #20
 8012ff6:	9303      	str	r3, [sp, #12]
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	9302      	str	r3, [sp, #8]
 8012ffc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013000:	9301      	str	r3, [sp, #4]
 8013002:	2301      	movs	r3, #1
 8013004:	9300      	str	r3, [sp, #0]
 8013006:	4613      	mov	r3, r2
 8013008:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801300a:	482b      	ldr	r0, [pc, #172]	; (80130b8 <draw_value_bridges+0x458>)
 801300c:	f00b fd02 	bl	801ea14 <tft_print_restclear>
	for(int bg=0; bg<3; bg++)
 8013010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013012:	3301      	adds	r3, #1
 8013014:	67bb      	str	r3, [r7, #120]	; 0x78
 8013016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013018:	2b02      	cmp	r3, #2
 801301a:	f77f ae5a 	ble.w	8012cd2 <draw_value_bridges+0x72>
	}

	fill_bar(&bar_bg_antfwd, pwrswr_antenna.fwd_watt, pwrswr_antenna.fwd_peakwatt);
 801301e:	4b27      	ldr	r3, [pc, #156]	; (80130bc <draw_value_bridges+0x45c>)
 8013020:	edd3 7a02 	vldr	s15, [r3, #8]
 8013024:	4b25      	ldr	r3, [pc, #148]	; (80130bc <draw_value_bridges+0x45c>)
 8013026:	ed93 7a03 	vldr	s14, [r3, #12]
 801302a:	eef0 0a47 	vmov.f32	s1, s14
 801302e:	eeb0 0a67 	vmov.f32	s0, s15
 8013032:	4823      	ldr	r0, [pc, #140]	; (80130c0 <draw_value_bridges+0x460>)
 8013034:	f7f9 f930 	bl	800c298 <fill_bar>
	fill_bar(&bar_bg_antrev, pwrswr_antenna.rev_watt,-1);
 8013038:	4b20      	ldr	r3, [pc, #128]	; (80130bc <draw_value_bridges+0x45c>)
 801303a:	edd3 7a05 	vldr	s15, [r3, #20]
 801303e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8013042:	eeb0 0a67 	vmov.f32	s0, s15
 8013046:	481f      	ldr	r0, [pc, #124]	; (80130c4 <draw_value_bridges+0x464>)
 8013048:	f7f9 f926 	bl	800c298 <fill_bar>
	fill_bar(&bar_bg_fltfwd, pwrswr_filter.fwd_watt,pwrswr_filter.fwd_peakwatt);
 801304c:	4b1e      	ldr	r3, [pc, #120]	; (80130c8 <draw_value_bridges+0x468>)
 801304e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013052:	4b1d      	ldr	r3, [pc, #116]	; (80130c8 <draw_value_bridges+0x468>)
 8013054:	ed93 7a03 	vldr	s14, [r3, #12]
 8013058:	eef0 0a47 	vmov.f32	s1, s14
 801305c:	eeb0 0a67 	vmov.f32	s0, s15
 8013060:	481a      	ldr	r0, [pc, #104]	; (80130cc <draw_value_bridges+0x46c>)
 8013062:	f7f9 f919 	bl	800c298 <fill_bar>
	fill_bar(&bar_bg_fltrev, pwrswr_filter.rev_watt,-1);
 8013066:	4b18      	ldr	r3, [pc, #96]	; (80130c8 <draw_value_bridges+0x468>)
 8013068:	edd3 7a05 	vldr	s15, [r3, #20]
 801306c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8013070:	eeb0 0a67 	vmov.f32	s0, s15
 8013074:	4816      	ldr	r0, [pc, #88]	; (80130d0 <draw_value_bridges+0x470>)
 8013076:	f7f9 f90f 	bl	800c298 <fill_bar>
	fill_bar(&bar_bg_drvfwd, pwrswr_input.fwd_watt,pwrswr_input.fwd_peakwatt);
 801307a:	4b16      	ldr	r3, [pc, #88]	; (80130d4 <draw_value_bridges+0x474>)
 801307c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013080:	4b14      	ldr	r3, [pc, #80]	; (80130d4 <draw_value_bridges+0x474>)
 8013082:	ed93 7a03 	vldr	s14, [r3, #12]
 8013086:	eef0 0a47 	vmov.f32	s1, s14
 801308a:	eeb0 0a67 	vmov.f32	s0, s15
 801308e:	4812      	ldr	r0, [pc, #72]	; (80130d8 <draw_value_bridges+0x478>)
 8013090:	f7f9 f902 	bl	800c298 <fill_bar>
	fill_bar(&bar_bg_drvrev, pwrswr_input.rev_watt,-1);
 8013094:	4b0f      	ldr	r3, [pc, #60]	; (80130d4 <draw_value_bridges+0x474>)
 8013096:	edd3 7a05 	vldr	s15, [r3, #20]
 801309a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 801309e:	eeb0 0a67 	vmov.f32	s0, s15
 80130a2:	480e      	ldr	r0, [pc, #56]	; (80130dc <draw_value_bridges+0x47c>)
 80130a4:	f7f9 f8f8 	bl	800c298 <fill_bar>
}
 80130a8:	bf00      	nop
 80130aa:	3784      	adds	r7, #132	; 0x84
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130b0:	08026acc 	.word	0x08026acc
 80130b4:	08026ad4 	.word	0x08026ad4
 80130b8:	20001c1c 	.word	0x20001c1c
 80130bc:	20005684 	.word	0x20005684
 80130c0:	20003560 	.word	0x20003560
 80130c4:	200037e8 	.word	0x200037e8
 80130c8:	20005634 	.word	0x20005634
 80130cc:	20004208 	.word	0x20004208
 80130d0:	20003f80 	.word	0x20003f80
 80130d4:	200055e4 	.word	0x200055e4
 80130d8:	200040c4 	.word	0x200040c4
 80130dc:	20004490 	.word	0x20004490

080130e0 <draw_values_adcvals>:

void draw_values_adcvals()
{
 80130e0:	b590      	push	{r4, r7, lr}
 80130e2:	b095      	sub	sp, #84	; 0x54
 80130e4:	af04      	add	r7, sp, #16
int y=70;
 80130e6:	2346      	movs	r3, #70	; 0x46
 80130e8:	63bb      	str	r3, [r7, #56]	; 0x38
int linespace = 28;
 80130ea:	231c      	movs	r3, #28
 80130ec:	637b      	str	r3, [r7, #52]	; 0x34
char s[50];

	for(int i=0; i<12; i++)
 80130ee:	2300      	movs	r3, #0
 80130f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80130f2:	e036      	b.n	8013162 <draw_values_adcvals+0x82>
	{
		sprintf(s,"%5.3f V",(float)adc_rawvals[adc_order[i]]/1000.0);
 80130f4:	4a1e      	ldr	r2, [pc, #120]	; (8013170 <draw_values_adcvals+0x90>)
 80130f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130f8:	4413      	add	r3, r2
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	461a      	mov	r2, r3
 80130fe:	4b1d      	ldr	r3, [pc, #116]	; (8013174 <draw_values_adcvals+0x94>)
 8013100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013104:	ee07 3a90 	vmov	s15, r3
 8013108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801310c:	ee17 0a90 	vmov	r0, s15
 8013110:	f7f5 f952 	bl	80083b8 <__aeabi_f2d>
 8013114:	f04f 0200 	mov.w	r2, #0
 8013118:	4b17      	ldr	r3, [pc, #92]	; (8013178 <draw_values_adcvals+0x98>)
 801311a:	f7f5 facf 	bl	80086bc <__aeabi_ddiv>
 801311e:	4603      	mov	r3, r0
 8013120:	460c      	mov	r4, r1
 8013122:	4638      	mov	r0, r7
 8013124:	461a      	mov	r2, r3
 8013126:	4623      	mov	r3, r4
 8013128:	4914      	ldr	r1, [pc, #80]	; (801317c <draw_values_adcvals+0x9c>)
 801312a:	f00c f885 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, 495, y + linespace*i, 1, col_order[i] , BLACK);
 801312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013132:	fb02 f203 	mul.w	r2, r2, r3
 8013136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013138:	18d0      	adds	r0, r2, r3
 801313a:	4a11      	ldr	r2, [pc, #68]	; (8013180 <draw_values_adcvals+0xa0>)
 801313c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801313e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013142:	461a      	mov	r2, r3
 8013144:	4639      	mov	r1, r7
 8013146:	2300      	movs	r3, #0
 8013148:	9302      	str	r3, [sp, #8]
 801314a:	9201      	str	r2, [sp, #4]
 801314c:	2301      	movs	r3, #1
 801314e:	9300      	str	r3, [sp, #0]
 8013150:	4603      	mov	r3, r0
 8013152:	f240 12ef 	movw	r2, #495	; 0x1ef
 8013156:	480b      	ldr	r0, [pc, #44]	; (8013184 <draw_values_adcvals+0xa4>)
 8013158:	f00b fd24 	bl	801eba4 <tft_print>
	for(int i=0; i<12; i++)
 801315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801315e:	3301      	adds	r3, #1
 8013160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013164:	2b0b      	cmp	r3, #11
 8013166:	ddc5      	ble.n	80130f4 <draw_values_adcvals+0x14>
	}
}
 8013168:	bf00      	nop
 801316a:	3744      	adds	r7, #68	; 0x44
 801316c:	46bd      	mov	sp, r7
 801316e:	bd90      	pop	{r4, r7, pc}
 8013170:	20001368 	.word	0x20001368
 8013174:	20003108 	.word	0x20003108
 8013178:	408f4000 	.word	0x408f4000
 801317c:	08026adc 	.word	0x08026adc
 8013180:	2000137c 	.word	0x2000137c
 8013184:	20001c34 	.word	0x20001c34

08013188 <draw_values_realvals>:

void draw_values_realvals()
{
 8013188:	b590      	push	{r4, r7, lr}
 801318a:	b097      	sub	sp, #92	; 0x5c
 801318c:	af04      	add	r7, sp, #16
int x = 470;
 801318e:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8013192:	647b      	str	r3, [r7, #68]	; 0x44
int y=55;
 8013194:	2337      	movs	r3, #55	; 0x37
 8013196:	643b      	str	r3, [r7, #64]	; 0x40
int linespace = 24;
 8013198:	2318      	movs	r3, #24
 801319a:	63fb      	str	r3, [r7, #60]	; 0x3c
char s[50];
int i=0;
 801319c:	2300      	movs	r3, #0
 801319e:	63bb      	str	r3, [r7, #56]	; 0x38

	sprintf(s,"%6.1f V",adc_realvals[UMESS]);
 80131a0:	4b48      	ldr	r3, [pc, #288]	; (80132c4 <draw_values_realvals+0x13c>)
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7f5 f907 	bl	80083b8 <__aeabi_f2d>
 80131aa:	4603      	mov	r3, r0
 80131ac:	460c      	mov	r4, r1
 80131ae:	1d38      	adds	r0, r7, #4
 80131b0:	461a      	mov	r2, r3
 80131b2:	4623      	mov	r3, r4
 80131b4:	4944      	ldr	r1, [pc, #272]	; (80132c8 <draw_values_realvals+0x140>)
 80131b6:	f00c f83f 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 80131ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131bc:	1c5a      	adds	r2, r3, #1
 80131be:	63ba      	str	r2, [r7, #56]	; 0x38
 80131c0:	4a42      	ldr	r2, [pc, #264]	; (80132cc <draw_values_realvals+0x144>)
 80131c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131c6:	461a      	mov	r2, r3
 80131c8:	1d39      	adds	r1, r7, #4
 80131ca:	2300      	movs	r3, #0
 80131cc:	9302      	str	r3, [sp, #8]
 80131ce:	9201      	str	r2, [sp, #4]
 80131d0:	2301      	movs	r3, #1
 80131d2:	9300      	str	r3, [sp, #0]
 80131d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80131d8:	483d      	ldr	r0, [pc, #244]	; (80132d0 <draw_values_realvals+0x148>)
 80131da:	f00b fce3 	bl	801eba4 <tft_print>
  	y += linespace;
 80131de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80131e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131e2:	4413      	add	r3, r2
 80131e4:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f A",adc_realvals[IMESS]);
 80131e6:	4b37      	ldr	r3, [pc, #220]	; (80132c4 <draw_values_realvals+0x13c>)
 80131e8:	691b      	ldr	r3, [r3, #16]
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7f5 f8e4 	bl	80083b8 <__aeabi_f2d>
 80131f0:	4603      	mov	r3, r0
 80131f2:	460c      	mov	r4, r1
 80131f4:	1d38      	adds	r0, r7, #4
 80131f6:	461a      	mov	r2, r3
 80131f8:	4623      	mov	r3, r4
 80131fa:	4936      	ldr	r1, [pc, #216]	; (80132d4 <draw_values_realvals+0x14c>)
 80131fc:	f00c f81c 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 8013200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013202:	1c5a      	adds	r2, r3, #1
 8013204:	63ba      	str	r2, [r7, #56]	; 0x38
 8013206:	4a31      	ldr	r2, [pc, #196]	; (80132cc <draw_values_realvals+0x144>)
 8013208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801320c:	461a      	mov	r2, r3
 801320e:	1d39      	adds	r1, r7, #4
 8013210:	2300      	movs	r3, #0
 8013212:	9302      	str	r3, [sp, #8]
 8013214:	9201      	str	r2, [sp, #4]
 8013216:	2301      	movs	r3, #1
 8013218:	9300      	str	r3, [sp, #0]
 801321a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801321c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801321e:	482c      	ldr	r0, [pc, #176]	; (80132d0 <draw_values_realvals+0x148>)
 8013220:	f00b fcc0 	bl	801eba4 <tft_print>
  	y += linespace;
 8013224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013228:	4413      	add	r3, r2
 801322a:	643b      	str	r3, [r7, #64]	; 0x40

  	if(adc_realvals[UTEMP] > -9)
 801322c:	4b25      	ldr	r3, [pc, #148]	; (80132c4 <draw_values_realvals+0x13c>)
 801322e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013232:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 8013236:	eef4 7ac7 	vcmpe.f32	s15, s14
 801323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801323e:	dd0d      	ble.n	801325c <draw_values_realvals+0xd4>
  		sprintf(s,"%6.1f DegC",adc_realvals[UTEMP]);
 8013240:	4b20      	ldr	r3, [pc, #128]	; (80132c4 <draw_values_realvals+0x13c>)
 8013242:	68db      	ldr	r3, [r3, #12]
 8013244:	4618      	mov	r0, r3
 8013246:	f7f5 f8b7 	bl	80083b8 <__aeabi_f2d>
 801324a:	4603      	mov	r3, r0
 801324c:	460c      	mov	r4, r1
 801324e:	1d38      	adds	r0, r7, #4
 8013250:	461a      	mov	r2, r3
 8013252:	4623      	mov	r3, r4
 8013254:	4920      	ldr	r1, [pc, #128]	; (80132d8 <draw_values_realvals+0x150>)
 8013256:	f00b ffef 	bl	801f238 <sprintf>
 801325a:	e004      	b.n	8013266 <draw_values_realvals+0xde>
  	else
  		sprintf(s,"   --- DegC");
 801325c:	1d3b      	adds	r3, r7, #4
 801325e:	4a1f      	ldr	r2, [pc, #124]	; (80132dc <draw_values_realvals+0x154>)
 8013260:	ca07      	ldmia	r2, {r0, r1, r2}
 8013262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 8013266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013268:	1c5a      	adds	r2, r3, #1
 801326a:	63ba      	str	r2, [r7, #56]	; 0x38
 801326c:	4a17      	ldr	r2, [pc, #92]	; (80132cc <draw_values_realvals+0x144>)
 801326e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013272:	461a      	mov	r2, r3
 8013274:	1d39      	adds	r1, r7, #4
 8013276:	2300      	movs	r3, #0
 8013278:	9302      	str	r3, [sp, #8]
 801327a:	9201      	str	r2, [sp, #4]
 801327c:	2301      	movs	r3, #1
 801327e:	9300      	str	r3, [sp, #0]
 8013280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013284:	4812      	ldr	r0, [pc, #72]	; (80132d0 <draw_values_realvals+0x148>)
 8013286:	f00b fc8d 	bl	801eba4 <tft_print>
  	y += linespace;
 801328a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801328c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801328e:	4413      	add	r3, r2
 8013290:	643b      	str	r3, [r7, #64]	; 0x40

  	if(adc_realvals[UTEMP2] > -9)
 8013292:	4b0c      	ldr	r3, [pc, #48]	; (80132c4 <draw_values_realvals+0x13c>)
 8013294:	edd3 7a08 	vldr	s15, [r3, #32]
 8013298:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 801329c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a4:	dd1c      	ble.n	80132e0 <draw_values_realvals+0x158>
		sprintf(s,"%6.1f DegC",adc_realvals[UTEMP2]);
 80132a6:	4b07      	ldr	r3, [pc, #28]	; (80132c4 <draw_values_realvals+0x13c>)
 80132a8:	6a1b      	ldr	r3, [r3, #32]
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7f5 f884 	bl	80083b8 <__aeabi_f2d>
 80132b0:	4603      	mov	r3, r0
 80132b2:	460c      	mov	r4, r1
 80132b4:	1d38      	adds	r0, r7, #4
 80132b6:	461a      	mov	r2, r3
 80132b8:	4623      	mov	r3, r4
 80132ba:	4907      	ldr	r1, [pc, #28]	; (80132d8 <draw_values_realvals+0x150>)
 80132bc:	f00b ffbc 	bl	801f238 <sprintf>
 80132c0:	e013      	b.n	80132ea <draw_values_realvals+0x162>
 80132c2:	bf00      	nop
 80132c4:	2000314c 	.word	0x2000314c
 80132c8:	08026ae4 	.word	0x08026ae4
 80132cc:	2000137c 	.word	0x2000137c
 80132d0:	20001c34 	.word	0x20001c34
 80132d4:	08026aec 	.word	0x08026aec
 80132d8:	08026af4 	.word	0x08026af4
 80132dc:	08026b00 	.word	0x08026b00
	else
		sprintf(s,"   --- DegC");
 80132e0:	1d3b      	adds	r3, r7, #4
 80132e2:	4aae      	ldr	r2, [pc, #696]	; (801359c <draw_values_realvals+0x414>)
 80132e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80132e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 80132ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ec:	1c5a      	adds	r2, r3, #1
 80132ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80132f0:	4aab      	ldr	r2, [pc, #684]	; (80135a0 <draw_values_realvals+0x418>)
 80132f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132f6:	461a      	mov	r2, r3
 80132f8:	1d39      	adds	r1, r7, #4
 80132fa:	2300      	movs	r3, #0
 80132fc:	9302      	str	r3, [sp, #8]
 80132fe:	9201      	str	r2, [sp, #4]
 8013300:	2301      	movs	r3, #1
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013308:	48a6      	ldr	r0, [pc, #664]	; (80135a4 <draw_values_realvals+0x41c>)
 801330a:	f00b fc4b 	bl	801eba4 <tft_print>
  	y += linespace;
 801330e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013312:	4413      	add	r3, r2
 8013314:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"  %4.0f m",adc_realvals[UBAND]);
 8013316:	4ba4      	ldr	r3, [pc, #656]	; (80135a8 <draw_values_realvals+0x420>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	4618      	mov	r0, r3
 801331c:	f7f5 f84c 	bl	80083b8 <__aeabi_f2d>
 8013320:	4603      	mov	r3, r0
 8013322:	460c      	mov	r4, r1
 8013324:	1d38      	adds	r0, r7, #4
 8013326:	461a      	mov	r2, r3
 8013328:	4623      	mov	r3, r4
 801332a:	49a0      	ldr	r1, [pc, #640]	; (80135ac <draw_values_realvals+0x424>)
 801332c:	f00b ff84 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 8013330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013332:	1c5a      	adds	r2, r3, #1
 8013334:	63ba      	str	r2, [r7, #56]	; 0x38
 8013336:	4a9a      	ldr	r2, [pc, #616]	; (80135a0 <draw_values_realvals+0x418>)
 8013338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801333c:	461a      	mov	r2, r3
 801333e:	1d39      	adds	r1, r7, #4
 8013340:	2300      	movs	r3, #0
 8013342:	9302      	str	r3, [sp, #8]
 8013344:	9201      	str	r2, [sp, #4]
 8013346:	2301      	movs	r3, #1
 8013348:	9300      	str	r3, [sp, #0]
 801334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801334c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801334e:	4895      	ldr	r0, [pc, #596]	; (80135a4 <draw_values_realvals+0x41c>)
 8013350:	f00b fc28 	bl	801eba4 <tft_print>
  	y += linespace;
 8013354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013358:	4413      	add	r3, r2
 801335a:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f W",pwrswr_antenna.fwd_watt);
 801335c:	4b94      	ldr	r3, [pc, #592]	; (80135b0 <draw_values_realvals+0x428>)
 801335e:	689b      	ldr	r3, [r3, #8]
 8013360:	4618      	mov	r0, r3
 8013362:	f7f5 f829 	bl	80083b8 <__aeabi_f2d>
 8013366:	4603      	mov	r3, r0
 8013368:	460c      	mov	r4, r1
 801336a:	1d38      	adds	r0, r7, #4
 801336c:	461a      	mov	r2, r3
 801336e:	4623      	mov	r3, r4
 8013370:	4990      	ldr	r1, [pc, #576]	; (80135b4 <draw_values_realvals+0x42c>)
 8013372:	f00b ff61 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 8013376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013378:	1c5a      	adds	r2, r3, #1
 801337a:	63ba      	str	r2, [r7, #56]	; 0x38
 801337c:	4a88      	ldr	r2, [pc, #544]	; (80135a0 <draw_values_realvals+0x418>)
 801337e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013382:	461a      	mov	r2, r3
 8013384:	1d39      	adds	r1, r7, #4
 8013386:	2300      	movs	r3, #0
 8013388:	9302      	str	r3, [sp, #8]
 801338a:	9201      	str	r2, [sp, #4]
 801338c:	2301      	movs	r3, #1
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013394:	4883      	ldr	r0, [pc, #524]	; (80135a4 <draw_values_realvals+0x41c>)
 8013396:	f00b fc05 	bl	801eba4 <tft_print>
  	y += linespace;
 801339a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801339c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801339e:	4413      	add	r3, r2
 80133a0:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f W",pwrswr_antenna.fwd_peakwatt);
 80133a2:	4b83      	ldr	r3, [pc, #524]	; (80135b0 <draw_values_realvals+0x428>)
 80133a4:	68db      	ldr	r3, [r3, #12]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7f5 f806 	bl	80083b8 <__aeabi_f2d>
 80133ac:	4603      	mov	r3, r0
 80133ae:	460c      	mov	r4, r1
 80133b0:	1d38      	adds	r0, r7, #4
 80133b2:	461a      	mov	r2, r3
 80133b4:	4623      	mov	r3, r4
 80133b6:	497f      	ldr	r1, [pc, #508]	; (80135b4 <draw_values_realvals+0x42c>)
 80133b8:	f00b ff3e 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 80133bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133be:	1c5a      	adds	r2, r3, #1
 80133c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80133c2:	4a77      	ldr	r2, [pc, #476]	; (80135a0 <draw_values_realvals+0x418>)
 80133c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133c8:	461a      	mov	r2, r3
 80133ca:	1d39      	adds	r1, r7, #4
 80133cc:	2300      	movs	r3, #0
 80133ce:	9302      	str	r3, [sp, #8]
 80133d0:	9201      	str	r2, [sp, #4]
 80133d2:	2301      	movs	r3, #1
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133da:	4872      	ldr	r0, [pc, #456]	; (80135a4 <draw_values_realvals+0x41c>)
 80133dc:	f00b fbe2 	bl	801eba4 <tft_print>
  	y += linespace;
 80133e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133e4:	4413      	add	r3, r2
 80133e6:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f W",pwrswr_antenna.rev_watt);
 80133e8:	4b71      	ldr	r3, [pc, #452]	; (80135b0 <draw_values_realvals+0x428>)
 80133ea:	695b      	ldr	r3, [r3, #20]
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7f4 ffe3 	bl	80083b8 <__aeabi_f2d>
 80133f2:	4603      	mov	r3, r0
 80133f4:	460c      	mov	r4, r1
 80133f6:	1d38      	adds	r0, r7, #4
 80133f8:	461a      	mov	r2, r3
 80133fa:	4623      	mov	r3, r4
 80133fc:	496d      	ldr	r1, [pc, #436]	; (80135b4 <draw_values_realvals+0x42c>)
 80133fe:	f00b ff1b 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 8013402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013404:	1c5a      	adds	r2, r3, #1
 8013406:	63ba      	str	r2, [r7, #56]	; 0x38
 8013408:	4a65      	ldr	r2, [pc, #404]	; (80135a0 <draw_values_realvals+0x418>)
 801340a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801340e:	461a      	mov	r2, r3
 8013410:	1d39      	adds	r1, r7, #4
 8013412:	2300      	movs	r3, #0
 8013414:	9302      	str	r3, [sp, #8]
 8013416:	9201      	str	r2, [sp, #4]
 8013418:	2301      	movs	r3, #1
 801341a:	9300      	str	r3, [sp, #0]
 801341c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801341e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013420:	4860      	ldr	r0, [pc, #384]	; (80135a4 <draw_values_realvals+0x41c>)
 8013422:	f00b fbbf 	bl	801eba4 <tft_print>
  	y += linespace;
 8013426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801342a:	4413      	add	r3, r2
 801342c:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f W",pwrswr_filter.fwd_watt);
 801342e:	4b62      	ldr	r3, [pc, #392]	; (80135b8 <draw_values_realvals+0x430>)
 8013430:	689b      	ldr	r3, [r3, #8]
 8013432:	4618      	mov	r0, r3
 8013434:	f7f4 ffc0 	bl	80083b8 <__aeabi_f2d>
 8013438:	4603      	mov	r3, r0
 801343a:	460c      	mov	r4, r1
 801343c:	1d38      	adds	r0, r7, #4
 801343e:	461a      	mov	r2, r3
 8013440:	4623      	mov	r3, r4
 8013442:	495c      	ldr	r1, [pc, #368]	; (80135b4 <draw_values_realvals+0x42c>)
 8013444:	f00b fef8 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 8013448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344a:	1c5a      	adds	r2, r3, #1
 801344c:	63ba      	str	r2, [r7, #56]	; 0x38
 801344e:	4a54      	ldr	r2, [pc, #336]	; (80135a0 <draw_values_realvals+0x418>)
 8013450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013454:	461a      	mov	r2, r3
 8013456:	1d39      	adds	r1, r7, #4
 8013458:	2300      	movs	r3, #0
 801345a:	9302      	str	r3, [sp, #8]
 801345c:	9201      	str	r2, [sp, #4]
 801345e:	2301      	movs	r3, #1
 8013460:	9300      	str	r3, [sp, #0]
 8013462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013466:	484f      	ldr	r0, [pc, #316]	; (80135a4 <draw_values_realvals+0x41c>)
 8013468:	f00b fb9c 	bl	801eba4 <tft_print>
  	y += linespace;
 801346c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013470:	4413      	add	r3, r2
 8013472:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f W",pwrswr_filter.rev_watt);
 8013474:	4b50      	ldr	r3, [pc, #320]	; (80135b8 <draw_values_realvals+0x430>)
 8013476:	695b      	ldr	r3, [r3, #20]
 8013478:	4618      	mov	r0, r3
 801347a:	f7f4 ff9d 	bl	80083b8 <__aeabi_f2d>
 801347e:	4603      	mov	r3, r0
 8013480:	460c      	mov	r4, r1
 8013482:	1d38      	adds	r0, r7, #4
 8013484:	461a      	mov	r2, r3
 8013486:	4623      	mov	r3, r4
 8013488:	494a      	ldr	r1, [pc, #296]	; (80135b4 <draw_values_realvals+0x42c>)
 801348a:	f00b fed5 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 801348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013490:	1c5a      	adds	r2, r3, #1
 8013492:	63ba      	str	r2, [r7, #56]	; 0x38
 8013494:	4a42      	ldr	r2, [pc, #264]	; (80135a0 <draw_values_realvals+0x418>)
 8013496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801349a:	461a      	mov	r2, r3
 801349c:	1d39      	adds	r1, r7, #4
 801349e:	2300      	movs	r3, #0
 80134a0:	9302      	str	r3, [sp, #8]
 80134a2:	9201      	str	r2, [sp, #4]
 80134a4:	2301      	movs	r3, #1
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134ac:	483d      	ldr	r0, [pc, #244]	; (80135a4 <draw_values_realvals+0x41c>)
 80134ae:	f00b fb79 	bl	801eba4 <tft_print>
  	y += linespace;
 80134b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80134b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b6:	4413      	add	r3, r2
 80134b8:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f W",pwrswr_input.fwd_watt);
 80134ba:	4b40      	ldr	r3, [pc, #256]	; (80135bc <draw_values_realvals+0x434>)
 80134bc:	689b      	ldr	r3, [r3, #8]
 80134be:	4618      	mov	r0, r3
 80134c0:	f7f4 ff7a 	bl	80083b8 <__aeabi_f2d>
 80134c4:	4603      	mov	r3, r0
 80134c6:	460c      	mov	r4, r1
 80134c8:	1d38      	adds	r0, r7, #4
 80134ca:	461a      	mov	r2, r3
 80134cc:	4623      	mov	r3, r4
 80134ce:	4939      	ldr	r1, [pc, #228]	; (80135b4 <draw_values_realvals+0x42c>)
 80134d0:	f00b feb2 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 80134d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134d6:	1c5a      	adds	r2, r3, #1
 80134d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80134da:	4a31      	ldr	r2, [pc, #196]	; (80135a0 <draw_values_realvals+0x418>)
 80134dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134e0:	461a      	mov	r2, r3
 80134e2:	1d39      	adds	r1, r7, #4
 80134e4:	2300      	movs	r3, #0
 80134e6:	9302      	str	r3, [sp, #8]
 80134e8:	9201      	str	r2, [sp, #4]
 80134ea:	2301      	movs	r3, #1
 80134ec:	9300      	str	r3, [sp, #0]
 80134ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134f2:	482c      	ldr	r0, [pc, #176]	; (80135a4 <draw_values_realvals+0x41c>)
 80134f4:	f00b fb56 	bl	801eba4 <tft_print>
  	y += linespace;
 80134f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80134fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134fc:	4413      	add	r3, r2
 80134fe:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f W",pwrswr_input.rev_watt);
 8013500:	4b2e      	ldr	r3, [pc, #184]	; (80135bc <draw_values_realvals+0x434>)
 8013502:	695b      	ldr	r3, [r3, #20]
 8013504:	4618      	mov	r0, r3
 8013506:	f7f4 ff57 	bl	80083b8 <__aeabi_f2d>
 801350a:	4603      	mov	r3, r0
 801350c:	460c      	mov	r4, r1
 801350e:	1d38      	adds	r0, r7, #4
 8013510:	461a      	mov	r2, r3
 8013512:	4623      	mov	r3, r4
 8013514:	4927      	ldr	r1, [pc, #156]	; (80135b4 <draw_values_realvals+0x42c>)
 8013516:	f00b fe8f 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 801351a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801351c:	1c5a      	adds	r2, r3, #1
 801351e:	63ba      	str	r2, [r7, #56]	; 0x38
 8013520:	4a1f      	ldr	r2, [pc, #124]	; (80135a0 <draw_values_realvals+0x418>)
 8013522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013526:	461a      	mov	r2, r3
 8013528:	1d39      	adds	r1, r7, #4
 801352a:	2300      	movs	r3, #0
 801352c:	9302      	str	r3, [sp, #8]
 801352e:	9201      	str	r2, [sp, #4]
 8013530:	2301      	movs	r3, #1
 8013532:	9300      	str	r3, [sp, #0]
 8013534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013538:	481a      	ldr	r0, [pc, #104]	; (80135a4 <draw_values_realvals+0x41c>)
 801353a:	f00b fb33 	bl	801eba4 <tft_print>
  	y += linespace;
 801353e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013542:	4413      	add	r3, r2
 8013544:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f W[dc]",adc_realvals[CALC_POWER]);
 8013546:	4b18      	ldr	r3, [pc, #96]	; (80135a8 <draw_values_realvals+0x420>)
 8013548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801354a:	4618      	mov	r0, r3
 801354c:	f7f4 ff34 	bl	80083b8 <__aeabi_f2d>
 8013550:	4603      	mov	r3, r0
 8013552:	460c      	mov	r4, r1
 8013554:	1d38      	adds	r0, r7, #4
 8013556:	461a      	mov	r2, r3
 8013558:	4623      	mov	r3, r4
 801355a:	4919      	ldr	r1, [pc, #100]	; (80135c0 <draw_values_realvals+0x438>)
 801355c:	f00b fe6c 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 8013560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013562:	1c5a      	adds	r2, r3, #1
 8013564:	63ba      	str	r2, [r7, #56]	; 0x38
 8013566:	4a0e      	ldr	r2, [pc, #56]	; (80135a0 <draw_values_realvals+0x418>)
 8013568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801356c:	461a      	mov	r2, r3
 801356e:	1d39      	adds	r1, r7, #4
 8013570:	2300      	movs	r3, #0
 8013572:	9302      	str	r3, [sp, #8]
 8013574:	9201      	str	r2, [sp, #4]
 8013576:	2301      	movs	r3, #1
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801357c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801357e:	4809      	ldr	r0, [pc, #36]	; (80135a4 <draw_values_realvals+0x41c>)
 8013580:	f00b fb10 	bl	801eba4 <tft_print>
  	y += linespace;
 8013584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013588:	4413      	add	r3, r2
 801358a:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf(s,"%6.1f %%",adc_realvals[CALC_EFF]);
 801358c:	4b06      	ldr	r3, [pc, #24]	; (80135a8 <draw_values_realvals+0x420>)
 801358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013590:	4618      	mov	r0, r3
 8013592:	f7f4 ff11 	bl	80083b8 <__aeabi_f2d>
 8013596:	4603      	mov	r3, r0
 8013598:	e014      	b.n	80135c4 <draw_values_realvals+0x43c>
 801359a:	bf00      	nop
 801359c:	08026b00 	.word	0x08026b00
 80135a0:	2000137c 	.word	0x2000137c
 80135a4:	20001c34 	.word	0x20001c34
 80135a8:	2000314c 	.word	0x2000314c
 80135ac:	08026b0c 	.word	0x08026b0c
 80135b0:	20005684 	.word	0x20005684
 80135b4:	08026b18 	.word	0x08026b18
 80135b8:	20005634 	.word	0x20005634
 80135bc:	200055e4 	.word	0x200055e4
 80135c0:	08026b20 	.word	0x08026b20
 80135c4:	460c      	mov	r4, r1
 80135c6:	1d38      	adds	r0, r7, #4
 80135c8:	461a      	mov	r2, r3
 80135ca:	4623      	mov	r3, r4
 80135cc:	4921      	ldr	r1, [pc, #132]	; (8013654 <draw_values_realvals+0x4cc>)
 80135ce:	f00b fe33 	bl	801f238 <sprintf>
  	tft_print(&lucidaConsole_18ptFontInfo, s, x, y, 1, col_order[i++] , BLACK);
 80135d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d4:	1c5a      	adds	r2, r3, #1
 80135d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80135d8:	4a1f      	ldr	r2, [pc, #124]	; (8013658 <draw_values_realvals+0x4d0>)
 80135da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135de:	461a      	mov	r2, r3
 80135e0:	1d39      	adds	r1, r7, #4
 80135e2:	2300      	movs	r3, #0
 80135e4:	9302      	str	r3, [sp, #8]
 80135e6:	9201      	str	r2, [sp, #4]
 80135e8:	2301      	movs	r3, #1
 80135ea:	9300      	str	r3, [sp, #0]
 80135ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135f0:	481a      	ldr	r0, [pc, #104]	; (801365c <draw_values_realvals+0x4d4>)
 80135f2:	f00b fad7 	bl	801eba4 <tft_print>
  	y += linespace;
 80135f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80135f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135fa:	4413      	add	r3, r2
 80135fc:	643b      	str	r3, [r7, #64]	; 0x40

  	sprintf(s,"%7.1f kHz",adc_realvals[MFREQUENCY]);
 80135fe:	4b18      	ldr	r3, [pc, #96]	; (8013660 <draw_values_realvals+0x4d8>)
 8013600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013602:	4618      	mov	r0, r3
 8013604:	f7f4 fed8 	bl	80083b8 <__aeabi_f2d>
 8013608:	4603      	mov	r3, r0
 801360a:	460c      	mov	r4, r1
 801360c:	1d38      	adds	r0, r7, #4
 801360e:	461a      	mov	r2, r3
 8013610:	4623      	mov	r3, r4
 8013612:	4914      	ldr	r1, [pc, #80]	; (8013664 <draw_values_realvals+0x4dc>)
 8013614:	f00b fe10 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, x-14, y, 1, col_order[i++] , BLACK);
 8013618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801361a:	f1a3 000e 	sub.w	r0, r3, #14
 801361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013620:	1c5a      	adds	r2, r3, #1
 8013622:	63ba      	str	r2, [r7, #56]	; 0x38
 8013624:	4a0c      	ldr	r2, [pc, #48]	; (8013658 <draw_values_realvals+0x4d0>)
 8013626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801362a:	461a      	mov	r2, r3
 801362c:	1d39      	adds	r1, r7, #4
 801362e:	2300      	movs	r3, #0
 8013630:	9302      	str	r3, [sp, #8]
 8013632:	9201      	str	r2, [sp, #4]
 8013634:	2301      	movs	r3, #1
 8013636:	9300      	str	r3, [sp, #0]
 8013638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801363a:	4602      	mov	r2, r0
 801363c:	4807      	ldr	r0, [pc, #28]	; (801365c <draw_values_realvals+0x4d4>)
 801363e:	f00b fab1 	bl	801eba4 <tft_print>
	y += linespace;
 8013642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013646:	4413      	add	r3, r2
 8013648:	643b      	str	r3, [r7, #64]	; 0x40
}
 801364a:	bf00      	nop
 801364c:	374c      	adds	r7, #76	; 0x4c
 801364e:	46bd      	mov	sp, r7
 8013650:	bd90      	pop	{r4, r7, pc}
 8013652:	bf00      	nop
 8013654:	08026b2c 	.word	0x08026b2c
 8013658:	2000137c 	.word	0x2000137c
 801365c:	20001c34 	.word	0x20001c34
 8013660:	2000314c 	.word	0x2000314c
 8013664:	08026b38 	.word	0x08026b38

08013668 <draw_statbutton>:

void draw_statbutton(int gpio, int x, int y, int activestate, int symsize )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b08c      	sub	sp, #48	; 0x30
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	603b      	str	r3, [r7, #0]
static int oldstat[MAXGPIOS];
char bmpgn[10], bmprd[10];

	if(symsize == 0)
 8013676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013678:	2b00      	cmp	r3, #0
 801367a:	d111      	bne.n	80136a0 <draw_statbutton+0x38>
	{
		strcpy(bmpgn,"greenbut");
 801367c:	f107 031c 	add.w	r3, r7, #28
 8013680:	4a38      	ldr	r2, [pc, #224]	; (8013764 <draw_statbutton+0xfc>)
 8013682:	ca07      	ldmia	r2, {r0, r1, r2}
 8013684:	c303      	stmia	r3!, {r0, r1}
 8013686:	701a      	strb	r2, [r3, #0]
		strcpy(bmprd,"redbut");
 8013688:	f107 0310 	add.w	r3, r7, #16
 801368c:	4a36      	ldr	r2, [pc, #216]	; (8013768 <draw_statbutton+0x100>)
 801368e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013692:	6018      	str	r0, [r3, #0]
 8013694:	3304      	adds	r3, #4
 8013696:	8019      	strh	r1, [r3, #0]
 8013698:	3302      	adds	r3, #2
 801369a:	0c0a      	lsrs	r2, r1, #16
 801369c:	701a      	strb	r2, [r3, #0]
 801369e:	e00d      	b.n	80136bc <draw_statbutton+0x54>
	}
	else
	{
		strcpy(bmpgn,"gn48x48");
 80136a0:	f107 031c 	add.w	r3, r7, #28
 80136a4:	4a31      	ldr	r2, [pc, #196]	; (801376c <draw_statbutton+0x104>)
 80136a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136aa:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(bmprd,"rd48x48");
 80136ae:	f107 0310 	add.w	r3, r7, #16
 80136b2:	4a2f      	ldr	r2, [pc, #188]	; (8013770 <draw_statbutton+0x108>)
 80136b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136b8:	e883 0003 	stmia.w	r3, {r0, r1}
	}


	if(first_statdisplay)
 80136bc:	4b2d      	ldr	r3, [pc, #180]	; (8013774 <draw_statbutton+0x10c>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d011      	beq.n	80136e8 <draw_statbutton+0x80>
	{
		for(int i=0; i<MAXGPIOS; i++)
 80136c4:	2300      	movs	r3, #0
 80136c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136c8:	e008      	b.n	80136dc <draw_statbutton+0x74>
			oldstat[i] = -1;
 80136ca:	4a2b      	ldr	r2, [pc, #172]	; (8013778 <draw_statbutton+0x110>)
 80136cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ce:	f04f 31ff 	mov.w	r1, #4294967295
 80136d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<MAXGPIOS; i++)
 80136d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d8:	3301      	adds	r3, #1
 80136da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136de:	2b1a      	cmp	r3, #26
 80136e0:	ddf3      	ble.n	80136ca <draw_statbutton+0x62>
		first_statdisplay = 0;
 80136e2:	4b24      	ldr	r3, [pc, #144]	; (8013774 <draw_statbutton+0x10c>)
 80136e4:	2200      	movs	r2, #0
 80136e6:	601a      	str	r2, [r3, #0]
	}

	int status = gpio_stat[gpio];
 80136e8:	4a24      	ldr	r2, [pc, #144]	; (801377c <draw_statbutton+0x114>)
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	4413      	add	r3, r2
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	62bb      	str	r3, [r7, #40]	; 0x28
	if(status != oldstat[gpio])
 80136f2:	4a21      	ldr	r2, [pc, #132]	; (8013778 <draw_statbutton+0x110>)
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d02c      	beq.n	801375a <draw_statbutton+0xf2>
	{
		if(status)
 8013700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013702:	2b00      	cmp	r3, #0
 8013704:	d012      	beq.n	801372c <draw_statbutton+0xc4>
		{
			if(activestate) TFT_DrawFlash(bmpgn, x, y);
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d007      	beq.n	801371c <draw_statbutton+0xb4>
 801370c:	f107 031c 	add.w	r3, r7, #28
 8013710:	687a      	ldr	r2, [r7, #4]
 8013712:	68b9      	ldr	r1, [r7, #8]
 8013714:	4618      	mov	r0, r3
 8013716:	f004 ff31 	bl	801857c <TFT_DrawFlash>
 801371a:	e019      	b.n	8013750 <draw_statbutton+0xe8>
			else TFT_DrawFlash(bmprd, x, y);
 801371c:	f107 0310 	add.w	r3, r7, #16
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	68b9      	ldr	r1, [r7, #8]
 8013724:	4618      	mov	r0, r3
 8013726:	f004 ff29 	bl	801857c <TFT_DrawFlash>
 801372a:	e011      	b.n	8013750 <draw_statbutton+0xe8>
		}
		else
		{
			if(activestate) TFT_DrawFlash(bmprd, x, y);
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d007      	beq.n	8013742 <draw_statbutton+0xda>
 8013732:	f107 0310 	add.w	r3, r7, #16
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	68b9      	ldr	r1, [r7, #8]
 801373a:	4618      	mov	r0, r3
 801373c:	f004 ff1e 	bl	801857c <TFT_DrawFlash>
 8013740:	e006      	b.n	8013750 <draw_statbutton+0xe8>
			else TFT_DrawFlash(bmpgn, x, y);
 8013742:	f107 031c 	add.w	r3, r7, #28
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	68b9      	ldr	r1, [r7, #8]
 801374a:	4618      	mov	r0, r3
 801374c:	f004 ff16 	bl	801857c <TFT_DrawFlash>
		}

		oldstat[gpio] = status;
 8013750:	4909      	ldr	r1, [pc, #36]	; (8013778 <draw_statbutton+0x110>)
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 801375a:	bf00      	nop
 801375c:	3730      	adds	r7, #48	; 0x30
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
 8013762:	bf00      	nop
 8013764:	08026b44 	.word	0x08026b44
 8013768:	08026b50 	.word	0x08026b50
 801376c:	08026b58 	.word	0x08026b58
 8013770:	08026b60 	.word	0x08026b60
 8013774:	20000c2c 	.word	0x20000c2c
 8013778:	20002708 	.word	0x20002708
 801377c:	2000498c 	.word	0x2000498c

08013780 <draw_values_status>:

void draw_values_status()
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b086      	sub	sp, #24
 8013784:	af02      	add	r7, sp, #8
	int x = 20;
 8013786:	2314      	movs	r3, #20
 8013788:	60fb      	str	r3, [r7, #12]
	int y = 45;
 801378a:	232d      	movs	r3, #45	; 0x2d
 801378c:	60bb      	str	r3, [r7, #8]
	int linespace = 28;
 801378e:	231c      	movs	r3, #28
 8013790:	607b      	str	r3, [r7, #4]

	draw_statbutton(SW_ONOFF,x,y,0,0);	y += linespace;
 8013792:	2300      	movs	r3, #0
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	2300      	movs	r3, #0
 8013798:	68ba      	ldr	r2, [r7, #8]
 801379a:	68f9      	ldr	r1, [r7, #12]
 801379c:	2002      	movs	r0, #2
 801379e:	f7ff ff63 	bl	8013668 <draw_statbutton>
 80137a2:	68ba      	ldr	r2, [r7, #8]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	4413      	add	r3, r2
 80137a8:	60bb      	str	r3, [r7, #8]
	draw_statbutton(SW_RESET,x,y,0,0);	y += linespace;
 80137aa:	2300      	movs	r3, #0
 80137ac:	9300      	str	r3, [sp, #0]
 80137ae:	2300      	movs	r3, #0
 80137b0:	68ba      	ldr	r2, [r7, #8]
 80137b2:	68f9      	ldr	r1, [r7, #12]
 80137b4:	2000      	movs	r0, #0
 80137b6:	f7ff ff57 	bl	8013668 <draw_statbutton>
 80137ba:	68ba      	ldr	r2, [r7, #8]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	4413      	add	r3, r2
 80137c0:	60bb      	str	r3, [r7, #8]
	if(pcfgdata->systemMode == 0)
 80137c2:	4b9b      	ldr	r3, [pc, #620]	; (8013a30 <draw_values_status+0x2b0>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	f040 8084 	bne.w	80138d8 <draw_values_status+0x158>
	{
		draw_statbutton(SW_STANDBY,x,y,0,0);	y += linespace;
 80137d0:	2300      	movs	r3, #0
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	2300      	movs	r3, #0
 80137d6:	68ba      	ldr	r2, [r7, #8]
 80137d8:	68f9      	ldr	r1, [r7, #12]
 80137da:	2001      	movs	r0, #1
 80137dc:	f7ff ff44 	bl	8013668 <draw_statbutton>
 80137e0:	68ba      	ldr	r2, [r7, #8]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4413      	add	r3, r2
 80137e6:	60bb      	str	r3, [r7, #8]
		draw_statbutton(PTTIN,x,y,0,0);	y += linespace;
 80137e8:	2300      	movs	r3, #0
 80137ea:	9300      	str	r3, [sp, #0]
 80137ec:	2300      	movs	r3, #0
 80137ee:	68ba      	ldr	r2, [r7, #8]
 80137f0:	68f9      	ldr	r1, [r7, #12]
 80137f2:	200c      	movs	r0, #12
 80137f4:	f7ff ff38 	bl	8013668 <draw_statbutton>
 80137f8:	68ba      	ldr	r2, [r7, #8]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4413      	add	r3, r2
 80137fe:	60bb      	str	r3, [r7, #8]
		draw_statbutton(TKEY,x,y,0,0);	y += linespace;
 8013800:	2300      	movs	r3, #0
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	2300      	movs	r3, #0
 8013806:	68ba      	ldr	r2, [r7, #8]
 8013808:	68f9      	ldr	r1, [r7, #12]
 801380a:	200b      	movs	r0, #11
 801380c:	f7ff ff2c 	bl	8013668 <draw_statbutton>
 8013810:	68ba      	ldr	r2, [r7, #8]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4413      	add	r3, r2
 8013816:	60bb      	str	r3, [r7, #8]
		draw_statbutton(ROTS_B1,x,y,0,0);	y += linespace;
 8013818:	2300      	movs	r3, #0
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	2300      	movs	r3, #0
 801381e:	68ba      	ldr	r2, [r7, #8]
 8013820:	68f9      	ldr	r1, [r7, #12]
 8013822:	2003      	movs	r0, #3
 8013824:	f7ff ff20 	bl	8013668 <draw_statbutton>
 8013828:	68ba      	ldr	r2, [r7, #8]
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	4413      	add	r3, r2
 801382e:	60bb      	str	r3, [r7, #8]
		draw_statbutton(ROTS_B2,x,y,0,0);	y += linespace;
 8013830:	2300      	movs	r3, #0
 8013832:	9300      	str	r3, [sp, #0]
 8013834:	2300      	movs	r3, #0
 8013836:	68ba      	ldr	r2, [r7, #8]
 8013838:	68f9      	ldr	r1, [r7, #12]
 801383a:	2004      	movs	r0, #4
 801383c:	f7ff ff14 	bl	8013668 <draw_statbutton>
 8013840:	68ba      	ldr	r2, [r7, #8]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4413      	add	r3, r2
 8013846:	60bb      	str	r3, [r7, #8]
		draw_statbutton(ROTS_B3,x,y,0,0);	y += linespace;
 8013848:	2300      	movs	r3, #0
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	2300      	movs	r3, #0
 801384e:	68ba      	ldr	r2, [r7, #8]
 8013850:	68f9      	ldr	r1, [r7, #12]
 8013852:	2005      	movs	r0, #5
 8013854:	f7ff ff08 	bl	8013668 <draw_statbutton>
 8013858:	68ba      	ldr	r2, [r7, #8]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4413      	add	r3, r2
 801385e:	60bb      	str	r3, [r7, #8]
		draw_statbutton(ROTS_B4,x,y,0,0);	y += linespace;
 8013860:	2300      	movs	r3, #0
 8013862:	9300      	str	r3, [sp, #0]
 8013864:	2300      	movs	r3, #0
 8013866:	68ba      	ldr	r2, [r7, #8]
 8013868:	68f9      	ldr	r1, [r7, #12]
 801386a:	2006      	movs	r0, #6
 801386c:	f7ff fefc 	bl	8013668 <draw_statbutton>
 8013870:	68ba      	ldr	r2, [r7, #8]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	4413      	add	r3, r2
 8013876:	60bb      	str	r3, [r7, #8]
		draw_statbutton(ROTS_B5,x,y,0,0);	y += linespace;
 8013878:	2300      	movs	r3, #0
 801387a:	9300      	str	r3, [sp, #0]
 801387c:	2300      	movs	r3, #0
 801387e:	68ba      	ldr	r2, [r7, #8]
 8013880:	68f9      	ldr	r1, [r7, #12]
 8013882:	2007      	movs	r0, #7
 8013884:	f7ff fef0 	bl	8013668 <draw_statbutton>
 8013888:	68ba      	ldr	r2, [r7, #8]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	4413      	add	r3, r2
 801388e:	60bb      	str	r3, [r7, #8]
		draw_statbutton(ROTS_B6,x,y,0,0);	y += linespace;
 8013890:	2300      	movs	r3, #0
 8013892:	9300      	str	r3, [sp, #0]
 8013894:	2300      	movs	r3, #0
 8013896:	68ba      	ldr	r2, [r7, #8]
 8013898:	68f9      	ldr	r1, [r7, #12]
 801389a:	2008      	movs	r0, #8
 801389c:	f7ff fee4 	bl	8013668 <draw_statbutton>
 80138a0:	68ba      	ldr	r2, [r7, #8]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	4413      	add	r3, r2
 80138a6:	60bb      	str	r3, [r7, #8]
		draw_statbutton(ROTS_B7,x,y,0,0);	y += linespace;
 80138a8:	2300      	movs	r3, #0
 80138aa:	9300      	str	r3, [sp, #0]
 80138ac:	2300      	movs	r3, #0
 80138ae:	68ba      	ldr	r2, [r7, #8]
 80138b0:	68f9      	ldr	r1, [r7, #12]
 80138b2:	2009      	movs	r0, #9
 80138b4:	f7ff fed8 	bl	8013668 <draw_statbutton>
 80138b8:	68ba      	ldr	r2, [r7, #8]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4413      	add	r3, r2
 80138be:	60bb      	str	r3, [r7, #8]
		draw_statbutton(ROTS_AUTO,x,y,0,0);	y += linespace;
 80138c0:	2300      	movs	r3, #0
 80138c2:	9300      	str	r3, [sp, #0]
 80138c4:	2300      	movs	r3, #0
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	68f9      	ldr	r1, [r7, #12]
 80138ca:	200a      	movs	r0, #10
 80138cc:	f7ff fecc 	bl	8013668 <draw_statbutton>
 80138d0:	68ba      	ldr	r2, [r7, #8]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	4413      	add	r3, r2
 80138d6:	60bb      	str	r3, [r7, #8]
	}

	x = 370;
 80138d8:	f44f 73b9 	mov.w	r3, #370	; 0x172
 80138dc:	60fb      	str	r3, [r7, #12]
	y = 45;
 80138de:	232d      	movs	r3, #45	; 0x2d
 80138e0:	60bb      	str	r3, [r7, #8]

	draw_statbutton(ANTSEL1,x,y,1,0);	y += linespace;
 80138e2:	2300      	movs	r3, #0
 80138e4:	9300      	str	r3, [sp, #0]
 80138e6:	2301      	movs	r3, #1
 80138e8:	68ba      	ldr	r2, [r7, #8]
 80138ea:	68f9      	ldr	r1, [r7, #12]
 80138ec:	200e      	movs	r0, #14
 80138ee:	f7ff febb 	bl	8013668 <draw_statbutton>
 80138f2:	68ba      	ldr	r2, [r7, #8]
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	4413      	add	r3, r2
 80138f8:	60bb      	str	r3, [r7, #8]
	draw_statbutton(ANTSEL2,x,y,1,0);	y += linespace;
 80138fa:	2300      	movs	r3, #0
 80138fc:	9300      	str	r3, [sp, #0]
 80138fe:	2301      	movs	r3, #1
 8013900:	68ba      	ldr	r2, [r7, #8]
 8013902:	68f9      	ldr	r1, [r7, #12]
 8013904:	200f      	movs	r0, #15
 8013906:	f7ff feaf 	bl	8013668 <draw_statbutton>
 801390a:	68ba      	ldr	r2, [r7, #8]
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4413      	add	r3, r2
 8013910:	60bb      	str	r3, [r7, #8]
	draw_statbutton(PWRREL_OFF,x,y,1,0);	y += linespace;
 8013912:	2300      	movs	r3, #0
 8013914:	9300      	str	r3, [sp, #0]
 8013916:	2301      	movs	r3, #1
 8013918:	68ba      	ldr	r2, [r7, #8]
 801391a:	68f9      	ldr	r1, [r7, #12]
 801391c:	2010      	movs	r0, #16
 801391e:	f7ff fea3 	bl	8013668 <draw_statbutton>
 8013922:	68ba      	ldr	r2, [r7, #8]
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	4413      	add	r3, r2
 8013928:	60bb      	str	r3, [r7, #8]
	draw_statbutton(PWRREL_ON,x,y,1,0);	y += linespace;
 801392a:	2300      	movs	r3, #0
 801392c:	9300      	str	r3, [sp, #0]
 801392e:	2301      	movs	r3, #1
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	68f9      	ldr	r1, [r7, #12]
 8013934:	2011      	movs	r0, #17
 8013936:	f7ff fe97 	bl	8013668 <draw_statbutton>
 801393a:	68ba      	ldr	r2, [r7, #8]
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	4413      	add	r3, r2
 8013940:	60bb      	str	r3, [r7, #8]
	draw_statbutton(FAN_ONOFF,x,y,1,0);	y += linespace;
 8013942:	2300      	movs	r3, #0
 8013944:	9300      	str	r3, [sp, #0]
 8013946:	2301      	movs	r3, #1
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	68f9      	ldr	r1, [r7, #12]
 801394c:	2012      	movs	r0, #18
 801394e:	f7ff fe8b 	bl	8013668 <draw_statbutton>
 8013952:	68ba      	ldr	r2, [r7, #8]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	4413      	add	r3, r2
 8013958:	60bb      	str	r3, [r7, #8]
	if(pcfgdata->systemMode == 0)
 801395a:	4b35      	ldr	r3, [pc, #212]	; (8013a30 <draw_values_status+0x2b0>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013962:	2b00      	cmp	r3, #0
 8013964:	d15f      	bne.n	8013a26 <draw_values_status+0x2a6>
	{
		draw_statbutton(BIAS_ONOFF,x,y,1,0);	y += linespace;
 8013966:	2300      	movs	r3, #0
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	2301      	movs	r3, #1
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	68f9      	ldr	r1, [r7, #12]
 8013970:	2013      	movs	r0, #19
 8013972:	f7ff fe79 	bl	8013668 <draw_statbutton>
 8013976:	68ba      	ldr	r2, [r7, #8]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	4413      	add	r3, r2
 801397c:	60bb      	str	r3, [r7, #8]
		draw_statbutton(PTTOUT,x,y,1,0);	y += linespace;
 801397e:	2300      	movs	r3, #0
 8013980:	9300      	str	r3, [sp, #0]
 8013982:	2301      	movs	r3, #1
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	68f9      	ldr	r1, [r7, #12]
 8013988:	2014      	movs	r0, #20
 801398a:	f7ff fe6d 	bl	8013668 <draw_statbutton>
 801398e:	68ba      	ldr	r2, [r7, #8]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	4413      	add	r3, r2
 8013994:	60bb      	str	r3, [r7, #8]
		draw_statbutton(BANDREL_1,x,y,1,0);	y += linespace;
 8013996:	2300      	movs	r3, #0
 8013998:	9300      	str	r3, [sp, #0]
 801399a:	2301      	movs	r3, #1
 801399c:	68ba      	ldr	r2, [r7, #8]
 801399e:	68f9      	ldr	r1, [r7, #12]
 80139a0:	2015      	movs	r0, #21
 80139a2:	f7ff fe61 	bl	8013668 <draw_statbutton>
 80139a6:	68ba      	ldr	r2, [r7, #8]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	4413      	add	r3, r2
 80139ac:	60bb      	str	r3, [r7, #8]
		draw_statbutton(BANDREL_2,x,y,1,0);	y += linespace;
 80139ae:	2300      	movs	r3, #0
 80139b0:	9300      	str	r3, [sp, #0]
 80139b2:	2301      	movs	r3, #1
 80139b4:	68ba      	ldr	r2, [r7, #8]
 80139b6:	68f9      	ldr	r1, [r7, #12]
 80139b8:	2016      	movs	r0, #22
 80139ba:	f7ff fe55 	bl	8013668 <draw_statbutton>
 80139be:	68ba      	ldr	r2, [r7, #8]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	4413      	add	r3, r2
 80139c4:	60bb      	str	r3, [r7, #8]
		draw_statbutton(BANDREL_3,x,y,1,0);	y += linespace;
 80139c6:	2300      	movs	r3, #0
 80139c8:	9300      	str	r3, [sp, #0]
 80139ca:	2301      	movs	r3, #1
 80139cc:	68ba      	ldr	r2, [r7, #8]
 80139ce:	68f9      	ldr	r1, [r7, #12]
 80139d0:	2017      	movs	r0, #23
 80139d2:	f7ff fe49 	bl	8013668 <draw_statbutton>
 80139d6:	68ba      	ldr	r2, [r7, #8]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	4413      	add	r3, r2
 80139dc:	60bb      	str	r3, [r7, #8]
		draw_statbutton(BANDREL_4,x,y,1,0);	y += linespace;
 80139de:	2300      	movs	r3, #0
 80139e0:	9300      	str	r3, [sp, #0]
 80139e2:	2301      	movs	r3, #1
 80139e4:	68ba      	ldr	r2, [r7, #8]
 80139e6:	68f9      	ldr	r1, [r7, #12]
 80139e8:	2018      	movs	r0, #24
 80139ea:	f7ff fe3d 	bl	8013668 <draw_statbutton>
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	4413      	add	r3, r2
 80139f4:	60bb      	str	r3, [r7, #8]
		draw_statbutton(BANDREL_5,x,y,1,0);	y += linespace;
 80139f6:	2300      	movs	r3, #0
 80139f8:	9300      	str	r3, [sp, #0]
 80139fa:	2301      	movs	r3, #1
 80139fc:	68ba      	ldr	r2, [r7, #8]
 80139fe:	68f9      	ldr	r1, [r7, #12]
 8013a00:	2019      	movs	r0, #25
 8013a02:	f7ff fe31 	bl	8013668 <draw_statbutton>
 8013a06:	68ba      	ldr	r2, [r7, #8]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	4413      	add	r3, r2
 8013a0c:	60bb      	str	r3, [r7, #8]
		draw_statbutton(BANDREL_6,x,y,1,0);	y += linespace;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	9300      	str	r3, [sp, #0]
 8013a12:	2301      	movs	r3, #1
 8013a14:	68ba      	ldr	r2, [r7, #8]
 8013a16:	68f9      	ldr	r1, [r7, #12]
 8013a18:	201a      	movs	r0, #26
 8013a1a:	f7ff fe25 	bl	8013668 <draw_statbutton>
 8013a1e:	68ba      	ldr	r2, [r7, #8]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	4413      	add	r3, r2
 8013a24:	60bb      	str	r3, [r7, #8]
	}
}
 8013a26:	bf00      	nop
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	20000bf0 	.word	0x20000bf0

08013a34 <switch_outputs>:

void switch_outputs(int x, int y)
{
 8013a34:	b480      	push	{r7}
 8013a36:	b085      	sub	sp, #20
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	6039      	str	r1, [r7, #0]
	int line = 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	60fb      	str	r3, [r7, #12]
	int col = 0;
 8013a42:	2300      	movs	r3, #0
 8013a44:	60bb      	str	r3, [r7, #8]
	static int switchbut_pressed = 0;

	if(x == -1 && y == -1)
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a4c:	d107      	bne.n	8013a5e <switch_outputs+0x2a>
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a54:	d103      	bne.n	8013a5e <switch_outputs+0x2a>
	{
		// nichts ist gedrückt
		switchbut_pressed = 0;
 8013a56:	4b79      	ldr	r3, [pc, #484]	; (8013c3c <switch_outputs+0x208>)
 8013a58:	2200      	movs	r2, #0
 8013a5a:	601a      	str	r2, [r3, #0]
		return;
 8013a5c:	e0e8      	b.n	8013c30 <switch_outputs+0x1fc>
	}

	if(switchbut_pressed == 1) return;	// es ist bereits gedrückt
 8013a5e:	4b77      	ldr	r3, [pc, #476]	; (8013c3c <switch_outputs+0x208>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b01      	cmp	r3, #1
 8013a64:	f000 80e3 	beq.w	8013c2e <switch_outputs+0x1fa>

	// hier neuer Druck
	switchbut_pressed = 1;
 8013a68:	4b74      	ldr	r3, [pc, #464]	; (8013c3c <switch_outputs+0x208>)
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	601a      	str	r2, [r3, #0]

	for(line=0; line<7; line++)
 8013a6e:	2300      	movs	r3, #0
 8013a70:	60fb      	str	r3, [r7, #12]
 8013a72:	e00a      	b.n	8013a8a <switch_outputs+0x56>
	{
		if(y < (line*SWITCH_LINESPACE+SWITCH_YSTART*2))
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	2246      	movs	r2, #70	; 0x46
 8013a78:	fb02 f303 	mul.w	r3, r2, r3
 8013a7c:	3364      	adds	r3, #100	; 0x64
 8013a7e:	683a      	ldr	r2, [r7, #0]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	db06      	blt.n	8013a92 <switch_outputs+0x5e>
	for(line=0; line<7; line++)
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	3301      	adds	r3, #1
 8013a88:	60fb      	str	r3, [r7, #12]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2b06      	cmp	r3, #6
 8013a8e:	ddf1      	ble.n	8013a74 <switch_outputs+0x40>
 8013a90:	e000      	b.n	8013a94 <switch_outputs+0x60>
			break;
 8013a92:	bf00      	nop
	}

	if(x > SWITCH_XROW2) col = 1;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013a9a:	dd01      	ble.n	8013aa0 <switch_outputs+0x6c>
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	60bb      	str	r3, [r7, #8]
	if(x > SWITCH_XROW3) col = 2;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8013aa6:	dd01      	ble.n	8013aac <switch_outputs+0x78>
 8013aa8:	2302      	movs	r3, #2
 8013aaa:	60bb      	str	r3, [r7, #8]

	if(col == 0)
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d148      	bne.n	8013b44 <switch_outputs+0x110>
	{
		switch (line)
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2b04      	cmp	r3, #4
 8013ab6:	f200 80bb 	bhi.w	8013c30 <switch_outputs+0x1fc>
 8013aba:	a201      	add	r2, pc, #4	; (adr r2, 8013ac0 <switch_outputs+0x8c>)
 8013abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac0:	08013ad5 	.word	0x08013ad5
 8013ac4:	08013aeb 	.word	0x08013aeb
 8013ac8:	08013b01 	.word	0x08013b01
 8013acc:	08013b17 	.word	0x08013b17
 8013ad0:	08013b2d 	.word	0x08013b2d
		{
		case 0: gpio_stat[ANTSEL1] = (gpio_stat[ANTSEL1]?0:1); break;
 8013ad4:	4b5a      	ldr	r3, [pc, #360]	; (8013c40 <switch_outputs+0x20c>)
 8013ad6:	7b9b      	ldrb	r3, [r3, #14]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	bf0c      	ite	eq
 8013adc:	2301      	moveq	r3, #1
 8013ade:	2300      	movne	r3, #0
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	4b56      	ldr	r3, [pc, #344]	; (8013c40 <switch_outputs+0x20c>)
 8013ae6:	739a      	strb	r2, [r3, #14]
 8013ae8:	e0a2      	b.n	8013c30 <switch_outputs+0x1fc>
		case 1: gpio_stat[ANTSEL2] = (gpio_stat[ANTSEL2]?0:1); break;
 8013aea:	4b55      	ldr	r3, [pc, #340]	; (8013c40 <switch_outputs+0x20c>)
 8013aec:	7bdb      	ldrb	r3, [r3, #15]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	bf0c      	ite	eq
 8013af2:	2301      	moveq	r3, #1
 8013af4:	2300      	movne	r3, #0
 8013af6:	b2db      	uxtb	r3, r3
 8013af8:	461a      	mov	r2, r3
 8013afa:	4b51      	ldr	r3, [pc, #324]	; (8013c40 <switch_outputs+0x20c>)
 8013afc:	73da      	strb	r2, [r3, #15]
 8013afe:	e097      	b.n	8013c30 <switch_outputs+0x1fc>
		case 2: gpio_stat[PWRREL_OFF] = (gpio_stat[PWRREL_OFF]?0:1); break;
 8013b00:	4b4f      	ldr	r3, [pc, #316]	; (8013c40 <switch_outputs+0x20c>)
 8013b02:	7c1b      	ldrb	r3, [r3, #16]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	bf0c      	ite	eq
 8013b08:	2301      	moveq	r3, #1
 8013b0a:	2300      	movne	r3, #0
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	461a      	mov	r2, r3
 8013b10:	4b4b      	ldr	r3, [pc, #300]	; (8013c40 <switch_outputs+0x20c>)
 8013b12:	741a      	strb	r2, [r3, #16]
 8013b14:	e08c      	b.n	8013c30 <switch_outputs+0x1fc>
		case 3: gpio_stat[PWRREL_ON] = (gpio_stat[PWRREL_ON]?0:1); break;
 8013b16:	4b4a      	ldr	r3, [pc, #296]	; (8013c40 <switch_outputs+0x20c>)
 8013b18:	7c5b      	ldrb	r3, [r3, #17]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	bf0c      	ite	eq
 8013b1e:	2301      	moveq	r3, #1
 8013b20:	2300      	movne	r3, #0
 8013b22:	b2db      	uxtb	r3, r3
 8013b24:	461a      	mov	r2, r3
 8013b26:	4b46      	ldr	r3, [pc, #280]	; (8013c40 <switch_outputs+0x20c>)
 8013b28:	745a      	strb	r2, [r3, #17]
 8013b2a:	e081      	b.n	8013c30 <switch_outputs+0x1fc>
		case 4: gpio_stat[FAN_ONOFF] = (gpio_stat[FAN_ONOFF]?0:1); break;
 8013b2c:	4b44      	ldr	r3, [pc, #272]	; (8013c40 <switch_outputs+0x20c>)
 8013b2e:	7c9b      	ldrb	r3, [r3, #18]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	bf0c      	ite	eq
 8013b34:	2301      	moveq	r3, #1
 8013b36:	2300      	movne	r3, #0
 8013b38:	b2db      	uxtb	r3, r3
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	4b40      	ldr	r3, [pc, #256]	; (8013c40 <switch_outputs+0x20c>)
 8013b3e:	749a      	strb	r2, [r3, #18]
 8013b40:	bf00      	nop
 8013b42:	e075      	b.n	8013c30 <switch_outputs+0x1fc>
		}
	}
	else if(col == 1)
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	2b01      	cmp	r3, #1
 8013b48:	d148      	bne.n	8013bdc <switch_outputs+0x1a8>
	{
		switch (line)
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2b04      	cmp	r3, #4
 8013b4e:	d86f      	bhi.n	8013c30 <switch_outputs+0x1fc>
 8013b50:	a201      	add	r2, pc, #4	; (adr r2, 8013b58 <switch_outputs+0x124>)
 8013b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b56:	bf00      	nop
 8013b58:	08013b6d 	.word	0x08013b6d
 8013b5c:	08013b83 	.word	0x08013b83
 8013b60:	08013b99 	.word	0x08013b99
 8013b64:	08013baf 	.word	0x08013baf
 8013b68:	08013bc5 	.word	0x08013bc5
		{
		case 0: gpio_stat[BIAS_ONOFF] = (gpio_stat[BIAS_ONOFF]?0:1); break;
 8013b6c:	4b34      	ldr	r3, [pc, #208]	; (8013c40 <switch_outputs+0x20c>)
 8013b6e:	7cdb      	ldrb	r3, [r3, #19]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	bf0c      	ite	eq
 8013b74:	2301      	moveq	r3, #1
 8013b76:	2300      	movne	r3, #0
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	4b30      	ldr	r3, [pc, #192]	; (8013c40 <switch_outputs+0x20c>)
 8013b7e:	74da      	strb	r2, [r3, #19]
 8013b80:	e056      	b.n	8013c30 <switch_outputs+0x1fc>
		case 1: gpio_stat[PTTOUT] = (gpio_stat[PTTOUT]?0:1); break;
 8013b82:	4b2f      	ldr	r3, [pc, #188]	; (8013c40 <switch_outputs+0x20c>)
 8013b84:	7d1b      	ldrb	r3, [r3, #20]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	bf0c      	ite	eq
 8013b8a:	2301      	moveq	r3, #1
 8013b8c:	2300      	movne	r3, #0
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	461a      	mov	r2, r3
 8013b92:	4b2b      	ldr	r3, [pc, #172]	; (8013c40 <switch_outputs+0x20c>)
 8013b94:	751a      	strb	r2, [r3, #20]
 8013b96:	e04b      	b.n	8013c30 <switch_outputs+0x1fc>
		case 2: gpio_stat[BANDREL_1] = (gpio_stat[BANDREL_1]?0:1); break;
 8013b98:	4b29      	ldr	r3, [pc, #164]	; (8013c40 <switch_outputs+0x20c>)
 8013b9a:	7d5b      	ldrb	r3, [r3, #21]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	bf0c      	ite	eq
 8013ba0:	2301      	moveq	r3, #1
 8013ba2:	2300      	movne	r3, #0
 8013ba4:	b2db      	uxtb	r3, r3
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	4b25      	ldr	r3, [pc, #148]	; (8013c40 <switch_outputs+0x20c>)
 8013baa:	755a      	strb	r2, [r3, #21]
 8013bac:	e040      	b.n	8013c30 <switch_outputs+0x1fc>
		case 3: gpio_stat[BANDREL_2] = (gpio_stat[BANDREL_2]?0:1); break;
 8013bae:	4b24      	ldr	r3, [pc, #144]	; (8013c40 <switch_outputs+0x20c>)
 8013bb0:	7d9b      	ldrb	r3, [r3, #22]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	bf0c      	ite	eq
 8013bb6:	2301      	moveq	r3, #1
 8013bb8:	2300      	movne	r3, #0
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	4b20      	ldr	r3, [pc, #128]	; (8013c40 <switch_outputs+0x20c>)
 8013bc0:	759a      	strb	r2, [r3, #22]
 8013bc2:	e035      	b.n	8013c30 <switch_outputs+0x1fc>
		case 4: gpio_stat[BANDREL_3] = (gpio_stat[BANDREL_3]?0:1); break;
 8013bc4:	4b1e      	ldr	r3, [pc, #120]	; (8013c40 <switch_outputs+0x20c>)
 8013bc6:	7ddb      	ldrb	r3, [r3, #23]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	bf0c      	ite	eq
 8013bcc:	2301      	moveq	r3, #1
 8013bce:	2300      	movne	r3, #0
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	4b1a      	ldr	r3, [pc, #104]	; (8013c40 <switch_outputs+0x20c>)
 8013bd6:	75da      	strb	r2, [r3, #23]
 8013bd8:	bf00      	nop
 8013bda:	e029      	b.n	8013c30 <switch_outputs+0x1fc>
		}
	}
	else
	{
		switch (line)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2b01      	cmp	r3, #1
 8013be0:	d00e      	beq.n	8013c00 <switch_outputs+0x1cc>
 8013be2:	2b02      	cmp	r3, #2
 8013be4:	d017      	beq.n	8013c16 <switch_outputs+0x1e2>
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d122      	bne.n	8013c30 <switch_outputs+0x1fc>
		{
		case 0: gpio_stat[BANDREL_4] = (gpio_stat[BANDREL_4]?0:1); break;
 8013bea:	4b15      	ldr	r3, [pc, #84]	; (8013c40 <switch_outputs+0x20c>)
 8013bec:	7e1b      	ldrb	r3, [r3, #24]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	bf0c      	ite	eq
 8013bf2:	2301      	moveq	r3, #1
 8013bf4:	2300      	movne	r3, #0
 8013bf6:	b2db      	uxtb	r3, r3
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	4b11      	ldr	r3, [pc, #68]	; (8013c40 <switch_outputs+0x20c>)
 8013bfc:	761a      	strb	r2, [r3, #24]
 8013bfe:	e017      	b.n	8013c30 <switch_outputs+0x1fc>
		case 1: gpio_stat[BANDREL_5] = (gpio_stat[BANDREL_5]?0:1); break;
 8013c00:	4b0f      	ldr	r3, [pc, #60]	; (8013c40 <switch_outputs+0x20c>)
 8013c02:	7e5b      	ldrb	r3, [r3, #25]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	bf0c      	ite	eq
 8013c08:	2301      	moveq	r3, #1
 8013c0a:	2300      	movne	r3, #0
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	461a      	mov	r2, r3
 8013c10:	4b0b      	ldr	r3, [pc, #44]	; (8013c40 <switch_outputs+0x20c>)
 8013c12:	765a      	strb	r2, [r3, #25]
 8013c14:	e00c      	b.n	8013c30 <switch_outputs+0x1fc>
		case 2: gpio_stat[BANDREL_6] = (gpio_stat[BANDREL_6]?0:1); break;
 8013c16:	4b0a      	ldr	r3, [pc, #40]	; (8013c40 <switch_outputs+0x20c>)
 8013c18:	7e9b      	ldrb	r3, [r3, #26]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	bf0c      	ite	eq
 8013c1e:	2301      	moveq	r3, #1
 8013c20:	2300      	movne	r3, #0
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	461a      	mov	r2, r3
 8013c26:	4b06      	ldr	r3, [pc, #24]	; (8013c40 <switch_outputs+0x20c>)
 8013c28:	769a      	strb	r2, [r3, #26]
 8013c2a:	bf00      	nop
 8013c2c:	e000      	b.n	8013c30 <switch_outputs+0x1fc>
	if(switchbut_pressed == 1) return;	// es ist bereits gedrückt
 8013c2e:	bf00      	nop
		}
	}
}
 8013c30:	3714      	adds	r7, #20
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop
 8013c3c:	20002774 	.word	0x20002774
 8013c40:	2000498c 	.word	0x2000498c

08013c44 <draw_values_switch>:

void draw_values_switch()
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af02      	add	r7, sp, #8
	int x = SWITCH_XROW1;
 8013c4a:	2314      	movs	r3, #20
 8013c4c:	607b      	str	r3, [r7, #4]
	int y = SWITCH_YSTART;
 8013c4e:	2332      	movs	r3, #50	; 0x32
 8013c50:	603b      	str	r3, [r7, #0]

	draw_statbutton(ANTSEL1,x,y,1,1);	y += SWITCH_LINESPACE;
 8013c52:	2301      	movs	r3, #1
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	2301      	movs	r3, #1
 8013c58:	683a      	ldr	r2, [r7, #0]
 8013c5a:	6879      	ldr	r1, [r7, #4]
 8013c5c:	200e      	movs	r0, #14
 8013c5e:	f7ff fd03 	bl	8013668 <draw_statbutton>
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	3346      	adds	r3, #70	; 0x46
 8013c66:	603b      	str	r3, [r7, #0]
	draw_statbutton(ANTSEL2,x,y,1,1);	y += SWITCH_LINESPACE;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	683a      	ldr	r2, [r7, #0]
 8013c70:	6879      	ldr	r1, [r7, #4]
 8013c72:	200f      	movs	r0, #15
 8013c74:	f7ff fcf8 	bl	8013668 <draw_statbutton>
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	3346      	adds	r3, #70	; 0x46
 8013c7c:	603b      	str	r3, [r7, #0]
	draw_statbutton(PWRREL_OFF,x,y,1,1);	y += SWITCH_LINESPACE;
 8013c7e:	2301      	movs	r3, #1
 8013c80:	9300      	str	r3, [sp, #0]
 8013c82:	2301      	movs	r3, #1
 8013c84:	683a      	ldr	r2, [r7, #0]
 8013c86:	6879      	ldr	r1, [r7, #4]
 8013c88:	2010      	movs	r0, #16
 8013c8a:	f7ff fced 	bl	8013668 <draw_statbutton>
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	3346      	adds	r3, #70	; 0x46
 8013c92:	603b      	str	r3, [r7, #0]
	draw_statbutton(PWRREL_ON,x,y,1,10);	y += SWITCH_LINESPACE;
 8013c94:	230a      	movs	r3, #10
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	2301      	movs	r3, #1
 8013c9a:	683a      	ldr	r2, [r7, #0]
 8013c9c:	6879      	ldr	r1, [r7, #4]
 8013c9e:	2011      	movs	r0, #17
 8013ca0:	f7ff fce2 	bl	8013668 <draw_statbutton>
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	3346      	adds	r3, #70	; 0x46
 8013ca8:	603b      	str	r3, [r7, #0]
	draw_statbutton(FAN_ONOFF,x,y,1,1);	y += SWITCH_LINESPACE;
 8013caa:	2301      	movs	r3, #1
 8013cac:	9300      	str	r3, [sp, #0]
 8013cae:	2301      	movs	r3, #1
 8013cb0:	683a      	ldr	r2, [r7, #0]
 8013cb2:	6879      	ldr	r1, [r7, #4]
 8013cb4:	2012      	movs	r0, #18
 8013cb6:	f7ff fcd7 	bl	8013668 <draw_statbutton>
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	3346      	adds	r3, #70	; 0x46
 8013cbe:	603b      	str	r3, [r7, #0]

	if(pcfgdata->systemMode == 0)
 8013cc0:	4b35      	ldr	r3, [pc, #212]	; (8013d98 <draw_values_switch+0x154>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d161      	bne.n	8013d90 <draw_values_switch+0x14c>
	{
		x = SWITCH_XROW2;
 8013ccc:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8013cd0:	607b      	str	r3, [r7, #4]
		y = SWITCH_YSTART;
 8013cd2:	2332      	movs	r3, #50	; 0x32
 8013cd4:	603b      	str	r3, [r7, #0]

		draw_statbutton(BIAS_ONOFF,x,y,1,1);	y += SWITCH_LINESPACE;
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	2301      	movs	r3, #1
 8013cdc:	683a      	ldr	r2, [r7, #0]
 8013cde:	6879      	ldr	r1, [r7, #4]
 8013ce0:	2013      	movs	r0, #19
 8013ce2:	f7ff fcc1 	bl	8013668 <draw_statbutton>
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	3346      	adds	r3, #70	; 0x46
 8013cea:	603b      	str	r3, [r7, #0]
		draw_statbutton(PTTOUT,x,y,1,1);	y += SWITCH_LINESPACE;
 8013cec:	2301      	movs	r3, #1
 8013cee:	9300      	str	r3, [sp, #0]
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	683a      	ldr	r2, [r7, #0]
 8013cf4:	6879      	ldr	r1, [r7, #4]
 8013cf6:	2014      	movs	r0, #20
 8013cf8:	f7ff fcb6 	bl	8013668 <draw_statbutton>
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	3346      	adds	r3, #70	; 0x46
 8013d00:	603b      	str	r3, [r7, #0]
		draw_statbutton(BANDREL_1,x,y,1,1);	y += SWITCH_LINESPACE;
 8013d02:	2301      	movs	r3, #1
 8013d04:	9300      	str	r3, [sp, #0]
 8013d06:	2301      	movs	r3, #1
 8013d08:	683a      	ldr	r2, [r7, #0]
 8013d0a:	6879      	ldr	r1, [r7, #4]
 8013d0c:	2015      	movs	r0, #21
 8013d0e:	f7ff fcab 	bl	8013668 <draw_statbutton>
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	3346      	adds	r3, #70	; 0x46
 8013d16:	603b      	str	r3, [r7, #0]
		draw_statbutton(BANDREL_2,x,y,1,1);	y += SWITCH_LINESPACE;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	9300      	str	r3, [sp, #0]
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	683a      	ldr	r2, [r7, #0]
 8013d20:	6879      	ldr	r1, [r7, #4]
 8013d22:	2016      	movs	r0, #22
 8013d24:	f7ff fca0 	bl	8013668 <draw_statbutton>
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	3346      	adds	r3, #70	; 0x46
 8013d2c:	603b      	str	r3, [r7, #0]
		draw_statbutton(BANDREL_3,x,y,1,1);	y += SWITCH_LINESPACE;
 8013d2e:	2301      	movs	r3, #1
 8013d30:	9300      	str	r3, [sp, #0]
 8013d32:	2301      	movs	r3, #1
 8013d34:	683a      	ldr	r2, [r7, #0]
 8013d36:	6879      	ldr	r1, [r7, #4]
 8013d38:	2017      	movs	r0, #23
 8013d3a:	f7ff fc95 	bl	8013668 <draw_statbutton>
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	3346      	adds	r3, #70	; 0x46
 8013d42:	603b      	str	r3, [r7, #0]


		x = SWITCH_XROW3;
 8013d44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013d48:	607b      	str	r3, [r7, #4]
		y = SWITCH_YSTART;
 8013d4a:	2332      	movs	r3, #50	; 0x32
 8013d4c:	603b      	str	r3, [r7, #0]

		draw_statbutton(BANDREL_4,x,y,1,1);	y += SWITCH_LINESPACE;
 8013d4e:	2301      	movs	r3, #1
 8013d50:	9300      	str	r3, [sp, #0]
 8013d52:	2301      	movs	r3, #1
 8013d54:	683a      	ldr	r2, [r7, #0]
 8013d56:	6879      	ldr	r1, [r7, #4]
 8013d58:	2018      	movs	r0, #24
 8013d5a:	f7ff fc85 	bl	8013668 <draw_statbutton>
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	3346      	adds	r3, #70	; 0x46
 8013d62:	603b      	str	r3, [r7, #0]
		draw_statbutton(BANDREL_5,x,y,1,1);	y += SWITCH_LINESPACE;
 8013d64:	2301      	movs	r3, #1
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	2301      	movs	r3, #1
 8013d6a:	683a      	ldr	r2, [r7, #0]
 8013d6c:	6879      	ldr	r1, [r7, #4]
 8013d6e:	2019      	movs	r0, #25
 8013d70:	f7ff fc7a 	bl	8013668 <draw_statbutton>
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	3346      	adds	r3, #70	; 0x46
 8013d78:	603b      	str	r3, [r7, #0]
		draw_statbutton(BANDREL_6,x,y,1,1);	y += SWITCH_LINESPACE;
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	9300      	str	r3, [sp, #0]
 8013d7e:	2301      	movs	r3, #1
 8013d80:	683a      	ldr	r2, [r7, #0]
 8013d82:	6879      	ldr	r1, [r7, #4]
 8013d84:	201a      	movs	r0, #26
 8013d86:	f7ff fc6f 	bl	8013668 <draw_statbutton>
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	3346      	adds	r3, #70	; 0x46
 8013d8e:	603b      	str	r3, [r7, #0]
	}
}
 8013d90:	bf00      	nop
 8013d92:	3708      	adds	r7, #8
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	20000bf0 	.word	0x20000bf0

08013d9c <touchcal>:

int calstat = 0;
int newtop, newbottom, newleft, newright;

void touchcal(int x, int y, int rawx, int rawy)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b098      	sub	sp, #96	; 0x60
 8013da0:	af04      	add	r7, sp, #16
 8013da2:	60f8      	str	r0, [r7, #12]
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	607a      	str	r2, [r7, #4]
 8013da8:	603b      	str	r3, [r7, #0]
static int oldx=-1, oldy=-1;
int rectsize = 2;
 8013daa:	2302      	movs	r3, #2
 8013dac:	64fb      	str	r3, [r7, #76]	; 0x4c
static int doexit = 0;

	if(first_touchcal)
 8013dae:	4ba4      	ldr	r3, [pc, #656]	; (8014040 <touchcal+0x2a4>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d010      	beq.n	8013dd8 <touchcal+0x3c>
	{
		oldx = -1;
 8013db6:	4ba3      	ldr	r3, [pc, #652]	; (8014044 <touchcal+0x2a8>)
 8013db8:	f04f 32ff 	mov.w	r2, #4294967295
 8013dbc:	601a      	str	r2, [r3, #0]
		oldy = -1;
 8013dbe:	4ba2      	ldr	r3, [pc, #648]	; (8014048 <touchcal+0x2ac>)
 8013dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8013dc4:	601a      	str	r2, [r3, #0]
		calstat = 0;
 8013dc6:	4ba1      	ldr	r3, [pc, #644]	; (801404c <touchcal+0x2b0>)
 8013dc8:	2200      	movs	r2, #0
 8013dca:	601a      	str	r2, [r3, #0]
		first_touchcal = 0;
 8013dcc:	4b9c      	ldr	r3, [pc, #624]	; (8014040 <touchcal+0x2a4>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	601a      	str	r2, [r3, #0]
		doexit = 0;
 8013dd2:	4b9f      	ldr	r3, [pc, #636]	; (8014050 <touchcal+0x2b4>)
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	601a      	str	r2, [r3, #0]
	}

	if(x == -1 && y == -1)
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dde:	d11a      	bne.n	8013e16 <touchcal+0x7a>
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013de6:	d116      	bne.n	8013e16 <touchcal+0x7a>
	{
		// es wurde losgelassen
		if(calstat == 1) calstat = 2;
 8013de8:	4b98      	ldr	r3, [pc, #608]	; (801404c <touchcal+0x2b0>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	d102      	bne.n	8013df6 <touchcal+0x5a>
 8013df0:	4b96      	ldr	r3, [pc, #600]	; (801404c <touchcal+0x2b0>)
 8013df2:	2202      	movs	r2, #2
 8013df4:	601a      	str	r2, [r3, #0]
		if(calstat == 3) calstat = 4;
 8013df6:	4b95      	ldr	r3, [pc, #596]	; (801404c <touchcal+0x2b0>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b03      	cmp	r3, #3
 8013dfc:	d102      	bne.n	8013e04 <touchcal+0x68>
 8013dfe:	4b93      	ldr	r3, [pc, #588]	; (801404c <touchcal+0x2b0>)
 8013e00:	2204      	movs	r2, #4
 8013e02:	601a      	str	r2, [r3, #0]
		if(calstat == 6) calstat = 7;
 8013e04:	4b91      	ldr	r3, [pc, #580]	; (801404c <touchcal+0x2b0>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b06      	cmp	r3, #6
 8013e0a:	f040 8115 	bne.w	8014038 <touchcal+0x29c>
 8013e0e:	4b8f      	ldr	r3, [pc, #572]	; (801404c <touchcal+0x2b0>)
 8013e10:	2207      	movs	r2, #7
 8013e12:	601a      	str	r2, [r3, #0]
		return;
 8013e14:	e110      	b.n	8014038 <touchcal+0x29c>
	}

	if(calstat == 2)
 8013e16:	4b8d      	ldr	r3, [pc, #564]	; (801404c <touchcal+0x2b0>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2b02      	cmp	r3, #2
 8013e1c:	d10b      	bne.n	8013e36 <touchcal+0x9a>
	{
		// linke obere Ecke wurde gedrückt
		newtop = rawy;
 8013e1e:	4a8d      	ldr	r2, [pc, #564]	; (8014054 <touchcal+0x2b8>)
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	6013      	str	r3, [r2, #0]
		newleft = rawx;
 8013e24:	4a8c      	ldr	r2, [pc, #560]	; (8014058 <touchcal+0x2bc>)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6013      	str	r3, [r2, #0]
		doexit = 0;
 8013e2a:	4b89      	ldr	r3, [pc, #548]	; (8014050 <touchcal+0x2b4>)
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	601a      	str	r2, [r3, #0]
		calstat = 3;
 8013e30:	4b86      	ldr	r3, [pc, #536]	; (801404c <touchcal+0x2b0>)
 8013e32:	2203      	movs	r2, #3
 8013e34:	601a      	str	r2, [r3, #0]
	}
	if(calstat == 5)
 8013e36:	4b85      	ldr	r3, [pc, #532]	; (801404c <touchcal+0x2b0>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2b05      	cmp	r3, #5
 8013e3c:	d11b      	bne.n	8013e76 <touchcal+0xda>
	{
		// rechte untere Ecke wurde gedrückt
		newbottom = rawy;
 8013e3e:	4a87      	ldr	r2, [pc, #540]	; (801405c <touchcal+0x2c0>)
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	6013      	str	r3, [r2, #0]
		newright = rawx;
 8013e44:	4a86      	ldr	r2, [pc, #536]	; (8014060 <touchcal+0x2c4>)
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6013      	str	r3, [r2, #0]
		doexit = 0;
 8013e4a:	4b81      	ldr	r3, [pc, #516]	; (8014050 <touchcal+0x2b4>)
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	601a      	str	r2, [r3, #0]
		calstat = 6;
 8013e50:	4b7e      	ldr	r3, [pc, #504]	; (801404c <touchcal+0x2b0>)
 8013e52:	2206      	movs	r2, #6
 8013e54:	601a      	str	r2, [r3, #0]
		if(set_touchref(newleft,newright,newtop,newbottom) == 0)
 8013e56:	4b80      	ldr	r3, [pc, #512]	; (8014058 <touchcal+0x2bc>)
 8013e58:	6818      	ldr	r0, [r3, #0]
 8013e5a:	4b81      	ldr	r3, [pc, #516]	; (8014060 <touchcal+0x2c4>)
 8013e5c:	6819      	ldr	r1, [r3, #0]
 8013e5e:	4b7d      	ldr	r3, [pc, #500]	; (8014054 <touchcal+0x2b8>)
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	4b7e      	ldr	r3, [pc, #504]	; (801405c <touchcal+0x2c0>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	f004 ff69 	bl	8018d3c <set_touchref>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d102      	bne.n	8013e76 <touchcal+0xda>
		{
			// ungültige Position, beginne von vorne
			calstat = 0;
 8013e70:	4b76      	ldr	r3, [pc, #472]	; (801404c <touchcal+0x2b0>)
 8013e72:	2200      	movs	r2, #0
 8013e74:	601a      	str	r2, [r3, #0]
		}
	}

	if(calstat == 8)
 8013e76:	4b75      	ldr	r3, [pc, #468]	; (801404c <touchcal+0x2b0>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2b08      	cmp	r3, #8
 8013e7c:	f040 80dd 	bne.w	801403a <touchcal+0x29e>
	{
		// prüfe Exit
		if(y >= (TFT_HEIGHT-50) && x > 300 && x < 500)
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8013e86:	d31d      	bcc.n	8013ec4 <touchcal+0x128>
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013e8e:	dd19      	ble.n	8013ec4 <touchcal+0x128>
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8013e96:	da15      	bge.n	8013ec4 <touchcal+0x128>
		{
			if(++doexit > 10)
 8013e98:	4b6d      	ldr	r3, [pc, #436]	; (8014050 <touchcal+0x2b4>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	4a6c      	ldr	r2, [pc, #432]	; (8014050 <touchcal+0x2b4>)
 8013ea0:	6013      	str	r3, [r2, #0]
 8013ea2:	4b6b      	ldr	r3, [pc, #428]	; (8014050 <touchcal+0x2b4>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	2b0a      	cmp	r3, #10
 8013ea8:	dd0f      	ble.n	8013eca <touchcal+0x12e>
			{
				menunum = MENU_SELECTION;
 8013eaa:	4b6e      	ldr	r3, [pc, #440]	; (8014064 <touchcal+0x2c8>)
 8013eac:	2200      	movs	r2, #0
 8013eae:	601a      	str	r2, [r3, #0]
				messagebox("save values",1000);
 8013eb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013eb4:	486c      	ldr	r0, [pc, #432]	; (8014068 <touchcal+0x2cc>)
 8013eb6:	f001 fa79 	bl	80153ac <messagebox>
				copy_ram_to_flash();
 8013eba:	f7fb f87d 	bl	800efb8 <copy_ram_to_flash>
				show_selectionmenu();
 8013ebe:	f7fd fc1d 	bl	80116fc <show_selectionmenu>
 8013ec2:	e0ba      	b.n	801403a <touchcal+0x29e>
				return;
			}
		}
		else
			doexit = 0;
 8013ec4:	4b62      	ldr	r3, [pc, #392]	; (8014050 <touchcal+0x2b4>)
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	601a      	str	r2, [r3, #0]

		// in die Mitte des Symbols stellen
		x -= rectsize/2;
 8013eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ecc:	0fda      	lsrs	r2, r3, #31
 8013ece:	4413      	add	r3, r2
 8013ed0:	105b      	asrs	r3, r3, #1
 8013ed2:	425b      	negs	r3, r3
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	4413      	add	r3, r2
 8013eda:	60fb      	str	r3, [r7, #12]
		y -= rectsize/2;
 8013edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ede:	0fda      	lsrs	r2, r3, #31
 8013ee0:	4413      	add	r3, r2
 8013ee2:	105b      	asrs	r3, r3, #1
 8013ee4:	425b      	negs	r3, r3
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	4413      	add	r3, r2
 8013eec:	60bb      	str	r3, [r7, #8]

		// lösche altes Symbol
		if(oldx != -1 && oldy<420&& oldy > 30)
 8013eee:	4b55      	ldr	r3, [pc, #340]	; (8014044 <touchcal+0x2a8>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef6:	d023      	beq.n	8013f40 <touchcal+0x1a4>
 8013ef8:	4b53      	ldr	r3, [pc, #332]	; (8014048 <touchcal+0x2ac>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8013f00:	da1e      	bge.n	8013f40 <touchcal+0x1a4>
 8013f02:	4b51      	ldr	r3, [pc, #324]	; (8014048 <touchcal+0x2ac>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	2b1e      	cmp	r3, #30
 8013f08:	dd1a      	ble.n	8013f40 <touchcal+0x1a4>
		{
			TFT_DrawLine(0,oldy,799,oldy, BLACK, 2);
 8013f0a:	4b4f      	ldr	r3, [pc, #316]	; (8014048 <touchcal+0x2ac>)
 8013f0c:	6819      	ldr	r1, [r3, #0]
 8013f0e:	4b4e      	ldr	r3, [pc, #312]	; (8014048 <touchcal+0x2ac>)
 8013f10:	681a      	ldr	r2, [r3, #0]
 8013f12:	2302      	movs	r3, #2
 8013f14:	9301      	str	r3, [sp, #4]
 8013f16:	2300      	movs	r3, #0
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	f240 321f 	movw	r2, #799	; 0x31f
 8013f20:	2000      	movs	r0, #0
 8013f22:	f003 fddd 	bl	8017ae0 <TFT_DrawLine>
			TFT_DrawLine(oldx,30,oldx,420, BLACK, 2);
 8013f26:	4b47      	ldr	r3, [pc, #284]	; (8014044 <touchcal+0x2a8>)
 8013f28:	6818      	ldr	r0, [r3, #0]
 8013f2a:	4b46      	ldr	r3, [pc, #280]	; (8014044 <touchcal+0x2a8>)
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	2302      	movs	r3, #2
 8013f30:	9301      	str	r3, [sp, #4]
 8013f32:	2300      	movs	r3, #0
 8013f34:	9300      	str	r3, [sp, #0]
 8013f36:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8013f3a:	211e      	movs	r1, #30
 8013f3c:	f003 fdd0 	bl	8017ae0 <TFT_DrawLine>
		}

		// zeichne neues
		if(y<420 && y > 30)
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8013f46:	da1a      	bge.n	8013f7e <touchcal+0x1e2>
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	2b1e      	cmp	r3, #30
 8013f4c:	dd17      	ble.n	8013f7e <touchcal+0x1e2>
		{
			TFT_DrawLine(0,y,799,y, WHITE, 2);
 8013f4e:	2302      	movs	r3, #2
 8013f50:	9301      	str	r3, [sp, #4]
 8013f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f56:	9300      	str	r3, [sp, #0]
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	f240 321f 	movw	r2, #799	; 0x31f
 8013f5e:	68b9      	ldr	r1, [r7, #8]
 8013f60:	2000      	movs	r0, #0
 8013f62:	f003 fdbd 	bl	8017ae0 <TFT_DrawLine>
			TFT_DrawLine(x,30,x,420, WHITE, 2);
 8013f66:	2302      	movs	r3, #2
 8013f68:	9301      	str	r3, [sp, #4]
 8013f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f6e:	9300      	str	r3, [sp, #0]
 8013f70:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8013f74:	68fa      	ldr	r2, [r7, #12]
 8013f76:	211e      	movs	r1, #30
 8013f78:	68f8      	ldr	r0, [r7, #12]
 8013f7a:	f003 fdb1 	bl	8017ae0 <TFT_DrawLine>
		}

		char s[50];
		int txtx = 580;
 8013f7e:	f44f 7311 	mov.w	r3, #580	; 0x244
 8013f82:	64bb      	str	r3, [r7, #72]	; 0x48
		sprintf(s,"x:%04d y:%04d",rawx,rawy);
 8013f84:	f107 0014 	add.w	r0, r7, #20
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	4937      	ldr	r1, [pc, #220]	; (801406c <touchcal+0x2d0>)
 8013f8e:	f00b f953 	bl	801f238 <sprintf>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s, txtx, 421, 2, WHITE , BLACK, TFT_WIDTH-1);
 8013f92:	f107 0114 	add.w	r1, r7, #20
 8013f96:	f240 331f 	movw	r3, #799	; 0x31f
 8013f9a:	9303      	str	r3, [sp, #12]
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	9302      	str	r3, [sp, #8]
 8013fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fa4:	9301      	str	r3, [sp, #4]
 8013fa6:	2302      	movs	r3, #2
 8013fa8:	9300      	str	r3, [sp, #0]
 8013faa:	f240 13a5 	movw	r3, #421	; 0x1a5
 8013fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fb0:	482f      	ldr	r0, [pc, #188]	; (8014070 <touchcal+0x2d4>)
 8013fb2:	f00a fd2f 	bl	801ea14 <tft_print_restclear>
		sprintf(s,"l:%04d r:%04d",pcfgdata->touch_left,pcfgdata->touch_right);
 8013fb6:	4b2f      	ldr	r3, [pc, #188]	; (8014074 <touchcal+0x2d8>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	685a      	ldr	r2, [r3, #4]
 8013fbc:	4b2d      	ldr	r3, [pc, #180]	; (8014074 <touchcal+0x2d8>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	689b      	ldr	r3, [r3, #8]
 8013fc2:	f107 0014 	add.w	r0, r7, #20
 8013fc6:	492c      	ldr	r1, [pc, #176]	; (8014078 <touchcal+0x2dc>)
 8013fc8:	f00b f936 	bl	801f238 <sprintf>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s, txtx, 441, 2, WHITE , BLACK, TFT_WIDTH-1);
 8013fcc:	f107 0114 	add.w	r1, r7, #20
 8013fd0:	f240 331f 	movw	r3, #799	; 0x31f
 8013fd4:	9303      	str	r3, [sp, #12]
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	9302      	str	r3, [sp, #8]
 8013fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fde:	9301      	str	r3, [sp, #4]
 8013fe0:	2302      	movs	r3, #2
 8013fe2:	9300      	str	r3, [sp, #0]
 8013fe4:	f240 13b9 	movw	r3, #441	; 0x1b9
 8013fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fea:	4821      	ldr	r0, [pc, #132]	; (8014070 <touchcal+0x2d4>)
 8013fec:	f00a fd12 	bl	801ea14 <tft_print_restclear>
		sprintf(s,"t:%04d b:%04d",pcfgdata->touch_top,pcfgdata->touch_bottom);
 8013ff0:	4b20      	ldr	r3, [pc, #128]	; (8014074 <touchcal+0x2d8>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	68da      	ldr	r2, [r3, #12]
 8013ff6:	4b1f      	ldr	r3, [pc, #124]	; (8014074 <touchcal+0x2d8>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	691b      	ldr	r3, [r3, #16]
 8013ffc:	f107 0014 	add.w	r0, r7, #20
 8014000:	491e      	ldr	r1, [pc, #120]	; (801407c <touchcal+0x2e0>)
 8014002:	f00b f919 	bl	801f238 <sprintf>
		tft_print_restclear(&lucidaConsole_12ptFontInfo, s, txtx, 461, 2, WHITE , BLACK, TFT_WIDTH-1);
 8014006:	f107 0114 	add.w	r1, r7, #20
 801400a:	f240 331f 	movw	r3, #799	; 0x31f
 801400e:	9303      	str	r3, [sp, #12]
 8014010:	2300      	movs	r3, #0
 8014012:	9302      	str	r3, [sp, #8]
 8014014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014018:	9301      	str	r3, [sp, #4]
 801401a:	2302      	movs	r3, #2
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	f240 13cd 	movw	r3, #461	; 0x1cd
 8014022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014024:	4812      	ldr	r0, [pc, #72]	; (8014070 <touchcal+0x2d4>)
 8014026:	f00a fcf5 	bl	801ea14 <tft_print_restclear>

		oldx = x;
 801402a:	4a06      	ldr	r2, [pc, #24]	; (8014044 <touchcal+0x2a8>)
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	6013      	str	r3, [r2, #0]
		oldy = y;
 8014030:	4a05      	ldr	r2, [pc, #20]	; (8014048 <touchcal+0x2ac>)
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	6013      	str	r3, [r2, #0]
 8014036:	e000      	b.n	801403a <touchcal+0x29e>
		return;
 8014038:	bf00      	nop
	}
}
 801403a:	3750      	adds	r7, #80	; 0x50
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	20000c30 	.word	0x20000c30
 8014044:	200013b8 	.word	0x200013b8
 8014048:	200013bc 	.word	0x200013bc
 801404c:	200026fc 	.word	0x200026fc
 8014050:	20002778 	.word	0x20002778
 8014054:	200055d8 	.word	0x200055d8
 8014058:	200055d0 	.word	0x200055d0
 801405c:	200055cc 	.word	0x200055cc
 8014060:	200055dc 	.word	0x200055dc
 8014064:	20000c24 	.word	0x20000c24
 8014068:	08026b68 	.word	0x08026b68
 801406c:	08026b74 	.word	0x08026b74
 8014070:	20001c1c 	.word	0x20001c1c
 8014074:	20000bf0 	.word	0x20000bf0
 8014078:	08026b84 	.word	0x08026b84
 801407c:	08026b94 	.word	0x08026b94

08014080 <draw_values_touch>:

void draw_values_touch()
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b084      	sub	sp, #16
 8014084:	af04      	add	r7, sp, #16
	if(pcfgdata->display_reverse != 0)
 8014086:	4b65      	ldr	r3, [pc, #404]	; (801421c <draw_values_touch+0x19c>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801408e:	2b00      	cmp	r3, #0
 8014090:	d04a      	beq.n	8014128 <draw_values_touch+0xa8>
	{
		if(calstat == 0)
 8014092:	4b63      	ldr	r3, [pc, #396]	; (8014220 <draw_values_touch+0x1a0>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d11e      	bne.n	80140d8 <draw_values_touch+0x58>
		{
			TFT_Fill_Screen(BLACK);
 801409a:	2000      	movs	r0, #0
 801409c:	f003 fc0c 	bl	80178b8 <TFT_Fill_Screen>
			TFT_Fill_Rectangle(0,0,10,10,WHITE);
 80140a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	230a      	movs	r3, #10
 80140a8:	220a      	movs	r2, #10
 80140aa:	2100      	movs	r1, #0
 80140ac:	2000      	movs	r0, #0
 80140ae:	f003 fbc3 	bl	8017838 <TFT_Fill_Rectangle>
			tft_print(&lucidaConsole_22ptFontInfo, getLang(Touch_Top_Left_Corner), 120, 1, 1, WHITE , BLACK);
 80140b2:	2010      	movs	r0, #16
 80140b4:	f7fc fe96 	bl	8010de4 <getLang>
 80140b8:	4601      	mov	r1, r0
 80140ba:	2300      	movs	r3, #0
 80140bc:	9302      	str	r3, [sp, #8]
 80140be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140c2:	9301      	str	r3, [sp, #4]
 80140c4:	2301      	movs	r3, #1
 80140c6:	9300      	str	r3, [sp, #0]
 80140c8:	2301      	movs	r3, #1
 80140ca:	2278      	movs	r2, #120	; 0x78
 80140cc:	4855      	ldr	r0, [pc, #340]	; (8014224 <draw_values_touch+0x1a4>)
 80140ce:	f00a fd69 	bl	801eba4 <tft_print>
			calstat = 1;
 80140d2:	4b53      	ldr	r3, [pc, #332]	; (8014220 <draw_values_touch+0x1a0>)
 80140d4:	2201      	movs	r2, #1
 80140d6:	601a      	str	r2, [r3, #0]
		}
		if(calstat == 4)
 80140d8:	4b51      	ldr	r3, [pc, #324]	; (8014220 <draw_values_touch+0x1a0>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	2b04      	cmp	r3, #4
 80140de:	d16d      	bne.n	80141bc <draw_values_touch+0x13c>
		{
			TFT_Fill_Screen(BLACK);
 80140e0:	2000      	movs	r0, #0
 80140e2:	f003 fbe9 	bl	80178b8 <TFT_Fill_Screen>
			TFT_Fill_Rectangle(TFT_WIDTH-10,TFT_HEIGHT-10,TFT_WIDTH-1,TFT_HEIGHT-1,WHITE);
 80140e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	f240 13df 	movw	r3, #479	; 0x1df
 80140f0:	f240 321f 	movw	r2, #799	; 0x31f
 80140f4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80140f8:	f240 3016 	movw	r0, #790	; 0x316
 80140fc:	f003 fb9c 	bl	8017838 <TFT_Fill_Rectangle>
			tft_print(&lucidaConsole_22ptFontInfo, getLang(Touch_Bottom_Right_Corner), 120, 1, 1, WHITE , BLACK);
 8014100:	2011      	movs	r0, #17
 8014102:	f7fc fe6f 	bl	8010de4 <getLang>
 8014106:	4601      	mov	r1, r0
 8014108:	2300      	movs	r3, #0
 801410a:	9302      	str	r3, [sp, #8]
 801410c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014110:	9301      	str	r3, [sp, #4]
 8014112:	2301      	movs	r3, #1
 8014114:	9300      	str	r3, [sp, #0]
 8014116:	2301      	movs	r3, #1
 8014118:	2278      	movs	r2, #120	; 0x78
 801411a:	4842      	ldr	r0, [pc, #264]	; (8014224 <draw_values_touch+0x1a4>)
 801411c:	f00a fd42 	bl	801eba4 <tft_print>
			calstat = 5;
 8014120:	4b3f      	ldr	r3, [pc, #252]	; (8014220 <draw_values_touch+0x1a0>)
 8014122:	2205      	movs	r2, #5
 8014124:	601a      	str	r2, [r3, #0]
 8014126:	e049      	b.n	80141bc <draw_values_touch+0x13c>
		}
	}
	else
	{
		if(calstat == 4)
 8014128:	4b3d      	ldr	r3, [pc, #244]	; (8014220 <draw_values_touch+0x1a0>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b04      	cmp	r3, #4
 801412e:	d11e      	bne.n	801416e <draw_values_touch+0xee>
		{
			TFT_Fill_Screen(BLACK);
 8014130:	2000      	movs	r0, #0
 8014132:	f003 fbc1 	bl	80178b8 <TFT_Fill_Screen>
			TFT_Fill_Rectangle(0,0,10,10,WHITE);
 8014136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801413a:	9300      	str	r3, [sp, #0]
 801413c:	230a      	movs	r3, #10
 801413e:	220a      	movs	r2, #10
 8014140:	2100      	movs	r1, #0
 8014142:	2000      	movs	r0, #0
 8014144:	f003 fb78 	bl	8017838 <TFT_Fill_Rectangle>
			tft_print(&lucidaConsole_22ptFontInfo, getLang(Touch_Top_Left_Corner), 120, 1, 1, WHITE , BLACK);
 8014148:	2010      	movs	r0, #16
 801414a:	f7fc fe4b 	bl	8010de4 <getLang>
 801414e:	4601      	mov	r1, r0
 8014150:	2300      	movs	r3, #0
 8014152:	9302      	str	r3, [sp, #8]
 8014154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014158:	9301      	str	r3, [sp, #4]
 801415a:	2301      	movs	r3, #1
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	2301      	movs	r3, #1
 8014160:	2278      	movs	r2, #120	; 0x78
 8014162:	4830      	ldr	r0, [pc, #192]	; (8014224 <draw_values_touch+0x1a4>)
 8014164:	f00a fd1e 	bl	801eba4 <tft_print>
			calstat = 5;
 8014168:	4b2d      	ldr	r3, [pc, #180]	; (8014220 <draw_values_touch+0x1a0>)
 801416a:	2205      	movs	r2, #5
 801416c:	601a      	str	r2, [r3, #0]
		}
		if(calstat == 0)
 801416e:	4b2c      	ldr	r3, [pc, #176]	; (8014220 <draw_values_touch+0x1a0>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d122      	bne.n	80141bc <draw_values_touch+0x13c>
		{
			TFT_Fill_Screen(BLACK);
 8014176:	2000      	movs	r0, #0
 8014178:	f003 fb9e 	bl	80178b8 <TFT_Fill_Screen>
			TFT_Fill_Rectangle(TFT_WIDTH-10,TFT_HEIGHT-10,TFT_WIDTH-1,TFT_HEIGHT-1,WHITE);
 801417c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014180:	9300      	str	r3, [sp, #0]
 8014182:	f240 13df 	movw	r3, #479	; 0x1df
 8014186:	f240 321f 	movw	r2, #799	; 0x31f
 801418a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 801418e:	f240 3016 	movw	r0, #790	; 0x316
 8014192:	f003 fb51 	bl	8017838 <TFT_Fill_Rectangle>
			tft_print(&lucidaConsole_22ptFontInfo, getLang(Touch_Bottom_Right_Corner), 120, 1, 1, WHITE , BLACK);
 8014196:	2011      	movs	r0, #17
 8014198:	f7fc fe24 	bl	8010de4 <getLang>
 801419c:	4601      	mov	r1, r0
 801419e:	2300      	movs	r3, #0
 80141a0:	9302      	str	r3, [sp, #8]
 80141a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141a6:	9301      	str	r3, [sp, #4]
 80141a8:	2301      	movs	r3, #1
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	2301      	movs	r3, #1
 80141ae:	2278      	movs	r2, #120	; 0x78
 80141b0:	481c      	ldr	r0, [pc, #112]	; (8014224 <draw_values_touch+0x1a4>)
 80141b2:	f00a fcf7 	bl	801eba4 <tft_print>
			calstat = 1;
 80141b6:	4b1a      	ldr	r3, [pc, #104]	; (8014220 <draw_values_touch+0x1a0>)
 80141b8:	2201      	movs	r2, #1
 80141ba:	601a      	str	r2, [r3, #0]
		}
	}

	if(calstat == 7)
 80141bc:	4b18      	ldr	r3, [pc, #96]	; (8014220 <draw_values_touch+0x1a0>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2b07      	cmp	r3, #7
 80141c2:	d127      	bne.n	8014214 <draw_values_touch+0x194>
	{
		TFT_Fill_Screen(BLACK);
 80141c4:	2000      	movs	r0, #0
 80141c6:	f003 fb77 	bl	80178b8 <TFT_Fill_Screen>
		tft_print(&lucidaConsole_22ptFontInfo, getLang(touch_and_test_position), 100, 1, 1, WHITE , BLACK);
 80141ca:	2012      	movs	r0, #18
 80141cc:	f7fc fe0a 	bl	8010de4 <getLang>
 80141d0:	4601      	mov	r1, r0
 80141d2:	2300      	movs	r3, #0
 80141d4:	9302      	str	r3, [sp, #8]
 80141d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141da:	9301      	str	r3, [sp, #4]
 80141dc:	2301      	movs	r3, #1
 80141de:	9300      	str	r3, [sp, #0]
 80141e0:	2301      	movs	r3, #1
 80141e2:	2264      	movs	r2, #100	; 0x64
 80141e4:	480f      	ldr	r0, [pc, #60]	; (8014224 <draw_values_touch+0x1a4>)
 80141e6:	f00a fcdd 	bl	801eba4 <tft_print>
		tft_print(&verdana_36ptFontInfo, getLang(EXIT), (TFT_WIDTH*3)/8, TFT_HEIGHT-50, 8, BLACK , GREEN);
 80141ea:	2013      	movs	r0, #19
 80141ec:	f7fc fdfa 	bl	8010de4 <getLang>
 80141f0:	4601      	mov	r1, r0
 80141f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80141f6:	9302      	str	r3, [sp, #8]
 80141f8:	2300      	movs	r3, #0
 80141fa:	9301      	str	r3, [sp, #4]
 80141fc:	2308      	movs	r3, #8
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8014204:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014208:	4807      	ldr	r0, [pc, #28]	; (8014228 <draw_values_touch+0x1a8>)
 801420a:	f00a fccb 	bl	801eba4 <tft_print>
		calstat = 8;
 801420e:	4b04      	ldr	r3, [pc, #16]	; (8014220 <draw_values_touch+0x1a0>)
 8014210:	2208      	movs	r2, #8
 8014212:	601a      	str	r2, [r3, #0]
	}
}
 8014214:	bf00      	nop
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	20000bf0 	.word	0x20000bf0
 8014220:	200026fc 	.word	0x200026fc
 8014224:	20001c40 	.word	0x20001c40
 8014228:	20001c88 	.word	0x20001c88

0801422c <draw_values>:

#define MENUREFRESHTIME_MS	100
uint32_t menutime = 0;
 void draw_values()
 {
 801422c:	b580      	push	{r7, lr}
 801422e:	af00      	add	r7, sp, #0
	 // nicht zu oft
	 if(uptime < (menutime + MENUREFRESHTIME_MS)) return;
 8014230:	4b26      	ldr	r3, [pc, #152]	; (80142cc <draw_values+0xa0>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8014238:	4b25      	ldr	r3, [pc, #148]	; (80142d0 <draw_values+0xa4>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	429a      	cmp	r2, r3
 801423e:	d842      	bhi.n	80142c6 <draw_values+0x9a>
	 menutime = uptime;
 8014240:	4b23      	ldr	r3, [pc, #140]	; (80142d0 <draw_values+0xa4>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	4a21      	ldr	r2, [pc, #132]	; (80142cc <draw_values+0xa0>)
 8014246:	6013      	str	r3, [r2, #0]

	if(menunum == MENU_OVERVIEW) draw_values_overviewbar();
 8014248:	4b22      	ldr	r3, [pc, #136]	; (80142d4 <draw_values+0xa8>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b01      	cmp	r3, #1
 801424e:	d102      	bne.n	8014256 <draw_values+0x2a>
 8014250:	f7fe fc3e 	bl	8012ad0 <draw_values_overviewbar>
 8014254:	e038      	b.n	80142c8 <draw_values+0x9c>
	else if(menunum == MENU_BAR) draw_values_bigbar();
 8014256:	4b1f      	ldr	r3, [pc, #124]	; (80142d4 <draw_values+0xa8>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	2b02      	cmp	r3, #2
 801425c:	d102      	bne.n	8014264 <draw_values+0x38>
 801425e:	f000 fab1 	bl	80147c4 <draw_values_bigbar>
 8014262:	e031      	b.n	80142c8 <draw_values+0x9c>
	else if(menunum == MENU_METER) draw_values_meter();
 8014264:	4b1b      	ldr	r3, [pc, #108]	; (80142d4 <draw_values+0xa8>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	2b03      	cmp	r3, #3
 801426a:	d102      	bne.n	8014272 <draw_values+0x46>
 801426c:	f000 fd4a 	bl	8014d04 <draw_values_meter>
 8014270:	e02a      	b.n	80142c8 <draw_values+0x9c>
	else if(menunum == MENU_BRIDGES) draw_value_bridges();
 8014272:	4b18      	ldr	r3, [pc, #96]	; (80142d4 <draw_values+0xa8>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	2b04      	cmp	r3, #4
 8014278:	d102      	bne.n	8014280 <draw_values+0x54>
 801427a:	f7fe fcf1 	bl	8012c60 <draw_value_bridges>
 801427e:	e023      	b.n	80142c8 <draw_values+0x9c>
	// else if(menunum == MENU_HISTORY) // wird immer im Hintergrund gemacht
	else if(menunum == MENU_ADC) draw_values_adcvals();
 8014280:	4b14      	ldr	r3, [pc, #80]	; (80142d4 <draw_values+0xa8>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	2b06      	cmp	r3, #6
 8014286:	d102      	bne.n	801428e <draw_values+0x62>
 8014288:	f7fe ff2a 	bl	80130e0 <draw_values_adcvals>
 801428c:	e01c      	b.n	80142c8 <draw_values+0x9c>
	else if(menunum == MENU_VALUES) draw_values_realvals();
 801428e:	4b11      	ldr	r3, [pc, #68]	; (80142d4 <draw_values+0xa8>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	2b07      	cmp	r3, #7
 8014294:	d102      	bne.n	801429c <draw_values+0x70>
 8014296:	f7fe ff77 	bl	8013188 <draw_values_realvals>
 801429a:	e015      	b.n	80142c8 <draw_values+0x9c>
	else if(menunum == MENU_STATUS) draw_values_status();
 801429c:	4b0d      	ldr	r3, [pc, #52]	; (80142d4 <draw_values+0xa8>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b08      	cmp	r3, #8
 80142a2:	d102      	bne.n	80142aa <draw_values+0x7e>
 80142a4:	f7ff fa6c 	bl	8013780 <draw_values_status>
 80142a8:	e00e      	b.n	80142c8 <draw_values+0x9c>
	else if(menunum == MENU_SWITCH) draw_values_switch();
 80142aa:	4b0a      	ldr	r3, [pc, #40]	; (80142d4 <draw_values+0xa8>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b09      	cmp	r3, #9
 80142b0:	d102      	bne.n	80142b8 <draw_values+0x8c>
 80142b2:	f7ff fcc7 	bl	8013c44 <draw_values_switch>
 80142b6:	e007      	b.n	80142c8 <draw_values+0x9c>
	else if(menunum == MENU_TOUCHCAL) draw_values_touch();
 80142b8:	4b06      	ldr	r3, [pc, #24]	; (80142d4 <draw_values+0xa8>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	2b0f      	cmp	r3, #15
 80142be:	d103      	bne.n	80142c8 <draw_values+0x9c>
 80142c0:	f7ff fede 	bl	8014080 <draw_values_touch>
 80142c4:	e000      	b.n	80142c8 <draw_values+0x9c>
	 if(uptime < (menutime + MENUREFRESHTIME_MS)) return;
 80142c6:	bf00      	nop
	//else if(menunum == MENU_SYSTEM) draw_values_system(); // nicht hier, wird in system.c direkt gemacht
 }
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	20002700 	.word	0x20002700
 80142d0:	200027a4 	.word	0x200027a4
 80142d4:	20000c24 	.word	0x20000c24

080142d8 <draw_menu_emergency>:

void draw_menu_emergency(float soll, float ist)
{
 80142d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142da:	b0a3      	sub	sp, #140	; 0x8c
 80142dc:	af04      	add	r7, sp, #16
 80142de:	ed87 0a01 	vstr	s0, [r7, #4]
 80142e2:	edc7 0a00 	vstr	s1, [r7]
char s[100];

	tb_buttons[TB_EMERG_OFF].pressed = 0;
 80142e6:	4ba1      	ldr	r3, [pc, #644]	; (801456c <draw_menu_emergency+0x294>)
 80142e8:	2200      	movs	r2, #0
 80142ea:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	draw_touchbutton(&tb_buttons[TB_EMERG_OFF]);
 80142ee:	48a0      	ldr	r0, [pc, #640]	; (8014570 <draw_menu_emergency+0x298>)
 80142f0:	f005 fe8c 	bl	801a00c <draw_touchbutton>
	tb_buttons[TB_ACTIVE].pressed = 0;
 80142f4:	4b9d      	ldr	r3, [pc, #628]	; (801456c <draw_menu_emergency+0x294>)
 80142f6:	2200      	movs	r2, #0
 80142f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	draw_touchbutton(&tb_buttons[TB_ACTIVE]);
 80142fc:	489b      	ldr	r0, [pc, #620]	; (801456c <draw_menu_emergency+0x294>)
 80142fe:	f005 fe85 	bl	801a00c <draw_touchbutton>
	tb_buttons[TB_STANDBY].pressed = 1;
 8014302:	4b9a      	ldr	r3, [pc, #616]	; (801456c <draw_menu_emergency+0x294>)
 8014304:	2201      	movs	r2, #1
 8014306:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	draw_touchbutton(&tb_buttons[TB_STANDBY]);
 801430a:	489a      	ldr	r0, [pc, #616]	; (8014574 <draw_menu_emergency+0x29c>)
 801430c:	f005 fe7e 	bl	801a00c <draw_touchbutton>

	tft_print(&lucidaConsole_18ptFontInfo, getLang(NOTABSCHALTUNG), 0,0, 6, RED , WHITE);
 8014310:	2036      	movs	r0, #54	; 0x36
 8014312:	f7fc fd67 	bl	8010de4 <getLang>
 8014316:	4601      	mov	r1, r0
 8014318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801431c:	9302      	str	r3, [sp, #8]
 801431e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8014322:	9301      	str	r3, [sp, #4]
 8014324:	2306      	movs	r3, #6
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	2300      	movs	r3, #0
 801432a:	2200      	movs	r2, #0
 801432c:	4892      	ldr	r0, [pc, #584]	; (8014578 <draw_menu_emergency+0x2a0>)
 801432e:	f00a fc39 	bl	801eba4 <tft_print>

	int x = 0;
 8014332:	2300      	movs	r3, #0
 8014334:	677b      	str	r3, [r7, #116]	; 0x74
	int y = 24;
 8014336:	2318      	movs	r3, #24
 8014338:	673b      	str	r3, [r7, #112]	; 0x70
	switch(error)
 801433a:	4b90      	ldr	r3, [pc, #576]	; (801457c <draw_menu_emergency+0x2a4>)
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	3b01      	subs	r3, #1
 8014340:	2b08      	cmp	r3, #8
 8014342:	f200 810f 	bhi.w	8014564 <draw_menu_emergency+0x28c>
 8014346:	a201      	add	r2, pc, #4	; (adr r2, 801434c <draw_menu_emergency+0x74>)
 8014348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801434c:	08014371 	.word	0x08014371
 8014350:	08014395 	.word	0x08014395
 8014354:	080143b9 	.word	0x080143b9
 8014358:	080143dd 	.word	0x080143dd
 801435c:	0801442d 	.word	0x0801442d
 8014360:	08014451 	.word	0x08014451
 8014364:	08014541 	.word	0x08014541
 8014368:	080144a1 	.word	0x080144a1
 801436c:	080144f1 	.word	0x080144f1
	{
	case EMERG_TEMP:
		tft_print(&lucidaConsole_18ptFontInfo, getLang(ERRORTEXT_TEMP), x,y, 2, RED , WHITE);
 8014370:	2039      	movs	r0, #57	; 0x39
 8014372:	f7fc fd37 	bl	8010de4 <getLang>
 8014376:	4601      	mov	r1, r0
 8014378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801437c:	9302      	str	r3, [sp, #8]
 801437e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8014382:	9301      	str	r3, [sp, #4]
 8014384:	2302      	movs	r3, #2
 8014386:	9300      	str	r3, [sp, #0]
 8014388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801438a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801438c:	487a      	ldr	r0, [pc, #488]	; (8014578 <draw_menu_emergency+0x2a0>)
 801438e:	f00a fc09 	bl	801eba4 <tft_print>
		break;
 8014392:	e0e7      	b.n	8014564 <draw_menu_emergency+0x28c>
	case EMERG_TEMP2:
		tft_print(&lucidaConsole_18ptFontInfo, getLang(ERRORTEXT_TEMP), x,y, 2, RED , WHITE);
 8014394:	2039      	movs	r0, #57	; 0x39
 8014396:	f7fc fd25 	bl	8010de4 <getLang>
 801439a:	4601      	mov	r1, r0
 801439c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143a0:	9302      	str	r3, [sp, #8]
 80143a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80143a6:	9301      	str	r3, [sp, #4]
 80143a8:	2302      	movs	r3, #2
 80143aa:	9300      	str	r3, [sp, #0]
 80143ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80143b0:	4871      	ldr	r0, [pc, #452]	; (8014578 <draw_menu_emergency+0x2a0>)
 80143b2:	f00a fbf7 	bl	801eba4 <tft_print>
		break;
 80143b6:	e0d5      	b.n	8014564 <draw_menu_emergency+0x28c>
	case EMERG_USER:
		tft_print(&lucidaConsole_18ptFontInfo, getLang(ERRORTEXT_USER), x,y, 2, RED , WHITE);
 80143b8:	203a      	movs	r0, #58	; 0x3a
 80143ba:	f7fc fd13 	bl	8010de4 <getLang>
 80143be:	4601      	mov	r1, r0
 80143c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143c4:	9302      	str	r3, [sp, #8]
 80143c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80143ca:	9301      	str	r3, [sp, #4]
 80143cc:	2302      	movs	r3, #2
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80143d4:	4868      	ldr	r0, [pc, #416]	; (8014578 <draw_menu_emergency+0x2a0>)
 80143d6:	f00a fbe5 	bl	801eba4 <tft_print>
		break;
 80143da:	e0c3      	b.n	8014564 <draw_menu_emergency+0x28c>
	case EMERG_I:
		sprintf(s,"%s: %.1f > %.1f",getLang(ERRORTEXT_MAXI),ist,soll);
 80143dc:	203b      	movs	r0, #59	; 0x3b
 80143de:	f7fc fd01 	bl	8010de4 <getLang>
 80143e2:	4606      	mov	r6, r0
 80143e4:	6838      	ldr	r0, [r7, #0]
 80143e6:	f7f3 ffe7 	bl	80083b8 <__aeabi_f2d>
 80143ea:	4604      	mov	r4, r0
 80143ec:	460d      	mov	r5, r1
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f7f3 ffe2 	bl	80083b8 <__aeabi_f2d>
 80143f4:	4602      	mov	r2, r0
 80143f6:	460b      	mov	r3, r1
 80143f8:	f107 000c 	add.w	r0, r7, #12
 80143fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014400:	e9cd 4500 	strd	r4, r5, [sp]
 8014404:	4632      	mov	r2, r6
 8014406:	495e      	ldr	r1, [pc, #376]	; (8014580 <draw_menu_emergency+0x2a8>)
 8014408:	f00a ff16 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x,y, 2, RED , WHITE);
 801440c:	f107 010c 	add.w	r1, r7, #12
 8014410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014414:	9302      	str	r3, [sp, #8]
 8014416:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801441a:	9301      	str	r3, [sp, #4]
 801441c:	2302      	movs	r3, #2
 801441e:	9300      	str	r3, [sp, #0]
 8014420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014422:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014424:	4854      	ldr	r0, [pc, #336]	; (8014578 <draw_menu_emergency+0x2a0>)
 8014426:	f00a fbbd 	bl	801eba4 <tft_print>
		break;
 801442a:	e09b      	b.n	8014564 <draw_menu_emergency+0x28c>
	case EMERG_U:
		tft_print(&lucidaConsole_18ptFontInfo, getLang(ERRORTEXT_MAXU), x,y, 2, RED , WHITE);
 801442c:	203c      	movs	r0, #60	; 0x3c
 801442e:	f7fc fcd9 	bl	8010de4 <getLang>
 8014432:	4601      	mov	r1, r0
 8014434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014438:	9302      	str	r3, [sp, #8]
 801443a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801443e:	9301      	str	r3, [sp, #4]
 8014440:	2302      	movs	r3, #2
 8014442:	9300      	str	r3, [sp, #0]
 8014444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014446:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014448:	484b      	ldr	r0, [pc, #300]	; (8014578 <draw_menu_emergency+0x2a0>)
 801444a:	f00a fbab 	bl	801eba4 <tft_print>
		break;
 801444e:	e089      	b.n	8014564 <draw_menu_emergency+0x28c>
	case EMERG_DRV:
		sprintf(s,"%s: %.1f > %.1f",getLang(ERRORTEXT_MAXDRV),ist,soll);
 8014450:	203d      	movs	r0, #61	; 0x3d
 8014452:	f7fc fcc7 	bl	8010de4 <getLang>
 8014456:	4606      	mov	r6, r0
 8014458:	6838      	ldr	r0, [r7, #0]
 801445a:	f7f3 ffad 	bl	80083b8 <__aeabi_f2d>
 801445e:	4604      	mov	r4, r0
 8014460:	460d      	mov	r5, r1
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f7f3 ffa8 	bl	80083b8 <__aeabi_f2d>
 8014468:	4602      	mov	r2, r0
 801446a:	460b      	mov	r3, r1
 801446c:	f107 000c 	add.w	r0, r7, #12
 8014470:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014474:	e9cd 4500 	strd	r4, r5, [sp]
 8014478:	4632      	mov	r2, r6
 801447a:	4941      	ldr	r1, [pc, #260]	; (8014580 <draw_menu_emergency+0x2a8>)
 801447c:	f00a fedc 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x,y, 2, RED , WHITE);
 8014480:	f107 010c 	add.w	r1, r7, #12
 8014484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014488:	9302      	str	r3, [sp, #8]
 801448a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801448e:	9301      	str	r3, [sp, #4]
 8014490:	2302      	movs	r3, #2
 8014492:	9300      	str	r3, [sp, #0]
 8014494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014496:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014498:	4837      	ldr	r0, [pc, #220]	; (8014578 <draw_menu_emergency+0x2a0>)
 801449a:	f00a fb83 	bl	801eba4 <tft_print>
		break;
 801449e:	e061      	b.n	8014564 <draw_menu_emergency+0x28c>
	case EMERG_FILTERSWR:
		sprintf(s,"%s: %.1f > %.1f",getLang(ERRORTEXT_MAXFLT),ist,soll);
 80144a0:	204d      	movs	r0, #77	; 0x4d
 80144a2:	f7fc fc9f 	bl	8010de4 <getLang>
 80144a6:	4606      	mov	r6, r0
 80144a8:	6838      	ldr	r0, [r7, #0]
 80144aa:	f7f3 ff85 	bl	80083b8 <__aeabi_f2d>
 80144ae:	4604      	mov	r4, r0
 80144b0:	460d      	mov	r5, r1
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f7f3 ff80 	bl	80083b8 <__aeabi_f2d>
 80144b8:	4602      	mov	r2, r0
 80144ba:	460b      	mov	r3, r1
 80144bc:	f107 000c 	add.w	r0, r7, #12
 80144c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80144c4:	e9cd 4500 	strd	r4, r5, [sp]
 80144c8:	4632      	mov	r2, r6
 80144ca:	492d      	ldr	r1, [pc, #180]	; (8014580 <draw_menu_emergency+0x2a8>)
 80144cc:	f00a feb4 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x,y, 2, RED , WHITE);
 80144d0:	f107 010c 	add.w	r1, r7, #12
 80144d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144d8:	9302      	str	r3, [sp, #8]
 80144da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80144de:	9301      	str	r3, [sp, #4]
 80144e0:	2302      	movs	r3, #2
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80144e8:	4823      	ldr	r0, [pc, #140]	; (8014578 <draw_menu_emergency+0x2a0>)
 80144ea:	f00a fb5b 	bl	801eba4 <tft_print>
		break;
 80144ee:	e039      	b.n	8014564 <draw_menu_emergency+0x28c>
	case EMERG_ANTSWR:
		sprintf(s,"%s: %.1f > %.1f",getLang(ERRORTEXT_MAXANT),ist,soll);
 80144f0:	204e      	movs	r0, #78	; 0x4e
 80144f2:	f7fc fc77 	bl	8010de4 <getLang>
 80144f6:	4606      	mov	r6, r0
 80144f8:	6838      	ldr	r0, [r7, #0]
 80144fa:	f7f3 ff5d 	bl	80083b8 <__aeabi_f2d>
 80144fe:	4604      	mov	r4, r0
 8014500:	460d      	mov	r5, r1
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f7f3 ff58 	bl	80083b8 <__aeabi_f2d>
 8014508:	4602      	mov	r2, r0
 801450a:	460b      	mov	r3, r1
 801450c:	f107 000c 	add.w	r0, r7, #12
 8014510:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014514:	e9cd 4500 	strd	r4, r5, [sp]
 8014518:	4632      	mov	r2, r6
 801451a:	4919      	ldr	r1, [pc, #100]	; (8014580 <draw_menu_emergency+0x2a8>)
 801451c:	f00a fe8c 	bl	801f238 <sprintf>
		tft_print(&lucidaConsole_18ptFontInfo, s, x,y, 2, RED , WHITE);
 8014520:	f107 010c 	add.w	r1, r7, #12
 8014524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014528:	9302      	str	r3, [sp, #8]
 801452a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801452e:	9301      	str	r3, [sp, #4]
 8014530:	2302      	movs	r3, #2
 8014532:	9300      	str	r3, [sp, #0]
 8014534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014536:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014538:	480f      	ldr	r0, [pc, #60]	; (8014578 <draw_menu_emergency+0x2a0>)
 801453a:	f00a fb33 	bl	801eba4 <tft_print>
		break;
 801453e:	e011      	b.n	8014564 <draw_menu_emergency+0x28c>
	case EMERG_TXTIME:
		tft_print(&lucidaConsole_18ptFontInfo, getLang(ERRORTEXT_MAXTXTIME), x,y, 2, RED , WHITE);
 8014540:	203e      	movs	r0, #62	; 0x3e
 8014542:	f7fc fc4f 	bl	8010de4 <getLang>
 8014546:	4601      	mov	r1, r0
 8014548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801454c:	9302      	str	r3, [sp, #8]
 801454e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8014552:	9301      	str	r3, [sp, #4]
 8014554:	2302      	movs	r3, #2
 8014556:	9300      	str	r3, [sp, #0]
 8014558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801455a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801455c:	4806      	ldr	r0, [pc, #24]	; (8014578 <draw_menu_emergency+0x2a0>)
 801455e:	f00a fb21 	bl	801eba4 <tft_print>
		break;
 8014562:	bf00      	nop
	}
}
 8014564:	bf00      	nop
 8014566:	377c      	adds	r7, #124	; 0x7c
 8014568:	46bd      	mov	sp, r7
 801456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801456c:	20007078 	.word	0x20007078
 8014570:	20007138 	.word	0x20007138
 8014574:	200070d8 	.word	0x200070d8
 8014578:	20001c34 	.word	0x20001c34
 801457c:	200026a2 	.word	0x200026a2
 8014580:	08026ba4 	.word	0x08026ba4

08014584 <draw_menu_bar>:
int bb_y = 290;
int bb_yspace = 30;
int bb_xfan = 430;

void draw_menu_bar()
{
 8014584:	b590      	push	{r4, r7, lr}
 8014586:	b087      	sub	sp, #28
 8014588:	af04      	add	r7, sp, #16
	TFT_Fill_Screen(BLACK);
 801458a:	2000      	movs	r0, #0
 801458c:	f003 f994 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_mainmenu();
 8014590:	f005 fdde 	bl	801a150 <draw_touchbuttons_mainmenu>
	show_bigbars();
 8014594:	f7f9 f9f0 	bl	800d978 <show_bigbars>

	first_statdisplay = 1;
 8014598:	4b82      	ldr	r3, [pc, #520]	; (80147a4 <draw_menu_bar+0x220>)
 801459a:	2201      	movs	r2, #1
 801459c:	601a      	str	r2, [r3, #0]

	int xspaceforicon = 36;
 801459e:	2324      	movs	r3, #36	; 0x24
 80145a0:	607b      	str	r3, [r7, #4]
	int line = 0;
 80145a2:	2300      	movs	r3, #0
 80145a4:	603b      	str	r3, [r7, #0]

	tft_print(&verdana_18ptFontInfo, getLangadd(PS_Voltage,":"), bb_xleft, bb_y + line++ * bb_yspace, 4, WHITE , BLACK);
 80145a6:	4980      	ldr	r1, [pc, #512]	; (80147a8 <draw_menu_bar+0x224>)
 80145a8:	2008      	movs	r0, #8
 80145aa:	f7fc fc45 	bl	8010e38 <getLangadd>
 80145ae:	4b7f      	ldr	r3, [pc, #508]	; (80147ac <draw_menu_bar+0x228>)
 80145b0:	6819      	ldr	r1, [r3, #0]
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	1c5a      	adds	r2, r3, #1
 80145b6:	603a      	str	r2, [r7, #0]
 80145b8:	4a7d      	ldr	r2, [pc, #500]	; (80147b0 <draw_menu_bar+0x22c>)
 80145ba:	6812      	ldr	r2, [r2, #0]
 80145bc:	fb02 f203 	mul.w	r2, r2, r3
 80145c0:	4b7c      	ldr	r3, [pc, #496]	; (80147b4 <draw_menu_bar+0x230>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	441a      	add	r2, r3
 80145c6:	2300      	movs	r3, #0
 80145c8:	9302      	str	r3, [sp, #8]
 80145ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145ce:	9301      	str	r3, [sp, #4]
 80145d0:	2304      	movs	r3, #4
 80145d2:	9300      	str	r3, [sp, #0]
 80145d4:	4613      	mov	r3, r2
 80145d6:	460a      	mov	r2, r1
 80145d8:	4601      	mov	r1, r0
 80145da:	4877      	ldr	r0, [pc, #476]	; (80147b8 <draw_menu_bar+0x234>)
 80145dc:	f00a fae2 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, getLangadd(PS_Current,":"), bb_xleft, bb_y + line++ * bb_yspace, 4, WHITE , BLACK);
 80145e0:	4971      	ldr	r1, [pc, #452]	; (80147a8 <draw_menu_bar+0x224>)
 80145e2:	2009      	movs	r0, #9
 80145e4:	f7fc fc28 	bl	8010e38 <getLangadd>
 80145e8:	4b70      	ldr	r3, [pc, #448]	; (80147ac <draw_menu_bar+0x228>)
 80145ea:	6819      	ldr	r1, [r3, #0]
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	1c5a      	adds	r2, r3, #1
 80145f0:	603a      	str	r2, [r7, #0]
 80145f2:	4a6f      	ldr	r2, [pc, #444]	; (80147b0 <draw_menu_bar+0x22c>)
 80145f4:	6812      	ldr	r2, [r2, #0]
 80145f6:	fb02 f203 	mul.w	r2, r2, r3
 80145fa:	4b6e      	ldr	r3, [pc, #440]	; (80147b4 <draw_menu_bar+0x230>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	441a      	add	r2, r3
 8014600:	2300      	movs	r3, #0
 8014602:	9302      	str	r3, [sp, #8]
 8014604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014608:	9301      	str	r3, [sp, #4]
 801460a:	2304      	movs	r3, #4
 801460c:	9300      	str	r3, [sp, #0]
 801460e:	4613      	mov	r3, r2
 8014610:	460a      	mov	r2, r1
 8014612:	4601      	mov	r1, r0
 8014614:	4868      	ldr	r0, [pc, #416]	; (80147b8 <draw_menu_bar+0x234>)
 8014616:	f00a fac5 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, getLangadd(Temperature1,":"), bb_xleft, bb_y + line++ * bb_yspace, 4, WHITE , BLACK);
 801461a:	4963      	ldr	r1, [pc, #396]	; (80147a8 <draw_menu_bar+0x224>)
 801461c:	2006      	movs	r0, #6
 801461e:	f7fc fc0b 	bl	8010e38 <getLangadd>
 8014622:	4b62      	ldr	r3, [pc, #392]	; (80147ac <draw_menu_bar+0x228>)
 8014624:	6819      	ldr	r1, [r3, #0]
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	1c5a      	adds	r2, r3, #1
 801462a:	603a      	str	r2, [r7, #0]
 801462c:	4a60      	ldr	r2, [pc, #384]	; (80147b0 <draw_menu_bar+0x22c>)
 801462e:	6812      	ldr	r2, [r2, #0]
 8014630:	fb02 f203 	mul.w	r2, r2, r3
 8014634:	4b5f      	ldr	r3, [pc, #380]	; (80147b4 <draw_menu_bar+0x230>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	441a      	add	r2, r3
 801463a:	2300      	movs	r3, #0
 801463c:	9302      	str	r3, [sp, #8]
 801463e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014642:	9301      	str	r3, [sp, #4]
 8014644:	2304      	movs	r3, #4
 8014646:	9300      	str	r3, [sp, #0]
 8014648:	4613      	mov	r3, r2
 801464a:	460a      	mov	r2, r1
 801464c:	4601      	mov	r1, r0
 801464e:	485a      	ldr	r0, [pc, #360]	; (80147b8 <draw_menu_bar+0x234>)
 8014650:	f00a faa8 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, getLangadd(Temperature2,":"), bb_xleft, bb_y + line++ * bb_yspace, 4, WHITE , BLACK);
 8014654:	4954      	ldr	r1, [pc, #336]	; (80147a8 <draw_menu_bar+0x224>)
 8014656:	203f      	movs	r0, #63	; 0x3f
 8014658:	f7fc fbee 	bl	8010e38 <getLangadd>
 801465c:	4b53      	ldr	r3, [pc, #332]	; (80147ac <draw_menu_bar+0x228>)
 801465e:	6819      	ldr	r1, [r3, #0]
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	1c5a      	adds	r2, r3, #1
 8014664:	603a      	str	r2, [r7, #0]
 8014666:	4a52      	ldr	r2, [pc, #328]	; (80147b0 <draw_menu_bar+0x22c>)
 8014668:	6812      	ldr	r2, [r2, #0]
 801466a:	fb02 f203 	mul.w	r2, r2, r3
 801466e:	4b51      	ldr	r3, [pc, #324]	; (80147b4 <draw_menu_bar+0x230>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	441a      	add	r2, r3
 8014674:	2300      	movs	r3, #0
 8014676:	9302      	str	r3, [sp, #8]
 8014678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801467c:	9301      	str	r3, [sp, #4]
 801467e:	2304      	movs	r3, #4
 8014680:	9300      	str	r3, [sp, #0]
 8014682:	4613      	mov	r3, r2
 8014684:	460a      	mov	r2, r1
 8014686:	4601      	mov	r1, r0
 8014688:	484b      	ldr	r0, [pc, #300]	; (80147b8 <draw_menu_bar+0x234>)
 801468a:	f00a fa8b 	bl	801eba4 <tft_print>

	if(pcfgdata->systemMode == 0)
 801468e:	4b4b      	ldr	r3, [pc, #300]	; (80147bc <draw_menu_bar+0x238>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014696:	2b00      	cmp	r3, #0
 8014698:	d15c      	bne.n	8014754 <draw_menu_bar+0x1d0>
	{
		// Pamp Mode
		line = 0;
 801469a:	2300      	movs	r3, #0
 801469c:	603b      	str	r3, [r7, #0]
		tft_print(&verdana_18ptFontInfo, getLang(PTT_from_TRX), bb_xfan+xspaceforicon, bb_y + line++ * bb_yspace, 2, WHITE , BLACK);
 801469e:	201f      	movs	r0, #31
 80146a0:	f7fc fba0 	bl	8010de4 <getLang>
 80146a4:	4b46      	ldr	r3, [pc, #280]	; (80147c0 <draw_menu_bar+0x23c>)
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	18d1      	adds	r1, r2, r3
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	1c5a      	adds	r2, r3, #1
 80146b0:	603a      	str	r2, [r7, #0]
 80146b2:	4a3f      	ldr	r2, [pc, #252]	; (80147b0 <draw_menu_bar+0x22c>)
 80146b4:	6812      	ldr	r2, [r2, #0]
 80146b6:	fb02 f203 	mul.w	r2, r2, r3
 80146ba:	4b3e      	ldr	r3, [pc, #248]	; (80147b4 <draw_menu_bar+0x230>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	441a      	add	r2, r3
 80146c0:	2300      	movs	r3, #0
 80146c2:	9302      	str	r3, [sp, #8]
 80146c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146c8:	9301      	str	r3, [sp, #4]
 80146ca:	2302      	movs	r3, #2
 80146cc:	9300      	str	r3, [sp, #0]
 80146ce:	4613      	mov	r3, r2
 80146d0:	460a      	mov	r2, r1
 80146d2:	4601      	mov	r1, r0
 80146d4:	4838      	ldr	r0, [pc, #224]	; (80147b8 <draw_menu_bar+0x234>)
 80146d6:	f00a fa65 	bl	801eba4 <tft_print>
		tft_print(&verdana_18ptFontInfo, getLang(PTT_out), bb_xfan+xspaceforicon, bb_y + line++ * bb_yspace, 2, WHITE , BLACK);
 80146da:	2026      	movs	r0, #38	; 0x26
 80146dc:	f7fc fb82 	bl	8010de4 <getLang>
 80146e0:	4b37      	ldr	r3, [pc, #220]	; (80147c0 <draw_menu_bar+0x23c>)
 80146e2:	681a      	ldr	r2, [r3, #0]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	18d1      	adds	r1, r2, r3
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	1c5a      	adds	r2, r3, #1
 80146ec:	603a      	str	r2, [r7, #0]
 80146ee:	4a30      	ldr	r2, [pc, #192]	; (80147b0 <draw_menu_bar+0x22c>)
 80146f0:	6812      	ldr	r2, [r2, #0]
 80146f2:	fb02 f203 	mul.w	r2, r2, r3
 80146f6:	4b2f      	ldr	r3, [pc, #188]	; (80147b4 <draw_menu_bar+0x230>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	441a      	add	r2, r3
 80146fc:	2300      	movs	r3, #0
 80146fe:	9302      	str	r3, [sp, #8]
 8014700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014704:	9301      	str	r3, [sp, #4]
 8014706:	2302      	movs	r3, #2
 8014708:	9300      	str	r3, [sp, #0]
 801470a:	4613      	mov	r3, r2
 801470c:	460a      	mov	r2, r1
 801470e:	4601      	mov	r1, r0
 8014710:	4829      	ldr	r0, [pc, #164]	; (80147b8 <draw_menu_bar+0x234>)
 8014712:	f00a fa47 	bl	801eba4 <tft_print>
		tft_print(&verdana_18ptFontInfo, getLang(FAN), bb_xfan+xspaceforicon, bb_y + line++ * bb_yspace, 2, WHITE , BLACK);
 8014716:	2025      	movs	r0, #37	; 0x25
 8014718:	f7fc fb64 	bl	8010de4 <getLang>
 801471c:	4b28      	ldr	r3, [pc, #160]	; (80147c0 <draw_menu_bar+0x23c>)
 801471e:	681a      	ldr	r2, [r3, #0]
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	18d1      	adds	r1, r2, r3
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	1c5a      	adds	r2, r3, #1
 8014728:	603a      	str	r2, [r7, #0]
 801472a:	4a21      	ldr	r2, [pc, #132]	; (80147b0 <draw_menu_bar+0x22c>)
 801472c:	6812      	ldr	r2, [r2, #0]
 801472e:	fb02 f203 	mul.w	r2, r2, r3
 8014732:	4b20      	ldr	r3, [pc, #128]	; (80147b4 <draw_menu_bar+0x230>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	441a      	add	r2, r3
 8014738:	2300      	movs	r3, #0
 801473a:	9302      	str	r3, [sp, #8]
 801473c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014740:	9301      	str	r3, [sp, #4]
 8014742:	2302      	movs	r3, #2
 8014744:	9300      	str	r3, [sp, #0]
 8014746:	4613      	mov	r3, r2
 8014748:	460a      	mov	r2, r1
 801474a:	4601      	mov	r1, r0
 801474c:	481a      	ldr	r0, [pc, #104]	; (80147b8 <draw_menu_bar+0x234>)
 801474e:	f00a fa29 	bl	801eba4 <tft_print>
	else if(pcfgdata->systemMode == 1)
	{
		// PwrSwr Mode
		TFT_Rectangle(bb_xleft-10, bb_y-15, bb_xleft+440, bb_y + line * bb_yspace, RGB16(128,128,50), 2);
	}
}
 8014752:	e022      	b.n	801479a <draw_menu_bar+0x216>
	else if(pcfgdata->systemMode == 1)
 8014754:	4b19      	ldr	r3, [pc, #100]	; (80147bc <draw_menu_bar+0x238>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801475c:	2b01      	cmp	r3, #1
 801475e:	d11c      	bne.n	801479a <draw_menu_bar+0x216>
		TFT_Rectangle(bb_xleft-10, bb_y-15, bb_xleft+440, bb_y + line * bb_yspace, RGB16(128,128,50), 2);
 8014760:	4b12      	ldr	r3, [pc, #72]	; (80147ac <draw_menu_bar+0x228>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f1a3 000a 	sub.w	r0, r3, #10
 8014768:	4b12      	ldr	r3, [pc, #72]	; (80147b4 <draw_menu_bar+0x230>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	f1a3 010f 	sub.w	r1, r3, #15
 8014770:	4b0e      	ldr	r3, [pc, #56]	; (80147ac <draw_menu_bar+0x228>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8014778:	4b0d      	ldr	r3, [pc, #52]	; (80147b0 <draw_menu_bar+0x22c>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	683a      	ldr	r2, [r7, #0]
 801477e:	fb02 f203 	mul.w	r2, r2, r3
 8014782:	4b0c      	ldr	r3, [pc, #48]	; (80147b4 <draw_menu_bar+0x230>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	441a      	add	r2, r3
 8014788:	2302      	movs	r3, #2
 801478a:	9301      	str	r3, [sp, #4]
 801478c:	f248 4306 	movw	r3, #33798	; 0x8406
 8014790:	9300      	str	r3, [sp, #0]
 8014792:	4613      	mov	r3, r2
 8014794:	4622      	mov	r2, r4
 8014796:	f003 fba9 	bl	8017eec <TFT_Rectangle>
}
 801479a:	bf00      	nop
 801479c:	370c      	adds	r7, #12
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd90      	pop	{r4, r7, pc}
 80147a2:	bf00      	nop
 80147a4:	20000c2c 	.word	0x20000c2c
 80147a8:	08026a40 	.word	0x08026a40
 80147ac:	200013a4 	.word	0x200013a4
 80147b0:	200013b0 	.word	0x200013b0
 80147b4:	200013ac 	.word	0x200013ac
 80147b8:	20001c70 	.word	0x20001c70
 80147bc:	20000bf0 	.word	0x20000bf0
 80147c0:	200013b4 	.word	0x200013b4

080147c4 <draw_values_bigbar>:

void draw_values_bigbar()
 {
 80147c4:	b590      	push	{r4, r7, lr}
 80147c6:	b09f      	sub	sp, #124	; 0x7c
 80147c8:	af04      	add	r7, sp, #16
	 int y = bb_y-6;
 80147ca:	4bab      	ldr	r3, [pc, #684]	; (8014a78 <draw_values_bigbar+0x2b4>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	3b06      	subs	r3, #6
 80147d0:	667b      	str	r3, [r7, #100]	; 0x64
	 int line = 0;
 80147d2:	2300      	movs	r3, #0
 80147d4:	663b      	str	r3, [r7, #96]	; 0x60
	 char s[50],st1[20],st2[20];

	 if(pcfgdata->systemMode == 0)
 80147d6:	4ba9      	ldr	r3, [pc, #676]	; (8014a7c <draw_values_bigbar+0x2b8>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d130      	bne.n	8014844 <draw_values_bigbar+0x80>
	 {
		 // Pamp mode
		 draw_statbutton(PTTIN, bb_xfan, y + line++ * bb_yspace, 0,0);
 80147e2:	4ba7      	ldr	r3, [pc, #668]	; (8014a80 <draw_values_bigbar+0x2bc>)
 80147e4:	6819      	ldr	r1, [r3, #0]
 80147e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80147e8:	1c5a      	adds	r2, r3, #1
 80147ea:	663a      	str	r2, [r7, #96]	; 0x60
 80147ec:	4aa5      	ldr	r2, [pc, #660]	; (8014a84 <draw_values_bigbar+0x2c0>)
 80147ee:	6812      	ldr	r2, [r2, #0]
 80147f0:	fb02 f203 	mul.w	r2, r2, r3
 80147f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147f6:	441a      	add	r2, r3
 80147f8:	2300      	movs	r3, #0
 80147fa:	9300      	str	r3, [sp, #0]
 80147fc:	2300      	movs	r3, #0
 80147fe:	200c      	movs	r0, #12
 8014800:	f7fe ff32 	bl	8013668 <draw_statbutton>
		 draw_statbutton(PTTOUT, bb_xfan, y + line++ * bb_yspace, 1,0);
 8014804:	4b9e      	ldr	r3, [pc, #632]	; (8014a80 <draw_values_bigbar+0x2bc>)
 8014806:	6819      	ldr	r1, [r3, #0]
 8014808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801480a:	1c5a      	adds	r2, r3, #1
 801480c:	663a      	str	r2, [r7, #96]	; 0x60
 801480e:	4a9d      	ldr	r2, [pc, #628]	; (8014a84 <draw_values_bigbar+0x2c0>)
 8014810:	6812      	ldr	r2, [r2, #0]
 8014812:	fb02 f203 	mul.w	r2, r2, r3
 8014816:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014818:	441a      	add	r2, r3
 801481a:	2300      	movs	r3, #0
 801481c:	9300      	str	r3, [sp, #0]
 801481e:	2301      	movs	r3, #1
 8014820:	2014      	movs	r0, #20
 8014822:	f7fe ff21 	bl	8013668 <draw_statbutton>
		 draw_statbutton(FAN_ONOFF, bb_xfan, y + line * bb_yspace, 1,0);
 8014826:	4b96      	ldr	r3, [pc, #600]	; (8014a80 <draw_values_bigbar+0x2bc>)
 8014828:	6819      	ldr	r1, [r3, #0]
 801482a:	4b96      	ldr	r3, [pc, #600]	; (8014a84 <draw_values_bigbar+0x2c0>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014830:	fb02 f203 	mul.w	r2, r2, r3
 8014834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014836:	441a      	add	r2, r3
 8014838:	2300      	movs	r3, #0
 801483a:	9300      	str	r3, [sp, #0]
 801483c:	2301      	movs	r3, #1
 801483e:	2012      	movs	r0, #18
 8014840:	f7fe ff12 	bl	8013668 <draw_statbutton>
	 }

	 fill_bar(&bar_big_power, pwrswr_antenna.fwd_watt, pwrswr_antenna.fwd_peakwatt);
 8014844:	4b90      	ldr	r3, [pc, #576]	; (8014a88 <draw_values_bigbar+0x2c4>)
 8014846:	edd3 7a02 	vldr	s15, [r3, #8]
 801484a:	4b8f      	ldr	r3, [pc, #572]	; (8014a88 <draw_values_bigbar+0x2c4>)
 801484c:	ed93 7a03 	vldr	s14, [r3, #12]
 8014850:	eef0 0a47 	vmov.f32	s1, s14
 8014854:	eeb0 0a67 	vmov.f32	s0, s15
 8014858:	488c      	ldr	r0, [pc, #560]	; (8014a8c <draw_values_bigbar+0x2c8>)
 801485a:	f7f7 fd1d 	bl	800c298 <fill_bar>
	 fill_bar(&bar_big_swr, pwrswr_antenna.swr,-1);
 801485e:	4b8a      	ldr	r3, [pc, #552]	; (8014a88 <draw_values_bigbar+0x2c4>)
 8014860:	edd3 7a06 	vldr	s15, [r3, #24]
 8014864:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8014868:	eeb0 0a67 	vmov.f32	s0, s15
 801486c:	4888      	ldr	r0, [pc, #544]	; (8014a90 <draw_values_bigbar+0x2cc>)
 801486e:	f7f7 fd13 	bl	800c298 <fill_bar>

	y += 6;
 8014872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014874:	3306      	adds	r3, #6
 8014876:	667b      	str	r3, [r7, #100]	; 0x64
	line = 0;
 8014878:	2300      	movs	r3, #0
 801487a:	663b      	str	r3, [r7, #96]	; 0x60

	if(adc_realvals[UTEMP] > -9)
 801487c:	4b85      	ldr	r3, [pc, #532]	; (8014a94 <draw_values_bigbar+0x2d0>)
 801487e:	edd3 7a03 	vldr	s15, [r3, #12]
 8014882:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 8014886:	eef4 7ac7 	vcmpe.f32	s15, s14
 801488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801488e:	dd0e      	ble.n	80148ae <draw_values_bigbar+0xea>
		sprintf(st1,"%6.1f",adc_realvals[UTEMP]);
 8014890:	4b80      	ldr	r3, [pc, #512]	; (8014a94 <draw_values_bigbar+0x2d0>)
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	4618      	mov	r0, r3
 8014896:	f7f3 fd8f 	bl	80083b8 <__aeabi_f2d>
 801489a:	4603      	mov	r3, r0
 801489c:	460c      	mov	r4, r1
 801489e:	f107 0014 	add.w	r0, r7, #20
 80148a2:	461a      	mov	r2, r3
 80148a4:	4623      	mov	r3, r4
 80148a6:	497c      	ldr	r1, [pc, #496]	; (8014a98 <draw_values_bigbar+0x2d4>)
 80148a8:	f00a fcc6 	bl	801f238 <sprintf>
 80148ac:	e00a      	b.n	80148c4 <draw_values_bigbar+0x100>
	else
		sprintf(st1,"  --- ");
 80148ae:	f107 0314 	add.w	r3, r7, #20
 80148b2:	4a7a      	ldr	r2, [pc, #488]	; (8014a9c <draw_values_bigbar+0x2d8>)
 80148b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148b8:	6018      	str	r0, [r3, #0]
 80148ba:	3304      	adds	r3, #4
 80148bc:	8019      	strh	r1, [r3, #0]
 80148be:	3302      	adds	r3, #2
 80148c0:	0c0a      	lsrs	r2, r1, #16
 80148c2:	701a      	strb	r2, [r3, #0]

	if(adc_realvals[UTEMP2] > -9)
 80148c4:	4b73      	ldr	r3, [pc, #460]	; (8014a94 <draw_values_bigbar+0x2d0>)
 80148c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80148ca:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 80148ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d6:	dd0d      	ble.n	80148f4 <draw_values_bigbar+0x130>
			sprintf(st2,"%6.1f",adc_realvals[UTEMP2]);
 80148d8:	4b6e      	ldr	r3, [pc, #440]	; (8014a94 <draw_values_bigbar+0x2d0>)
 80148da:	6a1b      	ldr	r3, [r3, #32]
 80148dc:	4618      	mov	r0, r3
 80148de:	f7f3 fd6b 	bl	80083b8 <__aeabi_f2d>
 80148e2:	4603      	mov	r3, r0
 80148e4:	460c      	mov	r4, r1
 80148e6:	4638      	mov	r0, r7
 80148e8:	461a      	mov	r2, r3
 80148ea:	4623      	mov	r3, r4
 80148ec:	496a      	ldr	r1, [pc, #424]	; (8014a98 <draw_values_bigbar+0x2d4>)
 80148ee:	f00a fca3 	bl	801f238 <sprintf>
 80148f2:	e009      	b.n	8014908 <draw_values_bigbar+0x144>
		else
			sprintf(st2,"  --- ");
 80148f4:	463b      	mov	r3, r7
 80148f6:	4a69      	ldr	r2, [pc, #420]	; (8014a9c <draw_values_bigbar+0x2d8>)
 80148f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148fc:	6018      	str	r0, [r3, #0]
 80148fe:	3304      	adds	r3, #4
 8014900:	8019      	strh	r1, [r3, #0]
 8014902:	3302      	adds	r3, #2
 8014904:	0c0a      	lsrs	r2, r1, #16
 8014906:	701a      	strb	r2, [r3, #0]

	int rshift = 210;
 8014908:	23d2      	movs	r3, #210	; 0xd2
 801490a:	65fb      	str	r3, [r7, #92]	; 0x5c
	sprintf(s,"%6.1f V  ",adc_realvals[UMESS]);
 801490c:	4b61      	ldr	r3, [pc, #388]	; (8014a94 <draw_values_bigbar+0x2d0>)
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	f7f3 fd51 	bl	80083b8 <__aeabi_f2d>
 8014916:	4603      	mov	r3, r0
 8014918:	460c      	mov	r4, r1
 801491a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801491e:	461a      	mov	r2, r3
 8014920:	4623      	mov	r3, r4
 8014922:	495f      	ldr	r1, [pc, #380]	; (8014aa0 <draw_values_bigbar+0x2dc>)
 8014924:	f00a fc88 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, bb_xleft+rshift, y + line++ * bb_yspace, 1, YELLOW , BLACK);
 8014928:	4b5e      	ldr	r3, [pc, #376]	; (8014aa4 <draw_values_bigbar+0x2e0>)
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801492e:	18d0      	adds	r0, r2, r3
 8014930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014932:	1c5a      	adds	r2, r3, #1
 8014934:	663a      	str	r2, [r7, #96]	; 0x60
 8014936:	4a53      	ldr	r2, [pc, #332]	; (8014a84 <draw_values_bigbar+0x2c0>)
 8014938:	6812      	ldr	r2, [r2, #0]
 801493a:	fb02 f203 	mul.w	r2, r2, r3
 801493e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014940:	441a      	add	r2, r3
 8014942:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014946:	2300      	movs	r3, #0
 8014948:	9302      	str	r3, [sp, #8]
 801494a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801494e:	9301      	str	r3, [sp, #4]
 8014950:	2301      	movs	r3, #1
 8014952:	9300      	str	r3, [sp, #0]
 8014954:	4613      	mov	r3, r2
 8014956:	4602      	mov	r2, r0
 8014958:	4853      	ldr	r0, [pc, #332]	; (8014aa8 <draw_values_bigbar+0x2e4>)
 801495a:	f00a f923 	bl	801eba4 <tft_print>
	sprintf(s,"%6.1f A  ",adc_realvals[IMESS]);
 801495e:	4b4d      	ldr	r3, [pc, #308]	; (8014a94 <draw_values_bigbar+0x2d0>)
 8014960:	691b      	ldr	r3, [r3, #16]
 8014962:	4618      	mov	r0, r3
 8014964:	f7f3 fd28 	bl	80083b8 <__aeabi_f2d>
 8014968:	4603      	mov	r3, r0
 801496a:	460c      	mov	r4, r1
 801496c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8014970:	461a      	mov	r2, r3
 8014972:	4623      	mov	r3, r4
 8014974:	494d      	ldr	r1, [pc, #308]	; (8014aac <draw_values_bigbar+0x2e8>)
 8014976:	f00a fc5f 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, bb_xleft+rshift, y + line++ * bb_yspace, 1, YELLOW , BLACK);
 801497a:	4b4a      	ldr	r3, [pc, #296]	; (8014aa4 <draw_values_bigbar+0x2e0>)
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014980:	18d0      	adds	r0, r2, r3
 8014982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014984:	1c5a      	adds	r2, r3, #1
 8014986:	663a      	str	r2, [r7, #96]	; 0x60
 8014988:	4a3e      	ldr	r2, [pc, #248]	; (8014a84 <draw_values_bigbar+0x2c0>)
 801498a:	6812      	ldr	r2, [r2, #0]
 801498c:	fb02 f203 	mul.w	r2, r2, r3
 8014990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014992:	441a      	add	r2, r3
 8014994:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014998:	2300      	movs	r3, #0
 801499a:	9302      	str	r3, [sp, #8]
 801499c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80149a0:	9301      	str	r3, [sp, #4]
 80149a2:	2301      	movs	r3, #1
 80149a4:	9300      	str	r3, [sp, #0]
 80149a6:	4613      	mov	r3, r2
 80149a8:	4602      	mov	r2, r0
 80149aa:	483f      	ldr	r0, [pc, #252]	; (8014aa8 <draw_values_bigbar+0x2e4>)
 80149ac:	f00a f8fa 	bl	801eba4 <tft_print>
	sprintf(st1+strlen(st1)," ~%s ", pcfgdata->tempunits?"F":"C");
 80149b0:	f107 0314 	add.w	r3, r7, #20
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7f3 fb43 	bl	8008040 <strlen>
 80149ba:	4602      	mov	r2, r0
 80149bc:	f107 0314 	add.w	r3, r7, #20
 80149c0:	1898      	adds	r0, r3, r2
 80149c2:	4b2e      	ldr	r3, [pc, #184]	; (8014a7c <draw_values_bigbar+0x2b8>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d001      	beq.n	80149d2 <draw_values_bigbar+0x20e>
 80149ce:	4b38      	ldr	r3, [pc, #224]	; (8014ab0 <draw_values_bigbar+0x2ec>)
 80149d0:	e000      	b.n	80149d4 <draw_values_bigbar+0x210>
 80149d2:	4b38      	ldr	r3, [pc, #224]	; (8014ab4 <draw_values_bigbar+0x2f0>)
 80149d4:	461a      	mov	r2, r3
 80149d6:	4938      	ldr	r1, [pc, #224]	; (8014ab8 <draw_values_bigbar+0x2f4>)
 80149d8:	f00a fc2e 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, st1, bb_xleft+rshift, y + line++ * bb_yspace, 1, YELLOW , BLACK);
 80149dc:	4b31      	ldr	r3, [pc, #196]	; (8014aa4 <draw_values_bigbar+0x2e0>)
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80149e2:	18d0      	adds	r0, r2, r3
 80149e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80149e6:	1c5a      	adds	r2, r3, #1
 80149e8:	663a      	str	r2, [r7, #96]	; 0x60
 80149ea:	4a26      	ldr	r2, [pc, #152]	; (8014a84 <draw_values_bigbar+0x2c0>)
 80149ec:	6812      	ldr	r2, [r2, #0]
 80149ee:	fb02 f203 	mul.w	r2, r2, r3
 80149f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149f4:	441a      	add	r2, r3
 80149f6:	f107 0114 	add.w	r1, r7, #20
 80149fa:	2300      	movs	r3, #0
 80149fc:	9302      	str	r3, [sp, #8]
 80149fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014a02:	9301      	str	r3, [sp, #4]
 8014a04:	2301      	movs	r3, #1
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	4613      	mov	r3, r2
 8014a0a:	4602      	mov	r2, r0
 8014a0c:	4826      	ldr	r0, [pc, #152]	; (8014aa8 <draw_values_bigbar+0x2e4>)
 8014a0e:	f00a f8c9 	bl	801eba4 <tft_print>
	sprintf(st2+strlen(st2)," ~%s ", pcfgdata->tempunits?"F":"C");
 8014a12:	463b      	mov	r3, r7
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7f3 fb13 	bl	8008040 <strlen>
 8014a1a:	4602      	mov	r2, r0
 8014a1c:	463b      	mov	r3, r7
 8014a1e:	1898      	adds	r0, r3, r2
 8014a20:	4b16      	ldr	r3, [pc, #88]	; (8014a7c <draw_values_bigbar+0x2b8>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d001      	beq.n	8014a30 <draw_values_bigbar+0x26c>
 8014a2c:	4b20      	ldr	r3, [pc, #128]	; (8014ab0 <draw_values_bigbar+0x2ec>)
 8014a2e:	e000      	b.n	8014a32 <draw_values_bigbar+0x26e>
 8014a30:	4b20      	ldr	r3, [pc, #128]	; (8014ab4 <draw_values_bigbar+0x2f0>)
 8014a32:	461a      	mov	r2, r3
 8014a34:	4920      	ldr	r1, [pc, #128]	; (8014ab8 <draw_values_bigbar+0x2f4>)
 8014a36:	f00a fbff 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, st2, bb_xleft+rshift, y + line++ * bb_yspace, 1, YELLOW , BLACK);
 8014a3a:	4b1a      	ldr	r3, [pc, #104]	; (8014aa4 <draw_values_bigbar+0x2e0>)
 8014a3c:	681a      	ldr	r2, [r3, #0]
 8014a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014a40:	18d0      	adds	r0, r2, r3
 8014a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a44:	1c5a      	adds	r2, r3, #1
 8014a46:	663a      	str	r2, [r7, #96]	; 0x60
 8014a48:	4a0e      	ldr	r2, [pc, #56]	; (8014a84 <draw_values_bigbar+0x2c0>)
 8014a4a:	6812      	ldr	r2, [r2, #0]
 8014a4c:	fb02 f203 	mul.w	r2, r2, r3
 8014a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014a52:	441a      	add	r2, r3
 8014a54:	4639      	mov	r1, r7
 8014a56:	2300      	movs	r3, #0
 8014a58:	9302      	str	r3, [sp, #8]
 8014a5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014a5e:	9301      	str	r3, [sp, #4]
 8014a60:	2301      	movs	r3, #1
 8014a62:	9300      	str	r3, [sp, #0]
 8014a64:	4613      	mov	r3, r2
 8014a66:	4602      	mov	r2, r0
 8014a68:	480f      	ldr	r0, [pc, #60]	; (8014aa8 <draw_values_bigbar+0x2e4>)
 8014a6a:	f00a f89b 	bl	801eba4 <tft_print>
 }
 8014a6e:	bf00      	nop
 8014a70:	376c      	adds	r7, #108	; 0x6c
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd90      	pop	{r4, r7, pc}
 8014a76:	bf00      	nop
 8014a78:	200013ac 	.word	0x200013ac
 8014a7c:	20000bf0 	.word	0x20000bf0
 8014a80:	200013b4 	.word	0x200013b4
 8014a84:	200013b0 	.word	0x200013b0
 8014a88:	20005684 	.word	0x20005684
 8014a8c:	200045d4 	.word	0x200045d4
 8014a90:	2000434c 	.word	0x2000434c
 8014a94:	2000314c 	.word	0x2000314c
 8014a98:	08026aac 	.word	0x08026aac
 8014a9c:	08026bb4 	.word	0x08026bb4
 8014aa0:	08026bbc 	.word	0x08026bbc
 8014aa4:	200013a4 	.word	0x200013a4
 8014aa8:	20001c34 	.word	0x20001c34
 8014aac:	08026bc8 	.word	0x08026bc8
 8014ab0:	08026bd4 	.word	0x08026bd4
 8014ab4:	08026bd8 	.word	0x08026bd8
 8014ab8:	08026bdc 	.word	0x08026bdc

08014abc <draw_menu_meter>:

// ============= METER =================

void draw_menu_meter()
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b08a      	sub	sp, #40	; 0x28
 8014ac0:	af04      	add	r7, sp, #16
	TFT_Fill_Screen(BLACK);
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	f002 fef8 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_mainmenu();
 8014ac8:	f005 fb42 	bl	801a150 <draw_touchbuttons_mainmenu>

	setup_instrument(10,50);
 8014acc:	2132      	movs	r1, #50	; 0x32
 8014ace:	200a      	movs	r0, #10
 8014ad0:	f7fb fc14 	bl	80102fc <setup_instrument>

	int by = 350;
 8014ad4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8014ad8:	613b      	str	r3, [r7, #16]
	tft_print(&verdana_18ptFontInfo, getLang(FORWARD), 1, by, 4, WHITE, BLACK);
 8014ada:	2033      	movs	r0, #51	; 0x33
 8014adc:	f7fc f982 	bl	8010de4 <getLang>
 8014ae0:	4601      	mov	r1, r0
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	9302      	str	r3, [sp, #8]
 8014ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014aea:	9301      	str	r3, [sp, #4]
 8014aec:	2304      	movs	r3, #4
 8014aee:	9300      	str	r3, [sp, #0]
 8014af0:	693b      	ldr	r3, [r7, #16]
 8014af2:	2201      	movs	r2, #1
 8014af4:	487d      	ldr	r0, [pc, #500]	; (8014cec <draw_menu_meter+0x230>)
 8014af6:	f00a f855 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, getLang(REVERSE), 1, by+30, 4, WHITE, BLACK);
 8014afa:	2034      	movs	r0, #52	; 0x34
 8014afc:	f7fc f972 	bl	8010de4 <getLang>
 8014b00:	4601      	mov	r1, r0
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	f103 021e 	add.w	r2, r3, #30
 8014b08:	2300      	movs	r3, #0
 8014b0a:	9302      	str	r3, [sp, #8]
 8014b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b10:	9301      	str	r3, [sp, #4]
 8014b12:	2304      	movs	r3, #4
 8014b14:	9300      	str	r3, [sp, #0]
 8014b16:	4613      	mov	r3, r2
 8014b18:	2201      	movs	r2, #1
 8014b1a:	4874      	ldr	r0, [pc, #464]	; (8014cec <draw_menu_meter+0x230>)
 8014b1c:	f00a f842 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, "SWR:", 350, by, 4, WHITE, BLACK);
 8014b20:	2300      	movs	r3, #0
 8014b22:	9302      	str	r3, [sp, #8]
 8014b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b28:	9301      	str	r3, [sp, #4]
 8014b2a:	2304      	movs	r3, #4
 8014b2c:	9300      	str	r3, [sp, #0]
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014b34:	496e      	ldr	r1, [pc, #440]	; (8014cf0 <draw_menu_meter+0x234>)
 8014b36:	486d      	ldr	r0, [pc, #436]	; (8014cec <draw_menu_meter+0x230>)
 8014b38:	f00a f834 	bl	801eba4 <tft_print>

	int xleft = 425;
 8014b3c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8014b40:	60fb      	str	r3, [r7, #12]
	int xspaceforicon = 38;
 8014b42:	2326      	movs	r3, #38	; 0x26
 8014b44:	60bb      	str	r3, [r7, #8]
	int y = 50;
 8014b46:	2332      	movs	r3, #50	; 0x32
 8014b48:	607b      	str	r3, [r7, #4]
	int yspace = 30;
 8014b4a:	231e      	movs	r3, #30
 8014b4c:	603b      	str	r3, [r7, #0]
	int line = 0;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	617b      	str	r3, [r7, #20]

	if(pcfgdata->systemMode == 0)
 8014b52:	4b68      	ldr	r3, [pc, #416]	; (8014cf4 <draw_menu_meter+0x238>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d150      	bne.n	8014c00 <draw_menu_meter+0x144>
	{
		// Pamp mode
		tft_print(&verdana_18ptFontInfo, getLang(PTT_from_TRX), xleft+xspaceforicon, y + line++ * yspace, 4, WHITE , BLACK);
 8014b5e:	201f      	movs	r0, #31
 8014b60:	f7fc f940 	bl	8010de4 <getLang>
 8014b64:	68fa      	ldr	r2, [r7, #12]
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	18d1      	adds	r1, r2, r3
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	1c5a      	adds	r2, r3, #1
 8014b6e:	617a      	str	r2, [r7, #20]
 8014b70:	683a      	ldr	r2, [r7, #0]
 8014b72:	fb02 f203 	mul.w	r2, r2, r3
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	441a      	add	r2, r3
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	9302      	str	r3, [sp, #8]
 8014b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b82:	9301      	str	r3, [sp, #4]
 8014b84:	2304      	movs	r3, #4
 8014b86:	9300      	str	r3, [sp, #0]
 8014b88:	4613      	mov	r3, r2
 8014b8a:	460a      	mov	r2, r1
 8014b8c:	4601      	mov	r1, r0
 8014b8e:	4857      	ldr	r0, [pc, #348]	; (8014cec <draw_menu_meter+0x230>)
 8014b90:	f00a f808 	bl	801eba4 <tft_print>
		tft_print(&verdana_18ptFontInfo, getLang(PTT_out), xleft+xspaceforicon, y + line++ * yspace, 4, WHITE , BLACK);
 8014b94:	2026      	movs	r0, #38	; 0x26
 8014b96:	f7fc f925 	bl	8010de4 <getLang>
 8014b9a:	68fa      	ldr	r2, [r7, #12]
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	18d1      	adds	r1, r2, r3
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	1c5a      	adds	r2, r3, #1
 8014ba4:	617a      	str	r2, [r7, #20]
 8014ba6:	683a      	ldr	r2, [r7, #0]
 8014ba8:	fb02 f203 	mul.w	r2, r2, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	441a      	add	r2, r3
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	9302      	str	r3, [sp, #8]
 8014bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014bb8:	9301      	str	r3, [sp, #4]
 8014bba:	2304      	movs	r3, #4
 8014bbc:	9300      	str	r3, [sp, #0]
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	460a      	mov	r2, r1
 8014bc2:	4601      	mov	r1, r0
 8014bc4:	4849      	ldr	r0, [pc, #292]	; (8014cec <draw_menu_meter+0x230>)
 8014bc6:	f009 ffed 	bl	801eba4 <tft_print>
		tft_print(&verdana_18ptFontInfo, getLang(FAN), xleft+xspaceforicon, y + line++ * yspace, 4, WHITE , BLACK);
 8014bca:	2025      	movs	r0, #37	; 0x25
 8014bcc:	f7fc f90a 	bl	8010de4 <getLang>
 8014bd0:	68fa      	ldr	r2, [r7, #12]
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	18d1      	adds	r1, r2, r3
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	1c5a      	adds	r2, r3, #1
 8014bda:	617a      	str	r2, [r7, #20]
 8014bdc:	683a      	ldr	r2, [r7, #0]
 8014bde:	fb02 f203 	mul.w	r2, r2, r3
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	441a      	add	r2, r3
 8014be6:	2300      	movs	r3, #0
 8014be8:	9302      	str	r3, [sp, #8]
 8014bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014bee:	9301      	str	r3, [sp, #4]
 8014bf0:	2304      	movs	r3, #4
 8014bf2:	9300      	str	r3, [sp, #0]
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	460a      	mov	r2, r1
 8014bf8:	4601      	mov	r1, r0
 8014bfa:	483c      	ldr	r0, [pc, #240]	; (8014cec <draw_menu_meter+0x230>)
 8014bfc:	f009 ffd2 	bl	801eba4 <tft_print>
	}

	line++;
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	3301      	adds	r3, #1
 8014c04:	617b      	str	r3, [r7, #20]
	y += 6;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	3306      	adds	r3, #6
 8014c0a:	607b      	str	r3, [r7, #4]

	tft_print(&verdana_18ptFontInfo, "DC:", xleft, y + line++ * yspace, 4, WHITE , BLACK);
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	1c5a      	adds	r2, r3, #1
 8014c10:	617a      	str	r2, [r7, #20]
 8014c12:	683a      	ldr	r2, [r7, #0]
 8014c14:	fb02 f203 	mul.w	r2, r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	441a      	add	r2, r3
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	9302      	str	r3, [sp, #8]
 8014c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c24:	9301      	str	r3, [sp, #4]
 8014c26:	2304      	movs	r3, #4
 8014c28:	9300      	str	r3, [sp, #0]
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	68fa      	ldr	r2, [r7, #12]
 8014c2e:	4932      	ldr	r1, [pc, #200]	; (8014cf8 <draw_menu_meter+0x23c>)
 8014c30:	482e      	ldr	r0, [pc, #184]	; (8014cec <draw_menu_meter+0x230>)
 8014c32:	f009 ffb7 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, "DC:", xleft, y + line++ * yspace, 4, WHITE , BLACK);
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	1c5a      	adds	r2, r3, #1
 8014c3a:	617a      	str	r2, [r7, #20]
 8014c3c:	683a      	ldr	r2, [r7, #0]
 8014c3e:	fb02 f203 	mul.w	r2, r2, r3
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	441a      	add	r2, r3
 8014c46:	2300      	movs	r3, #0
 8014c48:	9302      	str	r3, [sp, #8]
 8014c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c4e:	9301      	str	r3, [sp, #4]
 8014c50:	2304      	movs	r3, #4
 8014c52:	9300      	str	r3, [sp, #0]
 8014c54:	4613      	mov	r3, r2
 8014c56:	68fa      	ldr	r2, [r7, #12]
 8014c58:	4927      	ldr	r1, [pc, #156]	; (8014cf8 <draw_menu_meter+0x23c>)
 8014c5a:	4824      	ldr	r0, [pc, #144]	; (8014cec <draw_menu_meter+0x230>)
 8014c5c:	f009 ffa2 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, "DC:", xleft, y + line++ * yspace, 4, WHITE , BLACK);
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	1c5a      	adds	r2, r3, #1
 8014c64:	617a      	str	r2, [r7, #20]
 8014c66:	683a      	ldr	r2, [r7, #0]
 8014c68:	fb02 f203 	mul.w	r2, r2, r3
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	441a      	add	r2, r3
 8014c70:	2300      	movs	r3, #0
 8014c72:	9302      	str	r3, [sp, #8]
 8014c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c78:	9301      	str	r3, [sp, #4]
 8014c7a:	2304      	movs	r3, #4
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	4613      	mov	r3, r2
 8014c80:	68fa      	ldr	r2, [r7, #12]
 8014c82:	491d      	ldr	r1, [pc, #116]	; (8014cf8 <draw_menu_meter+0x23c>)
 8014c84:	4819      	ldr	r0, [pc, #100]	; (8014cec <draw_menu_meter+0x230>)
 8014c86:	f009 ff8d 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, "T1:", xleft, y + line++ * yspace, 4, WHITE , BLACK);
 8014c8a:	697b      	ldr	r3, [r7, #20]
 8014c8c:	1c5a      	adds	r2, r3, #1
 8014c8e:	617a      	str	r2, [r7, #20]
 8014c90:	683a      	ldr	r2, [r7, #0]
 8014c92:	fb02 f203 	mul.w	r2, r2, r3
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	441a      	add	r2, r3
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	9302      	str	r3, [sp, #8]
 8014c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ca2:	9301      	str	r3, [sp, #4]
 8014ca4:	2304      	movs	r3, #4
 8014ca6:	9300      	str	r3, [sp, #0]
 8014ca8:	4613      	mov	r3, r2
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	4913      	ldr	r1, [pc, #76]	; (8014cfc <draw_menu_meter+0x240>)
 8014cae:	480f      	ldr	r0, [pc, #60]	; (8014cec <draw_menu_meter+0x230>)
 8014cb0:	f009 ff78 	bl	801eba4 <tft_print>
	tft_print(&verdana_18ptFontInfo, "T2:", xleft, y + line++ * yspace, 4, WHITE , BLACK);
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	1c5a      	adds	r2, r3, #1
 8014cb8:	617a      	str	r2, [r7, #20]
 8014cba:	683a      	ldr	r2, [r7, #0]
 8014cbc:	fb02 f203 	mul.w	r2, r2, r3
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	441a      	add	r2, r3
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	9302      	str	r3, [sp, #8]
 8014cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ccc:	9301      	str	r3, [sp, #4]
 8014cce:	2304      	movs	r3, #4
 8014cd0:	9300      	str	r3, [sp, #0]
 8014cd2:	4613      	mov	r3, r2
 8014cd4:	68fa      	ldr	r2, [r7, #12]
 8014cd6:	490a      	ldr	r1, [pc, #40]	; (8014d00 <draw_menu_meter+0x244>)
 8014cd8:	4804      	ldr	r0, [pc, #16]	; (8014cec <draw_menu_meter+0x230>)
 8014cda:	f009 ff63 	bl	801eba4 <tft_print>

	draw_values_meter();
 8014cde:	f000 f811 	bl	8014d04 <draw_values_meter>
}
 8014ce2:	bf00      	nop
 8014ce4:	3718      	adds	r7, #24
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	20001c70 	.word	0x20001c70
 8014cf0:	08026be4 	.word	0x08026be4
 8014cf4:	20000bf0 	.word	0x20000bf0
 8014cf8:	08026bec 	.word	0x08026bec
 8014cfc:	08026bf0 	.word	0x08026bf0
 8014d00:	08026bf4 	.word	0x08026bf4

08014d04 <draw_values_meter>:

void draw_values_meter()
{
 8014d04:	b590      	push	{r4, r7, lr}
 8014d06:	b08f      	sub	sp, #60	; 0x3c
 8014d08:	af04      	add	r7, sp, #16
int xleft = 425;
 8014d0a:	f240 13a9 	movw	r3, #425	; 0x1a9
 8014d0e:	623b      	str	r3, [r7, #32]
int y = 50-6;
 8014d10:	232c      	movs	r3, #44	; 0x2c
 8014d12:	61fb      	str	r3, [r7, #28]
int yspace = 30;
 8014d14:	231e      	movs	r3, #30
 8014d16:	61bb      	str	r3, [r7, #24]
int line = 0;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	627b      	str	r3, [r7, #36]	; 0x24
char s[20];

	draw_needle();
 8014d1c:	f7fb fe1c 	bl	8010958 <draw_needle>

	int by = 350;
 8014d20:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8014d24:	617b      	str	r3, [r7, #20]
	sprintf(s,"%.0f W  ",pwrswr_antenna.fwd_watt);
 8014d26:	4bb4      	ldr	r3, [pc, #720]	; (8014ff8 <draw_values_meter+0x2f4>)
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7f3 fb44 	bl	80083b8 <__aeabi_f2d>
 8014d30:	4603      	mov	r3, r0
 8014d32:	460c      	mov	r4, r1
 8014d34:	4638      	mov	r0, r7
 8014d36:	461a      	mov	r2, r3
 8014d38:	4623      	mov	r3, r4
 8014d3a:	49b0      	ldr	r1, [pc, #704]	; (8014ffc <draw_values_meter+0x2f8>)
 8014d3c:	f00a fa7c 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, 200, by, 2, YELLOW, BLACK);
 8014d40:	4639      	mov	r1, r7
 8014d42:	2300      	movs	r3, #0
 8014d44:	9302      	str	r3, [sp, #8]
 8014d46:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014d4a:	9301      	str	r3, [sp, #4]
 8014d4c:	2302      	movs	r3, #2
 8014d4e:	9300      	str	r3, [sp, #0]
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	22c8      	movs	r2, #200	; 0xc8
 8014d54:	48aa      	ldr	r0, [pc, #680]	; (8015000 <draw_values_meter+0x2fc>)
 8014d56:	f009 ff25 	bl	801eba4 <tft_print>
	sprintf(s,"%.0f W  ",pwrswr_antenna.rev_watt);
 8014d5a:	4ba7      	ldr	r3, [pc, #668]	; (8014ff8 <draw_values_meter+0x2f4>)
 8014d5c:	695b      	ldr	r3, [r3, #20]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7f3 fb2a 	bl	80083b8 <__aeabi_f2d>
 8014d64:	4603      	mov	r3, r0
 8014d66:	460c      	mov	r4, r1
 8014d68:	4638      	mov	r0, r7
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	4623      	mov	r3, r4
 8014d6e:	49a3      	ldr	r1, [pc, #652]	; (8014ffc <draw_values_meter+0x2f8>)
 8014d70:	f00a fa62 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, 200, by+30, 2, RED, BLACK);
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	f103 021e 	add.w	r2, r3, #30
 8014d7a:	4639      	mov	r1, r7
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	9302      	str	r3, [sp, #8]
 8014d80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8014d84:	9301      	str	r3, [sp, #4]
 8014d86:	2302      	movs	r3, #2
 8014d88:	9300      	str	r3, [sp, #0]
 8014d8a:	4613      	mov	r3, r2
 8014d8c:	22c8      	movs	r2, #200	; 0xc8
 8014d8e:	489c      	ldr	r0, [pc, #624]	; (8015000 <draw_values_meter+0x2fc>)
 8014d90:	f009 ff08 	bl	801eba4 <tft_print>
	sprintf(s,"%.2f:1   ",pwrswr_antenna.swr);
 8014d94:	4b98      	ldr	r3, [pc, #608]	; (8014ff8 <draw_values_meter+0x2f4>)
 8014d96:	699b      	ldr	r3, [r3, #24]
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7f3 fb0d 	bl	80083b8 <__aeabi_f2d>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	460c      	mov	r4, r1
 8014da2:	4638      	mov	r0, r7
 8014da4:	461a      	mov	r2, r3
 8014da6:	4623      	mov	r3, r4
 8014da8:	4996      	ldr	r1, [pc, #600]	; (8015004 <draw_values_meter+0x300>)
 8014daa:	f00a fa45 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, 450, by, 2, YELLOW, BLACK);
 8014dae:	4639      	mov	r1, r7
 8014db0:	2300      	movs	r3, #0
 8014db2:	9302      	str	r3, [sp, #8]
 8014db4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014db8:	9301      	str	r3, [sp, #4]
 8014dba:	2302      	movs	r3, #2
 8014dbc:	9300      	str	r3, [sp, #0]
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8014dc4:	488e      	ldr	r0, [pc, #568]	; (8015000 <draw_values_meter+0x2fc>)
 8014dc6:	f009 feed 	bl	801eba4 <tft_print>

	if(pcfgdata->systemMode == 0)
 8014dca:	4b8f      	ldr	r3, [pc, #572]	; (8015008 <draw_values_meter+0x304>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d12c      	bne.n	8014e30 <draw_values_meter+0x12c>
	{
		// Pamp mode
		draw_statbutton(PTTIN, xleft, y + line++ * yspace, 0,0);
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd8:	1c5a      	adds	r2, r3, #1
 8014dda:	627a      	str	r2, [r7, #36]	; 0x24
 8014ddc:	69ba      	ldr	r2, [r7, #24]
 8014dde:	fb02 f203 	mul.w	r2, r2, r3
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	441a      	add	r2, r3
 8014de6:	2300      	movs	r3, #0
 8014de8:	9300      	str	r3, [sp, #0]
 8014dea:	2300      	movs	r3, #0
 8014dec:	6a39      	ldr	r1, [r7, #32]
 8014dee:	200c      	movs	r0, #12
 8014df0:	f7fe fc3a 	bl	8013668 <draw_statbutton>
		draw_statbutton(PTTOUT, xleft, y + line++ * yspace, 1,0);
 8014df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df6:	1c5a      	adds	r2, r3, #1
 8014df8:	627a      	str	r2, [r7, #36]	; 0x24
 8014dfa:	69ba      	ldr	r2, [r7, #24]
 8014dfc:	fb02 f203 	mul.w	r2, r2, r3
 8014e00:	69fb      	ldr	r3, [r7, #28]
 8014e02:	441a      	add	r2, r3
 8014e04:	2300      	movs	r3, #0
 8014e06:	9300      	str	r3, [sp, #0]
 8014e08:	2301      	movs	r3, #1
 8014e0a:	6a39      	ldr	r1, [r7, #32]
 8014e0c:	2014      	movs	r0, #20
 8014e0e:	f7fe fc2b 	bl	8013668 <draw_statbutton>
		draw_statbutton(FAN_ONOFF, xleft, y + line++ * yspace, 1,0);
 8014e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e14:	1c5a      	adds	r2, r3, #1
 8014e16:	627a      	str	r2, [r7, #36]	; 0x24
 8014e18:	69ba      	ldr	r2, [r7, #24]
 8014e1a:	fb02 f203 	mul.w	r2, r2, r3
 8014e1e:	69fb      	ldr	r3, [r7, #28]
 8014e20:	441a      	add	r2, r3
 8014e22:	2300      	movs	r3, #0
 8014e24:	9300      	str	r3, [sp, #0]
 8014e26:	2301      	movs	r3, #1
 8014e28:	6a39      	ldr	r1, [r7, #32]
 8014e2a:	2012      	movs	r0, #18
 8014e2c:	f7fe fc1c 	bl	8013668 <draw_statbutton>
	}

	line++;
 8014e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e32:	3301      	adds	r3, #1
 8014e34:	627b      	str	r3, [r7, #36]	; 0x24
	y += 12;
 8014e36:	69fb      	ldr	r3, [r7, #28]
 8014e38:	330c      	adds	r3, #12
 8014e3a:	61fb      	str	r3, [r7, #28]
	xleft += 50;
 8014e3c:	6a3b      	ldr	r3, [r7, #32]
 8014e3e:	3332      	adds	r3, #50	; 0x32
 8014e40:	623b      	str	r3, [r7, #32]

	sprintf(s,"%6.1f V",adc_realvals[UMESS]);
 8014e42:	4b72      	ldr	r3, [pc, #456]	; (801500c <draw_values_meter+0x308>)
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7f3 fab6 	bl	80083b8 <__aeabi_f2d>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	460c      	mov	r4, r1
 8014e50:	4638      	mov	r0, r7
 8014e52:	461a      	mov	r2, r3
 8014e54:	4623      	mov	r3, r4
 8014e56:	496e      	ldr	r1, [pc, #440]	; (8015010 <draw_values_meter+0x30c>)
 8014e58:	f00a f9ee 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, xleft, y + line++ * yspace, 1, YELLOW , BLACK);
 8014e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5e:	1c5a      	adds	r2, r3, #1
 8014e60:	627a      	str	r2, [r7, #36]	; 0x24
 8014e62:	69ba      	ldr	r2, [r7, #24]
 8014e64:	fb02 f203 	mul.w	r2, r2, r3
 8014e68:	69fb      	ldr	r3, [r7, #28]
 8014e6a:	441a      	add	r2, r3
 8014e6c:	4639      	mov	r1, r7
 8014e6e:	2300      	movs	r3, #0
 8014e70:	9302      	str	r3, [sp, #8]
 8014e72:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014e76:	9301      	str	r3, [sp, #4]
 8014e78:	2301      	movs	r3, #1
 8014e7a:	9300      	str	r3, [sp, #0]
 8014e7c:	4613      	mov	r3, r2
 8014e7e:	6a3a      	ldr	r2, [r7, #32]
 8014e80:	485f      	ldr	r0, [pc, #380]	; (8015000 <draw_values_meter+0x2fc>)
 8014e82:	f009 fe8f 	bl	801eba4 <tft_print>
	sprintf(s,"%6.1f A",adc_realvals[IMESS]);
 8014e86:	4b61      	ldr	r3, [pc, #388]	; (801500c <draw_values_meter+0x308>)
 8014e88:	691b      	ldr	r3, [r3, #16]
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7f3 fa94 	bl	80083b8 <__aeabi_f2d>
 8014e90:	4603      	mov	r3, r0
 8014e92:	460c      	mov	r4, r1
 8014e94:	4638      	mov	r0, r7
 8014e96:	461a      	mov	r2, r3
 8014e98:	4623      	mov	r3, r4
 8014e9a:	495e      	ldr	r1, [pc, #376]	; (8015014 <draw_values_meter+0x310>)
 8014e9c:	f00a f9cc 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, xleft, y + line++ * yspace, 1, YELLOW , BLACK);
 8014ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea2:	1c5a      	adds	r2, r3, #1
 8014ea4:	627a      	str	r2, [r7, #36]	; 0x24
 8014ea6:	69ba      	ldr	r2, [r7, #24]
 8014ea8:	fb02 f203 	mul.w	r2, r2, r3
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	441a      	add	r2, r3
 8014eb0:	4639      	mov	r1, r7
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	9302      	str	r3, [sp, #8]
 8014eb6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014eba:	9301      	str	r3, [sp, #4]
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	4613      	mov	r3, r2
 8014ec2:	6a3a      	ldr	r2, [r7, #32]
 8014ec4:	484e      	ldr	r0, [pc, #312]	; (8015000 <draw_values_meter+0x2fc>)
 8014ec6:	f009 fe6d 	bl	801eba4 <tft_print>
	sprintf(s,"%6.1f W",adc_realvals[CALC_POWER]);
 8014eca:	4b50      	ldr	r3, [pc, #320]	; (801500c <draw_values_meter+0x308>)
 8014ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7f3 fa72 	bl	80083b8 <__aeabi_f2d>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	460c      	mov	r4, r1
 8014ed8:	4638      	mov	r0, r7
 8014eda:	461a      	mov	r2, r3
 8014edc:	4623      	mov	r3, r4
 8014ede:	494e      	ldr	r1, [pc, #312]	; (8015018 <draw_values_meter+0x314>)
 8014ee0:	f00a f9aa 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, xleft, y + line++ * yspace, 1, YELLOW , BLACK);
 8014ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee6:	1c5a      	adds	r2, r3, #1
 8014ee8:	627a      	str	r2, [r7, #36]	; 0x24
 8014eea:	69ba      	ldr	r2, [r7, #24]
 8014eec:	fb02 f203 	mul.w	r2, r2, r3
 8014ef0:	69fb      	ldr	r3, [r7, #28]
 8014ef2:	441a      	add	r2, r3
 8014ef4:	4639      	mov	r1, r7
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	9302      	str	r3, [sp, #8]
 8014efa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014efe:	9301      	str	r3, [sp, #4]
 8014f00:	2301      	movs	r3, #1
 8014f02:	9300      	str	r3, [sp, #0]
 8014f04:	4613      	mov	r3, r2
 8014f06:	6a3a      	ldr	r2, [r7, #32]
 8014f08:	483d      	ldr	r0, [pc, #244]	; (8015000 <draw_values_meter+0x2fc>)
 8014f0a:	f009 fe4b 	bl	801eba4 <tft_print>

	if(adc_realvals[UTEMP] > -9)
 8014f0e:	4b3f      	ldr	r3, [pc, #252]	; (801500c <draw_values_meter+0x308>)
 8014f10:	edd3 7a03 	vldr	s15, [r3, #12]
 8014f14:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 8014f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f20:	dd0d      	ble.n	8014f3e <draw_values_meter+0x23a>
		sprintf(s,"%6.1f ",adc_realvals[UTEMP]);
 8014f22:	4b3a      	ldr	r3, [pc, #232]	; (801500c <draw_values_meter+0x308>)
 8014f24:	68db      	ldr	r3, [r3, #12]
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7f3 fa46 	bl	80083b8 <__aeabi_f2d>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	460c      	mov	r4, r1
 8014f30:	4638      	mov	r0, r7
 8014f32:	461a      	mov	r2, r3
 8014f34:	4623      	mov	r3, r4
 8014f36:	4939      	ldr	r1, [pc, #228]	; (801501c <draw_values_meter+0x318>)
 8014f38:	f00a f97e 	bl	801f238 <sprintf>
 8014f3c:	e005      	b.n	8014f4a <draw_values_meter+0x246>
	else
		sprintf(s,"   --- ");
 8014f3e:	463b      	mov	r3, r7
 8014f40:	4a37      	ldr	r2, [pc, #220]	; (8015020 <draw_values_meter+0x31c>)
 8014f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f46:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(s+strlen(s),"~%s ", pcfgdata->tempunits?"F":"C");
 8014f4a:	463b      	mov	r3, r7
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f3 f877 	bl	8008040 <strlen>
 8014f52:	4602      	mov	r2, r0
 8014f54:	463b      	mov	r3, r7
 8014f56:	1898      	adds	r0, r3, r2
 8014f58:	4b2b      	ldr	r3, [pc, #172]	; (8015008 <draw_values_meter+0x304>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d001      	beq.n	8014f68 <draw_values_meter+0x264>
 8014f64:	4b2f      	ldr	r3, [pc, #188]	; (8015024 <draw_values_meter+0x320>)
 8014f66:	e000      	b.n	8014f6a <draw_values_meter+0x266>
 8014f68:	4b2f      	ldr	r3, [pc, #188]	; (8015028 <draw_values_meter+0x324>)
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	492f      	ldr	r1, [pc, #188]	; (801502c <draw_values_meter+0x328>)
 8014f6e:	f00a f963 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, xleft, y + line++ * yspace, 1, YELLOW , BLACK);
 8014f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f74:	1c5a      	adds	r2, r3, #1
 8014f76:	627a      	str	r2, [r7, #36]	; 0x24
 8014f78:	69ba      	ldr	r2, [r7, #24]
 8014f7a:	fb02 f203 	mul.w	r2, r2, r3
 8014f7e:	69fb      	ldr	r3, [r7, #28]
 8014f80:	441a      	add	r2, r3
 8014f82:	4639      	mov	r1, r7
 8014f84:	2300      	movs	r3, #0
 8014f86:	9302      	str	r3, [sp, #8]
 8014f88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014f8c:	9301      	str	r3, [sp, #4]
 8014f8e:	2301      	movs	r3, #1
 8014f90:	9300      	str	r3, [sp, #0]
 8014f92:	4613      	mov	r3, r2
 8014f94:	6a3a      	ldr	r2, [r7, #32]
 8014f96:	481a      	ldr	r0, [pc, #104]	; (8015000 <draw_values_meter+0x2fc>)
 8014f98:	f009 fe04 	bl	801eba4 <tft_print>

	if(adc_realvals[UTEMP2] > -9)
 8014f9c:	4b1b      	ldr	r3, [pc, #108]	; (801500c <draw_values_meter+0x308>)
 8014f9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8014fa2:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 8014fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fae:	dd0d      	ble.n	8014fcc <draw_values_meter+0x2c8>
		sprintf(s,"%6.1f ",adc_realvals[UTEMP2]);
 8014fb0:	4b16      	ldr	r3, [pc, #88]	; (801500c <draw_values_meter+0x308>)
 8014fb2:	6a1b      	ldr	r3, [r3, #32]
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7f3 f9ff 	bl	80083b8 <__aeabi_f2d>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	460c      	mov	r4, r1
 8014fbe:	4638      	mov	r0, r7
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	4623      	mov	r3, r4
 8014fc4:	4915      	ldr	r1, [pc, #84]	; (801501c <draw_values_meter+0x318>)
 8014fc6:	f00a f937 	bl	801f238 <sprintf>
 8014fca:	e005      	b.n	8014fd8 <draw_values_meter+0x2d4>
	else
		sprintf(s,"   --- ");
 8014fcc:	463b      	mov	r3, r7
 8014fce:	4a14      	ldr	r2, [pc, #80]	; (8015020 <draw_values_meter+0x31c>)
 8014fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fd4:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(s+strlen(s),"~%s ", pcfgdata->tempunits?"F":"C");
 8014fd8:	463b      	mov	r3, r7
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7f3 f830 	bl	8008040 <strlen>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	463b      	mov	r3, r7
 8014fe4:	1898      	adds	r0, r3, r2
 8014fe6:	4b08      	ldr	r3, [pc, #32]	; (8015008 <draw_values_meter+0x304>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d01e      	beq.n	8015030 <draw_values_meter+0x32c>
 8014ff2:	4b0c      	ldr	r3, [pc, #48]	; (8015024 <draw_values_meter+0x320>)
 8014ff4:	e01d      	b.n	8015032 <draw_values_meter+0x32e>
 8014ff6:	bf00      	nop
 8014ff8:	20005684 	.word	0x20005684
 8014ffc:	08026bf8 	.word	0x08026bf8
 8015000:	20001c34 	.word	0x20001c34
 8015004:	08026c04 	.word	0x08026c04
 8015008:	20000bf0 	.word	0x20000bf0
 801500c:	2000314c 	.word	0x2000314c
 8015010:	08026ae4 	.word	0x08026ae4
 8015014:	08026aec 	.word	0x08026aec
 8015018:	08026b18 	.word	0x08026b18
 801501c:	08026c10 	.word	0x08026c10
 8015020:	08026c18 	.word	0x08026c18
 8015024:	08026bd4 	.word	0x08026bd4
 8015028:	08026bd8 	.word	0x08026bd8
 801502c:	08026c20 	.word	0x08026c20
 8015030:	4b0e      	ldr	r3, [pc, #56]	; (801506c <draw_values_meter+0x368>)
 8015032:	461a      	mov	r2, r3
 8015034:	490e      	ldr	r1, [pc, #56]	; (8015070 <draw_values_meter+0x36c>)
 8015036:	f00a f8ff 	bl	801f238 <sprintf>
	tft_print(&lucidaConsole_18ptFontInfo, s, xleft, y + line++ * yspace, 1, YELLOW , BLACK);
 801503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503c:	1c5a      	adds	r2, r3, #1
 801503e:	627a      	str	r2, [r7, #36]	; 0x24
 8015040:	69ba      	ldr	r2, [r7, #24]
 8015042:	fb02 f203 	mul.w	r2, r2, r3
 8015046:	69fb      	ldr	r3, [r7, #28]
 8015048:	441a      	add	r2, r3
 801504a:	4639      	mov	r1, r7
 801504c:	2300      	movs	r3, #0
 801504e:	9302      	str	r3, [sp, #8]
 8015050:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8015054:	9301      	str	r3, [sp, #4]
 8015056:	2301      	movs	r3, #1
 8015058:	9300      	str	r3, [sp, #0]
 801505a:	4613      	mov	r3, r2
 801505c:	6a3a      	ldr	r2, [r7, #32]
 801505e:	4805      	ldr	r0, [pc, #20]	; (8015074 <draw_values_meter+0x370>)
 8015060:	f009 fda0 	bl	801eba4 <tft_print>
}
 8015064:	bf00      	nop
 8015066:	372c      	adds	r7, #44	; 0x2c
 8015068:	46bd      	mov	sp, r7
 801506a:	bd90      	pop	{r4, r7, pc}
 801506c:	08026bd8 	.word	0x08026bd8
 8015070:	08026c20 	.word	0x08026c20
 8015074:	20001c34 	.word	0x20001c34

08015078 <statusline>:

uint8_t showstatus = 0;

void statusline()
{
 8015078:	b590      	push	{r4, r7, lr}
 801507a:	b0b1      	sub	sp, #196	; 0xc4
 801507c:	af04      	add	r7, sp, #16
char s[150] = {0};
 801507e:	463b      	mov	r3, r7
 8015080:	2296      	movs	r2, #150	; 0x96
 8015082:	2100      	movs	r1, #0
 8015084:	4618      	mov	r0, r3
 8015086:	f00a f8b3 	bl	801f1f0 <memset>
int x1 = 240;
 801508a:	23f0      	movs	r3, #240	; 0xf0
 801508c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
int x2 = 370;
 8015090:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8015094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
int x3 = 500;
 8015098:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801509c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
int y = TFT_HEIGHT-15;
 80150a0:	f240 13d1 	movw	r3, #465	; 0x1d1
 80150a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
static uint8_t oldcivavail = 255;
static uint8_t old_selected_bandrelais = 255;
static uint8_t old_civadr = 255;
static uint8_t old_inputmode = 255;
static uint32_t old_freq = -1;
int bcol = RGB16(40,40,40);
 80150a8:	f642 1345 	movw	r3, #10565	; 0x2945
 80150ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
uint32_t civadr_khz = civ_freq/1000;
 80150b0:	4ba7      	ldr	r3, [pc, #668]	; (8015350 <statusline+0x2d8>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	4aa7      	ldr	r2, [pc, #668]	; (8015354 <statusline+0x2dc>)
 80150b6:	fba2 2303 	umull	r2, r3, r2, r3
 80150ba:	099b      	lsrs	r3, r3, #6
 80150bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if(menunum == MENU_TOUCHCAL || menunum == MENU_STARTUP) return;
 80150c0:	4ba5      	ldr	r3, [pc, #660]	; (8015358 <statusline+0x2e0>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	2b0f      	cmp	r3, #15
 80150c6:	f000 813e 	beq.w	8015346 <statusline+0x2ce>
 80150ca:	4ba3      	ldr	r3, [pc, #652]	; (8015358 <statusline+0x2e0>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b10      	cmp	r3, #16
 80150d0:	f000 8139 	beq.w	8015346 <statusline+0x2ce>

	if(showstatus || pcfgdata->antsw != old_antsw || civ_avail != oldcivavail || selected_bandrelais != old_selected_bandrelais || old_freq != civadr_khz
 80150d4:	4ba1      	ldr	r3, [pc, #644]	; (801535c <statusline+0x2e4>)
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d128      	bne.n	801512e <statusline+0xb6>
 80150dc:	4ba0      	ldr	r3, [pc, #640]	; (8015360 <statusline+0x2e8>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80150e4:	4b9f      	ldr	r3, [pc, #636]	; (8015364 <statusline+0x2ec>)
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d120      	bne.n	801512e <statusline+0xb6>
 80150ec:	4b9e      	ldr	r3, [pc, #632]	; (8015368 <statusline+0x2f0>)
 80150ee:	781a      	ldrb	r2, [r3, #0]
 80150f0:	4b9e      	ldr	r3, [pc, #632]	; (801536c <statusline+0x2f4>)
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d11a      	bne.n	801512e <statusline+0xb6>
 80150f8:	4b9d      	ldr	r3, [pc, #628]	; (8015370 <statusline+0x2f8>)
 80150fa:	781a      	ldrb	r2, [r3, #0]
 80150fc:	4b9d      	ldr	r3, [pc, #628]	; (8015374 <statusline+0x2fc>)
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	429a      	cmp	r2, r3
 8015102:	d114      	bne.n	801512e <statusline+0xb6>
 8015104:	4b9c      	ldr	r3, [pc, #624]	; (8015378 <statusline+0x300>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801510c:	429a      	cmp	r2, r3
 801510e:	d10e      	bne.n	801512e <statusline+0xb6>
			|| old_civadr != civ_adr || old_inputmode != pcfgdata->auxInputMode)
 8015110:	4b9a      	ldr	r3, [pc, #616]	; (801537c <statusline+0x304>)
 8015112:	781a      	ldrb	r2, [r3, #0]
 8015114:	4b9a      	ldr	r3, [pc, #616]	; (8015380 <statusline+0x308>)
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	429a      	cmp	r2, r3
 801511a:	d108      	bne.n	801512e <statusline+0xb6>
 801511c:	4b90      	ldr	r3, [pc, #576]	; (8015360 <statusline+0x2e8>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015124:	4b97      	ldr	r3, [pc, #604]	; (8015384 <statusline+0x30c>)
 8015126:	781b      	ldrb	r3, [r3, #0]
 8015128:	429a      	cmp	r2, r3
 801512a:	f000 80ec 	beq.w	8015306 <statusline+0x28e>
	{
		TFT_Fill_Rectangle(201, y, TFT_WIDTH-1, TFT_HEIGHT, bcol);
 801512e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015132:	9300      	str	r3, [sp, #0]
 8015134:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015138:	f240 321f 	movw	r2, #799	; 0x31f
 801513c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8015140:	20c9      	movs	r0, #201	; 0xc9
 8015142:	f002 fb79 	bl	8017838 <TFT_Fill_Rectangle>

		sprintf(s,"%s: %d",getLang(ANTENNA),pcfgdata->antsw+1);
 8015146:	204f      	movs	r0, #79	; 0x4f
 8015148:	f7fb fe4c 	bl	8010de4 <getLang>
 801514c:	4602      	mov	r2, r0
 801514e:	4b84      	ldr	r3, [pc, #528]	; (8015360 <statusline+0x2e8>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015156:	3301      	adds	r3, #1
 8015158:	4638      	mov	r0, r7
 801515a:	498b      	ldr	r1, [pc, #556]	; (8015388 <statusline+0x310>)
 801515c:	f00a f86c 	bl	801f238 <sprintf>
		tft_print(&verdana_12ptFontInfo, s, x1, y, 1, WHITE, bcol);
 8015160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015164:	4639      	mov	r1, r7
 8015166:	9302      	str	r3, [sp, #8]
 8015168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801516c:	9301      	str	r3, [sp, #4]
 801516e:	2301      	movs	r3, #1
 8015170:	9300      	str	r3, [sp, #0]
 8015172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015176:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801517a:	4884      	ldr	r0, [pc, #528]	; (801538c <statusline+0x314>)
 801517c:	f009 fd12 	bl	801eba4 <tft_print>

		if(pcfgdata->systemMode == 0)
 8015180:	4b77      	ldr	r3, [pc, #476]	; (8015360 <statusline+0x2e8>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015188:	2b00      	cmp	r3, #0
 801518a:	d11a      	bne.n	80151c2 <statusline+0x14a>
		{
			sprintf(s,"%s: %d", getLang(FILTERBANK),selected_bandrelais+1);
 801518c:	2050      	movs	r0, #80	; 0x50
 801518e:	f7fb fe29 	bl	8010de4 <getLang>
 8015192:	4602      	mov	r2, r0
 8015194:	4b76      	ldr	r3, [pc, #472]	; (8015370 <statusline+0x2f8>)
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	3301      	adds	r3, #1
 801519a:	4638      	mov	r0, r7
 801519c:	497a      	ldr	r1, [pc, #488]	; (8015388 <statusline+0x310>)
 801519e:	f00a f84b 	bl	801f238 <sprintf>
			tft_print(&verdana_12ptFontInfo, s, x2, y, 1, WHITE, bcol);
 80151a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80151a6:	4639      	mov	r1, r7
 80151a8:	9302      	str	r3, [sp, #8]
 80151aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151ae:	9301      	str	r3, [sp, #4]
 80151b0:	2301      	movs	r3, #1
 80151b2:	9300      	str	r3, [sp, #0]
 80151b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80151b8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80151bc:	4873      	ldr	r0, [pc, #460]	; (801538c <statusline+0x314>)
 80151be:	f009 fcf1 	bl	801eba4 <tft_print>
		}

		if(pcfgdata->auxInputMode == PTT4x)
 80151c2:	4b67      	ldr	r3, [pc, #412]	; (8015360 <statusline+0x2e8>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80151ca:	2b01      	cmp	r3, #1
 80151cc:	d16e      	bne.n	80152ac <statusline+0x234>
		{
			s[0] = 0;
 80151ce:	2300      	movs	r3, #0
 80151d0:	703b      	strb	r3, [r7, #0]
			if(gpio_stat[ROTS_B1] == 0) sprintf(s,"TRX: 1");
 80151d2:	4b6f      	ldr	r3, [pc, #444]	; (8015390 <statusline+0x318>)
 80151d4:	78db      	ldrb	r3, [r3, #3]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d109      	bne.n	80151ee <statusline+0x176>
 80151da:	463b      	mov	r3, r7
 80151dc:	4a6d      	ldr	r2, [pc, #436]	; (8015394 <statusline+0x31c>)
 80151de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151e2:	6018      	str	r0, [r3, #0]
 80151e4:	3304      	adds	r3, #4
 80151e6:	8019      	strh	r1, [r3, #0]
 80151e8:	3302      	adds	r3, #2
 80151ea:	0c0a      	lsrs	r2, r1, #16
 80151ec:	701a      	strb	r2, [r3, #0]
			if(gpio_stat[ROTS_B2] == 0) sprintf(s,"TRX: 2");
 80151ee:	4b68      	ldr	r3, [pc, #416]	; (8015390 <statusline+0x318>)
 80151f0:	791b      	ldrb	r3, [r3, #4]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d109      	bne.n	801520a <statusline+0x192>
 80151f6:	463b      	mov	r3, r7
 80151f8:	4a67      	ldr	r2, [pc, #412]	; (8015398 <statusline+0x320>)
 80151fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151fe:	6018      	str	r0, [r3, #0]
 8015200:	3304      	adds	r3, #4
 8015202:	8019      	strh	r1, [r3, #0]
 8015204:	3302      	adds	r3, #2
 8015206:	0c0a      	lsrs	r2, r1, #16
 8015208:	701a      	strb	r2, [r3, #0]
			if(gpio_stat[ROTS_B3] == 0) sprintf(s,"TRX: 3");
 801520a:	4b61      	ldr	r3, [pc, #388]	; (8015390 <statusline+0x318>)
 801520c:	795b      	ldrb	r3, [r3, #5]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d109      	bne.n	8015226 <statusline+0x1ae>
 8015212:	463b      	mov	r3, r7
 8015214:	4a61      	ldr	r2, [pc, #388]	; (801539c <statusline+0x324>)
 8015216:	e892 0003 	ldmia.w	r2, {r0, r1}
 801521a:	6018      	str	r0, [r3, #0]
 801521c:	3304      	adds	r3, #4
 801521e:	8019      	strh	r1, [r3, #0]
 8015220:	3302      	adds	r3, #2
 8015222:	0c0a      	lsrs	r2, r1, #16
 8015224:	701a      	strb	r2, [r3, #0]
			if(gpio_stat[ROTS_B4] == 0) sprintf(s,"TRX: 4");
 8015226:	4b5a      	ldr	r3, [pc, #360]	; (8015390 <statusline+0x318>)
 8015228:	799b      	ldrb	r3, [r3, #6]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d109      	bne.n	8015242 <statusline+0x1ca>
 801522e:	463b      	mov	r3, r7
 8015230:	4a5b      	ldr	r2, [pc, #364]	; (80153a0 <statusline+0x328>)
 8015232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015236:	6018      	str	r0, [r3, #0]
 8015238:	3304      	adds	r3, #4
 801523a:	8019      	strh	r1, [r3, #0]
 801523c:	3302      	adds	r3, #2
 801523e:	0c0a      	lsrs	r2, r1, #16
 8015240:	701a      	strb	r2, [r3, #0]

			if(civ_avail == 1)
 8015242:	4b49      	ldr	r3, [pc, #292]	; (8015368 <statusline+0x2f0>)
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	2b01      	cmp	r3, #1
 8015248:	d11f      	bne.n	801528a <statusline+0x212>
			{
				sprintf(s+strlen(s),"    %8.6f MHz    CIV: %02X",((float)civ_freq)/1000000,civ_adr);
 801524a:	463b      	mov	r3, r7
 801524c:	4618      	mov	r0, r3
 801524e:	f7f2 fef7 	bl	8008040 <strlen>
 8015252:	4602      	mov	r2, r0
 8015254:	463b      	mov	r3, r7
 8015256:	189c      	adds	r4, r3, r2
 8015258:	4b3d      	ldr	r3, [pc, #244]	; (8015350 <statusline+0x2d8>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	ee07 3a90 	vmov	s15, r3
 8015260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015264:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80153a4 <statusline+0x32c>
 8015268:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801526c:	ee16 0a90 	vmov	r0, s13
 8015270:	f7f3 f8a2 	bl	80083b8 <__aeabi_f2d>
 8015274:	460a      	mov	r2, r1
 8015276:	4601      	mov	r1, r0
 8015278:	4b41      	ldr	r3, [pc, #260]	; (8015380 <statusline+0x308>)
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	9300      	str	r3, [sp, #0]
 801527e:	4613      	mov	r3, r2
 8015280:	460a      	mov	r2, r1
 8015282:	4949      	ldr	r1, [pc, #292]	; (80153a8 <statusline+0x330>)
 8015284:	4620      	mov	r0, r4
 8015286:	f009 ffd7 	bl	801f238 <sprintf>
			}
			tft_print(&verdana_12ptFontInfo, s, x3, y, 1, WHITE, bcol);
 801528a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801528e:	4639      	mov	r1, r7
 8015290:	9302      	str	r3, [sp, #8]
 8015292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015296:	9301      	str	r3, [sp, #4]
 8015298:	2301      	movs	r3, #1
 801529a:	9300      	str	r3, [sp, #0]
 801529c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80152a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80152a4:	4839      	ldr	r0, [pc, #228]	; (801538c <statusline+0x314>)
 80152a6:	f009 fc7d 	bl	801eba4 <tft_print>
 80152aa:	e02c      	b.n	8015306 <statusline+0x28e>
		}
		else
		{
			if(civ_avail == 1)
 80152ac:	4b2e      	ldr	r3, [pc, #184]	; (8015368 <statusline+0x2f0>)
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	2b01      	cmp	r3, #1
 80152b2:	d128      	bne.n	8015306 <statusline+0x28e>
			{
				sprintf(s,"    %8.6f MHz    CIV: %02X",((float)civ_freq)/1000000,civ_adr);
 80152b4:	4b26      	ldr	r3, [pc, #152]	; (8015350 <statusline+0x2d8>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	ee07 3a90 	vmov	s15, r3
 80152bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80152c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80153a4 <statusline+0x32c>
 80152c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80152c8:	ee16 0a90 	vmov	r0, s13
 80152cc:	f7f3 f874 	bl	80083b8 <__aeabi_f2d>
 80152d0:	460a      	mov	r2, r1
 80152d2:	4601      	mov	r1, r0
 80152d4:	4b2a      	ldr	r3, [pc, #168]	; (8015380 <statusline+0x308>)
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	4638      	mov	r0, r7
 80152da:	9300      	str	r3, [sp, #0]
 80152dc:	4613      	mov	r3, r2
 80152de:	460a      	mov	r2, r1
 80152e0:	4931      	ldr	r1, [pc, #196]	; (80153a8 <statusline+0x330>)
 80152e2:	f009 ffa9 	bl	801f238 <sprintf>
				tft_print(&verdana_12ptFontInfo, s, x3, y, 1, WHITE, bcol);
 80152e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80152ea:	4639      	mov	r1, r7
 80152ec:	9302      	str	r3, [sp, #8]
 80152ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152f2:	9301      	str	r3, [sp, #4]
 80152f4:	2301      	movs	r3, #1
 80152f6:	9300      	str	r3, [sp, #0]
 80152f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80152fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015300:	4822      	ldr	r0, [pc, #136]	; (801538c <statusline+0x314>)
 8015302:	f009 fc4f 	bl	801eba4 <tft_print>
			}
		}
	}


	old_antsw = pcfgdata->antsw;
 8015306:	4b16      	ldr	r3, [pc, #88]	; (8015360 <statusline+0x2e8>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 801530e:	4b15      	ldr	r3, [pc, #84]	; (8015364 <statusline+0x2ec>)
 8015310:	701a      	strb	r2, [r3, #0]
	oldcivavail = civ_avail;
 8015312:	4b15      	ldr	r3, [pc, #84]	; (8015368 <statusline+0x2f0>)
 8015314:	781a      	ldrb	r2, [r3, #0]
 8015316:	4b15      	ldr	r3, [pc, #84]	; (801536c <statusline+0x2f4>)
 8015318:	701a      	strb	r2, [r3, #0]
	old_selected_bandrelais = selected_bandrelais;
 801531a:	4b15      	ldr	r3, [pc, #84]	; (8015370 <statusline+0x2f8>)
 801531c:	781a      	ldrb	r2, [r3, #0]
 801531e:	4b15      	ldr	r3, [pc, #84]	; (8015374 <statusline+0x2fc>)
 8015320:	701a      	strb	r2, [r3, #0]
	old_freq = civadr_khz;
 8015322:	4a15      	ldr	r2, [pc, #84]	; (8015378 <statusline+0x300>)
 8015324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015328:	6013      	str	r3, [r2, #0]
	old_civadr = civ_adr;
 801532a:	4b15      	ldr	r3, [pc, #84]	; (8015380 <statusline+0x308>)
 801532c:	781a      	ldrb	r2, [r3, #0]
 801532e:	4b13      	ldr	r3, [pc, #76]	; (801537c <statusline+0x304>)
 8015330:	701a      	strb	r2, [r3, #0]
	old_inputmode = pcfgdata->auxInputMode;
 8015332:	4b0b      	ldr	r3, [pc, #44]	; (8015360 <statusline+0x2e8>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801533a:	4b12      	ldr	r3, [pc, #72]	; (8015384 <statusline+0x30c>)
 801533c:	701a      	strb	r2, [r3, #0]
	showstatus = 0;
 801533e:	4b07      	ldr	r3, [pc, #28]	; (801535c <statusline+0x2e4>)
 8015340:	2200      	movs	r2, #0
 8015342:	701a      	strb	r2, [r3, #0]
 8015344:	e000      	b.n	8015348 <statusline+0x2d0>
	if(menunum == MENU_TOUCHCAL || menunum == MENU_STARTUP) return;
 8015346:	bf00      	nop
}
 8015348:	37b4      	adds	r7, #180	; 0xb4
 801534a:	46bd      	mov	sp, r7
 801534c:	bd90      	pop	{r4, r7, pc}
 801534e:	bf00      	nop
 8015350:	200027bc 	.word	0x200027bc
 8015354:	10624dd3 	.word	0x10624dd3
 8015358:	20000c24 	.word	0x20000c24
 801535c:	20002704 	.word	0x20002704
 8015360:	20000bf0 	.word	0x20000bf0
 8015364:	200013c0 	.word	0x200013c0
 8015368:	200027c4 	.word	0x200027c4
 801536c:	200013c1 	.word	0x200013c1
 8015370:	20003190 	.word	0x20003190
 8015374:	200013c2 	.word	0x200013c2
 8015378:	200013c4 	.word	0x200013c4
 801537c:	200013c8 	.word	0x200013c8
 8015380:	200027c5 	.word	0x200027c5
 8015384:	200013c9 	.word	0x200013c9
 8015388:	08026c28 	.word	0x08026c28
 801538c:	20001c64 	.word	0x20001c64
 8015390:	2000498c 	.word	0x2000498c
 8015394:	08026c30 	.word	0x08026c30
 8015398:	08026c38 	.word	0x08026c38
 801539c:	08026c40 	.word	0x08026c40
 80153a0:	08026c48 	.word	0x08026c48
 80153a4:	49742400 	.word	0x49742400
 80153a8:	08026c50 	.word	0x08026c50

080153ac <messagebox>:
 */

#include <main.h>

void messagebox(char *text, int duration_ms)
{
 80153ac:	b590      	push	{r4, r7, lr}
 80153ae:	b091      	sub	sp, #68	; 0x44
 80153b0:	af04      	add	r7, sp, #16
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	6039      	str	r1, [r7, #0]
	FONT_INFO font = verdana_36ptFontInfo;
 80153b6:	4a43      	ldr	r2, [pc, #268]	; (80154c4 <messagebox+0x118>)
 80153b8:	f107 0310 	add.w	r3, r7, #16
 80153bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80153be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	int w,h;
	tft_textwidth_pixel(&font, text, &w, &h);
 80153c2:	f107 0308 	add.w	r3, r7, #8
 80153c6:	f107 020c 	add.w	r2, r7, #12
 80153ca:	f107 0010 	add.w	r0, r7, #16
 80153ce:	6879      	ldr	r1, [r7, #4]
 80153d0:	f009 fc01 	bl	801ebd6 <tft_textwidth_pixel>

	w += 100;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	3364      	adds	r3, #100	; 0x64
 80153d8:	60fb      	str	r3, [r7, #12]

	int xs = TFT_WIDTH/2 - w/2;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	0fda      	lsrs	r2, r3, #31
 80153de:	4413      	add	r3, r2
 80153e0:	105b      	asrs	r3, r3, #1
 80153e2:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 80153e6:	62bb      	str	r3, [r7, #40]	; 0x28
	int xe = TFT_WIDTH/2 + w/2;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	0fda      	lsrs	r2, r3, #31
 80153ec:	4413      	add	r3, r2
 80153ee:	105b      	asrs	r3, r3, #1
 80153f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80153f4:	627b      	str	r3, [r7, #36]	; 0x24
	int ys = TFT_HEIGHT/2 - h/2;
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	0fda      	lsrs	r2, r3, #31
 80153fa:	4413      	add	r3, r2
 80153fc:	105b      	asrs	r3, r3, #1
 80153fe:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8015402:	623b      	str	r3, [r7, #32]
	int ye = TFT_HEIGHT/2 + h/2;
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	0fda      	lsrs	r2, r3, #31
 8015408:	4413      	add	r3, r2
 801540a:	105b      	asrs	r3, r3, #1
 801540c:	33f0      	adds	r3, #240	; 0xf0
 801540e:	61fb      	str	r3, [r7, #28]

	for(int i=30; i>1; i-=4)
 8015410:	231e      	movs	r3, #30
 8015412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015414:	e02b      	b.n	801546e <messagebox+0xc2>
	{
		TFT_Fill_Rectangle(xs-i, ys-i, xe+i, ye+i, WHITE);
 8015416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801541a:	1ad0      	subs	r0, r2, r3
 801541c:	6a3a      	ldr	r2, [r7, #32]
 801541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015420:	1ad1      	subs	r1, r2, r3
 8015422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015426:	18d4      	adds	r4, r2, r3
 8015428:	69fa      	ldr	r2, [r7, #28]
 801542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801542c:	441a      	add	r2, r3
 801542e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015432:	9300      	str	r3, [sp, #0]
 8015434:	4613      	mov	r3, r2
 8015436:	4622      	mov	r2, r4
 8015438:	f002 f9fe 	bl	8017838 <TFT_Fill_Rectangle>
		TFT_Fill_Rectangle(xs-i+2, ys-i+2, xe+i-2, ye+i-2, BLACK);
 801543c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015440:	1ad3      	subs	r3, r2, r3
 8015442:	1c98      	adds	r0, r3, #2
 8015444:	6a3a      	ldr	r2, [r7, #32]
 8015446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015448:	1ad3      	subs	r3, r2, r3
 801544a:	1c99      	adds	r1, r3, #2
 801544c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015450:	4413      	add	r3, r2
 8015452:	1e9c      	subs	r4, r3, #2
 8015454:	69fa      	ldr	r2, [r7, #28]
 8015456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015458:	4413      	add	r3, r2
 801545a:	1e9a      	subs	r2, r3, #2
 801545c:	2300      	movs	r3, #0
 801545e:	9300      	str	r3, [sp, #0]
 8015460:	4613      	mov	r3, r2
 8015462:	4622      	mov	r2, r4
 8015464:	f002 f9e8 	bl	8017838 <TFT_Fill_Rectangle>
	for(int i=30; i>1; i-=4)
 8015468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801546a:	3b04      	subs	r3, #4
 801546c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015470:	2b01      	cmp	r3, #1
 8015472:	dcd0      	bgt.n	8015416 <messagebox+0x6a>
	}

	tft_print(&font, text, xs+20, ys + ((ye-ys)/2 - h/2), 4, WHITE, BLACK);
 8015474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015476:	f103 0114 	add.w	r1, r3, #20
 801547a:	69fa      	ldr	r2, [r7, #28]
 801547c:	6a3b      	ldr	r3, [r7, #32]
 801547e:	1ad3      	subs	r3, r2, r3
 8015480:	0fda      	lsrs	r2, r3, #31
 8015482:	4413      	add	r3, r2
 8015484:	105b      	asrs	r3, r3, #1
 8015486:	4618      	mov	r0, r3
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	0fda      	lsrs	r2, r3, #31
 801548c:	4413      	add	r3, r2
 801548e:	105b      	asrs	r3, r3, #1
 8015490:	425b      	negs	r3, r3
 8015492:	18c2      	adds	r2, r0, r3
 8015494:	6a3b      	ldr	r3, [r7, #32]
 8015496:	441a      	add	r2, r3
 8015498:	f107 0010 	add.w	r0, r7, #16
 801549c:	2300      	movs	r3, #0
 801549e:	9302      	str	r3, [sp, #8]
 80154a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154a4:	9301      	str	r3, [sp, #4]
 80154a6:	2304      	movs	r3, #4
 80154a8:	9300      	str	r3, [sp, #0]
 80154aa:	4613      	mov	r3, r2
 80154ac:	460a      	mov	r2, r1
 80154ae:	6879      	ldr	r1, [r7, #4]
 80154b0:	f009 fb78 	bl	801eba4 <tft_print>

	delay_1ms(duration_ms);
 80154b4:	6838      	ldr	r0, [r7, #0]
 80154b6:	f003 fc0b 	bl	8018cd0 <delay_1ms>
}
 80154ba:	bf00      	nop
 80154bc:	3734      	adds	r7, #52	; 0x34
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd90      	pop	{r4, r7, pc}
 80154c2:	bf00      	nop
 80154c4:	20001c88 	.word	0x20001c88

080154c8 <cf_calc_temp>:
	-1
};

// Berechne die Temperatur in Deg C
float cf_calc_temp(unsigned long uin)
{
 80154c8:	b5b0      	push	{r4, r5, r7, lr}
 80154ca:	b086      	sub	sp, #24
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
	float Rntc;
	int i;
	float x;
	float Umess = (float)uin/1000.0;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	ee07 3a90 	vmov	s15, r3
 80154d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80154da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80155fc <cf_calc_temp+0x134>
 80154de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80154e2:	edc7 7a04 	vstr	s15, [r7, #16]

	// Umess ist die Spannung am ADC Eingang
	// jetzt berechne daraus den Widerstand des NTCs
	Rntc = Umess * (float)RV / ((float)VREF/1000.0 - Umess);
 80154e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80154ea:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8015600 <cf_calc_temp+0x138>
 80154ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154f2:	ee17 0a90 	vmov	r0, s15
 80154f6:	f7f2 ff5f 	bl	80083b8 <__aeabi_f2d>
 80154fa:	4604      	mov	r4, r0
 80154fc:	460d      	mov	r5, r1
 80154fe:	6938      	ldr	r0, [r7, #16]
 8015500:	f7f2 ff5a 	bl	80083b8 <__aeabi_f2d>
 8015504:	4602      	mov	r2, r0
 8015506:	460b      	mov	r3, r1
 8015508:	f04f 0000 	mov.w	r0, #0
 801550c:	493d      	ldr	r1, [pc, #244]	; (8015604 <cf_calc_temp+0x13c>)
 801550e:	f7f2 fdf3 	bl	80080f8 <__aeabi_dsub>
 8015512:	4602      	mov	r2, r0
 8015514:	460b      	mov	r3, r1
 8015516:	4620      	mov	r0, r4
 8015518:	4629      	mov	r1, r5
 801551a:	f7f3 f8cf 	bl	80086bc <__aeabi_ddiv>
 801551e:	4603      	mov	r3, r0
 8015520:	460c      	mov	r4, r1
 8015522:	4618      	mov	r0, r3
 8015524:	4621      	mov	r1, r4
 8015526:	f7f3 fa77 	bl	8008a18 <__aeabi_d2f>
 801552a:	4603      	mov	r3, r0
 801552c:	60fb      	str	r3, [r7, #12]

	// suche den Bereich in der Tabelle
	i=0;
 801552e:	2300      	movs	r3, #0
 8015530:	617b      	str	r3, [r7, #20]
	while(temptab[i]!=-1)
 8015532:	e00f      	b.n	8015554 <cf_calc_temp+0x8c>
	{
		if(temptab[i] <= Rntc) break;
 8015534:	4a34      	ldr	r2, [pc, #208]	; (8015608 <cf_calc_temp+0x140>)
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	009b      	lsls	r3, r3, #2
 801553a:	4413      	add	r3, r2
 801553c:	edd3 7a00 	vldr	s15, [r3]
 8015540:	ed97 7a03 	vldr	s14, [r7, #12]
 8015544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554c:	da10      	bge.n	8015570 <cf_calc_temp+0xa8>
		i++;
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	3301      	adds	r3, #1
 8015552:	617b      	str	r3, [r7, #20]
	while(temptab[i]!=-1)
 8015554:	4a2c      	ldr	r2, [pc, #176]	; (8015608 <cf_calc_temp+0x140>)
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	4413      	add	r3, r2
 801555c:	edd3 7a00 	vldr	s15, [r3]
 8015560:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015564:	eef4 7a47 	vcmp.f32	s15, s14
 8015568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801556c:	d1e2      	bne.n	8015534 <cf_calc_temp+0x6c>
 801556e:	e000      	b.n	8015572 <cf_calc_temp+0xaa>
		if(temptab[i] <= Rntc) break;
 8015570:	bf00      	nop
	}

	if(i==0)
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d102      	bne.n	801557e <cf_calc_temp+0xb6>
	{
		return -10; // kleiner als kleinster Wert
 8015578:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 801557c:	e039      	b.n	80155f2 <cf_calc_temp+0x12a>
	}

	if(temptab[i]!=-1)
 801557e:	4a22      	ldr	r2, [pc, #136]	; (8015608 <cf_calc_temp+0x140>)
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	4413      	add	r3, r2
 8015586:	edd3 7a00 	vldr	s15, [r3]
 801558a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801558e:	eef4 7a47 	vcmp.f32	s15, s14
 8015592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015596:	d02a      	beq.n	80155ee <cf_calc_temp+0x126>
	{
		// Widerstandsbereich gefunden, interpoliere
		x = i - (Rntc - temptab[i])/(temptab[i-1] - temptab[i]);
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	ee07 3a90 	vmov	s15, r3
 801559e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80155a2:	4a19      	ldr	r2, [pc, #100]	; (8015608 <cf_calc_temp+0x140>)
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	4413      	add	r3, r2
 80155aa:	edd3 7a00 	vldr	s15, [r3]
 80155ae:	edd7 6a03 	vldr	s13, [r7, #12]
 80155b2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	3b01      	subs	r3, #1
 80155ba:	4a13      	ldr	r2, [pc, #76]	; (8015608 <cf_calc_temp+0x140>)
 80155bc:	009b      	lsls	r3, r3, #2
 80155be:	4413      	add	r3, r2
 80155c0:	edd3 6a00 	vldr	s13, [r3]
 80155c4:	4a10      	ldr	r2, [pc, #64]	; (8015608 <cf_calc_temp+0x140>)
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	009b      	lsls	r3, r3, #2
 80155ca:	4413      	add	r3, r2
 80155cc:	edd3 7a00 	vldr	s15, [r3]
 80155d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80155d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80155d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155dc:	edc7 7a02 	vstr	s15, [r7, #8]

		// x ist jetzt der interpolierte Tabellenindex
		// rechne ihn in die Temperatur um
		return  x*5.0;
 80155e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80155e4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80155e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155ec:	e001      	b.n	80155f2 <cf_calc_temp+0x12a>
	}

	return 160; // größer als größter Wert
 80155ee:	eddf 7a07 	vldr	s15, [pc, #28]	; 801560c <cf_calc_temp+0x144>
}
 80155f2:	eeb0 0a67 	vmov.f32	s0, s15
 80155f6:	3718      	adds	r7, #24
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bdb0      	pop	{r4, r5, r7, pc}
 80155fc:	447a0000 	.word	0x447a0000
 8015600:	46002000 	.word	0x46002000
 8015604:	40040000 	.word	0x40040000
 8015608:	200013d0 	.word	0x200013d0
 801560c:	43200000 	.word	0x43200000

08015610 <calc_temp>:

float calc_temp(unsigned long uin)
{
 8015610:	b590      	push	{r4, r7, lr}
 8015612:	b085      	sub	sp, #20
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
	float temp = cf_calc_temp(uin);
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f7ff ff55 	bl	80154c8 <cf_calc_temp>
 801561e:	ed87 0a03 	vstr	s0, [r7, #12]

	// temp ist in Grad C
	if(pcfgdata->tempunits == 1)
 8015622:	4b15      	ldr	r3, [pc, #84]	; (8015678 <calc_temp+0x68>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801562a:	2b01      	cmp	r3, #1
 801562c:	d118      	bne.n	8015660 <calc_temp+0x50>
	{
		// rechne in Grad F um
		temp = temp * 1.8 + 32.0;
 801562e:	68f8      	ldr	r0, [r7, #12]
 8015630:	f7f2 fec2 	bl	80083b8 <__aeabi_f2d>
 8015634:	a30e      	add	r3, pc, #56	; (adr r3, 8015670 <calc_temp+0x60>)
 8015636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563a:	f7f2 ff15 	bl	8008468 <__aeabi_dmul>
 801563e:	4603      	mov	r3, r0
 8015640:	460c      	mov	r4, r1
 8015642:	4618      	mov	r0, r3
 8015644:	4621      	mov	r1, r4
 8015646:	f04f 0200 	mov.w	r2, #0
 801564a:	4b0c      	ldr	r3, [pc, #48]	; (801567c <calc_temp+0x6c>)
 801564c:	f7f2 fd56 	bl	80080fc <__adddf3>
 8015650:	4603      	mov	r3, r0
 8015652:	460c      	mov	r4, r1
 8015654:	4618      	mov	r0, r3
 8015656:	4621      	mov	r1, r4
 8015658:	f7f3 f9de 	bl	8008a18 <__aeabi_d2f>
 801565c:	4603      	mov	r3, r0
 801565e:	60fb      	str	r3, [r7, #12]
	}

	return temp;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	ee07 3a90 	vmov	s15, r3
}
 8015666:	eeb0 0a67 	vmov.f32	s0, s15
 801566a:	3714      	adds	r7, #20
 801566c:	46bd      	mov	sp, r7
 801566e:	bd90      	pop	{r4, r7, pc}
 8015670:	cccccccd 	.word	0xcccccccd
 8015674:	3ffccccc 	.word	0x3ffccccc
 8015678:	20000bf0 	.word	0x20000bf0
 801567c:	40400000 	.word	0x40400000

08015680 <lin_log_raw>:

// logaritmiert einen Power-Wert und skaliert ihn
// Messwertbereich: maxval
// Ergebnisbereich: maxres
int lin_log_raw(float value, float maxval, int maxres, float abflachung)
{
 8015680:	b5b0      	push	{r4, r5, r7, lr}
 8015682:	b086      	sub	sp, #24
 8015684:	af00      	add	r7, sp, #0
 8015686:	ed87 0a03 	vstr	s0, [r7, #12]
 801568a:	edc7 0a02 	vstr	s1, [r7, #8]
 801568e:	6078      	str	r0, [r7, #4]
 8015690:	ed87 1a00 	vstr	s2, [r7]
	float fp =log10(value/abflachung + 1);
 8015694:	edd7 6a03 	vldr	s13, [r7, #12]
 8015698:	ed97 7a00 	vldr	s14, [r7]
 801569c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80156a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80156a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80156a8:	ee17 0a90 	vmov	r0, s15
 80156ac:	f7f2 fe84 	bl	80083b8 <__aeabi_f2d>
 80156b0:	4603      	mov	r3, r0
 80156b2:	460c      	mov	r4, r1
 80156b4:	ec44 3b10 	vmov	d0, r3, r4
 80156b8:	f00c fdea 	bl	8022290 <log10>
 80156bc:	ec54 3b10 	vmov	r3, r4, d0
 80156c0:	4618      	mov	r0, r3
 80156c2:	4621      	mov	r1, r4
 80156c4:	f7f3 f9a8 	bl	8008a18 <__aeabi_d2f>
 80156c8:	4603      	mov	r3, r0
 80156ca:	617b      	str	r3, [r7, #20]
	fp = fp * (float)maxres / (log10(maxval/abflachung + 1));
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	ee07 3a90 	vmov	s15, r3
 80156d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80156d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80156da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80156de:	ee17 0a90 	vmov	r0, s15
 80156e2:	f7f2 fe69 	bl	80083b8 <__aeabi_f2d>
 80156e6:	4604      	mov	r4, r0
 80156e8:	460d      	mov	r5, r1
 80156ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80156ee:	ed97 7a00 	vldr	s14, [r7]
 80156f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80156f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80156fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80156fe:	ee17 0a90 	vmov	r0, s15
 8015702:	f7f2 fe59 	bl	80083b8 <__aeabi_f2d>
 8015706:	4602      	mov	r2, r0
 8015708:	460b      	mov	r3, r1
 801570a:	ec43 2b10 	vmov	d0, r2, r3
 801570e:	f00c fdbf 	bl	8022290 <log10>
 8015712:	ec53 2b10 	vmov	r2, r3, d0
 8015716:	4620      	mov	r0, r4
 8015718:	4629      	mov	r1, r5
 801571a:	f7f2 ffcf 	bl	80086bc <__aeabi_ddiv>
 801571e:	4603      	mov	r3, r0
 8015720:	460c      	mov	r4, r1
 8015722:	4618      	mov	r0, r3
 8015724:	4621      	mov	r1, r4
 8015726:	f7f3 f977 	bl	8008a18 <__aeabi_d2f>
 801572a:	4603      	mov	r3, r0
 801572c:	617b      	str	r3, [r7, #20]
	return (int)fp;
 801572e:	edd7 7a05 	vldr	s15, [r7, #20]
 8015732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015736:	ee17 3a90 	vmov	r3, s15
}
 801573a:	4618      	mov	r0, r3
 801573c:	3718      	adds	r7, #24
 801573e:	46bd      	mov	sp, r7
 8015740:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015744 <lin_log>:

int lin_log(float value, float maxval, int maxres)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b086      	sub	sp, #24
 8015748:	af00      	add	r7, sp, #0
 801574a:	ed87 0a03 	vstr	s0, [r7, #12]
 801574e:	edc7 0a02 	vstr	s1, [r7, #8]
 8015752:	6078      	str	r0, [r7, #4]
	float fp = lin_log_raw(value, maxval, maxres, 40);	// Abflachung 40 für Power Darstellung
 8015754:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8015788 <lin_log+0x44>
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	edd7 0a02 	vldr	s1, [r7, #8]
 801575e:	ed97 0a03 	vldr	s0, [r7, #12]
 8015762:	f7ff ff8d 	bl	8015680 <lin_log_raw>
 8015766:	ee07 0a90 	vmov	s15, r0
 801576a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801576e:	edc7 7a05 	vstr	s15, [r7, #20]
	return (int)fp;
 8015772:	edd7 7a05 	vldr	s15, [r7, #20]
 8015776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801577a:	ee17 3a90 	vmov	r3, s15
}
 801577e:	4618      	mov	r0, r3
 8015780:	3718      	adds	r7, #24
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	42200000 	.word	0x42200000

0801578c <lin_log_percent_swr>:

int lin_log_percent_swr(float value, float maxval)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b084      	sub	sp, #16
 8015790:	af00      	add	r7, sp, #0
 8015792:	ed87 0a01 	vstr	s0, [r7, #4]
 8015796:	edc7 0a00 	vstr	s1, [r7]
	// value-1 weil ganz links 1:1 ist (und nicht 0)
	float fp = lin_log_raw(value-1, maxval, 100, 0.1);	// Abflachung für SWR Darstellung
 801579a:	edd7 7a01 	vldr	s15, [r7, #4]
 801579e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80157a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157a6:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80157d8 <lin_log_percent_swr+0x4c>
 80157aa:	2064      	movs	r0, #100	; 0x64
 80157ac:	edd7 0a00 	vldr	s1, [r7]
 80157b0:	eeb0 0a67 	vmov.f32	s0, s15
 80157b4:	f7ff ff64 	bl	8015680 <lin_log_raw>
 80157b8:	ee07 0a90 	vmov	s15, r0
 80157bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157c0:	edc7 7a03 	vstr	s15, [r7, #12]
	return (int)fp;
 80157c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80157c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157cc:	ee17 3a90 	vmov	r3, s15
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3710      	adds	r7, #16
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}
 80157d8:	3dcccccd 	.word	0x3dcccccd

080157dc <log_percent>:

// logarithmiert einen Wert und rechnet in % um 0-100
int log_percent(float value, float maxval)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80157e6:	edc7 0a00 	vstr	s1, [r7]
	return lin_log(value, maxval, 100);	// skaliert in den Bereich 0 - 100 %
 80157ea:	2064      	movs	r0, #100	; 0x64
 80157ec:	edd7 0a00 	vldr	s1, [r7]
 80157f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80157f4:	f7ff ffa6 	bl	8015744 <lin_log>
 80157f8:	4603      	mov	r3, r0
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3708      	adds	r7, #8
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <getMaxPower>:

int getMaxPower()
{
 8015804:	b480      	push	{r7}
 8015806:	af00      	add	r7, sp, #0
	return maxpwr[pcfgdata->maxpwrunits];
 8015808:	4b06      	ldr	r3, [pc, #24]	; (8015824 <getMaxPower+0x20>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015810:	461a      	mov	r2, r3
 8015812:	4b05      	ldr	r3, [pc, #20]	; (8015828 <getMaxPower+0x24>)
 8015814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8015818:	4618      	mov	r0, r3
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr
 8015822:	bf00      	nop
 8015824:	20000bf0 	.word	0x20000bf0
 8015828:	20001450 	.word	0x20001450

0801582c <getMaxDrvPower>:

int getMaxDrvPower()
{
 801582c:	b480      	push	{r7}
 801582e:	af00      	add	r7, sp, #0
	return maxdrvpwr[pcfgdata->maxdrvpwrunits];
 8015830:	4b06      	ldr	r3, [pc, #24]	; (801584c <getMaxDrvPower+0x20>)
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015838:	461a      	mov	r2, r3
 801583a:	4b05      	ldr	r3, [pc, #20]	; (8015850 <getMaxDrvPower+0x24>)
 801583c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8015840:	4618      	mov	r0, r3
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr
 801584a:	bf00      	nop
 801584c:	20000bf0 	.word	0x20000bf0
 8015850:	20001460 	.word	0x20001460

08015854 <WtoDBM>:
t_pwrswr pwrswr_input;
t_pwrswr pwrswr_filter;
t_pwrswr pwrswr_antenna;

float WtoDBM(float watts)
{
 8015854:	b590      	push	{r4, r7, lr}
 8015856:	b083      	sub	sp, #12
 8015858:	af00      	add	r7, sp, #0
 801585a:	ed87 0a01 	vstr	s0, [r7, #4]
	return 10.0*log10(watts*1000.0);
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f7f2 fdaa 	bl	80083b8 <__aeabi_f2d>
 8015864:	f04f 0200 	mov.w	r2, #0
 8015868:	4b10      	ldr	r3, [pc, #64]	; (80158ac <WtoDBM+0x58>)
 801586a:	f7f2 fdfd 	bl	8008468 <__aeabi_dmul>
 801586e:	4603      	mov	r3, r0
 8015870:	460c      	mov	r4, r1
 8015872:	ec44 3b17 	vmov	d7, r3, r4
 8015876:	eeb0 0a47 	vmov.f32	s0, s14
 801587a:	eef0 0a67 	vmov.f32	s1, s15
 801587e:	f00c fd07 	bl	8022290 <log10>
 8015882:	ec51 0b10 	vmov	r0, r1, d0
 8015886:	f04f 0200 	mov.w	r2, #0
 801588a:	4b09      	ldr	r3, [pc, #36]	; (80158b0 <WtoDBM+0x5c>)
 801588c:	f7f2 fdec 	bl	8008468 <__aeabi_dmul>
 8015890:	4603      	mov	r3, r0
 8015892:	460c      	mov	r4, r1
 8015894:	4618      	mov	r0, r3
 8015896:	4621      	mov	r1, r4
 8015898:	f7f3 f8be 	bl	8008a18 <__aeabi_d2f>
 801589c:	4603      	mov	r3, r0
 801589e:	ee07 3a90 	vmov	s15, r3
}
 80158a2:	eeb0 0a67 	vmov.f32	s0, s15
 80158a6:	370c      	adds	r7, #12
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd90      	pop	{r4, r7, pc}
 80158ac:	408f4000 	.word	0x408f4000
 80158b0:	40240000 	.word	0x40240000

080158b4 <calc_PwrBridges>:

void calc_PwrBridges()
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	af00      	add	r7, sp, #0
	calc_psvals(&pwrswr_antenna,pcfgdata->ant_W_low,pcfgdata->ant_W_high,pcfgdata->ant_mV_low,pcfgdata->ant_mV_high,adc_rawvals[UFWDANT],adc_rawvals[UANTFWDPEAK], adc_rawvals[UREVANT]);
 80158b8:	4b4d      	ldr	r3, [pc, #308]	; (80159f0 <calc_PwrBridges+0x13c>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80158c0:	4b4b      	ldr	r3, [pc, #300]	; (80159f0 <calc_PwrBridges+0x13c>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80158c8:	4b49      	ldr	r3, [pc, #292]	; (80159f0 <calc_PwrBridges+0x13c>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80158d0:	4b47      	ldr	r3, [pc, #284]	; (80159f0 <calc_PwrBridges+0x13c>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 80158d8:	4b46      	ldr	r3, [pc, #280]	; (80159f4 <calc_PwrBridges+0x140>)
 80158da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158dc:	ee05 3a90 	vmov	s11, r3
 80158e0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80158e4:	4b43      	ldr	r3, [pc, #268]	; (80159f4 <calc_PwrBridges+0x140>)
 80158e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158e8:	ee05 3a10 	vmov	s10, r3
 80158ec:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80158f0:	4b40      	ldr	r3, [pc, #256]	; (80159f4 <calc_PwrBridges+0x140>)
 80158f2:	689b      	ldr	r3, [r3, #8]
 80158f4:	ee04 3a90 	vmov	s9, r3
 80158f8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80158fc:	eeb0 3a64 	vmov.f32	s6, s9
 8015900:	eef0 2a45 	vmov.f32	s5, s10
 8015904:	eeb0 2a65 	vmov.f32	s4, s11
 8015908:	eef0 1a46 	vmov.f32	s3, s12
 801590c:	eeb0 1a66 	vmov.f32	s2, s13
 8015910:	eef0 0a47 	vmov.f32	s1, s14
 8015914:	eeb0 0a67 	vmov.f32	s0, s15
 8015918:	4837      	ldr	r0, [pc, #220]	; (80159f8 <calc_PwrBridges+0x144>)
 801591a:	f000 f875 	bl	8015a08 <calc_psvals>
	calc_psvals(&pwrswr_filter,pcfgdata->flt_W_low,pcfgdata->flt_W_high,pcfgdata->flt_mV_low,pcfgdata->flt_mV_high,adc_rawvals[UFWDFLT],adc_rawvals[UFLTFWDPEAK],adc_rawvals[UREVFLT]);
 801591e:	4b34      	ldr	r3, [pc, #208]	; (80159f0 <calc_PwrBridges+0x13c>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8015926:	4b32      	ldr	r3, [pc, #200]	; (80159f0 <calc_PwrBridges+0x13c>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 801592e:	4b30      	ldr	r3, [pc, #192]	; (80159f0 <calc_PwrBridges+0x13c>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8015936:	4b2e      	ldr	r3, [pc, #184]	; (80159f0 <calc_PwrBridges+0x13c>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 801593e:	4b2d      	ldr	r3, [pc, #180]	; (80159f4 <calc_PwrBridges+0x140>)
 8015940:	699b      	ldr	r3, [r3, #24]
 8015942:	ee05 3a90 	vmov	s11, r3
 8015946:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801594a:	4b2a      	ldr	r3, [pc, #168]	; (80159f4 <calc_PwrBridges+0x140>)
 801594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801594e:	ee05 3a10 	vmov	s10, r3
 8015952:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015956:	4b27      	ldr	r3, [pc, #156]	; (80159f4 <calc_PwrBridges+0x140>)
 8015958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801595a:	ee04 3a90 	vmov	s9, r3
 801595e:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8015962:	eeb0 3a64 	vmov.f32	s6, s9
 8015966:	eef0 2a45 	vmov.f32	s5, s10
 801596a:	eeb0 2a65 	vmov.f32	s4, s11
 801596e:	eef0 1a46 	vmov.f32	s3, s12
 8015972:	eeb0 1a66 	vmov.f32	s2, s13
 8015976:	eef0 0a47 	vmov.f32	s1, s14
 801597a:	eeb0 0a67 	vmov.f32	s0, s15
 801597e:	481f      	ldr	r0, [pc, #124]	; (80159fc <calc_PwrBridges+0x148>)
 8015980:	f000 f842 	bl	8015a08 <calc_psvals>
	calc_psvals(&pwrswr_input,pcfgdata->drv_W_low,pcfgdata->drv_W_high,pcfgdata->drv_mV_low,pcfgdata->drv_mV_high,adc_rawvals[UFWDIN],adc_rawvals[UDRVFWDPEAK],adc_rawvals[UREVIN]);
 8015984:	4b1a      	ldr	r3, [pc, #104]	; (80159f0 <calc_PwrBridges+0x13c>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801598c:	4b18      	ldr	r3, [pc, #96]	; (80159f0 <calc_PwrBridges+0x13c>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8015994:	4b16      	ldr	r3, [pc, #88]	; (80159f0 <calc_PwrBridges+0x13c>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 801599c:	4b14      	ldr	r3, [pc, #80]	; (80159f0 <calc_PwrBridges+0x13c>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80159a4:	4b13      	ldr	r3, [pc, #76]	; (80159f4 <calc_PwrBridges+0x140>)
 80159a6:	695b      	ldr	r3, [r3, #20]
 80159a8:	ee05 3a90 	vmov	s11, r3
 80159ac:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80159b0:	4b10      	ldr	r3, [pc, #64]	; (80159f4 <calc_PwrBridges+0x140>)
 80159b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159b4:	ee05 3a10 	vmov	s10, r3
 80159b8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80159bc:	4b0d      	ldr	r3, [pc, #52]	; (80159f4 <calc_PwrBridges+0x140>)
 80159be:	69db      	ldr	r3, [r3, #28]
 80159c0:	ee04 3a90 	vmov	s9, r3
 80159c4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80159c8:	eeb0 3a64 	vmov.f32	s6, s9
 80159cc:	eef0 2a45 	vmov.f32	s5, s10
 80159d0:	eeb0 2a65 	vmov.f32	s4, s11
 80159d4:	eef0 1a46 	vmov.f32	s3, s12
 80159d8:	eeb0 1a66 	vmov.f32	s2, s13
 80159dc:	eef0 0a47 	vmov.f32	s1, s14
 80159e0:	eeb0 0a67 	vmov.f32	s0, s15
 80159e4:	4806      	ldr	r0, [pc, #24]	; (8015a00 <calc_PwrBridges+0x14c>)
 80159e6:	f000 f80f 	bl	8015a08 <calc_psvals>
}
 80159ea:	bf00      	nop
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop
 80159f0:	20000bf0 	.word	0x20000bf0
 80159f4:	20003108 	.word	0x20003108
 80159f8:	20005684 	.word	0x20005684
 80159fc:	20005634 	.word	0x20005634
 8015a00:	200055e4 	.word	0x200055e4
 8015a04:	00000000 	.word	0x00000000

08015a08 <calc_psvals>:

 void calc_psvals(t_pwrswr *vals, float refWlow, float refWhigh, float refmVlow, float refmVhigh, float fwdvolt, float peakfwdvolt, float revvolt)
 {
 8015a08:	b590      	push	{r4, r7, lr}
 8015a0a:	b091      	sub	sp, #68	; 0x44
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	61f8      	str	r0, [r7, #28]
 8015a10:	ed87 0a06 	vstr	s0, [r7, #24]
 8015a14:	edc7 0a05 	vstr	s1, [r7, #20]
 8015a18:	ed87 1a04 	vstr	s2, [r7, #16]
 8015a1c:	edc7 1a03 	vstr	s3, [r7, #12]
 8015a20:	ed87 2a02 	vstr	s4, [r7, #8]
 8015a24:	edc7 2a01 	vstr	s5, [r7, #4]
 8015a28:	ed87 3a00 	vstr	s6, [r7]
	 float variation,Vf,Vr;
	 float stepmV_per_dB;			// Millivolt pro dB
	 float ref_low_dBm = WtoDBM(refWlow);
 8015a2c:	ed97 0a06 	vldr	s0, [r7, #24]
 8015a30:	f7ff ff10 	bl	8015854 <WtoDBM>
 8015a34:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	 float ref_high_dBm = WtoDBM(refWhigh);
 8015a38:	ed97 0a05 	vldr	s0, [r7, #20]
 8015a3c:	f7ff ff0a 	bl	8015854 <WtoDBM>
 8015a40:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

	 stepmV_per_dB = (refmVhigh - refmVlow)/(ref_high_dBm - ref_low_dBm);
 8015a44:	ed97 7a03 	vldr	s14, [r7, #12]
 8015a48:	edd7 7a04 	vldr	s15, [r7, #16]
 8015a4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8015a50:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8015a54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015a58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015a60:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	 // die vom AD8307 ausgegebene Spannung steht in fwdvolt
	 // calculate dBm
	 variation =  fwdvolt - refmVlow;			// difference in volts to xwatts reference
 8015a64:	ed97 7a02 	vldr	s14, [r7, #8]
 8015a68:	edd7 7a04 	vldr	s15, [r7, #16]
 8015a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a70:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	 variation =  variation/stepmV_per_dB;		// difference in dB to xwatts reference
 8015a74:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8015a78:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015a80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	 vals->fwd_dBm =  variation + ref_low_dBm;	// real measured dBm value
 8015a84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015a88:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a90:	69fb      	ldr	r3, [r7, #28]
 8015a92:	edc3 7a00 	vstr	s15, [r3]

	 // calculate real power in W
	 vals->fwd_watt = pow(10,vals->fwd_dBm/10.0) / 1000;
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7f2 fc8c 	bl	80083b8 <__aeabi_f2d>
 8015aa0:	f04f 0200 	mov.w	r2, #0
 8015aa4:	4bcc      	ldr	r3, [pc, #816]	; (8015dd8 <calc_psvals+0x3d0>)
 8015aa6:	f7f2 fe09 	bl	80086bc <__aeabi_ddiv>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	460c      	mov	r4, r1
 8015aae:	ec44 3b17 	vmov	d7, r3, r4
 8015ab2:	eeb0 1a47 	vmov.f32	s2, s14
 8015ab6:	eef0 1a67 	vmov.f32	s3, s15
 8015aba:	ed9f 0bc3 	vldr	d0, [pc, #780]	; 8015dc8 <calc_psvals+0x3c0>
 8015abe:	f00c fc67 	bl	8022390 <pow>
 8015ac2:	ec51 0b10 	vmov	r0, r1, d0
 8015ac6:	f04f 0200 	mov.w	r2, #0
 8015aca:	4bc4      	ldr	r3, [pc, #784]	; (8015ddc <calc_psvals+0x3d4>)
 8015acc:	f7f2 fdf6 	bl	80086bc <__aeabi_ddiv>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	460c      	mov	r4, r1
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	4621      	mov	r1, r4
 8015ad8:	f7f2 ff9e 	bl	8008a18 <__aeabi_d2f>
 8015adc:	4602      	mov	r2, r0
 8015ade:	69fb      	ldr	r3, [r7, #28]
 8015ae0:	609a      	str	r2, [r3, #8]
	 if(vals->fwd_watt > 9999) vals->fwd_watt = 9999;
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	edd3 7a02 	vldr	s15, [r3, #8]
 8015ae8:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8015de0 <calc_psvals+0x3d8>
 8015aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015af4:	dd02      	ble.n	8015afc <calc_psvals+0xf4>
 8015af6:	69fb      	ldr	r3, [r7, #28]
 8015af8:	4aba      	ldr	r2, [pc, #744]	; (8015de4 <calc_psvals+0x3dc>)
 8015afa:	609a      	str	r2, [r3, #8]

	 // berechne noch die Spitzenleistung
	variation =  peakfwdvolt - refmVlow;
 8015afc:	ed97 7a01 	vldr	s14, [r7, #4]
 8015b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b08:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	variation =  variation/stepmV_per_dB;
 8015b0c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8015b10:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015b18:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	vals->fwd_dBmpeak =  variation + ref_low_dBm;
 8015b1c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015b20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b28:	69fb      	ldr	r3, [r7, #28]
 8015b2a:	edc3 7a01 	vstr	s15, [r3, #4]

	// calculate real power in W
	vals->fwd_peakwatt = pow(10,vals->fwd_dBmpeak/10.0) / 1000;
 8015b2e:	69fb      	ldr	r3, [r7, #28]
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7f2 fc40 	bl	80083b8 <__aeabi_f2d>
 8015b38:	f04f 0200 	mov.w	r2, #0
 8015b3c:	4ba6      	ldr	r3, [pc, #664]	; (8015dd8 <calc_psvals+0x3d0>)
 8015b3e:	f7f2 fdbd 	bl	80086bc <__aeabi_ddiv>
 8015b42:	4603      	mov	r3, r0
 8015b44:	460c      	mov	r4, r1
 8015b46:	ec44 3b17 	vmov	d7, r3, r4
 8015b4a:	eeb0 1a47 	vmov.f32	s2, s14
 8015b4e:	eef0 1a67 	vmov.f32	s3, s15
 8015b52:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8015dc8 <calc_psvals+0x3c0>
 8015b56:	f00c fc1b 	bl	8022390 <pow>
 8015b5a:	ec51 0b10 	vmov	r0, r1, d0
 8015b5e:	f04f 0200 	mov.w	r2, #0
 8015b62:	4b9e      	ldr	r3, [pc, #632]	; (8015ddc <calc_psvals+0x3d4>)
 8015b64:	f7f2 fdaa 	bl	80086bc <__aeabi_ddiv>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	460c      	mov	r4, r1
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	4621      	mov	r1, r4
 8015b70:	f7f2 ff52 	bl	8008a18 <__aeabi_d2f>
 8015b74:	4602      	mov	r2, r0
 8015b76:	69fb      	ldr	r3, [r7, #28]
 8015b78:	60da      	str	r2, [r3, #12]
	if(vals->fwd_peakwatt > 9999) vals->fwd_peakwatt = 9999;
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8015b80:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8015de0 <calc_psvals+0x3d8>
 8015b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b8c:	dd02      	ble.n	8015b94 <calc_psvals+0x18c>
 8015b8e:	69fb      	ldr	r3, [r7, #28]
 8015b90:	4a94      	ldr	r2, [pc, #592]	; (8015de4 <calc_psvals+0x3dc>)
 8015b92:	60da      	str	r2, [r3, #12]

	 // und das gleiche für die Rücklaufende
	 // calculate dBm
	 variation =  revvolt - refmVlow;			// difference in volts to xwatts reference
 8015b94:	ed97 7a00 	vldr	s14, [r7]
 8015b98:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ba0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	 variation =  variation/stepmV_per_dB;		// difference in dB to xwatts reference
 8015ba4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8015ba8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015bb0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	 vals->rev_dBm =  variation + ref_low_dBm;   // real measured dBm value
 8015bb4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015bb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bc0:	69fb      	ldr	r3, [r7, #28]
 8015bc2:	edc3 7a04 	vstr	s15, [r3, #16]

	 // calculate real reverse power in W
	 vals->rev_watt = pow(10,vals->rev_dBm/10.0) / 1000;
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	691b      	ldr	r3, [r3, #16]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7f2 fbf4 	bl	80083b8 <__aeabi_f2d>
 8015bd0:	f04f 0200 	mov.w	r2, #0
 8015bd4:	4b80      	ldr	r3, [pc, #512]	; (8015dd8 <calc_psvals+0x3d0>)
 8015bd6:	f7f2 fd71 	bl	80086bc <__aeabi_ddiv>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	460c      	mov	r4, r1
 8015bde:	ec44 3b17 	vmov	d7, r3, r4
 8015be2:	eeb0 1a47 	vmov.f32	s2, s14
 8015be6:	eef0 1a67 	vmov.f32	s3, s15
 8015bea:	ed9f 0b77 	vldr	d0, [pc, #476]	; 8015dc8 <calc_psvals+0x3c0>
 8015bee:	f00c fbcf 	bl	8022390 <pow>
 8015bf2:	ec51 0b10 	vmov	r0, r1, d0
 8015bf6:	f04f 0200 	mov.w	r2, #0
 8015bfa:	4b78      	ldr	r3, [pc, #480]	; (8015ddc <calc_psvals+0x3d4>)
 8015bfc:	f7f2 fd5e 	bl	80086bc <__aeabi_ddiv>
 8015c00:	4603      	mov	r3, r0
 8015c02:	460c      	mov	r4, r1
 8015c04:	4618      	mov	r0, r3
 8015c06:	4621      	mov	r1, r4
 8015c08:	f7f2 ff06 	bl	8008a18 <__aeabi_d2f>
 8015c0c:	4602      	mov	r2, r0
 8015c0e:	69fb      	ldr	r3, [r7, #28]
 8015c10:	615a      	str	r2, [r3, #20]
	 // SWR = (Vf+Vr)/(Vf-Vr)

	 // calculate voltage from dBm value
	 // V = squareroot(P*R)
	 float fswr;
	 Vf = sqrt(vals->fwd_watt*50*1000);
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	edd3 7a02 	vldr	s15, [r3, #8]
 8015c18:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015de8 <calc_psvals+0x3e0>
 8015c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c20:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8015dec <calc_psvals+0x3e4>
 8015c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c28:	ee17 0a90 	vmov	r0, s15
 8015c2c:	f7f2 fbc4 	bl	80083b8 <__aeabi_f2d>
 8015c30:	4603      	mov	r3, r0
 8015c32:	460c      	mov	r4, r1
 8015c34:	ec44 3b10 	vmov	d0, r3, r4
 8015c38:	f00c fd1a 	bl	8022670 <sqrt>
 8015c3c:	ec54 3b10 	vmov	r3, r4, d0
 8015c40:	4618      	mov	r0, r3
 8015c42:	4621      	mov	r1, r4
 8015c44:	f7f2 fee8 	bl	8008a18 <__aeabi_d2f>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	 Vr = sqrt(vals->rev_watt*50*1000);
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8015c52:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8015de8 <calc_psvals+0x3e0>
 8015c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c5a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8015dec <calc_psvals+0x3e4>
 8015c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c62:	ee17 0a90 	vmov	r0, s15
 8015c66:	f7f2 fba7 	bl	80083b8 <__aeabi_f2d>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	460c      	mov	r4, r1
 8015c6e:	ec44 3b10 	vmov	d0, r3, r4
 8015c72:	f00c fcfd 	bl	8022670 <sqrt>
 8015c76:	ec54 3b10 	vmov	r3, r4, d0
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	4621      	mov	r1, r4
 8015c7e:	f7f2 fecb 	bl	8008a18 <__aeabi_d2f>
 8015c82:	4603      	mov	r3, r0
 8015c84:	627b      	str	r3, [r7, #36]	; 0x24
	 if(Vf == Vr || Vf < Vr) fswr = 99;
 8015c86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015c8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015c8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8015c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c96:	d008      	beq.n	8015caa <calc_psvals+0x2a2>
 8015c98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015c9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca8:	d502      	bpl.n	8015cb0 <calc_psvals+0x2a8>
 8015caa:	4b51      	ldr	r3, [pc, #324]	; (8015df0 <calc_psvals+0x3e8>)
 8015cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015cae:	e00f      	b.n	8015cd0 <calc_psvals+0x2c8>
	 else fswr = (Vf+Vr)/(Vf-Vr);
 8015cb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015cb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015cb8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8015cbc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015cc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ccc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	 if(fswr<1.0001) fswr = 1.0001;
 8015cd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015cd2:	f7f2 fb71 	bl	80083b8 <__aeabi_f2d>
 8015cd6:	a33e      	add	r3, pc, #248	; (adr r3, 8015dd0 <calc_psvals+0x3c8>)
 8015cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cdc:	f7f2 fe36 	bl	800894c <__aeabi_dcmplt>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d001      	beq.n	8015cea <calc_psvals+0x2e2>
 8015ce6:	4b43      	ldr	r3, [pc, #268]	; (8015df4 <calc_psvals+0x3ec>)
 8015ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
	 if(vals->fwd_watt < 1.0) fswr = 1.0001;
 8015cea:	69fb      	ldr	r3, [r7, #28]
 8015cec:	edd3 7a02 	vldr	s15, [r3, #8]
 8015cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cfc:	d501      	bpl.n	8015d02 <calc_psvals+0x2fa>
 8015cfe:	4b3d      	ldr	r3, [pc, #244]	; (8015df4 <calc_psvals+0x3ec>)
 8015d00:	63fb      	str	r3, [r7, #60]	; 0x3c

	 vals->swr = swrValueSmooth(vals->smoothbuf, fswr);
 8015d02:	69fb      	ldr	r3, [r7, #28]
 8015d04:	3328      	adds	r3, #40	; 0x28
 8015d06:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f000 f878 	bl	8015e00 <swrValueSmooth>
 8015d10:	eef0 7a40 	vmov.f32	s15, s0
 8015d14:	69fb      	ldr	r3, [r7, #28]
 8015d16:	edc3 7a06 	vstr	s15, [r3, #24]

	 // und daraus die Impedanzen
	 vals->imp_min = 50.0 / vals->swr;
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	ed93 7a06 	vldr	s14, [r3, #24]
 8015d20:	eddf 6a31 	vldr	s13, [pc, #196]	; 8015de8 <calc_psvals+0x3e0>
 8015d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015d28:	69fb      	ldr	r3, [r7, #28]
 8015d2a:	edc3 7a07 	vstr	s15, [r3, #28]
	 vals->imp_max = 50.0 * vals->swr;
 8015d2e:	69fb      	ldr	r3, [r7, #28]
 8015d30:	edd3 7a06 	vldr	s15, [r3, #24]
 8015d34:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8015de8 <calc_psvals+0x3e0>
 8015d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d3c:	69fb      	ldr	r3, [r7, #28]
 8015d3e:	edc3 7a08 	vstr	s15, [r3, #32]

	 if(vals->imp_min < 0) vals->imp_min = 0;
 8015d42:	69fb      	ldr	r3, [r7, #28]
 8015d44:	edd3 7a07 	vldr	s15, [r3, #28]
 8015d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d50:	d503      	bpl.n	8015d5a <calc_psvals+0x352>
 8015d52:	69fb      	ldr	r3, [r7, #28]
 8015d54:	f04f 0200 	mov.w	r2, #0
 8015d58:	61da      	str	r2, [r3, #28]
	 if(vals->imp_min > 999) vals->imp_min = 999;
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8015d60:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8015df8 <calc_psvals+0x3f0>
 8015d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d6c:	dd02      	ble.n	8015d74 <calc_psvals+0x36c>
 8015d6e:	69fb      	ldr	r3, [r7, #28]
 8015d70:	4a22      	ldr	r2, [pc, #136]	; (8015dfc <calc_psvals+0x3f4>)
 8015d72:	61da      	str	r2, [r3, #28]
	 if(vals->imp_max < 0) vals->imp_max = 0;
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	edd3 7a08 	vldr	s15, [r3, #32]
 8015d7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d82:	d503      	bpl.n	8015d8c <calc_psvals+0x384>
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	f04f 0200 	mov.w	r2, #0
 8015d8a:	621a      	str	r2, [r3, #32]
	 if(vals->imp_max > 999) vals->imp_max = 999;
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8015d92:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8015df8 <calc_psvals+0x3f0>
 8015d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9e:	dd02      	ble.n	8015da6 <calc_psvals+0x39e>
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	4a16      	ldr	r2, [pc, #88]	; (8015dfc <calc_psvals+0x3f4>)
 8015da4:	621a      	str	r2, [r3, #32]

	 vals->refl_attenuation =  vals->fwd_dBm - vals->rev_dBm;
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	ed93 7a00 	vldr	s14, [r3]
 8015dac:	69fb      	ldr	r3, [r7, #28]
 8015dae:	edd3 7a04 	vldr	s15, [r3, #16]
 8015db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015db6:	69fb      	ldr	r3, [r7, #28]
 8015db8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 }
 8015dbc:	bf00      	nop
 8015dbe:	3744      	adds	r7, #68	; 0x44
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd90      	pop	{r4, r7, pc}
 8015dc4:	f3af 8000 	nop.w
 8015dc8:	00000000 	.word	0x00000000
 8015dcc:	40240000 	.word	0x40240000
 8015dd0:	db8bac71 	.word	0xdb8bac71
 8015dd4:	3ff00068 	.word	0x3ff00068
 8015dd8:	40240000 	.word	0x40240000
 8015ddc:	408f4000 	.word	0x408f4000
 8015de0:	461c3c00 	.word	0x461c3c00
 8015de4:	461c3c00 	.word	0x461c3c00
 8015de8:	42480000 	.word	0x42480000
 8015dec:	447a0000 	.word	0x447a0000
 8015df0:	42c60000 	.word	0x42c60000
 8015df4:	3f800347 	.word	0x3f800347
 8015df8:	4479c000 	.word	0x4479c000
 8015dfc:	4479c000 	.word	0x4479c000

08015e00 <swrValueSmooth>:

 // Bilde Mittelwert über die letzten SWR Messungen
 float swrValueSmooth(float *swrsmoothbuf, float swr)
 {
 8015e00:	b480      	push	{r7}
 8015e02:	b087      	sub	sp, #28
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
 8015e08:	ed87 0a00 	vstr	s0, [r7]
 	for(int i=(SWRSMOOTHLEN-1); i>0; i--)
 8015e0c:	2309      	movs	r3, #9
 8015e0e:	617b      	str	r3, [r7, #20]
 8015e10:	e00f      	b.n	8015e32 <swrValueSmooth+0x32>
 	{
 		swrsmoothbuf[i] = swrsmoothbuf[i-1];
 8015e12:	697b      	ldr	r3, [r7, #20]
 8015e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015e18:	3b01      	subs	r3, #1
 8015e1a:	009b      	lsls	r3, r3, #2
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	441a      	add	r2, r3
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	009b      	lsls	r3, r3, #2
 8015e24:	6879      	ldr	r1, [r7, #4]
 8015e26:	440b      	add	r3, r1
 8015e28:	6812      	ldr	r2, [r2, #0]
 8015e2a:	601a      	str	r2, [r3, #0]
 	for(int i=(SWRSMOOTHLEN-1); i>0; i--)
 8015e2c:	697b      	ldr	r3, [r7, #20]
 8015e2e:	3b01      	subs	r3, #1
 8015e30:	617b      	str	r3, [r7, #20]
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	dcec      	bgt.n	8015e12 <swrValueSmooth+0x12>
 	}
 	swrsmoothbuf[0] = swr;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	683a      	ldr	r2, [r7, #0]
 8015e3c:	601a      	str	r2, [r3, #0]

 	float midval = 0;
 8015e3e:	f04f 0300 	mov.w	r3, #0
 8015e42:	613b      	str	r3, [r7, #16]
 	for(int i=0; i<SWRSMOOTHLEN; i++)
 8015e44:	2300      	movs	r3, #0
 8015e46:	60fb      	str	r3, [r7, #12]
 8015e48:	e00e      	b.n	8015e68 <swrValueSmooth+0x68>
 	{
 		midval += swrsmoothbuf[i];
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	009b      	lsls	r3, r3, #2
 8015e4e:	687a      	ldr	r2, [r7, #4]
 8015e50:	4413      	add	r3, r2
 8015e52:	edd3 7a00 	vldr	s15, [r3]
 8015e56:	ed97 7a04 	vldr	s14, [r7, #16]
 8015e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e5e:	edc7 7a04 	vstr	s15, [r7, #16]
 	for(int i=0; i<SWRSMOOTHLEN; i++)
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	3301      	adds	r3, #1
 8015e66:	60fb      	str	r3, [r7, #12]
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	2b09      	cmp	r3, #9
 8015e6c:	dded      	ble.n	8015e4a <swrValueSmooth+0x4a>
 	}
 	midval /= SWRSMOOTHLEN;
 8015e6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8015e72:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8015e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015e7a:	edc7 7a04 	vstr	s15, [r7, #16]

 	return midval;
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	ee07 3a90 	vmov	s15, r3
 }
 8015e84:	eeb0 0a67 	vmov.f32	s0, s15
 8015e88:	371c      	adds	r7, #28
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e90:	4770      	bx	lr
	...

08015e94 <draw_menu_setup>:
char (*setup_items)[SETUP_ITEM_MAXLEN] = esetup_items;


// Zeichne feste Bestandteile des Setup Menüs
void draw_menu_setup()
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b084      	sub	sp, #16
 8015e98:	af04      	add	r7, sp, #16
	TFT_Fill_Screen(BLACK);
 8015e9a:	2000      	movs	r0, #0
 8015e9c:	f001 fd0c 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_bottom();
 8015ea0:	f004 f93a 	bl	801a118 <draw_touchbuttons_bottom>
	tft_print(&verdana_36ptFontInfo, getLang(LIMITS), 14, 1, 5, WHITE , BLACK);
 8015ea4:	2031      	movs	r0, #49	; 0x31
 8015ea6:	f7fa ff9d 	bl	8010de4 <getLang>
 8015eaa:	4601      	mov	r1, r0
 8015eac:	2300      	movs	r3, #0
 8015eae:	9302      	str	r3, [sp, #8]
 8015eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015eb4:	9301      	str	r3, [sp, #4]
 8015eb6:	2305      	movs	r3, #5
 8015eb8:	9300      	str	r3, [sp, #0]
 8015eba:	2301      	movs	r3, #1
 8015ebc:	220e      	movs	r2, #14
 8015ebe:	480f      	ldr	r0, [pc, #60]	; (8015efc <draw_menu_setup+0x68>)
 8015ec0:	f008 fe70 	bl	801eba4 <tft_print>

	draw_setup_buttons();
 8015ec4:	f000 f822 	bl	8015f0c <draw_setup_buttons>
	tft_print(&lucidaConsole_18ptFontInfo, "x100  x10   x1", 570, 197, 1, WHITE , BLACK);
 8015ec8:	2300      	movs	r3, #0
 8015eca:	9302      	str	r3, [sp, #8]
 8015ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ed0:	9301      	str	r3, [sp, #4]
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	9300      	str	r3, [sp, #0]
 8015ed6:	23c5      	movs	r3, #197	; 0xc5
 8015ed8:	f240 223a 	movw	r2, #570	; 0x23a
 8015edc:	4908      	ldr	r1, [pc, #32]	; (8015f00 <draw_menu_setup+0x6c>)
 8015ede:	4809      	ldr	r0, [pc, #36]	; (8015f04 <draw_menu_setup+0x70>)
 8015ee0:	f008 fe60 	bl	801eba4 <tft_print>

	editline = 0;
 8015ee4:	4b08      	ldr	r3, [pc, #32]	; (8015f08 <draw_menu_setup+0x74>)
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	601a      	str	r2, [r3, #0]
	setup_drawvalues();
 8015eea:	f000 f9a7 	bl	801623c <setup_drawvalues>
	editline = TB_SETUP1;
 8015eee:	4b06      	ldr	r3, [pc, #24]	; (8015f08 <draw_menu_setup+0x74>)
 8015ef0:	2219      	movs	r2, #25
 8015ef2:	601a      	str	r2, [r3, #0]
}
 8015ef4:	bf00      	nop
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	20001c88 	.word	0x20001c88
 8015f00:	08026c80 	.word	0x08026c80
 8015f04:	20001c34 	.word	0x20001c34
 8015f08:	20001544 	.word	0x20001544

08015f0c <draw_setup_buttons>:

void draw_setup_buttons()
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
int anz = SETUP_ITEM_ANZ;
 8015f12:	2307      	movs	r3, #7
 8015f14:	607b      	str	r3, [r7, #4]

	if(pcfgdata->systemMode == 1) anz-=2;
 8015f16:	4b26      	ldr	r3, [pc, #152]	; (8015fb0 <draw_setup_buttons+0xa4>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	d102      	bne.n	8015f28 <draw_setup_buttons+0x1c>
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	3b02      	subs	r3, #2
 8015f26:	607b      	str	r3, [r7, #4]

	draw_touchbutton(&tb_buttons[TB_P100]);
 8015f28:	4822      	ldr	r0, [pc, #136]	; (8015fb4 <draw_setup_buttons+0xa8>)
 8015f2a:	f004 f86f 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_P10]);
 8015f2e:	4822      	ldr	r0, [pc, #136]	; (8015fb8 <draw_setup_buttons+0xac>)
 8015f30:	f004 f86c 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_P1]);
 8015f34:	4821      	ldr	r0, [pc, #132]	; (8015fbc <draw_setup_buttons+0xb0>)
 8015f36:	f004 f869 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_M100]);
 8015f3a:	4821      	ldr	r0, [pc, #132]	; (8015fc0 <draw_setup_buttons+0xb4>)
 8015f3c:	f004 f866 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_M10]);
 8015f40:	4820      	ldr	r0, [pc, #128]	; (8015fc4 <draw_setup_buttons+0xb8>)
 8015f42:	f004 f863 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_M1]);
 8015f46:	4820      	ldr	r0, [pc, #128]	; (8015fc8 <draw_setup_buttons+0xbc>)
 8015f48:	f004 f860 	bl	801a00c <draw_touchbutton>

	// aktiviere erstes Menü
	for(int i=TB_SETUP1; i<(TB_SETUP1+anz); i++)
 8015f4c:	2319      	movs	r3, #25
 8015f4e:	603b      	str	r3, [r7, #0]
 8015f50:	e024      	b.n	8015f9c <draw_setup_buttons+0x90>
	{
		if(i == TB_SETUP1) tb_buttons[i].pressed = 1;
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	2b19      	cmp	r3, #25
 8015f56:	d10a      	bne.n	8015f6e <draw_setup_buttons+0x62>
 8015f58:	491c      	ldr	r1, [pc, #112]	; (8015fcc <draw_setup_buttons+0xc0>)
 8015f5a:	683a      	ldr	r2, [r7, #0]
 8015f5c:	4613      	mov	r3, r2
 8015f5e:	005b      	lsls	r3, r3, #1
 8015f60:	4413      	add	r3, r2
 8015f62:	015b      	lsls	r3, r3, #5
 8015f64:	440b      	add	r3, r1
 8015f66:	335c      	adds	r3, #92	; 0x5c
 8015f68:	2201      	movs	r2, #1
 8015f6a:	701a      	strb	r2, [r3, #0]
 8015f6c:	e009      	b.n	8015f82 <draw_setup_buttons+0x76>
		else tb_buttons[i].pressed = 0;
 8015f6e:	4917      	ldr	r1, [pc, #92]	; (8015fcc <draw_setup_buttons+0xc0>)
 8015f70:	683a      	ldr	r2, [r7, #0]
 8015f72:	4613      	mov	r3, r2
 8015f74:	005b      	lsls	r3, r3, #1
 8015f76:	4413      	add	r3, r2
 8015f78:	015b      	lsls	r3, r3, #5
 8015f7a:	440b      	add	r3, r1
 8015f7c:	335c      	adds	r3, #92	; 0x5c
 8015f7e:	2200      	movs	r2, #0
 8015f80:	701a      	strb	r2, [r3, #0]
		draw_touchbutton(&tb_buttons[i]);
 8015f82:	683a      	ldr	r2, [r7, #0]
 8015f84:	4613      	mov	r3, r2
 8015f86:	005b      	lsls	r3, r3, #1
 8015f88:	4413      	add	r3, r2
 8015f8a:	015b      	lsls	r3, r3, #5
 8015f8c:	4a0f      	ldr	r2, [pc, #60]	; (8015fcc <draw_setup_buttons+0xc0>)
 8015f8e:	4413      	add	r3, r2
 8015f90:	4618      	mov	r0, r3
 8015f92:	f004 f83b 	bl	801a00c <draw_touchbutton>
	for(int i=TB_SETUP1; i<(TB_SETUP1+anz); i++)
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	3301      	adds	r3, #1
 8015f9a:	603b      	str	r3, [r7, #0]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	3319      	adds	r3, #25
 8015fa0:	683a      	ldr	r2, [r7, #0]
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	dbd5      	blt.n	8015f52 <draw_setup_buttons+0x46>
	}
}
 8015fa6:	bf00      	nop
 8015fa8:	3708      	adds	r7, #8
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	20000bf0 	.word	0x20000bf0
 8015fb4:	200076d8 	.word	0x200076d8
 8015fb8:	20007738 	.word	0x20007738
 8015fbc:	20007798 	.word	0x20007798
 8015fc0:	20007858 	.word	0x20007858
 8015fc4:	200078b8 	.word	0x200078b8
 8015fc8:	20007918 	.word	0x20007918
 8015fcc:	20007078 	.word	0x20007078

08015fd0 <init_setup_buttons>:

void init_setup_buttons()
{
 8015fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fd2:	b095      	sub	sp, #84	; 0x54
 8015fd4:	af0c      	add	r7, sp, #48	; 0x30
int text_rect_width = 320;
 8015fd6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8015fda:	617b      	str	r3, [r7, #20]
int anz = SETUP_ITEM_ANZ;
 8015fdc:	2307      	movs	r3, #7
 8015fde:	61fb      	str	r3, [r7, #28]

	if(pcfgdata->systemMode == 1) anz-=2;
 8015fe0:	4b32      	ldr	r3, [pc, #200]	; (80160ac <init_setup_buttons+0xdc>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015fe8:	2b01      	cmp	r3, #1
 8015fea:	d102      	bne.n	8015ff2 <init_setup_buttons+0x22>
 8015fec:	69fb      	ldr	r3, [r7, #28]
 8015fee:	3b02      	subs	r3, #2
 8015ff0:	61fb      	str	r3, [r7, #28]

	int itemysize = (ITEMS_BOTTOMMARGIN-ITEMS_TOPMARGIN) / anz;
 8015ff2:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ffc:	613b      	str	r3, [r7, #16]

	setup_items = esetup_items;
 8015ffe:	4b2c      	ldr	r3, [pc, #176]	; (80160b0 <init_setup_buttons+0xe0>)
 8016000:	4a2c      	ldr	r2, [pc, #176]	; (80160b4 <init_setup_buttons+0xe4>)
 8016002:	601a      	str	r2, [r3, #0]
	if(pcfgdata->language == 1) setup_items = dsetup_items;
 8016004:	4b29      	ldr	r3, [pc, #164]	; (80160ac <init_setup_buttons+0xdc>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801600c:	2b01      	cmp	r3, #1
 801600e:	d102      	bne.n	8016016 <init_setup_buttons+0x46>
 8016010:	4b27      	ldr	r3, [pc, #156]	; (80160b0 <init_setup_buttons+0xe0>)
 8016012:	4a29      	ldr	r2, [pc, #164]	; (80160b8 <init_setup_buttons+0xe8>)
 8016014:	601a      	str	r2, [r3, #0]

	for(int i=0; i<anz; i++)
 8016016:	2300      	movs	r3, #0
 8016018:	61bb      	str	r3, [r7, #24]
 801601a:	e03f      	b.n	801609c <init_setup_buttons+0xcc>
	{
		int y = ITEMS_TOPMARGIN + i * itemysize;
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	693a      	ldr	r2, [r7, #16]
 8016020:	fb02 f303 	mul.w	r3, r2, r3
 8016024:	333c      	adds	r3, #60	; 0x3c
 8016026:	60fb      	str	r3, [r7, #12]
		int ys = y+1;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	3301      	adds	r3, #1
 801602c:	60bb      	str	r3, [r7, #8]
		int ye = y + (itemysize-2);
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	3b02      	subs	r3, #2
 8016032:	68fa      	ldr	r2, [r7, #12]
 8016034:	4413      	add	r3, r2
 8016036:	607b      	str	r3, [r7, #4]

		setup_touchbutton(&tb_buttons[TB_SETUP1+i],0,ys,text_rect_width,ye-ys,LIGHTBLUE,YELLOW,BLACK,setup_items[i],lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 8016038:	69bb      	ldr	r3, [r7, #24]
 801603a:	f103 0219 	add.w	r2, r3, #25
 801603e:	4613      	mov	r3, r2
 8016040:	005b      	lsls	r3, r3, #1
 8016042:	4413      	add	r3, r2
 8016044:	015b      	lsls	r3, r3, #5
 8016046:	4a1d      	ldr	r2, [pc, #116]	; (80160bc <init_setup_buttons+0xec>)
 8016048:	189e      	adds	r6, r3, r2
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	1ad4      	subs	r4, r2, r3
 8016050:	4b17      	ldr	r3, [pc, #92]	; (80160b0 <init_setup_buttons+0xe0>)
 8016052:	6819      	ldr	r1, [r3, #0]
 8016054:	69ba      	ldr	r2, [r7, #24]
 8016056:	4613      	mov	r3, r2
 8016058:	011b      	lsls	r3, r3, #4
 801605a:	1a9b      	subs	r3, r3, r2
 801605c:	005b      	lsls	r3, r3, #1
 801605e:	18cd      	adds	r5, r1, r3
 8016060:	2300      	movs	r3, #0
 8016062:	930a      	str	r3, [sp, #40]	; 0x28
 8016064:	2300      	movs	r3, #0
 8016066:	9309      	str	r3, [sp, #36]	; 0x24
 8016068:	2300      	movs	r3, #0
 801606a:	9308      	str	r3, [sp, #32]
 801606c:	4a14      	ldr	r2, [pc, #80]	; (80160c0 <init_setup_buttons+0xf0>)
 801606e:	ab05      	add	r3, sp, #20
 8016070:	ca07      	ldmia	r2, {r0, r1, r2}
 8016072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016076:	9504      	str	r5, [sp, #16]
 8016078:	2300      	movs	r3, #0
 801607a:	9303      	str	r3, [sp, #12]
 801607c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8016080:	9302      	str	r3, [sp, #8]
 8016082:	f24a 531f 	movw	r3, #42271	; 0xa51f
 8016086:	9301      	str	r3, [sp, #4]
 8016088:	9400      	str	r4, [sp, #0]
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	68ba      	ldr	r2, [r7, #8]
 801608e:	2100      	movs	r1, #0
 8016090:	4630      	mov	r0, r6
 8016092:	f003 fed4 	bl	8019e3e <setup_touchbutton>
	for(int i=0; i<anz; i++)
 8016096:	69bb      	ldr	r3, [r7, #24]
 8016098:	3301      	adds	r3, #1
 801609a:	61bb      	str	r3, [r7, #24]
 801609c:	69ba      	ldr	r2, [r7, #24]
 801609e:	69fb      	ldr	r3, [r7, #28]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	dbbb      	blt.n	801601c <init_setup_buttons+0x4c>
	}
}
 80160a4:	bf00      	nop
 80160a6:	3724      	adds	r7, #36	; 0x24
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ac:	20000bf0 	.word	0x20000bf0
 80160b0:	200016f0 	.word	0x200016f0
 80160b4:	20001548 	.word	0x20001548
 80160b8:	2000161c 	.word	0x2000161c
 80160bc:	20007078 	.word	0x20007078
 80160c0:	20001c40 	.word	0x20001c40

080160c4 <do_button_setup>:

// es wurde auf einen Button der Setup-Zeilen gedrückt
// aktiviere diese Zeile als aktuell zu editierende Zeile
// außerdem bearbeite die Ziffernbuttons
int do_button_setup(int touchbutton)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b086      	sub	sp, #24
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
int anz = SETUP_ITEM_ANZ;
 80160cc:	2307      	movs	r3, #7
 80160ce:	617b      	str	r3, [r7, #20]

	if(pcfgdata->systemMode == 1) anz-=2;
 80160d0:	4b56      	ldr	r3, [pc, #344]	; (801622c <do_button_setup+0x168>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80160d8:	2b01      	cmp	r3, #1
 80160da:	d102      	bne.n	80160e2 <do_button_setup+0x1e>
 80160dc:	697b      	ldr	r3, [r7, #20]
 80160de:	3b02      	subs	r3, #2
 80160e0:	617b      	str	r3, [r7, #20]

	if(touchbutton <= TB_P1000 || touchbutton == TB_M1000) return 0;	// diese Buttons interessieren uns hier nicht
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2b10      	cmp	r3, #16
 80160e6:	dd02      	ble.n	80160ee <do_button_setup+0x2a>
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2b14      	cmp	r3, #20
 80160ec:	d101      	bne.n	80160f2 <do_button_setup+0x2e>
 80160ee:	2300      	movs	r3, #0
 80160f0:	e097      	b.n	8016222 <do_button_setup+0x15e>

	tb_buttons[touchbutton].pressed = 1;
 80160f2:	494f      	ldr	r1, [pc, #316]	; (8016230 <do_button_setup+0x16c>)
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	4613      	mov	r3, r2
 80160f8:	005b      	lsls	r3, r3, #1
 80160fa:	4413      	add	r3, r2
 80160fc:	015b      	lsls	r3, r3, #5
 80160fe:	440b      	add	r3, r1
 8016100:	335c      	adds	r3, #92	; 0x5c
 8016102:	2201      	movs	r2, #1
 8016104:	701a      	strb	r2, [r3, #0]

	if(touchbutton > TB_P1000 && touchbutton <= TB_M1)
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2b10      	cmp	r3, #16
 801610a:	dd43      	ble.n	8016194 <do_button_setup+0xd0>
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2b17      	cmp	r3, #23
 8016110:	dc40      	bgt.n	8016194 <do_button_setup+0xd0>
	{
		for(int i=TB_P100; i<=TB_M1; i++)
 8016112:	2311      	movs	r3, #17
 8016114:	613b      	str	r3, [r7, #16]
 8016116:	e037      	b.n	8016188 <do_button_setup+0xc4>
		{
			if(i == TB_M1000) continue;
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	2b14      	cmp	r3, #20
 801611c:	d030      	beq.n	8016180 <do_button_setup+0xbc>
			if(i != touchbutton)
 801611e:	693a      	ldr	r2, [r7, #16]
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	429a      	cmp	r2, r3
 8016124:	d014      	beq.n	8016150 <do_button_setup+0x8c>
			{
				tb_buttons[i].pressed = 0;
 8016126:	4942      	ldr	r1, [pc, #264]	; (8016230 <do_button_setup+0x16c>)
 8016128:	693a      	ldr	r2, [r7, #16]
 801612a:	4613      	mov	r3, r2
 801612c:	005b      	lsls	r3, r3, #1
 801612e:	4413      	add	r3, r2
 8016130:	015b      	lsls	r3, r3, #5
 8016132:	440b      	add	r3, r1
 8016134:	335c      	adds	r3, #92	; 0x5c
 8016136:	2200      	movs	r2, #0
 8016138:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 801613a:	693a      	ldr	r2, [r7, #16]
 801613c:	4613      	mov	r3, r2
 801613e:	005b      	lsls	r3, r3, #1
 8016140:	4413      	add	r3, r2
 8016142:	015b      	lsls	r3, r3, #5
 8016144:	4a3a      	ldr	r2, [pc, #232]	; (8016230 <do_button_setup+0x16c>)
 8016146:	4413      	add	r3, r2
 8016148:	4618      	mov	r0, r3
 801614a:	f003 ff5f 	bl	801a00c <draw_touchbutton>
 801614e:	e018      	b.n	8016182 <do_button_setup+0xbe>
			}
			else
			{
				tb_buttons[i].pressed = 1;
 8016150:	4937      	ldr	r1, [pc, #220]	; (8016230 <do_button_setup+0x16c>)
 8016152:	693a      	ldr	r2, [r7, #16]
 8016154:	4613      	mov	r3, r2
 8016156:	005b      	lsls	r3, r3, #1
 8016158:	4413      	add	r3, r2
 801615a:	015b      	lsls	r3, r3, #5
 801615c:	440b      	add	r3, r1
 801615e:	335c      	adds	r3, #92	; 0x5c
 8016160:	2201      	movs	r2, #1
 8016162:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 8016164:	693a      	ldr	r2, [r7, #16]
 8016166:	4613      	mov	r3, r2
 8016168:	005b      	lsls	r3, r3, #1
 801616a:	4413      	add	r3, r2
 801616c:	015b      	lsls	r3, r3, #5
 801616e:	4a30      	ldr	r2, [pc, #192]	; (8016230 <do_button_setup+0x16c>)
 8016170:	4413      	add	r3, r2
 8016172:	4618      	mov	r0, r3
 8016174:	f003 ff4a 	bl	801a00c <draw_touchbutton>
				setup_changevalue(i);
 8016178:	6938      	ldr	r0, [r7, #16]
 801617a:	f000 f965 	bl	8016448 <setup_changevalue>
 801617e:	e000      	b.n	8016182 <do_button_setup+0xbe>
			if(i == TB_M1000) continue;
 8016180:	bf00      	nop
		for(int i=TB_P100; i<=TB_M1; i++)
 8016182:	693b      	ldr	r3, [r7, #16]
 8016184:	3301      	adds	r3, #1
 8016186:	613b      	str	r3, [r7, #16]
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	2b17      	cmp	r3, #23
 801618c:	ddc4      	ble.n	8016118 <do_button_setup+0x54>
			}
		}
		setup_modified = 1;
 801618e:	4b29      	ldr	r3, [pc, #164]	; (8016234 <do_button_setup+0x170>)
 8016190:	2201      	movs	r2, #1
 8016192:	601a      	str	r2, [r3, #0]
	}

	if(touchbutton >= TB_SETUP1 && touchbutton < (TB_SETUP1+anz))
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	2b18      	cmp	r3, #24
 8016198:	dd42      	ble.n	8016220 <do_button_setup+0x15c>
 801619a:	697b      	ldr	r3, [r7, #20]
 801619c:	3319      	adds	r3, #25
 801619e:	687a      	ldr	r2, [r7, #4]
 80161a0:	429a      	cmp	r2, r3
 80161a2:	da3d      	bge.n	8016220 <do_button_setup+0x15c>
	{
		editline = touchbutton;
 80161a4:	4a24      	ldr	r2, [pc, #144]	; (8016238 <do_button_setup+0x174>)
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	6013      	str	r3, [r2, #0]

		for(int i=TB_SETUP1; i<(TB_SETUP1+anz); i++)
 80161aa:	2319      	movs	r3, #25
 80161ac:	60fb      	str	r3, [r7, #12]
 80161ae:	e032      	b.n	8016216 <do_button_setup+0x152>
		{
			if(i != touchbutton)
 80161b0:	68fa      	ldr	r2, [r7, #12]
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d014      	beq.n	80161e2 <do_button_setup+0x11e>
			{
				tb_buttons[i].pressed = 0;
 80161b8:	491d      	ldr	r1, [pc, #116]	; (8016230 <do_button_setup+0x16c>)
 80161ba:	68fa      	ldr	r2, [r7, #12]
 80161bc:	4613      	mov	r3, r2
 80161be:	005b      	lsls	r3, r3, #1
 80161c0:	4413      	add	r3, r2
 80161c2:	015b      	lsls	r3, r3, #5
 80161c4:	440b      	add	r3, r1
 80161c6:	335c      	adds	r3, #92	; 0x5c
 80161c8:	2200      	movs	r2, #0
 80161ca:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 80161cc:	68fa      	ldr	r2, [r7, #12]
 80161ce:	4613      	mov	r3, r2
 80161d0:	005b      	lsls	r3, r3, #1
 80161d2:	4413      	add	r3, r2
 80161d4:	015b      	lsls	r3, r3, #5
 80161d6:	4a16      	ldr	r2, [pc, #88]	; (8016230 <do_button_setup+0x16c>)
 80161d8:	4413      	add	r3, r2
 80161da:	4618      	mov	r0, r3
 80161dc:	f003 ff16 	bl	801a00c <draw_touchbutton>
 80161e0:	e016      	b.n	8016210 <do_button_setup+0x14c>
			}
			else
			{
				tb_buttons[i].pressed = 1;
 80161e2:	4913      	ldr	r1, [pc, #76]	; (8016230 <do_button_setup+0x16c>)
 80161e4:	68fa      	ldr	r2, [r7, #12]
 80161e6:	4613      	mov	r3, r2
 80161e8:	005b      	lsls	r3, r3, #1
 80161ea:	4413      	add	r3, r2
 80161ec:	015b      	lsls	r3, r3, #5
 80161ee:	440b      	add	r3, r1
 80161f0:	335c      	adds	r3, #92	; 0x5c
 80161f2:	2201      	movs	r2, #1
 80161f4:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 80161f6:	68fa      	ldr	r2, [r7, #12]
 80161f8:	4613      	mov	r3, r2
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	4413      	add	r3, r2
 80161fe:	015b      	lsls	r3, r3, #5
 8016200:	4a0b      	ldr	r2, [pc, #44]	; (8016230 <do_button_setup+0x16c>)
 8016202:	4413      	add	r3, r2
 8016204:	4618      	mov	r0, r3
 8016206:	f003 ff01 	bl	801a00c <draw_touchbutton>
				editline = i;
 801620a:	4a0b      	ldr	r2, [pc, #44]	; (8016238 <do_button_setup+0x174>)
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	6013      	str	r3, [r2, #0]
		for(int i=TB_SETUP1; i<(TB_SETUP1+anz); i++)
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	3301      	adds	r3, #1
 8016214:	60fb      	str	r3, [r7, #12]
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	3319      	adds	r3, #25
 801621a:	68fa      	ldr	r2, [r7, #12]
 801621c:	429a      	cmp	r2, r3
 801621e:	dbc7      	blt.n	80161b0 <do_button_setup+0xec>
			}
		}
	}
	return 1;
 8016220:	2301      	movs	r3, #1
}
 8016222:	4618      	mov	r0, r3
 8016224:	3718      	adds	r7, #24
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	20000bf0 	.word	0x20000bf0
 8016230:	20007078 	.word	0x20007078
 8016234:	2000277c 	.word	0x2000277c
 8016238:	20001544 	.word	0x20001544

0801623c <setup_drawvalues>:
	"TX-ON",
	"TXein"
};

void setup_drawvalues()
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b092      	sub	sp, #72	; 0x48
 8016240:	af04      	add	r7, sp, #16
int x = 325;
 8016242:	f240 1345 	movw	r3, #325	; 0x145
 8016246:	62fb      	str	r3, [r7, #44]	; 0x2c
int ytxt = 15;
 8016248:	230f      	movs	r3, #15
 801624a:	62bb      	str	r3, [r7, #40]	; 0x28
char s[20] = {0};
 801624c:	1d3b      	adds	r3, r7, #4
 801624e:	2200      	movs	r2, #0
 8016250:	601a      	str	r2, [r3, #0]
 8016252:	605a      	str	r2, [r3, #4]
 8016254:	609a      	str	r2, [r3, #8]
 8016256:	60da      	str	r2, [r3, #12]
 8016258:	611a      	str	r2, [r3, #16]
int anz = SETUP_ITEM_ANZ;
 801625a:	2307      	movs	r3, #7
 801625c:	637b      	str	r3, [r7, #52]	; 0x34

	if(pcfgdata->systemMode == 1) anz-=2;
 801625e:	4b72      	ldr	r3, [pc, #456]	; (8016428 <setup_drawvalues+0x1ec>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016266:	2b01      	cmp	r3, #1
 8016268:	d102      	bne.n	8016270 <setup_drawvalues+0x34>
 801626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801626c:	3b02      	subs	r3, #2
 801626e:	637b      	str	r3, [r7, #52]	; 0x34
	int itemysize = (ITEMS_BOTTOMMARGIN-ITEMS_TOPMARGIN) / anz;
 8016270:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8016274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016276:	fb92 f3f3 	sdiv	r3, r2, r3
 801627a:	627b      	str	r3, [r7, #36]	; 0x24

	for(int i=TB_SETUP1; i<(TB_SETUP1+anz); i++)
 801627c:	2319      	movs	r3, #25
 801627e:	633b      	str	r3, [r7, #48]	; 0x30
 8016280:	e0c8      	b.n	8016414 <setup_drawvalues+0x1d8>
	{
		int y = ITEMS_TOPMARGIN + (i-TB_SETUP1) * itemysize;
 8016282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016284:	3b19      	subs	r3, #25
 8016286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016288:	fb02 f303 	mul.w	r3, r2, r3
 801628c:	333c      	adds	r3, #60	; 0x3c
 801628e:	623b      	str	r3, [r7, #32]
		int ys = y+1;
 8016290:	6a3b      	ldr	r3, [r7, #32]
 8016292:	3301      	adds	r3, #1
 8016294:	61fb      	str	r3, [r7, #28]
		int ye = y + (itemysize-2);
 8016296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016298:	3b02      	subs	r3, #2
 801629a:	6a3a      	ldr	r2, [r7, #32]
 801629c:	4413      	add	r3, r2
 801629e:	61bb      	str	r3, [r7, #24]

		if(i == editline || editline == 0)
 80162a0:	4b62      	ldr	r3, [pc, #392]	; (801642c <setup_drawvalues+0x1f0>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d004      	beq.n	80162b4 <setup_drawvalues+0x78>
 80162aa:	4b60      	ldr	r3, [pc, #384]	; (801642c <setup_drawvalues+0x1f0>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	f040 80ad 	bne.w	801640e <setup_drawvalues+0x1d2>
		{
			TFT_Fill_Rectangle(x,ys+2,x+130,ye-1,YELLOW);
 80162b4:	69fb      	ldr	r3, [r7, #28]
 80162b6:	1c99      	adds	r1, r3, #2
 80162b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ba:	f103 0282 	add.w	r2, r3, #130	; 0x82
 80162be:	69bb      	ldr	r3, [r7, #24]
 80162c0:	1e58      	subs	r0, r3, #1
 80162c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80162c6:	9300      	str	r3, [sp, #0]
 80162c8:	4603      	mov	r3, r0
 80162ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162cc:	f001 fab4 	bl	8017838 <TFT_Fill_Rectangle>
			if(i == TB_SETUP1) sprintf(s,"% 5d",pcfgdata->I_limit);
 80162d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d2:	2b19      	cmp	r3, #25
 80162d4:	d108      	bne.n	80162e8 <setup_drawvalues+0xac>
 80162d6:	4b54      	ldr	r3, [pc, #336]	; (8016428 <setup_drawvalues+0x1ec>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	8a9b      	ldrh	r3, [r3, #20]
 80162dc:	461a      	mov	r2, r3
 80162de:	1d3b      	adds	r3, r7, #4
 80162e0:	4953      	ldr	r1, [pc, #332]	; (8016430 <setup_drawvalues+0x1f4>)
 80162e2:	4618      	mov	r0, r3
 80162e4:	f008 ffa8 	bl	801f238 <sprintf>
			if(i == TB_SETUP2) sprintf(s,"% 5d",pcfgdata->U_limit);
 80162e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ea:	2b1a      	cmp	r3, #26
 80162ec:	d108      	bne.n	8016300 <setup_drawvalues+0xc4>
 80162ee:	4b4e      	ldr	r3, [pc, #312]	; (8016428 <setup_drawvalues+0x1ec>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	8adb      	ldrh	r3, [r3, #22]
 80162f4:	461a      	mov	r2, r3
 80162f6:	1d3b      	adds	r3, r7, #4
 80162f8:	494d      	ldr	r1, [pc, #308]	; (8016430 <setup_drawvalues+0x1f4>)
 80162fa:	4618      	mov	r0, r3
 80162fc:	f008 ff9c 	bl	801f238 <sprintf>
			if(i == TB_SETUP3) sprintf(s,"% 5d",pcfgdata->Temp_limit);
 8016300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016302:	2b1b      	cmp	r3, #27
 8016304:	d108      	bne.n	8016318 <setup_drawvalues+0xdc>
 8016306:	4b48      	ldr	r3, [pc, #288]	; (8016428 <setup_drawvalues+0x1ec>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	8b1b      	ldrh	r3, [r3, #24]
 801630c:	461a      	mov	r2, r3
 801630e:	1d3b      	adds	r3, r7, #4
 8016310:	4947      	ldr	r1, [pc, #284]	; (8016430 <setup_drawvalues+0x1f4>)
 8016312:	4618      	mov	r0, r3
 8016314:	f008 ff90 	bl	801f238 <sprintf>
			if(i == TB_SETUP4) sprintf(s,"% 5d",pcfgdata->Time_limit_minutes);
 8016318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631a:	2b1c      	cmp	r3, #28
 801631c:	d108      	bne.n	8016330 <setup_drawvalues+0xf4>
 801631e:	4b42      	ldr	r3, [pc, #264]	; (8016428 <setup_drawvalues+0x1ec>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	8b9b      	ldrh	r3, [r3, #28]
 8016324:	461a      	mov	r2, r3
 8016326:	1d3b      	adds	r3, r7, #4
 8016328:	4941      	ldr	r1, [pc, #260]	; (8016430 <setup_drawvalues+0x1f4>)
 801632a:	4618      	mov	r0, r3
 801632c:	f008 ff84 	bl	801f238 <sprintf>
			if(i == TB_SETUP5)
 8016330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016332:	2b1d      	cmp	r3, #29
 8016334:	d140      	bne.n	80163b8 <setup_drawvalues+0x17c>
			{
				if(pcfgdata->fan_temp == 7)
 8016336:	4b3c      	ldr	r3, [pc, #240]	; (8016428 <setup_drawvalues+0x1ec>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	8bdb      	ldrh	r3, [r3, #30]
 801633c:	2b07      	cmp	r3, #7
 801633e:	d106      	bne.n	801634e <setup_drawvalues+0x112>
					sprintf(s,"%*s",5,"AUTO");
 8016340:	1d38      	adds	r0, r7, #4
 8016342:	4b3c      	ldr	r3, [pc, #240]	; (8016434 <setup_drawvalues+0x1f8>)
 8016344:	2205      	movs	r2, #5
 8016346:	493c      	ldr	r1, [pc, #240]	; (8016438 <setup_drawvalues+0x1fc>)
 8016348:	f008 ff76 	bl	801f238 <sprintf>
 801634c:	e034      	b.n	80163b8 <setup_drawvalues+0x17c>
				else if(pcfgdata->fan_temp == 8)
 801634e:	4b36      	ldr	r3, [pc, #216]	; (8016428 <setup_drawvalues+0x1ec>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	8bdb      	ldrh	r3, [r3, #30]
 8016354:	2b08      	cmp	r3, #8
 8016356:	d110      	bne.n	801637a <setup_drawvalues+0x13e>
					sprintf(s,"%*s",5,conttext[pcfgdata->language]);
 8016358:	4b33      	ldr	r3, [pc, #204]	; (8016428 <setup_drawvalues+0x1ec>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016360:	461a      	mov	r2, r3
 8016362:	4613      	mov	r3, r2
 8016364:	009b      	lsls	r3, r3, #2
 8016366:	4413      	add	r3, r2
 8016368:	009b      	lsls	r3, r3, #2
 801636a:	4a34      	ldr	r2, [pc, #208]	; (801643c <setup_drawvalues+0x200>)
 801636c:	4413      	add	r3, r2
 801636e:	1d38      	adds	r0, r7, #4
 8016370:	2205      	movs	r2, #5
 8016372:	4931      	ldr	r1, [pc, #196]	; (8016438 <setup_drawvalues+0x1fc>)
 8016374:	f008 ff60 	bl	801f238 <sprintf>
 8016378:	e01e      	b.n	80163b8 <setup_drawvalues+0x17c>
				else if(pcfgdata->fan_temp == 9)
 801637a:	4b2b      	ldr	r3, [pc, #172]	; (8016428 <setup_drawvalues+0x1ec>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	8bdb      	ldrh	r3, [r3, #30]
 8016380:	2b09      	cmp	r3, #9
 8016382:	d110      	bne.n	80163a6 <setup_drawvalues+0x16a>
					sprintf(s,"%*s",5,txontext[pcfgdata->language]);
 8016384:	4b28      	ldr	r3, [pc, #160]	; (8016428 <setup_drawvalues+0x1ec>)
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801638c:	461a      	mov	r2, r3
 801638e:	4613      	mov	r3, r2
 8016390:	009b      	lsls	r3, r3, #2
 8016392:	4413      	add	r3, r2
 8016394:	009b      	lsls	r3, r3, #2
 8016396:	4a2a      	ldr	r2, [pc, #168]	; (8016440 <setup_drawvalues+0x204>)
 8016398:	4413      	add	r3, r2
 801639a:	1d38      	adds	r0, r7, #4
 801639c:	2205      	movs	r2, #5
 801639e:	4926      	ldr	r1, [pc, #152]	; (8016438 <setup_drawvalues+0x1fc>)
 80163a0:	f008 ff4a 	bl	801f238 <sprintf>
 80163a4:	e008      	b.n	80163b8 <setup_drawvalues+0x17c>
				else
					sprintf(s,"% 5d",pcfgdata->fan_temp);
 80163a6:	4b20      	ldr	r3, [pc, #128]	; (8016428 <setup_drawvalues+0x1ec>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	8bdb      	ldrh	r3, [r3, #30]
 80163ac:	461a      	mov	r2, r3
 80163ae:	1d3b      	adds	r3, r7, #4
 80163b0:	491f      	ldr	r1, [pc, #124]	; (8016430 <setup_drawvalues+0x1f4>)
 80163b2:	4618      	mov	r0, r3
 80163b4:	f008 ff40 	bl	801f238 <sprintf>
			}
			if(i == TB_SETUP6) sprintf(s,"% 5d",pcfgdata->pttdelay);
 80163b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ba:	2b1e      	cmp	r3, #30
 80163bc:	d108      	bne.n	80163d0 <setup_drawvalues+0x194>
 80163be:	4b1a      	ldr	r3, [pc, #104]	; (8016428 <setup_drawvalues+0x1ec>)
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	8c1b      	ldrh	r3, [r3, #32]
 80163c4:	461a      	mov	r2, r3
 80163c6:	1d3b      	adds	r3, r7, #4
 80163c8:	4919      	ldr	r1, [pc, #100]	; (8016430 <setup_drawvalues+0x1f4>)
 80163ca:	4618      	mov	r0, r3
 80163cc:	f008 ff34 	bl	801f238 <sprintf>
			if(i == TB_SETUP7) sprintf(s,"% 5d",pcfgdata->Drive_limit);
 80163d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d2:	2b1f      	cmp	r3, #31
 80163d4:	d108      	bne.n	80163e8 <setup_drawvalues+0x1ac>
 80163d6:	4b14      	ldr	r3, [pc, #80]	; (8016428 <setup_drawvalues+0x1ec>)
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	8b5b      	ldrh	r3, [r3, #26]
 80163dc:	461a      	mov	r2, r3
 80163de:	1d3b      	adds	r3, r7, #4
 80163e0:	4913      	ldr	r1, [pc, #76]	; (8016430 <setup_drawvalues+0x1f4>)
 80163e2:	4618      	mov	r0, r3
 80163e4:	f008 ff28 	bl	801f238 <sprintf>
			tft_print(&lucidaConsole_22ptFontInfo, s, x+10, y+ytxt, 1, BLUE , YELLOW);
 80163e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ea:	f103 000a 	add.w	r0, r3, #10
 80163ee:	6a3a      	ldr	r2, [r7, #32]
 80163f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f2:	441a      	add	r2, r3
 80163f4:	1d39      	adds	r1, r7, #4
 80163f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80163fa:	9302      	str	r3, [sp, #8]
 80163fc:	231f      	movs	r3, #31
 80163fe:	9301      	str	r3, [sp, #4]
 8016400:	2301      	movs	r3, #1
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	4613      	mov	r3, r2
 8016406:	4602      	mov	r2, r0
 8016408:	480e      	ldr	r0, [pc, #56]	; (8016444 <setup_drawvalues+0x208>)
 801640a:	f008 fbcb 	bl	801eba4 <tft_print>
	for(int i=TB_SETUP1; i<(TB_SETUP1+anz); i++)
 801640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016410:	3301      	adds	r3, #1
 8016412:	633b      	str	r3, [r7, #48]	; 0x30
 8016414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016416:	3319      	adds	r3, #25
 8016418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801641a:	429a      	cmp	r2, r3
 801641c:	f6ff af31 	blt.w	8016282 <setup_drawvalues+0x46>
		}
	}
}
 8016420:	bf00      	nop
 8016422:	3738      	adds	r7, #56	; 0x38
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	20000bf0 	.word	0x20000bf0
 801642c:	20001544 	.word	0x20001544
 8016430:	08026c90 	.word	0x08026c90
 8016434:	08026c98 	.word	0x08026c98
 8016438:	08026ca0 	.word	0x08026ca0
 801643c:	200016f4 	.word	0x200016f4
 8016440:	2000171c 	.word	0x2000171c
 8016444:	20001c40 	.word	0x20001c40

08016448 <setup_changevalue>:

void setup_changevalue(int touchbutton)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
uint16_t *val = &pcfgdata->I_limit;
 8016450:	4b75      	ldr	r3, [pc, #468]	; (8016628 <setup_changevalue+0x1e0>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	3314      	adds	r3, #20
 8016456:	60fb      	str	r3, [r7, #12]
int16_t ival;

	if(editline == TB_SETUP2) val = &pcfgdata->U_limit;
 8016458:	4b74      	ldr	r3, [pc, #464]	; (801662c <setup_changevalue+0x1e4>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	2b1a      	cmp	r3, #26
 801645e:	d103      	bne.n	8016468 <setup_changevalue+0x20>
 8016460:	4b71      	ldr	r3, [pc, #452]	; (8016628 <setup_changevalue+0x1e0>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	3316      	adds	r3, #22
 8016466:	60fb      	str	r3, [r7, #12]
	if(editline == TB_SETUP3) val = &pcfgdata->Temp_limit;
 8016468:	4b70      	ldr	r3, [pc, #448]	; (801662c <setup_changevalue+0x1e4>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	2b1b      	cmp	r3, #27
 801646e:	d103      	bne.n	8016478 <setup_changevalue+0x30>
 8016470:	4b6d      	ldr	r3, [pc, #436]	; (8016628 <setup_changevalue+0x1e0>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	3318      	adds	r3, #24
 8016476:	60fb      	str	r3, [r7, #12]
	if(editline == TB_SETUP4) val = &pcfgdata->Time_limit_minutes;
 8016478:	4b6c      	ldr	r3, [pc, #432]	; (801662c <setup_changevalue+0x1e4>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	2b1c      	cmp	r3, #28
 801647e:	d103      	bne.n	8016488 <setup_changevalue+0x40>
 8016480:	4b69      	ldr	r3, [pc, #420]	; (8016628 <setup_changevalue+0x1e0>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	331c      	adds	r3, #28
 8016486:	60fb      	str	r3, [r7, #12]
	if(editline == TB_SETUP5) val = &pcfgdata->fan_temp;
 8016488:	4b68      	ldr	r3, [pc, #416]	; (801662c <setup_changevalue+0x1e4>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2b1d      	cmp	r3, #29
 801648e:	d103      	bne.n	8016498 <setup_changevalue+0x50>
 8016490:	4b65      	ldr	r3, [pc, #404]	; (8016628 <setup_changevalue+0x1e0>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	331e      	adds	r3, #30
 8016496:	60fb      	str	r3, [r7, #12]
	if(editline == TB_SETUP6) val = &pcfgdata->pttdelay;
 8016498:	4b64      	ldr	r3, [pc, #400]	; (801662c <setup_changevalue+0x1e4>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2b1e      	cmp	r3, #30
 801649e:	d103      	bne.n	80164a8 <setup_changevalue+0x60>
 80164a0:	4b61      	ldr	r3, [pc, #388]	; (8016628 <setup_changevalue+0x1e0>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	3320      	adds	r3, #32
 80164a6:	60fb      	str	r3, [r7, #12]
	if(editline == TB_SETUP7) val = &pcfgdata->Drive_limit;
 80164a8:	4b60      	ldr	r3, [pc, #384]	; (801662c <setup_changevalue+0x1e4>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	2b1f      	cmp	r3, #31
 80164ae:	d103      	bne.n	80164b8 <setup_changevalue+0x70>
 80164b0:	4b5d      	ldr	r3, [pc, #372]	; (8016628 <setup_changevalue+0x1e0>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	331a      	adds	r3, #26
 80164b6:	60fb      	str	r3, [r7, #12]

	ival = *val;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	881b      	ldrh	r3, [r3, #0]
 80164bc:	817b      	strh	r3, [r7, #10]

	if(touchbutton >= TB_P1 && touchbutton <= TB_M100 && touchbutton <= TB_P1000)
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2b12      	cmp	r3, #18
 80164c2:	dd08      	ble.n	80164d6 <setup_changevalue+0x8e>
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2b15      	cmp	r3, #21
 80164c8:	dc05      	bgt.n	80164d6 <setup_changevalue+0x8e>
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2b10      	cmp	r3, #16
 80164ce:	dc02      	bgt.n	80164d6 <setup_changevalue+0x8e>
		setup_modified = 1;
 80164d0:	4b57      	ldr	r3, [pc, #348]	; (8016630 <setup_changevalue+0x1e8>)
 80164d2:	2201      	movs	r2, #1
 80164d4:	601a      	str	r2, [r3, #0]

	// stelle den Wert ein
	if(touchbutton == TB_P1) ival++;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2b13      	cmp	r3, #19
 80164da:	d105      	bne.n	80164e8 <setup_changevalue+0xa0>
 80164dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80164e0:	b29b      	uxth	r3, r3
 80164e2:	3301      	adds	r3, #1
 80164e4:	b29b      	uxth	r3, r3
 80164e6:	817b      	strh	r3, [r7, #10]
	if(touchbutton == TB_P10) ival += 10;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2b12      	cmp	r3, #18
 80164ec:	d103      	bne.n	80164f6 <setup_changevalue+0xae>
 80164ee:	897b      	ldrh	r3, [r7, #10]
 80164f0:	330a      	adds	r3, #10
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	817b      	strh	r3, [r7, #10]
	if(touchbutton == TB_P100) ival += 100;
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2b11      	cmp	r3, #17
 80164fa:	d103      	bne.n	8016504 <setup_changevalue+0xbc>
 80164fc:	897b      	ldrh	r3, [r7, #10]
 80164fe:	3364      	adds	r3, #100	; 0x64
 8016500:	b29b      	uxth	r3, r3
 8016502:	817b      	strh	r3, [r7, #10]

	if(touchbutton == TB_M1) ival--;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	2b17      	cmp	r3, #23
 8016508:	d105      	bne.n	8016516 <setup_changevalue+0xce>
 801650a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801650e:	b29b      	uxth	r3, r3
 8016510:	3b01      	subs	r3, #1
 8016512:	b29b      	uxth	r3, r3
 8016514:	817b      	strh	r3, [r7, #10]
	if(touchbutton == TB_M10) ival -= 10;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	2b16      	cmp	r3, #22
 801651a:	d103      	bne.n	8016524 <setup_changevalue+0xdc>
 801651c:	897b      	ldrh	r3, [r7, #10]
 801651e:	3b0a      	subs	r3, #10
 8016520:	b29b      	uxth	r3, r3
 8016522:	817b      	strh	r3, [r7, #10]
	if(touchbutton == TB_M100) ival -= 100;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2b15      	cmp	r3, #21
 8016528:	d103      	bne.n	8016532 <setup_changevalue+0xea>
 801652a:	897b      	ldrh	r3, [r7, #10]
 801652c:	3b64      	subs	r3, #100	; 0x64
 801652e:	b29b      	uxth	r3, r3
 8016530:	817b      	strh	r3, [r7, #10]

	// Begrenze auf max/min Werte
	if(editline == TB_SETUP1)
 8016532:	4b3e      	ldr	r3, [pc, #248]	; (801662c <setup_changevalue+0x1e4>)
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	2b19      	cmp	r3, #25
 8016538:	d10b      	bne.n	8016552 <setup_changevalue+0x10a>
	{
		if(ival < 1) ival = 1;
 801653a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801653e:	2b00      	cmp	r3, #0
 8016540:	dc01      	bgt.n	8016546 <setup_changevalue+0xfe>
 8016542:	2301      	movs	r3, #1
 8016544:	817b      	strh	r3, [r7, #10]
		if(ival > 150) ival = 150;
 8016546:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801654a:	2b96      	cmp	r3, #150	; 0x96
 801654c:	dd01      	ble.n	8016552 <setup_changevalue+0x10a>
 801654e:	2396      	movs	r3, #150	; 0x96
 8016550:	817b      	strh	r3, [r7, #10]
	}
	if(editline == TB_SETUP2)
 8016552:	4b36      	ldr	r3, [pc, #216]	; (801662c <setup_changevalue+0x1e4>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	2b1a      	cmp	r3, #26
 8016558:	d10b      	bne.n	8016572 <setup_changevalue+0x12a>
	{
		if(ival < 10) ival = 10;
 801655a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801655e:	2b09      	cmp	r3, #9
 8016560:	dc01      	bgt.n	8016566 <setup_changevalue+0x11e>
 8016562:	230a      	movs	r3, #10
 8016564:	817b      	strh	r3, [r7, #10]
		if(ival > 150) ival = 150;
 8016566:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801656a:	2b96      	cmp	r3, #150	; 0x96
 801656c:	dd01      	ble.n	8016572 <setup_changevalue+0x12a>
 801656e:	2396      	movs	r3, #150	; 0x96
 8016570:	817b      	strh	r3, [r7, #10]
	}
	if(editline == TB_SETUP3)
 8016572:	4b2e      	ldr	r3, [pc, #184]	; (801662c <setup_changevalue+0x1e4>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	2b1b      	cmp	r3, #27
 8016578:	d10b      	bne.n	8016592 <setup_changevalue+0x14a>
	{
		if(ival < 10) ival = 10;
 801657a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801657e:	2b09      	cmp	r3, #9
 8016580:	dc01      	bgt.n	8016586 <setup_changevalue+0x13e>
 8016582:	230a      	movs	r3, #10
 8016584:	817b      	strh	r3, [r7, #10]
		if(ival > 80) ival = 80;
 8016586:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801658a:	2b50      	cmp	r3, #80	; 0x50
 801658c:	dd01      	ble.n	8016592 <setup_changevalue+0x14a>
 801658e:	2350      	movs	r3, #80	; 0x50
 8016590:	817b      	strh	r3, [r7, #10]
	}
	if(editline == TB_SETUP4)
 8016592:	4b26      	ldr	r3, [pc, #152]	; (801662c <setup_changevalue+0x1e4>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2b1c      	cmp	r3, #28
 8016598:	d10b      	bne.n	80165b2 <setup_changevalue+0x16a>
	{
		if(ival < 1) ival = 1;
 801659a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	dc01      	bgt.n	80165a6 <setup_changevalue+0x15e>
 80165a2:	2301      	movs	r3, #1
 80165a4:	817b      	strh	r3, [r7, #10]
		if(ival > 30) ival = 30;
 80165a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165aa:	2b1e      	cmp	r3, #30
 80165ac:	dd01      	ble.n	80165b2 <setup_changevalue+0x16a>
 80165ae:	231e      	movs	r3, #30
 80165b0:	817b      	strh	r3, [r7, #10]
	}
	if(editline == TB_SETUP5)
 80165b2:	4b1e      	ldr	r3, [pc, #120]	; (801662c <setup_changevalue+0x1e4>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	2b1d      	cmp	r3, #29
 80165b8:	d10b      	bne.n	80165d2 <setup_changevalue+0x18a>
	{
		if(ival < 7) ival = 7;
 80165ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165be:	2b06      	cmp	r3, #6
 80165c0:	dc01      	bgt.n	80165c6 <setup_changevalue+0x17e>
 80165c2:	2307      	movs	r3, #7
 80165c4:	817b      	strh	r3, [r7, #10]
		if(ival > 80) ival = 80;
 80165c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165ca:	2b50      	cmp	r3, #80	; 0x50
 80165cc:	dd01      	ble.n	80165d2 <setup_changevalue+0x18a>
 80165ce:	2350      	movs	r3, #80	; 0x50
 80165d0:	817b      	strh	r3, [r7, #10]
	}
	if(editline == TB_SETUP6)
 80165d2:	4b16      	ldr	r3, [pc, #88]	; (801662c <setup_changevalue+0x1e4>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	2b1e      	cmp	r3, #30
 80165d8:	d10d      	bne.n	80165f6 <setup_changevalue+0x1ae>
	{
		if(ival < 0) ival = 0;
 80165da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	da01      	bge.n	80165e6 <setup_changevalue+0x19e>
 80165e2:	2300      	movs	r3, #0
 80165e4:	817b      	strh	r3, [r7, #10]
		if(ival > 999) ival = 999;
 80165e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80165ee:	db02      	blt.n	80165f6 <setup_changevalue+0x1ae>
 80165f0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80165f4:	817b      	strh	r3, [r7, #10]
	}
	if(editline == TB_SETUP7)
 80165f6:	4b0d      	ldr	r3, [pc, #52]	; (801662c <setup_changevalue+0x1e4>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	2b1f      	cmp	r3, #31
 80165fc:	d10b      	bne.n	8016616 <setup_changevalue+0x1ce>
	{
		if(ival < 1) ival = 1;
 80165fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016602:	2b00      	cmp	r3, #0
 8016604:	dc01      	bgt.n	801660a <setup_changevalue+0x1c2>
 8016606:	2301      	movs	r3, #1
 8016608:	817b      	strh	r3, [r7, #10]
		if(ival > 50) ival = 50;
 801660a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801660e:	2b32      	cmp	r3, #50	; 0x32
 8016610:	dd01      	ble.n	8016616 <setup_changevalue+0x1ce>
 8016612:	2332      	movs	r3, #50	; 0x32
 8016614:	817b      	strh	r3, [r7, #10]
	}

	*val = ival;
 8016616:	897a      	ldrh	r2, [r7, #10]
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	801a      	strh	r2, [r3, #0]

	setup_drawvalues();
 801661c:	f7ff fe0e 	bl	801623c <setup_drawvalues>
}
 8016620:	bf00      	nop
 8016622:	3710      	adds	r7, #16
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	20000bf0 	.word	0x20000bf0
 801662c:	20001544 	.word	0x20001544
 8016630:	2000277c 	.word	0x2000277c

08016634 <store_autoband>:
int sf_autoband = 1;
int sf_startmenu = MENU_BAR;
t_smalldata smallflash;

void store_autoband(uint8_t onoff)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b082      	sub	sp, #8
 8016638:	af00      	add	r7, sp, #0
 801663a:	4603      	mov	r3, r0
 801663c:	71fb      	strb	r3, [r7, #7]
	if(sf_autoband != onoff)
 801663e:	79fa      	ldrb	r2, [r7, #7]
 8016640:	4b09      	ldr	r3, [pc, #36]	; (8016668 <store_autoband+0x34>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	429a      	cmp	r2, r3
 8016646:	d00a      	beq.n	801665e <store_autoband+0x2a>
	{
		sf_autoband = onoff;
 8016648:	79fb      	ldrb	r3, [r7, #7]
 801664a:	4a07      	ldr	r2, [pc, #28]	; (8016668 <store_autoband+0x34>)
 801664c:	6013      	str	r3, [r2, #0]
		if(onoff == 0)
 801664e:	79fb      	ldrb	r3, [r7, #7]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d102      	bne.n	801665a <store_autoband+0x26>
		{
			sf_autoband = 0; // für Breakpoint only
 8016654:	4b04      	ldr	r3, [pc, #16]	; (8016668 <store_autoband+0x34>)
 8016656:	2200      	movs	r2, #0
 8016658:	601a      	str	r2, [r3, #0]
		}
		save_smalldata();
 801665a:	f000 f863 	bl	8016724 <save_smalldata>
	}
}
 801665e:	bf00      	nop
 8016660:	3708      	adds	r7, #8
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	20001744 	.word	0x20001744

0801666c <store_startmenu>:

void store_startmenu()
{
 801666c:	b580      	push	{r7, lr}
 801666e:	af00      	add	r7, sp, #0
	if(menunum != sf_startmenu)
 8016670:	4b0a      	ldr	r3, [pc, #40]	; (801669c <store_startmenu+0x30>)
 8016672:	681a      	ldr	r2, [r3, #0]
 8016674:	4b0a      	ldr	r3, [pc, #40]	; (80166a0 <store_startmenu+0x34>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	429a      	cmp	r2, r3
 801667a:	d00d      	beq.n	8016698 <store_startmenu+0x2c>
	{
		if(menunum >= MENU_OVERVIEW && menunum <= MENU_HISTORY)
 801667c:	4b07      	ldr	r3, [pc, #28]	; (801669c <store_startmenu+0x30>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	2b00      	cmp	r3, #0
 8016682:	dd09      	ble.n	8016698 <store_startmenu+0x2c>
 8016684:	4b05      	ldr	r3, [pc, #20]	; (801669c <store_startmenu+0x30>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	2b05      	cmp	r3, #5
 801668a:	dc05      	bgt.n	8016698 <store_startmenu+0x2c>
		{
			sf_startmenu = menunum;
 801668c:	4b03      	ldr	r3, [pc, #12]	; (801669c <store_startmenu+0x30>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	4a03      	ldr	r2, [pc, #12]	; (80166a0 <store_startmenu+0x34>)
 8016692:	6013      	str	r3, [r2, #0]
			save_smalldata();
 8016694:	f000 f846 	bl	8016724 <save_smalldata>
		}
	}
}
 8016698:	bf00      	nop
 801669a:	bd80      	pop	{r7, pc}
 801669c:	20000c24 	.word	0x20000c24
 80166a0:	20001748 	.word	0x20001748

080166a4 <restore_smallflash_data>:

void restore_smallflash_data()
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b082      	sub	sp, #8
 80166a8:	af00      	add	r7, sp, #0
	int actpos = seekActualPos();
 80166aa:	f000 f8c9 	bl	8016840 <seekActualPos>
 80166ae:	6078      	str	r0, [r7, #4]

	if(actpos == -1)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166b6:	d106      	bne.n	80166c6 <restore_smallflash_data+0x22>
	{
		// kein Block da, setze Defaultwerte
		sf_autoband = 0;
 80166b8:	4b18      	ldr	r3, [pc, #96]	; (801671c <restore_smallflash_data+0x78>)
 80166ba:	2200      	movs	r2, #0
 80166bc:	601a      	str	r2, [r3, #0]
		sf_startmenu = MENU_BAR;
 80166be:	4b18      	ldr	r3, [pc, #96]	; (8016720 <restore_smallflash_data+0x7c>)
 80166c0:	2202      	movs	r2, #2
 80166c2:	601a      	str	r2, [r3, #0]
		return;
 80166c4:	e027      	b.n	8016716 <restore_smallflash_data+0x72>
	}

	volatile unsigned char *pflash = (unsigned char *)(SMALLFLASHDATA_START + actpos * sizeof(smallflash));
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80166cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80166d0:	603b      	str	r3, [r7, #0]

	if(pflash[0] & 2)
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	781b      	ldrb	r3, [r3, #0]
 80166d6:	b2db      	uxtb	r3, r3
 80166d8:	f003 0302 	and.w	r3, r3, #2
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d003      	beq.n	80166e8 <restore_smallflash_data+0x44>
		sf_autoband = 1;
 80166e0:	4b0e      	ldr	r3, [pc, #56]	; (801671c <restore_smallflash_data+0x78>)
 80166e2:	2201      	movs	r2, #1
 80166e4:	601a      	str	r2, [r3, #0]
 80166e6:	e002      	b.n	80166ee <restore_smallflash_data+0x4a>
	else
		sf_autoband = 0;
 80166e8:	4b0c      	ldr	r3, [pc, #48]	; (801671c <restore_smallflash_data+0x78>)
 80166ea:	2200      	movs	r2, #0
 80166ec:	601a      	str	r2, [r3, #0]

	sf_startmenu = (pflash[0] >> 2) & 7;
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	781b      	ldrb	r3, [r3, #0]
 80166f2:	b2db      	uxtb	r3, r3
 80166f4:	089b      	lsrs	r3, r3, #2
 80166f6:	b2db      	uxtb	r3, r3
 80166f8:	f003 0307 	and.w	r3, r3, #7
 80166fc:	4a08      	ldr	r2, [pc, #32]	; (8016720 <restore_smallflash_data+0x7c>)
 80166fe:	6013      	str	r3, [r2, #0]
	if(sf_startmenu < MENU_OVERVIEW || sf_startmenu > MENU_HISTORY) sf_startmenu = MENU_BAR;
 8016700:	4b07      	ldr	r3, [pc, #28]	; (8016720 <restore_smallflash_data+0x7c>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	dd03      	ble.n	8016710 <restore_smallflash_data+0x6c>
 8016708:	4b05      	ldr	r3, [pc, #20]	; (8016720 <restore_smallflash_data+0x7c>)
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	2b05      	cmp	r3, #5
 801670e:	dd02      	ble.n	8016716 <restore_smallflash_data+0x72>
 8016710:	4b03      	ldr	r3, [pc, #12]	; (8016720 <restore_smallflash_data+0x7c>)
 8016712:	2202      	movs	r2, #2
 8016714:	601a      	str	r2, [r3, #0]
}
 8016716:	3708      	adds	r7, #8
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}
 801671c:	20001744 	.word	0x20001744
 8016720:	20001748 	.word	0x20001748

08016724 <save_smalldata>:

void save_smalldata()
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b084      	sub	sp, #16
 8016728:	af00      	add	r7, sp, #0
	// Baue den Datenblock auf
	smallflash.var0 = 0xfe;	// Startkennung (Bit 0 des ersten Bytes ist 0)
 801672a:	4b2b      	ldr	r3, [pc, #172]	; (80167d8 <save_smalldata+0xb4>)
 801672c:	22fe      	movs	r2, #254	; 0xfe
 801672e:	701a      	strb	r2, [r3, #0]

	if(sf_autoband == 0)
 8016730:	4b2a      	ldr	r3, [pc, #168]	; (80167dc <save_smalldata+0xb8>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d106      	bne.n	8016746 <save_smalldata+0x22>
		smallflash.var0 &= ~2;	// Bit 1 ist das autoband onoff Bit
 8016738:	4b27      	ldr	r3, [pc, #156]	; (80167d8 <save_smalldata+0xb4>)
 801673a:	781b      	ldrb	r3, [r3, #0]
 801673c:	f023 0302 	bic.w	r3, r3, #2
 8016740:	b2da      	uxtb	r2, r3
 8016742:	4b25      	ldr	r3, [pc, #148]	; (80167d8 <save_smalldata+0xb4>)
 8016744:	701a      	strb	r2, [r3, #0]

	// Bit 2,3,4 ist die Menünummer des Startmenüs (1 bis 5)
	if(sf_startmenu < MENU_OVERVIEW || sf_startmenu > MENU_HISTORY) sf_startmenu = MENU_BAR;
 8016746:	4b26      	ldr	r3, [pc, #152]	; (80167e0 <save_smalldata+0xbc>)
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	dd03      	ble.n	8016756 <save_smalldata+0x32>
 801674e:	4b24      	ldr	r3, [pc, #144]	; (80167e0 <save_smalldata+0xbc>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	2b05      	cmp	r3, #5
 8016754:	dd02      	ble.n	801675c <save_smalldata+0x38>
 8016756:	4b22      	ldr	r3, [pc, #136]	; (80167e0 <save_smalldata+0xbc>)
 8016758:	2202      	movs	r2, #2
 801675a:	601a      	str	r2, [r3, #0]
	smallflash.var0 &= ~(7<<2);
 801675c:	4b1e      	ldr	r3, [pc, #120]	; (80167d8 <save_smalldata+0xb4>)
 801675e:	781b      	ldrb	r3, [r3, #0]
 8016760:	f023 031c 	bic.w	r3, r3, #28
 8016764:	b2da      	uxtb	r2, r3
 8016766:	4b1c      	ldr	r3, [pc, #112]	; (80167d8 <save_smalldata+0xb4>)
 8016768:	701a      	strb	r2, [r3, #0]
	smallflash.var0 |= ((sf_startmenu & 7) << 2);
 801676a:	4b1b      	ldr	r3, [pc, #108]	; (80167d8 <save_smalldata+0xb4>)
 801676c:	781b      	ldrb	r3, [r3, #0]
 801676e:	b25a      	sxtb	r2, r3
 8016770:	4b1b      	ldr	r3, [pc, #108]	; (80167e0 <save_smalldata+0xbc>)
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	009b      	lsls	r3, r3, #2
 8016776:	b25b      	sxtb	r3, r3
 8016778:	f003 031c 	and.w	r3, r3, #28
 801677c:	b25b      	sxtb	r3, r3
 801677e:	4313      	orrs	r3, r2
 8016780:	b25b      	sxtb	r3, r3
 8016782:	b2da      	uxtb	r2, r3
 8016784:	4b14      	ldr	r3, [pc, #80]	; (80167d8 <save_smalldata+0xb4>)
 8016786:	701a      	strb	r2, [r3, #0]

	// Suche nächste Position, wenn voll dann lösche den Sektor
	int pos = seekNextFreePos();
 8016788:	f000 f82c 	bl	80167e4 <seekNextFreePos>
 801678c:	6078      	str	r0, [r7, #4]

	uint32_t pflash = SMALLFLASHDATA_START + pos * sizeof(smallflash);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8016794:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8016798:	60fb      	str	r3, [r7, #12]
	unsigned char *psfdata = (unsigned char *)(&smallflash);
 801679a:	4b0f      	ldr	r3, [pc, #60]	; (80167d8 <save_smalldata+0xb4>)
 801679c:	603b      	str	r3, [r7, #0]

	// schreibe Daten ins Flash
	FLASH_Unlock();
 801679e:	f7f2 fe65 	bl	800946c <FLASH_Unlock>

	for(int i=0; i<sizeof(smallflash); i++)
 80167a2:	2300      	movs	r3, #0
 80167a4:	60bb      	str	r3, [r7, #8]
 80167a6:	e00d      	b.n	80167c4 <save_smalldata+0xa0>
	{
		FLASH_ProgramByte(pflash++, psfdata[i]);
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	1c5a      	adds	r2, r3, #1
 80167ac:	60fa      	str	r2, [r7, #12]
 80167ae:	68ba      	ldr	r2, [r7, #8]
 80167b0:	6839      	ldr	r1, [r7, #0]
 80167b2:	440a      	add	r2, r1
 80167b4:	7812      	ldrb	r2, [r2, #0]
 80167b6:	4611      	mov	r1, r2
 80167b8:	4618      	mov	r0, r3
 80167ba:	f7f2 fedf 	bl	800957c <FLASH_ProgramByte>
	for(int i=0; i<sizeof(smallflash); i++)
 80167be:	68bb      	ldr	r3, [r7, #8]
 80167c0:	3301      	adds	r3, #1
 80167c2:	60bb      	str	r3, [r7, #8]
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d0ee      	beq.n	80167a8 <save_smalldata+0x84>
	}

	FLASH_Lock();
 80167ca:	f7f2 fe67 	bl	800949c <FLASH_Lock>
}
 80167ce:	bf00      	nop
 80167d0:	3710      	adds	r7, #16
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	200056d4 	.word	0x200056d4
 80167dc:	20001744 	.word	0x20001744
 80167e0:	20001748 	.word	0x20001748

080167e4 <seekNextFreePos>:

int seekNextFreePos()
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b084      	sub	sp, #16
 80167e8:	af00      	add	r7, sp, #0
int blockanz = SMALLFLASHLENGTH / sizeof(smallflash);	// Anzahl der Blöcke die ins 16k ROM passen
 80167ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80167ee:	607b      	str	r3, [r7, #4]
volatile unsigned char *pflash = (unsigned char *)SMALLFLASHDATA_START;
 80167f0:	4b12      	ldr	r3, [pc, #72]	; (801683c <seekNextFreePos+0x58>)
 80167f2:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<blockanz; i++)
 80167f4:	2300      	movs	r3, #0
 80167f6:	60bb      	str	r3, [r7, #8]
 80167f8:	e00e      	b.n	8016818 <seekNextFreePos+0x34>
	{
		// ist die Kennung gesetzt ?
		if((*pflash & 0x01) == 1)
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	b2db      	uxtb	r3, r3
 8016800:	f003 0301 	and.w	r3, r3, #1
 8016804:	2b01      	cmp	r3, #1
 8016806:	d101      	bne.n	801680c <seekNextFreePos+0x28>
		{
			return i;	// dieser Block ist noch frei
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	e012      	b.n	8016832 <seekNextFreePos+0x4e>
		}
		// gehe zum nächten Block
		pflash += sizeof(smallflash);
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	3301      	adds	r3, #1
 8016810:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<blockanz; i++)
 8016812:	68bb      	ldr	r3, [r7, #8]
 8016814:	3301      	adds	r3, #1
 8016816:	60bb      	str	r3, [r7, #8]
 8016818:	68ba      	ldr	r2, [r7, #8]
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	429a      	cmp	r2, r3
 801681e:	dbec      	blt.n	80167fa <seekNextFreePos+0x16>
	}

	// es wurde kein freier Block gefunden, lösche das ROM
    FLASH_Unlock();
 8016820:	f7f2 fe24 	bl	800946c <FLASH_Unlock>
	FLASH_EraseSector(SMALLDATASECTOR, VoltageRange_3);
 8016824:	2102      	movs	r1, #2
 8016826:	2008      	movs	r0, #8
 8016828:	f7f2 fe48 	bl	80094bc <FLASH_EraseSector>
	FLASH_Lock();
 801682c:	f7f2 fe36 	bl	800949c <FLASH_Lock>

	return 0;	// und gebe den ersten zurück
 8016830:	2300      	movs	r3, #0
}
 8016832:	4618      	mov	r0, r3
 8016834:	3710      	adds	r7, #16
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}
 801683a:	bf00      	nop
 801683c:	08004000 	.word	0x08004000

08016840 <seekActualPos>:

int seekActualPos()
{
 8016840:	b480      	push	{r7}
 8016842:	b085      	sub	sp, #20
 8016844:	af00      	add	r7, sp, #0
	int blockanz = SMALLFLASHLENGTH / sizeof(smallflash);	// Anzahl der Blöcke die ins 16k ROM passen
 8016846:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801684a:	607b      	str	r3, [r7, #4]
	volatile unsigned char *pflash = (unsigned char *)SMALLFLASHDATA_START;
 801684c:	4b10      	ldr	r3, [pc, #64]	; (8016890 <seekActualPos+0x50>)
 801684e:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<blockanz; i++)
 8016850:	2300      	movs	r3, #0
 8016852:	60bb      	str	r3, [r7, #8]
 8016854:	e00f      	b.n	8016876 <seekActualPos+0x36>
	{
		// ist die Kennung gesetzt ?
		if((*pflash & 0x01) == 1)
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	781b      	ldrb	r3, [r3, #0]
 801685a:	b2db      	uxtb	r3, r3
 801685c:	f003 0301 	and.w	r3, r3, #1
 8016860:	2b01      	cmp	r3, #1
 8016862:	d102      	bne.n	801686a <seekActualPos+0x2a>
		{
			// dieser Block ist noch frei,
			// der vorherige ist also der aktuelle
			return i-1;	// wenn -1, dann gibt es noch keinen Block
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	3b01      	subs	r3, #1
 8016868:	e00b      	b.n	8016882 <seekActualPos+0x42>
		}
		// gehe zum nächten Block
		pflash += sizeof(smallflash);
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	3301      	adds	r3, #1
 801686e:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<blockanz; i++)
 8016870:	68bb      	ldr	r3, [r7, #8]
 8016872:	3301      	adds	r3, #1
 8016874:	60bb      	str	r3, [r7, #8]
 8016876:	68ba      	ldr	r2, [r7, #8]
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	429a      	cmp	r2, r3
 801687c:	dbeb      	blt.n	8016856 <seekActualPos+0x16>
	}

	return -1;
 801687e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016882:	4618      	mov	r0, r3
 8016884:	3714      	adds	r7, #20
 8016886:	46bd      	mov	sp, r7
 8016888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop
 8016890:	08004000 	.word	0x08004000

08016894 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801689c:	4b11      	ldr	r3, [pc, #68]	; (80168e4 <_sbrk+0x50>)
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d102      	bne.n	80168aa <_sbrk+0x16>
		heap_end = &end;
 80168a4:	4b0f      	ldr	r3, [pc, #60]	; (80168e4 <_sbrk+0x50>)
 80168a6:	4a10      	ldr	r2, [pc, #64]	; (80168e8 <_sbrk+0x54>)
 80168a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80168aa:	4b0e      	ldr	r3, [pc, #56]	; (80168e4 <_sbrk+0x50>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80168b0:	4b0c      	ldr	r3, [pc, #48]	; (80168e4 <_sbrk+0x50>)
 80168b2:	681a      	ldr	r2, [r3, #0]
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	4413      	add	r3, r2
 80168b8:	466a      	mov	r2, sp
 80168ba:	4293      	cmp	r3, r2
 80168bc:	d907      	bls.n	80168ce <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80168be:	f008 f9e7 	bl	801ec90 <__errno>
 80168c2:	4602      	mov	r2, r0
 80168c4:	230c      	movs	r3, #12
 80168c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80168c8:	f04f 33ff 	mov.w	r3, #4294967295
 80168cc:	e006      	b.n	80168dc <_sbrk+0x48>
	}

	heap_end += incr;
 80168ce:	4b05      	ldr	r3, [pc, #20]	; (80168e4 <_sbrk+0x50>)
 80168d0:	681a      	ldr	r2, [r3, #0]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	4413      	add	r3, r2
 80168d6:	4a03      	ldr	r2, [pc, #12]	; (80168e4 <_sbrk+0x50>)
 80168d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80168da:	68fb      	ldr	r3, [r7, #12]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3710      	adds	r7, #16
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}
 80168e4:	20002784 	.word	0x20002784
 80168e8:	20008ad8 	.word	0x20008ad8

080168ec <setDisplayReverse>:
};

char (*system_items)[20];

void setDisplayReverse()
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	af00      	add	r7, sp, #0
	if(pcfgdata->display_reverse != tmp_display_reverse)
 80168f0:	4b08      	ldr	r3, [pc, #32]	; (8016914 <setDisplayReverse+0x28>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80168f8:	4b07      	ldr	r3, [pc, #28]	; (8016918 <setDisplayReverse+0x2c>)
 80168fa:	781b      	ldrb	r3, [r3, #0]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d007      	beq.n	8016910 <setDisplayReverse+0x24>
	{
		pcfgdata->display_reverse = tmp_display_reverse;
 8016900:	4b04      	ldr	r3, [pc, #16]	; (8016914 <setDisplayReverse+0x28>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	4a04      	ldr	r2, [pc, #16]	; (8016918 <setDisplayReverse+0x2c>)
 8016906:	7812      	ldrb	r2, [r2, #0]
 8016908:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		setDisplayamKopf();
 801690c:	f002 f8fa 	bl	8018b04 <setDisplayamKopf>
	}
}
 8016910:	bf00      	nop
 8016912:	bd80      	pop	{r7, pc}
 8016914:	20000bf0 	.word	0x20000bf0
 8016918:	200056dc 	.word	0x200056dc

0801691c <draw_menu_system>:

// Zeichne feste Bestandteile des System Menüs
void draw_menu_system()
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b084      	sub	sp, #16
 8016920:	af04      	add	r7, sp, #16
	tmp_display_reverse = pcfgdata->display_reverse;
 8016922:	4b14      	ldr	r3, [pc, #80]	; (8016974 <draw_menu_system+0x58>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801692a:	4b13      	ldr	r3, [pc, #76]	; (8016978 <draw_menu_system+0x5c>)
 801692c:	701a      	strb	r2, [r3, #0]

	TFT_Fill_Screen(BLACK);
 801692e:	2000      	movs	r0, #0
 8016930:	f000 ffc2 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_bottom();
 8016934:	f003 fbf0 	bl	801a118 <draw_touchbuttons_bottom>
	tft_print(&verdana_36ptFontInfo, getLang(SYSTEM_Settings), 14, 1, 5, WHITE , BLACK);
 8016938:	2014      	movs	r0, #20
 801693a:	f7fa fa53 	bl	8010de4 <getLang>
 801693e:	4601      	mov	r1, r0
 8016940:	2300      	movs	r3, #0
 8016942:	9302      	str	r3, [sp, #8]
 8016944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016948:	9301      	str	r3, [sp, #4]
 801694a:	2305      	movs	r3, #5
 801694c:	9300      	str	r3, [sp, #0]
 801694e:	2301      	movs	r3, #1
 8016950:	220e      	movs	r2, #14
 8016952:	480a      	ldr	r0, [pc, #40]	; (801697c <draw_menu_system+0x60>)
 8016954:	f008 f926 	bl	801eba4 <tft_print>

	draw_system_buttons();
 8016958:	f000 f814 	bl	8016984 <draw_system_buttons>

	system_editline = 0;
 801695c:	4b08      	ldr	r3, [pc, #32]	; (8016980 <draw_menu_system+0x64>)
 801695e:	2200      	movs	r2, #0
 8016960:	601a      	str	r2, [r3, #0]
	draw_values_system();
 8016962:	f000 f965 	bl	8016c30 <draw_values_system>
	system_editline = TB_SYSTEM1;
 8016966:	4b06      	ldr	r3, [pc, #24]	; (8016980 <draw_menu_system+0x64>)
 8016968:	2220      	movs	r2, #32
 801696a:	601a      	str	r2, [r3, #0]
}
 801696c:	bf00      	nop
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	20000bf0 	.word	0x20000bf0
 8016978:	200056dc 	.word	0x200056dc
 801697c:	20001c88 	.word	0x20001c88
 8016980:	2000174c 	.word	0x2000174c

08016984 <draw_system_buttons>:

void draw_system_buttons()
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b082      	sub	sp, #8
 8016988:	af00      	add	r7, sp, #0
int anz = SYSTEM_ITEM_ANZ;
 801698a:	2309      	movs	r3, #9
 801698c:	607b      	str	r3, [r7, #4]
	if(pcfgdata->systemMode == 1) anz = SYSTEM_ITEM_ANZ_PWR;
 801698e:	4b1f      	ldr	r3, [pc, #124]	; (8016a0c <draw_system_buttons+0x88>)
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016996:	2b01      	cmp	r3, #1
 8016998:	d101      	bne.n	801699e <draw_system_buttons+0x1a>
 801699a:	2307      	movs	r3, #7
 801699c:	607b      	str	r3, [r7, #4]

	draw_touchbutton(&tb_buttons[TB_P1]);
 801699e:	481c      	ldr	r0, [pc, #112]	; (8016a10 <draw_system_buttons+0x8c>)
 80169a0:	f003 fb34 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_M1]);
 80169a4:	481b      	ldr	r0, [pc, #108]	; (8016a14 <draw_system_buttons+0x90>)
 80169a6:	f003 fb31 	bl	801a00c <draw_touchbutton>

	// aktiviere erstes Menü
	for(int i=TB_SYSTEM1; i<(TB_SYSTEM1+anz); i++)
 80169aa:	2320      	movs	r3, #32
 80169ac:	603b      	str	r3, [r7, #0]
 80169ae:	e024      	b.n	80169fa <draw_system_buttons+0x76>
	{
		if(i == TB_SYSTEM1) tb_buttons[i].pressed = 1;
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	2b20      	cmp	r3, #32
 80169b4:	d10a      	bne.n	80169cc <draw_system_buttons+0x48>
 80169b6:	4918      	ldr	r1, [pc, #96]	; (8016a18 <draw_system_buttons+0x94>)
 80169b8:	683a      	ldr	r2, [r7, #0]
 80169ba:	4613      	mov	r3, r2
 80169bc:	005b      	lsls	r3, r3, #1
 80169be:	4413      	add	r3, r2
 80169c0:	015b      	lsls	r3, r3, #5
 80169c2:	440b      	add	r3, r1
 80169c4:	335c      	adds	r3, #92	; 0x5c
 80169c6:	2201      	movs	r2, #1
 80169c8:	701a      	strb	r2, [r3, #0]
 80169ca:	e009      	b.n	80169e0 <draw_system_buttons+0x5c>
		else tb_buttons[i].pressed = 0;
 80169cc:	4912      	ldr	r1, [pc, #72]	; (8016a18 <draw_system_buttons+0x94>)
 80169ce:	683a      	ldr	r2, [r7, #0]
 80169d0:	4613      	mov	r3, r2
 80169d2:	005b      	lsls	r3, r3, #1
 80169d4:	4413      	add	r3, r2
 80169d6:	015b      	lsls	r3, r3, #5
 80169d8:	440b      	add	r3, r1
 80169da:	335c      	adds	r3, #92	; 0x5c
 80169dc:	2200      	movs	r2, #0
 80169de:	701a      	strb	r2, [r3, #0]
		draw_touchbutton(&tb_buttons[i]);
 80169e0:	683a      	ldr	r2, [r7, #0]
 80169e2:	4613      	mov	r3, r2
 80169e4:	005b      	lsls	r3, r3, #1
 80169e6:	4413      	add	r3, r2
 80169e8:	015b      	lsls	r3, r3, #5
 80169ea:	4a0b      	ldr	r2, [pc, #44]	; (8016a18 <draw_system_buttons+0x94>)
 80169ec:	4413      	add	r3, r2
 80169ee:	4618      	mov	r0, r3
 80169f0:	f003 fb0c 	bl	801a00c <draw_touchbutton>
	for(int i=TB_SYSTEM1; i<(TB_SYSTEM1+anz); i++)
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	3301      	adds	r3, #1
 80169f8:	603b      	str	r3, [r7, #0]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	3320      	adds	r3, #32
 80169fe:	683a      	ldr	r2, [r7, #0]
 8016a00:	429a      	cmp	r2, r3
 8016a02:	dbd5      	blt.n	80169b0 <draw_system_buttons+0x2c>
	}
}
 8016a04:	bf00      	nop
 8016a06:	3708      	adds	r7, #8
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	20000bf0 	.word	0x20000bf0
 8016a10:	20007798 	.word	0x20007798
 8016a14:	20007918 	.word	0x20007918
 8016a18:	20007078 	.word	0x20007078

08016a1c <init_system_buttons>:

void init_system_buttons()
{
 8016a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a1e:	b095      	sub	sp, #84	; 0x54
 8016a20:	af0c      	add	r7, sp, #48	; 0x30
int anz = SYSTEM_ITEM_ANZ;
 8016a22:	2309      	movs	r3, #9
 8016a24:	61fb      	str	r3, [r7, #28]
	if(pcfgdata->systemMode == 1) anz = SYSTEM_ITEM_ANZ_PWR;
 8016a26:	4b34      	ldr	r3, [pc, #208]	; (8016af8 <init_system_buttons+0xdc>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016a2e:	2b01      	cmp	r3, #1
 8016a30:	d101      	bne.n	8016a36 <init_system_buttons+0x1a>
 8016a32:	2307      	movs	r3, #7
 8016a34:	61fb      	str	r3, [r7, #28]

int itemysize = (ITEMS_BOTTOMMARGIN-ITEMS_TOPMARGIN) / anz;
 8016a36:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016a3a:	69fb      	ldr	r3, [r7, #28]
 8016a3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a40:	617b      	str	r3, [r7, #20]
int text_rect_width = 360;
 8016a42:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8016a46:	613b      	str	r3, [r7, #16]

	system_items = esystem_items;
 8016a48:	4b2c      	ldr	r3, [pc, #176]	; (8016afc <init_system_buttons+0xe0>)
 8016a4a:	4a2d      	ldr	r2, [pc, #180]	; (8016b00 <init_system_buttons+0xe4>)
 8016a4c:	601a      	str	r2, [r3, #0]
	if(pcfgdata->language == 1) system_items = dsystem_items;
 8016a4e:	4b2a      	ldr	r3, [pc, #168]	; (8016af8 <init_system_buttons+0xdc>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016a56:	2b01      	cmp	r3, #1
 8016a58:	d102      	bne.n	8016a60 <init_system_buttons+0x44>
 8016a5a:	4b28      	ldr	r3, [pc, #160]	; (8016afc <init_system_buttons+0xe0>)
 8016a5c:	4a29      	ldr	r2, [pc, #164]	; (8016b04 <init_system_buttons+0xe8>)
 8016a5e:	601a      	str	r2, [r3, #0]

	for(int i=0; i<anz; i++)
 8016a60:	2300      	movs	r3, #0
 8016a62:	61bb      	str	r3, [r7, #24]
 8016a64:	e03f      	b.n	8016ae6 <init_system_buttons+0xca>
	{
		int y = ITEMS_TOPMARGIN + i * itemysize;
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	697a      	ldr	r2, [r7, #20]
 8016a6a:	fb02 f303 	mul.w	r3, r2, r3
 8016a6e:	3336      	adds	r3, #54	; 0x36
 8016a70:	60fb      	str	r3, [r7, #12]
		int ys = y+1;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	3301      	adds	r3, #1
 8016a76:	60bb      	str	r3, [r7, #8]
		int ye = y + (itemysize-2);
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	3b02      	subs	r3, #2
 8016a7c:	68fa      	ldr	r2, [r7, #12]
 8016a7e:	4413      	add	r3, r2
 8016a80:	607b      	str	r3, [r7, #4]

		setup_touchbutton(&tb_buttons[TB_SYSTEM1+i],0,ys,text_rect_width,ye-ys,LIGHTBLUE,YELLOW,BLACK,system_items[i],lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 8016a82:	69bb      	ldr	r3, [r7, #24]
 8016a84:	f103 0220 	add.w	r2, r3, #32
 8016a88:	4613      	mov	r3, r2
 8016a8a:	005b      	lsls	r3, r3, #1
 8016a8c:	4413      	add	r3, r2
 8016a8e:	015b      	lsls	r3, r3, #5
 8016a90:	4a1d      	ldr	r2, [pc, #116]	; (8016b08 <init_system_buttons+0xec>)
 8016a92:	189e      	adds	r6, r3, r2
 8016a94:	687a      	ldr	r2, [r7, #4]
 8016a96:	68bb      	ldr	r3, [r7, #8]
 8016a98:	1ad4      	subs	r4, r2, r3
 8016a9a:	4b18      	ldr	r3, [pc, #96]	; (8016afc <init_system_buttons+0xe0>)
 8016a9c:	6819      	ldr	r1, [r3, #0]
 8016a9e:	69ba      	ldr	r2, [r7, #24]
 8016aa0:	4613      	mov	r3, r2
 8016aa2:	009b      	lsls	r3, r3, #2
 8016aa4:	4413      	add	r3, r2
 8016aa6:	009b      	lsls	r3, r3, #2
 8016aa8:	18cd      	adds	r5, r1, r3
 8016aaa:	2300      	movs	r3, #0
 8016aac:	930a      	str	r3, [sp, #40]	; 0x28
 8016aae:	2300      	movs	r3, #0
 8016ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	9308      	str	r3, [sp, #32]
 8016ab6:	4a15      	ldr	r2, [pc, #84]	; (8016b0c <init_system_buttons+0xf0>)
 8016ab8:	ab05      	add	r3, sp, #20
 8016aba:	ca07      	ldmia	r2, {r0, r1, r2}
 8016abc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016ac0:	9504      	str	r5, [sp, #16]
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	9303      	str	r3, [sp, #12]
 8016ac6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8016aca:	9302      	str	r3, [sp, #8]
 8016acc:	f24a 531f 	movw	r3, #42271	; 0xa51f
 8016ad0:	9301      	str	r3, [sp, #4]
 8016ad2:	9400      	str	r4, [sp, #0]
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	68ba      	ldr	r2, [r7, #8]
 8016ad8:	2100      	movs	r1, #0
 8016ada:	4630      	mov	r0, r6
 8016adc:	f003 f9af 	bl	8019e3e <setup_touchbutton>
	for(int i=0; i<anz; i++)
 8016ae0:	69bb      	ldr	r3, [r7, #24]
 8016ae2:	3301      	adds	r3, #1
 8016ae4:	61bb      	str	r3, [r7, #24]
 8016ae6:	69ba      	ldr	r2, [r7, #24]
 8016ae8:	69fb      	ldr	r3, [r7, #28]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	dbbb      	blt.n	8016a66 <init_system_buttons+0x4a>
	}
}
 8016aee:	bf00      	nop
 8016af0:	3724      	adds	r7, #36	; 0x24
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016af6:	bf00      	nop
 8016af8:	20000bf0 	.word	0x20000bf0
 8016afc:	200056d8 	.word	0x200056d8
 8016b00:	20001750 	.word	0x20001750
 8016b04:	20001804 	.word	0x20001804
 8016b08:	20007078 	.word	0x20007078
 8016b0c:	20001c40 	.word	0x20001c40

08016b10 <do_button_system>:

// es wurde auf einen Button der System-Zeilen gedrückt
// aktiviere diese Zeile als aktuell zu editierende Zeile
// außerdem bearbeite die Ziffernbuttons
int do_button_system(int touchbutton)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b084      	sub	sp, #16
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
	int anz = SYSTEM_ITEM_ANZ;
 8016b18:	2309      	movs	r3, #9
 8016b1a:	60fb      	str	r3, [r7, #12]
		if(pcfgdata->systemMode == 1) anz = SYSTEM_ITEM_ANZ_PWR;
 8016b1c:	4b3f      	ldr	r3, [pc, #252]	; (8016c1c <do_button_system+0x10c>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016b24:	2b01      	cmp	r3, #1
 8016b26:	d101      	bne.n	8016b2c <do_button_system+0x1c>
 8016b28:	2307      	movs	r3, #7
 8016b2a:	60fb      	str	r3, [r7, #12]

	if(touchbutton < TB_P1000 || (touchbutton >= TB_SETUP1 && touchbutton < TB_SYSTEM1)) return 0;	// diese Buttons interessieren uns hier nicht
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	2b0f      	cmp	r3, #15
 8016b30:	dd05      	ble.n	8016b3e <do_button_system+0x2e>
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	2b18      	cmp	r3, #24
 8016b36:	dd04      	ble.n	8016b42 <do_button_system+0x32>
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	2b1f      	cmp	r3, #31
 8016b3c:	dc01      	bgt.n	8016b42 <do_button_system+0x32>
 8016b3e:	2300      	movs	r3, #0
 8016b40:	e067      	b.n	8016c12 <do_button_system+0x102>

	if(touchbutton == TB_P1 || touchbutton == TB_M1)
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2b13      	cmp	r3, #19
 8016b46:	d002      	beq.n	8016b4e <do_button_system+0x3e>
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2b17      	cmp	r3, #23
 8016b4c:	d11a      	bne.n	8016b84 <do_button_system+0x74>
	{
		tb_buttons[TB_M1].pressed = 0;
 8016b4e:	4b34      	ldr	r3, [pc, #208]	; (8016c20 <do_button_system+0x110>)
 8016b50:	2200      	movs	r2, #0
 8016b52:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
		tb_buttons[TB_P1].pressed = 0;
 8016b56:	4b32      	ldr	r3, [pc, #200]	; (8016c20 <do_button_system+0x110>)
 8016b58:	2200      	movs	r2, #0
 8016b5a:	f883 277c 	strb.w	r2, [r3, #1916]	; 0x77c
		tb_buttons[touchbutton].pressed = 1;
 8016b5e:	4930      	ldr	r1, [pc, #192]	; (8016c20 <do_button_system+0x110>)
 8016b60:	687a      	ldr	r2, [r7, #4]
 8016b62:	4613      	mov	r3, r2
 8016b64:	005b      	lsls	r3, r3, #1
 8016b66:	4413      	add	r3, r2
 8016b68:	015b      	lsls	r3, r3, #5
 8016b6a:	440b      	add	r3, r1
 8016b6c:	335c      	adds	r3, #92	; 0x5c
 8016b6e:	2201      	movs	r2, #1
 8016b70:	701a      	strb	r2, [r3, #0]
		draw_touchbutton(&tb_buttons[TB_M1]);
 8016b72:	482c      	ldr	r0, [pc, #176]	; (8016c24 <do_button_system+0x114>)
 8016b74:	f003 fa4a 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_P1]);
 8016b78:	482b      	ldr	r0, [pc, #172]	; (8016c28 <do_button_system+0x118>)
 8016b7a:	f003 fa47 	bl	801a00c <draw_touchbutton>
		system_changevalue(touchbutton);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f000 f9be 	bl	8016f00 <system_changevalue>
	}

	if(touchbutton >= TB_SYSTEM1 && touchbutton < (TB_SYSTEM1+anz))
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2b1f      	cmp	r3, #31
 8016b88:	dd42      	ble.n	8016c10 <do_button_system+0x100>
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	3320      	adds	r3, #32
 8016b8e:	687a      	ldr	r2, [r7, #4]
 8016b90:	429a      	cmp	r2, r3
 8016b92:	da3d      	bge.n	8016c10 <do_button_system+0x100>
	{
		system_editline = touchbutton;
 8016b94:	4a25      	ldr	r2, [pc, #148]	; (8016c2c <do_button_system+0x11c>)
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	6013      	str	r3, [r2, #0]

		for(int i=TB_SYSTEM1; i<(TB_SYSTEM1+anz); i++)
 8016b9a:	2320      	movs	r3, #32
 8016b9c:	60bb      	str	r3, [r7, #8]
 8016b9e:	e032      	b.n	8016c06 <do_button_system+0xf6>
		{
			if(i != touchbutton)
 8016ba0:	68ba      	ldr	r2, [r7, #8]
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	d014      	beq.n	8016bd2 <do_button_system+0xc2>
			{
				tb_buttons[i].pressed = 0;
 8016ba8:	491d      	ldr	r1, [pc, #116]	; (8016c20 <do_button_system+0x110>)
 8016baa:	68ba      	ldr	r2, [r7, #8]
 8016bac:	4613      	mov	r3, r2
 8016bae:	005b      	lsls	r3, r3, #1
 8016bb0:	4413      	add	r3, r2
 8016bb2:	015b      	lsls	r3, r3, #5
 8016bb4:	440b      	add	r3, r1
 8016bb6:	335c      	adds	r3, #92	; 0x5c
 8016bb8:	2200      	movs	r2, #0
 8016bba:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 8016bbc:	68ba      	ldr	r2, [r7, #8]
 8016bbe:	4613      	mov	r3, r2
 8016bc0:	005b      	lsls	r3, r3, #1
 8016bc2:	4413      	add	r3, r2
 8016bc4:	015b      	lsls	r3, r3, #5
 8016bc6:	4a16      	ldr	r2, [pc, #88]	; (8016c20 <do_button_system+0x110>)
 8016bc8:	4413      	add	r3, r2
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f003 fa1e 	bl	801a00c <draw_touchbutton>
 8016bd0:	e016      	b.n	8016c00 <do_button_system+0xf0>
			}
			else
			{
				tb_buttons[i].pressed = 1;
 8016bd2:	4913      	ldr	r1, [pc, #76]	; (8016c20 <do_button_system+0x110>)
 8016bd4:	68ba      	ldr	r2, [r7, #8]
 8016bd6:	4613      	mov	r3, r2
 8016bd8:	005b      	lsls	r3, r3, #1
 8016bda:	4413      	add	r3, r2
 8016bdc:	015b      	lsls	r3, r3, #5
 8016bde:	440b      	add	r3, r1
 8016be0:	335c      	adds	r3, #92	; 0x5c
 8016be2:	2201      	movs	r2, #1
 8016be4:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	4613      	mov	r3, r2
 8016bea:	005b      	lsls	r3, r3, #1
 8016bec:	4413      	add	r3, r2
 8016bee:	015b      	lsls	r3, r3, #5
 8016bf0:	4a0b      	ldr	r2, [pc, #44]	; (8016c20 <do_button_system+0x110>)
 8016bf2:	4413      	add	r3, r2
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f003 fa09 	bl	801a00c <draw_touchbutton>
				system_editline = i;
 8016bfa:	4a0c      	ldr	r2, [pc, #48]	; (8016c2c <do_button_system+0x11c>)
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	6013      	str	r3, [r2, #0]
		for(int i=TB_SYSTEM1; i<(TB_SYSTEM1+anz); i++)
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	3301      	adds	r3, #1
 8016c04:	60bb      	str	r3, [r7, #8]
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	3320      	adds	r3, #32
 8016c0a:	68ba      	ldr	r2, [r7, #8]
 8016c0c:	429a      	cmp	r2, r3
 8016c0e:	dbc7      	blt.n	8016ba0 <do_button_system+0x90>
			}
		}
	}
	return 1;
 8016c10:	2301      	movs	r3, #1
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3710      	adds	r7, #16
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	20000bf0 	.word	0x20000bf0
 8016c20:	20007078 	.word	0x20007078
 8016c24:	20007918 	.word	0x20007918
 8016c28:	20007798 	.word	0x20007798
 8016c2c:	2000174c 	.word	0x2000174c

08016c30 <draw_values_system>:
	5,
	10
};

void draw_values_system()
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b092      	sub	sp, #72	; 0x48
 8016c34:	af04      	add	r7, sp, #16
int anz = SYSTEM_ITEM_ANZ;
 8016c36:	2309      	movs	r3, #9
 8016c38:	637b      	str	r3, [r7, #52]	; 0x34
	if(pcfgdata->systemMode == 1)  anz = SYSTEM_ITEM_ANZ_PWR;
 8016c3a:	4b8f      	ldr	r3, [pc, #572]	; (8016e78 <draw_values_system+0x248>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016c42:	2b01      	cmp	r3, #1
 8016c44:	d101      	bne.n	8016c4a <draw_values_system+0x1a>
 8016c46:	2307      	movs	r3, #7
 8016c48:	637b      	str	r3, [r7, #52]	; 0x34

int x = 370;
 8016c4a:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8016c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
int xsize = 260;
 8016c50:	f44f 7382 	mov.w	r3, #260	; 0x104
 8016c54:	62bb      	str	r3, [r7, #40]	; 0x28
int ytxt = 8;
 8016c56:	2308      	movs	r3, #8
 8016c58:	627b      	str	r3, [r7, #36]	; 0x24
int itemysize = (ITEMS_BOTTOMMARGIN-ITEMS_TOPMARGIN) / anz;
 8016c5a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c60:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c64:	623b      	str	r3, [r7, #32]
char s[20] = {0};
 8016c66:	463b      	mov	r3, r7
 8016c68:	2200      	movs	r2, #0
 8016c6a:	601a      	str	r2, [r3, #0]
 8016c6c:	605a      	str	r2, [r3, #4]
 8016c6e:	609a      	str	r2, [r3, #8]
 8016c70:	60da      	str	r2, [r3, #12]
 8016c72:	611a      	str	r2, [r3, #16]

	for(int i=TB_SYSTEM1; i<(TB_SYSTEM1+anz); i++)
 8016c74:	2320      	movs	r3, #32
 8016c76:	633b      	str	r3, [r7, #48]	; 0x30
 8016c78:	e0f3      	b.n	8016e62 <draw_values_system+0x232>
	{
		int y = ITEMS_TOPMARGIN + (i-TB_SYSTEM1) * itemysize;
 8016c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c7c:	3b20      	subs	r3, #32
 8016c7e:	6a3a      	ldr	r2, [r7, #32]
 8016c80:	fb02 f303 	mul.w	r3, r2, r3
 8016c84:	3336      	adds	r3, #54	; 0x36
 8016c86:	61fb      	str	r3, [r7, #28]
		int ys = y+1;
 8016c88:	69fb      	ldr	r3, [r7, #28]
 8016c8a:	3301      	adds	r3, #1
 8016c8c:	61bb      	str	r3, [r7, #24]
		int ye = y + (itemysize-2);
 8016c8e:	6a3b      	ldr	r3, [r7, #32]
 8016c90:	3b02      	subs	r3, #2
 8016c92:	69fa      	ldr	r2, [r7, #28]
 8016c94:	4413      	add	r3, r2
 8016c96:	617b      	str	r3, [r7, #20]

		if(i == system_editline || system_editline == 0)
 8016c98:	4b78      	ldr	r3, [pc, #480]	; (8016e7c <draw_values_system+0x24c>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	d004      	beq.n	8016cac <draw_values_system+0x7c>
 8016ca2:	4b76      	ldr	r3, [pc, #472]	; (8016e7c <draw_values_system+0x24c>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	f040 80d8 	bne.w	8016e5c <draw_values_system+0x22c>
		{
			TFT_Rectangle(x,ys+2,x+xsize,ye-1,WHITE,2);
 8016cac:	69bb      	ldr	r3, [r7, #24]
 8016cae:	1c99      	adds	r1, r3, #2
 8016cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb4:	441a      	add	r2, r3
 8016cb6:	697b      	ldr	r3, [r7, #20]
 8016cb8:	1e58      	subs	r0, r3, #1
 8016cba:	2302      	movs	r3, #2
 8016cbc:	9301      	str	r3, [sp, #4]
 8016cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016cc2:	9300      	str	r3, [sp, #0]
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016cc8:	f001 f910 	bl	8017eec <TFT_Rectangle>
			if(i == TB_SYSTEM1) strcpy(s,languagetext[pcfgdata->language]);
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	2b20      	cmp	r3, #32
 8016cd0:	d10f      	bne.n	8016cf2 <draw_values_system+0xc2>
 8016cd2:	4b69      	ldr	r3, [pc, #420]	; (8016e78 <draw_values_system+0x248>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016cda:	461a      	mov	r2, r3
 8016cdc:	4613      	mov	r3, r2
 8016cde:	009b      	lsls	r3, r3, #2
 8016ce0:	4413      	add	r3, r2
 8016ce2:	005b      	lsls	r3, r3, #1
 8016ce4:	4a66      	ldr	r2, [pc, #408]	; (8016e80 <draw_values_system+0x250>)
 8016ce6:	441a      	add	r2, r3
 8016ce8:	463b      	mov	r3, r7
 8016cea:	4611      	mov	r1, r2
 8016cec:	4618      	mov	r0, r3
 8016cee:	f008 fac3 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM2) strcpy(s,disprevtext[tmp_display_reverse]);
 8016cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf4:	2b21      	cmp	r3, #33	; 0x21
 8016cf6:	d10d      	bne.n	8016d14 <draw_values_system+0xe4>
 8016cf8:	4b62      	ldr	r3, [pc, #392]	; (8016e84 <draw_values_system+0x254>)
 8016cfa:	781b      	ldrb	r3, [r3, #0]
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	4613      	mov	r3, r2
 8016d00:	009b      	lsls	r3, r3, #2
 8016d02:	4413      	add	r3, r2
 8016d04:	005b      	lsls	r3, r3, #1
 8016d06:	4a60      	ldr	r2, [pc, #384]	; (8016e88 <draw_values_system+0x258>)
 8016d08:	441a      	add	r2, r3
 8016d0a:	463b      	mov	r3, r7
 8016d0c:	4611      	mov	r1, r2
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f008 fab2 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM3) strcpy(s,tempunitstext[pcfgdata->tempunits]);
 8016d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d16:	2b22      	cmp	r3, #34	; 0x22
 8016d18:	d10e      	bne.n	8016d38 <draw_values_system+0x108>
 8016d1a:	4b57      	ldr	r3, [pc, #348]	; (8016e78 <draw_values_system+0x248>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d22:	461a      	mov	r2, r3
 8016d24:	4613      	mov	r3, r2
 8016d26:	011b      	lsls	r3, r3, #4
 8016d28:	1a9b      	subs	r3, r3, r2
 8016d2a:	4a58      	ldr	r2, [pc, #352]	; (8016e8c <draw_values_system+0x25c>)
 8016d2c:	441a      	add	r2, r3
 8016d2e:	463b      	mov	r3, r7
 8016d30:	4611      	mov	r1, r2
 8016d32:	4618      	mov	r0, r3
 8016d34:	f008 faa0 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM4) strcpy(s,maxUunitstext[pcfgdata->maxUunits]);
 8016d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d3a:	2b23      	cmp	r3, #35	; 0x23
 8016d3c:	d10f      	bne.n	8016d5e <draw_values_system+0x12e>
 8016d3e:	4b4e      	ldr	r3, [pc, #312]	; (8016e78 <draw_values_system+0x248>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8016d46:	461a      	mov	r2, r3
 8016d48:	4613      	mov	r3, r2
 8016d4a:	009b      	lsls	r3, r3, #2
 8016d4c:	4413      	add	r3, r2
 8016d4e:	005b      	lsls	r3, r3, #1
 8016d50:	4a4f      	ldr	r2, [pc, #316]	; (8016e90 <draw_values_system+0x260>)
 8016d52:	441a      	add	r2, r3
 8016d54:	463b      	mov	r3, r7
 8016d56:	4611      	mov	r1, r2
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f008 fa8d 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM5) strcpy(s,maxIunitstext[pcfgdata->maxIunits]);
 8016d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d60:	2b24      	cmp	r3, #36	; 0x24
 8016d62:	d10f      	bne.n	8016d84 <draw_values_system+0x154>
 8016d64:	4b44      	ldr	r3, [pc, #272]	; (8016e78 <draw_values_system+0x248>)
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016d6c:	461a      	mov	r2, r3
 8016d6e:	4613      	mov	r3, r2
 8016d70:	009b      	lsls	r3, r3, #2
 8016d72:	4413      	add	r3, r2
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	4a47      	ldr	r2, [pc, #284]	; (8016e94 <draw_values_system+0x264>)
 8016d78:	441a      	add	r2, r3
 8016d7a:	463b      	mov	r3, r7
 8016d7c:	4611      	mov	r1, r2
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f008 fa7a 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM6) strcpy(s,bandmode_text[pcfgdata->bandmode]);
 8016d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d86:	2b25      	cmp	r3, #37	; 0x25
 8016d88:	d10f      	bne.n	8016daa <draw_values_system+0x17a>
 8016d8a:	4b3b      	ldr	r3, [pc, #236]	; (8016e78 <draw_values_system+0x248>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016d92:	461a      	mov	r2, r3
 8016d94:	4613      	mov	r3, r2
 8016d96:	009b      	lsls	r3, r3, #2
 8016d98:	4413      	add	r3, r2
 8016d9a:	005b      	lsls	r3, r3, #1
 8016d9c:	4a3e      	ldr	r2, [pc, #248]	; (8016e98 <draw_values_system+0x268>)
 8016d9e:	441a      	add	r2, r3
 8016da0:	463b      	mov	r3, r7
 8016da2:	4611      	mov	r1, r2
 8016da4:	4618      	mov	r0, r3
 8016da6:	f008 fa67 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM7) strcpy(s,maxpwrunitstext[pcfgdata->maxpwrunits]);
 8016daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dac:	2b26      	cmp	r3, #38	; 0x26
 8016dae:	d10f      	bne.n	8016dd0 <draw_values_system+0x1a0>
 8016db0:	4b31      	ldr	r3, [pc, #196]	; (8016e78 <draw_values_system+0x248>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016db8:	461a      	mov	r2, r3
 8016dba:	4613      	mov	r3, r2
 8016dbc:	009b      	lsls	r3, r3, #2
 8016dbe:	4413      	add	r3, r2
 8016dc0:	005b      	lsls	r3, r3, #1
 8016dc2:	4a36      	ldr	r2, [pc, #216]	; (8016e9c <draw_values_system+0x26c>)
 8016dc4:	441a      	add	r2, r3
 8016dc6:	463b      	mov	r3, r7
 8016dc8:	4611      	mov	r1, r2
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f008 fa54 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM8) strcpy(s,maxdrvpwrunitstext[pcfgdata->maxdrvpwrunits]);
 8016dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd2:	2b27      	cmp	r3, #39	; 0x27
 8016dd4:	d10f      	bne.n	8016df6 <draw_values_system+0x1c6>
 8016dd6:	4b28      	ldr	r3, [pc, #160]	; (8016e78 <draw_values_system+0x248>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016dde:	461a      	mov	r2, r3
 8016de0:	4613      	mov	r3, r2
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	4413      	add	r3, r2
 8016de6:	005b      	lsls	r3, r3, #1
 8016de8:	4a2d      	ldr	r2, [pc, #180]	; (8016ea0 <draw_values_system+0x270>)
 8016dea:	441a      	add	r2, r3
 8016dec:	463b      	mov	r3, r7
 8016dee:	4611      	mov	r1, r2
 8016df0:	4618      	mov	r0, r3
 8016df2:	f008 fa41 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM9) strcpy(s,shuntRtext[pcfgdata->shuntR]);
 8016df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df8:	2b28      	cmp	r3, #40	; 0x28
 8016dfa:	d10f      	bne.n	8016e1c <draw_values_system+0x1ec>
 8016dfc:	4b1e      	ldr	r3, [pc, #120]	; (8016e78 <draw_values_system+0x248>)
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016e04:	461a      	mov	r2, r3
 8016e06:	4613      	mov	r3, r2
 8016e08:	009b      	lsls	r3, r3, #2
 8016e0a:	4413      	add	r3, r2
 8016e0c:	005b      	lsls	r3, r3, #1
 8016e0e:	4a25      	ldr	r2, [pc, #148]	; (8016ea4 <draw_values_system+0x274>)
 8016e10:	441a      	add	r2, r3
 8016e12:	463b      	mov	r3, r7
 8016e14:	4611      	mov	r1, r2
 8016e16:	4618      	mov	r0, r3
 8016e18:	f008 fa2e 	bl	801f278 <strcpy>
			strcat(s,"  ");
 8016e1c:	463b      	mov	r3, r7
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7f1 f90e 	bl	8008040 <strlen>
 8016e24:	4603      	mov	r3, r0
 8016e26:	461a      	mov	r2, r3
 8016e28:	463b      	mov	r3, r7
 8016e2a:	4413      	add	r3, r2
 8016e2c:	4a1e      	ldr	r2, [pc, #120]	; (8016ea8 <draw_values_system+0x278>)
 8016e2e:	8811      	ldrh	r1, [r2, #0]
 8016e30:	7892      	ldrb	r2, [r2, #2]
 8016e32:	8019      	strh	r1, [r3, #0]
 8016e34:	709a      	strb	r2, [r3, #2]
			tft_print(&lucidaConsole_22ptFontInfo, s, x+20, y+ytxt, 1, WHITE , BLACK);
 8016e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e38:	f103 0014 	add.w	r0, r3, #20
 8016e3c:	69fa      	ldr	r2, [r7, #28]
 8016e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e40:	441a      	add	r2, r3
 8016e42:	4639      	mov	r1, r7
 8016e44:	2300      	movs	r3, #0
 8016e46:	9302      	str	r3, [sp, #8]
 8016e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	2301      	movs	r3, #1
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	4613      	mov	r3, r2
 8016e54:	4602      	mov	r2, r0
 8016e56:	4815      	ldr	r0, [pc, #84]	; (8016eac <draw_values_system+0x27c>)
 8016e58:	f007 fea4 	bl	801eba4 <tft_print>
	for(int i=TB_SYSTEM1; i<(TB_SYSTEM1+anz); i++)
 8016e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e5e:	3301      	adds	r3, #1
 8016e60:	633b      	str	r3, [r7, #48]	; 0x30
 8016e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e64:	3320      	adds	r3, #32
 8016e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	f6ff af06 	blt.w	8016c7a <draw_values_system+0x4a>
		}
	}
}
 8016e6e:	bf00      	nop
 8016e70:	3738      	adds	r7, #56	; 0x38
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	20000bf0 	.word	0x20000bf0
 8016e7c:	2000174c 	.word	0x2000174c
 8016e80:	200018b8 	.word	0x200018b8
 8016e84:	200056dc 	.word	0x200056dc
 8016e88:	200018cc 	.word	0x200018cc
 8016e8c:	200018e0 	.word	0x200018e0
 8016e90:	20001950 	.word	0x20001950
 8016e94:	20001978 	.word	0x20001978
 8016e98:	20000728 	.word	0x20000728
 8016e9c:	20001900 	.word	0x20001900
 8016ea0:	20001928 	.word	0x20001928
 8016ea4:	200019a0 	.word	0x200019a0
 8016ea8:	08026ca4 	.word	0x08026ca4
 8016eac:	20001c40 	.word	0x20001c40

08016eb0 <changeValue>:

unsigned char changeValue(int touchbutton, unsigned char v, unsigned char max)
{
 8016eb0:	b480      	push	{r7}
 8016eb2:	b083      	sub	sp, #12
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	460b      	mov	r3, r1
 8016eba:	70fb      	strb	r3, [r7, #3]
 8016ebc:	4613      	mov	r3, r2
 8016ebe:	70bb      	strb	r3, [r7, #2]
	if(touchbutton == TB_P1)
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2b13      	cmp	r3, #19
 8016ec4:	d109      	bne.n	8016eda <changeValue+0x2a>
	{
		if(v == max) v = 0;
 8016ec6:	78fa      	ldrb	r2, [r7, #3]
 8016ec8:	78bb      	ldrb	r3, [r7, #2]
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d102      	bne.n	8016ed4 <changeValue+0x24>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	70fb      	strb	r3, [r7, #3]
 8016ed2:	e002      	b.n	8016eda <changeValue+0x2a>
		else v++;
 8016ed4:	78fb      	ldrb	r3, [r7, #3]
 8016ed6:	3301      	adds	r3, #1
 8016ed8:	70fb      	strb	r3, [r7, #3]
	}
	if(touchbutton == TB_M1)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2b17      	cmp	r3, #23
 8016ede:	d108      	bne.n	8016ef2 <changeValue+0x42>
	{
		if(v == 0) v = max;
 8016ee0:	78fb      	ldrb	r3, [r7, #3]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d102      	bne.n	8016eec <changeValue+0x3c>
 8016ee6:	78bb      	ldrb	r3, [r7, #2]
 8016ee8:	70fb      	strb	r3, [r7, #3]
 8016eea:	e002      	b.n	8016ef2 <changeValue+0x42>
		else v--;
 8016eec:	78fb      	ldrb	r3, [r7, #3]
 8016eee:	3b01      	subs	r3, #1
 8016ef0:	70fb      	strb	r3, [r7, #3]
	}

	return v;
 8016ef2:	78fb      	ldrb	r3, [r7, #3]
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	370c      	adds	r7, #12
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efe:	4770      	bx	lr

08016f00 <system_changevalue>:

void system_changevalue(int touchbutton)
{
 8016f00:	b590      	push	{r4, r7, lr}
 8016f02:	b083      	sub	sp, #12
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
	if(system_editline == TB_SYSTEM1)
 8016f08:	4b51      	ldr	r3, [pc, #324]	; (8017050 <system_changevalue+0x150>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b20      	cmp	r3, #32
 8016f0e:	d10e      	bne.n	8016f2e <system_changevalue+0x2e>
	{
		pcfgdata->language = (pcfgdata->language?0:1);
 8016f10:	4b50      	ldr	r3, [pc, #320]	; (8017054 <system_changevalue+0x154>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	bf0c      	ite	eq
 8016f1c:	2301      	moveq	r3, #1
 8016f1e:	2300      	movne	r3, #0
 8016f20:	b2da      	uxtb	r2, r3
 8016f22:	4b4c      	ldr	r3, [pc, #304]	; (8017054 <system_changevalue+0x154>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		init_touchbuttons();
 8016f2a:	f002 fb35 	bl	8019598 <init_touchbuttons>
	}

	if(system_editline == TB_SYSTEM2)
 8016f2e:	4b48      	ldr	r3, [pc, #288]	; (8017050 <system_changevalue+0x150>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	2b21      	cmp	r3, #33	; 0x21
 8016f34:	d109      	bne.n	8016f4a <system_changevalue+0x4a>
	{
		tmp_display_reverse = (tmp_display_reverse?0:1);
 8016f36:	4b48      	ldr	r3, [pc, #288]	; (8017058 <system_changevalue+0x158>)
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	bf0c      	ite	eq
 8016f3e:	2301      	moveq	r3, #1
 8016f40:	2300      	movne	r3, #0
 8016f42:	b2db      	uxtb	r3, r3
 8016f44:	461a      	mov	r2, r3
 8016f46:	4b44      	ldr	r3, [pc, #272]	; (8017058 <system_changevalue+0x158>)
 8016f48:	701a      	strb	r2, [r3, #0]
	}

	if(system_editline == TB_SYSTEM3)
 8016f4a:	4b41      	ldr	r3, [pc, #260]	; (8017050 <system_changevalue+0x150>)
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	2b22      	cmp	r3, #34	; 0x22
 8016f50:	d10c      	bne.n	8016f6c <system_changevalue+0x6c>
	{
		pcfgdata->tempunits = (pcfgdata->tempunits?0:1);
 8016f52:	4b40      	ldr	r3, [pc, #256]	; (8017054 <system_changevalue+0x154>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	bf0c      	ite	eq
 8016f5e:	2301      	moveq	r3, #1
 8016f60:	2300      	movne	r3, #0
 8016f62:	b2da      	uxtb	r2, r3
 8016f64:	4b3b      	ldr	r3, [pc, #236]	; (8017054 <system_changevalue+0x154>)
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}

	if(system_editline == TB_SYSTEM4)
 8016f6c:	4b38      	ldr	r3, [pc, #224]	; (8017050 <system_changevalue+0x150>)
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	2b23      	cmp	r3, #35	; 0x23
 8016f72:	d10c      	bne.n	8016f8e <system_changevalue+0x8e>
		pcfgdata->maxUunits = changeValue(touchbutton, pcfgdata->maxUunits, 3);
 8016f74:	4b37      	ldr	r3, [pc, #220]	; (8017054 <system_changevalue+0x154>)
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
 8016f7c:	4b35      	ldr	r3, [pc, #212]	; (8017054 <system_changevalue+0x154>)
 8016f7e:	681c      	ldr	r4, [r3, #0]
 8016f80:	2203      	movs	r2, #3
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f7ff ff94 	bl	8016eb0 <changeValue>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

	if(system_editline == TB_SYSTEM5)
 8016f8e:	4b30      	ldr	r3, [pc, #192]	; (8017050 <system_changevalue+0x150>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	2b24      	cmp	r3, #36	; 0x24
 8016f94:	d10c      	bne.n	8016fb0 <system_changevalue+0xb0>
		pcfgdata->maxIunits = changeValue(touchbutton, pcfgdata->maxIunits, 3);
 8016f96:	4b2f      	ldr	r3, [pc, #188]	; (8017054 <system_changevalue+0x154>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8016f9e:	4b2d      	ldr	r3, [pc, #180]	; (8017054 <system_changevalue+0x154>)
 8016fa0:	681c      	ldr	r4, [r3, #0]
 8016fa2:	2203      	movs	r2, #3
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f7ff ff83 	bl	8016eb0 <changeValue>
 8016faa:	4603      	mov	r3, r0
 8016fac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

	if(system_editline == TB_SYSTEM6)
 8016fb0:	4b27      	ldr	r3, [pc, #156]	; (8017050 <system_changevalue+0x150>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	2b25      	cmp	r3, #37	; 0x25
 8016fb6:	d10e      	bne.n	8016fd6 <system_changevalue+0xd6>
	{
		pcfgdata->bandmode = changeValue(touchbutton, pcfgdata->bandmode, NUMBANDMODES-1);
 8016fb8:	4b26      	ldr	r3, [pc, #152]	; (8017054 <system_changevalue+0x154>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8016fc0:	4b24      	ldr	r3, [pc, #144]	; (8017054 <system_changevalue+0x154>)
 8016fc2:	681c      	ldr	r4, [r3, #0]
 8016fc4:	220c      	movs	r2, #12
 8016fc6:	6878      	ldr	r0, [r7, #4]
 8016fc8:	f7ff ff72 	bl	8016eb0 <changeValue>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		init_touchbuttons();
 8016fd2:	f002 fae1 	bl	8019598 <init_touchbuttons>
	}

	if(system_editline == TB_SYSTEM7)
 8016fd6:	4b1e      	ldr	r3, [pc, #120]	; (8017050 <system_changevalue+0x150>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	2b26      	cmp	r3, #38	; 0x26
 8016fdc:	d10c      	bne.n	8016ff8 <system_changevalue+0xf8>
		pcfgdata->maxpwrunits = changeValue(touchbutton, pcfgdata->maxpwrunits, 3);
 8016fde:	4b1d      	ldr	r3, [pc, #116]	; (8017054 <system_changevalue+0x154>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8016fe6:	4b1b      	ldr	r3, [pc, #108]	; (8017054 <system_changevalue+0x154>)
 8016fe8:	681c      	ldr	r4, [r3, #0]
 8016fea:	2203      	movs	r2, #3
 8016fec:	6878      	ldr	r0, [r7, #4]
 8016fee:	f7ff ff5f 	bl	8016eb0 <changeValue>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

	if(system_editline == TB_SYSTEM8)
 8016ff8:	4b15      	ldr	r3, [pc, #84]	; (8017050 <system_changevalue+0x150>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	2b27      	cmp	r3, #39	; 0x27
 8016ffe:	d10c      	bne.n	801701a <system_changevalue+0x11a>
		pcfgdata->maxdrvpwrunits = changeValue(touchbutton, pcfgdata->maxdrvpwrunits, 3);
 8017000:	4b14      	ldr	r3, [pc, #80]	; (8017054 <system_changevalue+0x154>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8017008:	4b12      	ldr	r3, [pc, #72]	; (8017054 <system_changevalue+0x154>)
 801700a:	681c      	ldr	r4, [r3, #0]
 801700c:	2203      	movs	r2, #3
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f7ff ff4e 	bl	8016eb0 <changeValue>
 8017014:	4603      	mov	r3, r0
 8017016:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

	if(system_editline == TB_SYSTEM9)
 801701a:	4b0d      	ldr	r3, [pc, #52]	; (8017050 <system_changevalue+0x150>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	2b28      	cmp	r3, #40	; 0x28
 8017020:	d10c      	bne.n	801703c <system_changevalue+0x13c>
		pcfgdata->shuntR = changeValue(touchbutton, pcfgdata->shuntR, 3);
 8017022:	4b0c      	ldr	r3, [pc, #48]	; (8017054 <system_changevalue+0x154>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 801702a:	4b0a      	ldr	r3, [pc, #40]	; (8017054 <system_changevalue+0x154>)
 801702c:	681c      	ldr	r4, [r3, #0]
 801702e:	2203      	movs	r2, #3
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f7ff ff3d 	bl	8016eb0 <changeValue>
 8017036:	4603      	mov	r3, r0
 8017038:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

	draw_values_system();
 801703c:	f7ff fdf8 	bl	8016c30 <draw_values_system>
	setup_modified = 1;
 8017040:	4b06      	ldr	r3, [pc, #24]	; (801705c <system_changevalue+0x15c>)
 8017042:	2201      	movs	r2, #1
 8017044:	601a      	str	r2, [r3, #0]
}
 8017046:	bf00      	nop
 8017048:	370c      	adds	r7, #12
 801704a:	46bd      	mov	sp, r7
 801704c:	bd90      	pop	{r4, r7, pc}
 801704e:	bf00      	nop
 8017050:	2000174c 	.word	0x2000174c
 8017054:	20000bf0 	.word	0x20000bf0
 8017058:	200056dc 	.word	0x200056dc
 801705c:	2000277c 	.word	0x2000277c

08017060 <draw_menu_system2>:

char (*system_items2)[20];

// Zeichne feste Bestandteile des System Menüs
void draw_menu_system2()
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b084      	sub	sp, #16
 8017064:	af04      	add	r7, sp, #16
	TFT_Fill_Screen(BLACK);
 8017066:	2000      	movs	r0, #0
 8017068:	f000 fc26 	bl	80178b8 <TFT_Fill_Screen>
	draw_touchbuttons_bottom();
 801706c:	f003 f854 	bl	801a118 <draw_touchbuttons_bottom>
	tft_print(&verdana_36ptFontInfo, getLang(SYSTEM_Settings), 14, 1, 5, WHITE , BLACK);
 8017070:	2014      	movs	r0, #20
 8017072:	f7f9 feb7 	bl	8010de4 <getLang>
 8017076:	4601      	mov	r1, r0
 8017078:	2300      	movs	r3, #0
 801707a:	9302      	str	r3, [sp, #8]
 801707c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017080:	9301      	str	r3, [sp, #4]
 8017082:	2305      	movs	r3, #5
 8017084:	9300      	str	r3, [sp, #0]
 8017086:	2301      	movs	r3, #1
 8017088:	220e      	movs	r2, #14
 801708a:	4808      	ldr	r0, [pc, #32]	; (80170ac <draw_menu_system2+0x4c>)
 801708c:	f007 fd8a 	bl	801eba4 <tft_print>

	draw_system_buttons2();
 8017090:	f000 f810 	bl	80170b4 <draw_system_buttons2>

	system_editline2 = 0;
 8017094:	4b06      	ldr	r3, [pc, #24]	; (80170b0 <draw_menu_system2+0x50>)
 8017096:	2200      	movs	r2, #0
 8017098:	601a      	str	r2, [r3, #0]
	draw_values_system2();
 801709a:	f000 f943 	bl	8017324 <draw_values_system2>
	system_editline2 = TB_SYSTEM_2_1;
 801709e:	4b04      	ldr	r3, [pc, #16]	; (80170b0 <draw_menu_system2+0x50>)
 80170a0:	2229      	movs	r2, #41	; 0x29
 80170a2:	601a      	str	r2, [r3, #0]
}
 80170a4:	bf00      	nop
 80170a6:	46bd      	mov	sp, r7
 80170a8:	bd80      	pop	{r7, pc}
 80170aa:	bf00      	nop
 80170ac:	20001c88 	.word	0x20001c88
 80170b0:	200019d8 	.word	0x200019d8

080170b4 <draw_system_buttons2>:

void draw_system_buttons2()
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b082      	sub	sp, #8
 80170b8:	af00      	add	r7, sp, #0
int anz = SYSTEM_ITEM2_ANZ;
 80170ba:	2306      	movs	r3, #6
 80170bc:	603b      	str	r3, [r7, #0]

	draw_touchbutton(&tb_buttons[TB_P1]);
 80170be:	481b      	ldr	r0, [pc, #108]	; (801712c <draw_system_buttons2+0x78>)
 80170c0:	f002 ffa4 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_M1]);
 80170c4:	481a      	ldr	r0, [pc, #104]	; (8017130 <draw_system_buttons2+0x7c>)
 80170c6:	f002 ffa1 	bl	801a00c <draw_touchbutton>

	// aktiviere erstes Menü
	for(int i=TB_SYSTEM_2_1; i<(TB_SYSTEM_2_1+anz); i++)
 80170ca:	2329      	movs	r3, #41	; 0x29
 80170cc:	607b      	str	r3, [r7, #4]
 80170ce:	e024      	b.n	801711a <draw_system_buttons2+0x66>
	{
		if(i == TB_SYSTEM_2_1) tb_buttons[i].pressed = 1;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	2b29      	cmp	r3, #41	; 0x29
 80170d4:	d10a      	bne.n	80170ec <draw_system_buttons2+0x38>
 80170d6:	4917      	ldr	r1, [pc, #92]	; (8017134 <draw_system_buttons2+0x80>)
 80170d8:	687a      	ldr	r2, [r7, #4]
 80170da:	4613      	mov	r3, r2
 80170dc:	005b      	lsls	r3, r3, #1
 80170de:	4413      	add	r3, r2
 80170e0:	015b      	lsls	r3, r3, #5
 80170e2:	440b      	add	r3, r1
 80170e4:	335c      	adds	r3, #92	; 0x5c
 80170e6:	2201      	movs	r2, #1
 80170e8:	701a      	strb	r2, [r3, #0]
 80170ea:	e009      	b.n	8017100 <draw_system_buttons2+0x4c>
		else tb_buttons[i].pressed = 0;
 80170ec:	4911      	ldr	r1, [pc, #68]	; (8017134 <draw_system_buttons2+0x80>)
 80170ee:	687a      	ldr	r2, [r7, #4]
 80170f0:	4613      	mov	r3, r2
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	4413      	add	r3, r2
 80170f6:	015b      	lsls	r3, r3, #5
 80170f8:	440b      	add	r3, r1
 80170fa:	335c      	adds	r3, #92	; 0x5c
 80170fc:	2200      	movs	r2, #0
 80170fe:	701a      	strb	r2, [r3, #0]
		draw_touchbutton(&tb_buttons[i]);
 8017100:	687a      	ldr	r2, [r7, #4]
 8017102:	4613      	mov	r3, r2
 8017104:	005b      	lsls	r3, r3, #1
 8017106:	4413      	add	r3, r2
 8017108:	015b      	lsls	r3, r3, #5
 801710a:	4a0a      	ldr	r2, [pc, #40]	; (8017134 <draw_system_buttons2+0x80>)
 801710c:	4413      	add	r3, r2
 801710e:	4618      	mov	r0, r3
 8017110:	f002 ff7c 	bl	801a00c <draw_touchbutton>
	for(int i=TB_SYSTEM_2_1; i<(TB_SYSTEM_2_1+anz); i++)
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	3301      	adds	r3, #1
 8017118:	607b      	str	r3, [r7, #4]
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	3329      	adds	r3, #41	; 0x29
 801711e:	687a      	ldr	r2, [r7, #4]
 8017120:	429a      	cmp	r2, r3
 8017122:	dbd5      	blt.n	80170d0 <draw_system_buttons2+0x1c>
	}
}
 8017124:	bf00      	nop
 8017126:	3708      	adds	r7, #8
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}
 801712c:	20007798 	.word	0x20007798
 8017130:	20007918 	.word	0x20007918
 8017134:	20007078 	.word	0x20007078

08017138 <init_system_buttons2>:

void init_system_buttons2()
{
 8017138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801713a:	b095      	sub	sp, #84	; 0x54
 801713c:	af0c      	add	r7, sp, #48	; 0x30
int anz = SYSTEM_ITEM2_ANZ;
 801713e:	2306      	movs	r3, #6
 8017140:	61bb      	str	r3, [r7, #24]
int itemysize = (ITEMS2_BOTTOMMARGIN-ITEMS2_TOPMARGIN) / anz;
 8017142:	22f0      	movs	r2, #240	; 0xf0
 8017144:	69bb      	ldr	r3, [r7, #24]
 8017146:	fb92 f3f3 	sdiv	r3, r2, r3
 801714a:	617b      	str	r3, [r7, #20]
int text_rect_width = 360;
 801714c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017150:	613b      	str	r3, [r7, #16]

	system_items2 = esystem_items2;
 8017152:	4b2b      	ldr	r3, [pc, #172]	; (8017200 <init_system_buttons2+0xc8>)
 8017154:	4a2b      	ldr	r2, [pc, #172]	; (8017204 <init_system_buttons2+0xcc>)
 8017156:	601a      	str	r2, [r3, #0]
	if(pcfgdata->language == 1) system_items2 = dsystem_items2;
 8017158:	4b2b      	ldr	r3, [pc, #172]	; (8017208 <init_system_buttons2+0xd0>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017160:	2b01      	cmp	r3, #1
 8017162:	d102      	bne.n	801716a <init_system_buttons2+0x32>
 8017164:	4b26      	ldr	r3, [pc, #152]	; (8017200 <init_system_buttons2+0xc8>)
 8017166:	4a29      	ldr	r2, [pc, #164]	; (801720c <init_system_buttons2+0xd4>)
 8017168:	601a      	str	r2, [r3, #0]

	for(int i=0; i<anz; i++)
 801716a:	2300      	movs	r3, #0
 801716c:	61fb      	str	r3, [r7, #28]
 801716e:	e03f      	b.n	80171f0 <init_system_buttons2+0xb8>
	{
		int y = ITEMS2_TOPMARGIN + i * itemysize;
 8017170:	69fb      	ldr	r3, [r7, #28]
 8017172:	697a      	ldr	r2, [r7, #20]
 8017174:	fb02 f303 	mul.w	r3, r2, r3
 8017178:	3336      	adds	r3, #54	; 0x36
 801717a:	60fb      	str	r3, [r7, #12]
		int ys = y+1;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	3301      	adds	r3, #1
 8017180:	60bb      	str	r3, [r7, #8]
		int ye = y + (itemysize-2);
 8017182:	697b      	ldr	r3, [r7, #20]
 8017184:	3b02      	subs	r3, #2
 8017186:	68fa      	ldr	r2, [r7, #12]
 8017188:	4413      	add	r3, r2
 801718a:	607b      	str	r3, [r7, #4]

		setup_touchbutton(&tb_buttons[TB_SYSTEM_2_1+i],0,ys,text_rect_width,ye-ys,LIGHTBLUE,YELLOW,BLACK,system_items2[i],lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 801718c:	69fb      	ldr	r3, [r7, #28]
 801718e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8017192:	4613      	mov	r3, r2
 8017194:	005b      	lsls	r3, r3, #1
 8017196:	4413      	add	r3, r2
 8017198:	015b      	lsls	r3, r3, #5
 801719a:	4a1d      	ldr	r2, [pc, #116]	; (8017210 <init_system_buttons2+0xd8>)
 801719c:	189e      	adds	r6, r3, r2
 801719e:	687a      	ldr	r2, [r7, #4]
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	1ad4      	subs	r4, r2, r3
 80171a4:	4b16      	ldr	r3, [pc, #88]	; (8017200 <init_system_buttons2+0xc8>)
 80171a6:	6819      	ldr	r1, [r3, #0]
 80171a8:	69fa      	ldr	r2, [r7, #28]
 80171aa:	4613      	mov	r3, r2
 80171ac:	009b      	lsls	r3, r3, #2
 80171ae:	4413      	add	r3, r2
 80171b0:	009b      	lsls	r3, r3, #2
 80171b2:	18cd      	adds	r5, r1, r3
 80171b4:	2300      	movs	r3, #0
 80171b6:	930a      	str	r3, [sp, #40]	; 0x28
 80171b8:	2300      	movs	r3, #0
 80171ba:	9309      	str	r3, [sp, #36]	; 0x24
 80171bc:	2300      	movs	r3, #0
 80171be:	9308      	str	r3, [sp, #32]
 80171c0:	4a14      	ldr	r2, [pc, #80]	; (8017214 <init_system_buttons2+0xdc>)
 80171c2:	ab05      	add	r3, sp, #20
 80171c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80171c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80171ca:	9504      	str	r5, [sp, #16]
 80171cc:	2300      	movs	r3, #0
 80171ce:	9303      	str	r3, [sp, #12]
 80171d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80171d4:	9302      	str	r3, [sp, #8]
 80171d6:	f24a 531f 	movw	r3, #42271	; 0xa51f
 80171da:	9301      	str	r3, [sp, #4]
 80171dc:	9400      	str	r4, [sp, #0]
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	68ba      	ldr	r2, [r7, #8]
 80171e2:	2100      	movs	r1, #0
 80171e4:	4630      	mov	r0, r6
 80171e6:	f002 fe2a 	bl	8019e3e <setup_touchbutton>
	for(int i=0; i<anz; i++)
 80171ea:	69fb      	ldr	r3, [r7, #28]
 80171ec:	3301      	adds	r3, #1
 80171ee:	61fb      	str	r3, [r7, #28]
 80171f0:	69fa      	ldr	r2, [r7, #28]
 80171f2:	69bb      	ldr	r3, [r7, #24]
 80171f4:	429a      	cmp	r2, r3
 80171f6:	dbbb      	blt.n	8017170 <init_system_buttons2+0x38>
	}
}
 80171f8:	bf00      	nop
 80171fa:	3724      	adds	r7, #36	; 0x24
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017200:	200056e0 	.word	0x200056e0
 8017204:	200019dc 	.word	0x200019dc
 8017208:	20000bf0 	.word	0x20000bf0
 801720c:	20001a54 	.word	0x20001a54
 8017210:	20007078 	.word	0x20007078
 8017214:	20001c40 	.word	0x20001c40

08017218 <do_button_system2>:

// es wurde auf einen Button der System-Zeilen gedrückt
// aktiviere diese Zeile als aktuell zu editierende Zeile
// außerdem bearbeite die Ziffernbuttons
int do_button_system2(int touchbutton)
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b084      	sub	sp, #16
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
	int anz = SYSTEM_ITEM2_ANZ;
 8017220:	2306      	movs	r3, #6
 8017222:	60bb      	str	r3, [r7, #8]

	if(touchbutton < TB_P1000 || (touchbutton >= TB_SETUP1 && touchbutton < TB_SYSTEM_2_1)) return 0;	// diese Buttons interessieren uns hier nicht
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2b0f      	cmp	r3, #15
 8017228:	dd05      	ble.n	8017236 <do_button_system2+0x1e>
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	2b18      	cmp	r3, #24
 801722e:	dd04      	ble.n	801723a <do_button_system2+0x22>
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	2b28      	cmp	r3, #40	; 0x28
 8017234:	dc01      	bgt.n	801723a <do_button_system2+0x22>
 8017236:	2300      	movs	r3, #0
 8017238:	e067      	b.n	801730a <do_button_system2+0xf2>

	if(touchbutton == TB_P1 || touchbutton == TB_M1)
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2b13      	cmp	r3, #19
 801723e:	d002      	beq.n	8017246 <do_button_system2+0x2e>
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2b17      	cmp	r3, #23
 8017244:	d11a      	bne.n	801727c <do_button_system2+0x64>
	{
		tb_buttons[TB_M1].pressed = 0;
 8017246:	4b33      	ldr	r3, [pc, #204]	; (8017314 <do_button_system2+0xfc>)
 8017248:	2200      	movs	r2, #0
 801724a:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
		tb_buttons[TB_P1].pressed = 0;
 801724e:	4b31      	ldr	r3, [pc, #196]	; (8017314 <do_button_system2+0xfc>)
 8017250:	2200      	movs	r2, #0
 8017252:	f883 277c 	strb.w	r2, [r3, #1916]	; 0x77c
		tb_buttons[touchbutton].pressed = 1;
 8017256:	492f      	ldr	r1, [pc, #188]	; (8017314 <do_button_system2+0xfc>)
 8017258:	687a      	ldr	r2, [r7, #4]
 801725a:	4613      	mov	r3, r2
 801725c:	005b      	lsls	r3, r3, #1
 801725e:	4413      	add	r3, r2
 8017260:	015b      	lsls	r3, r3, #5
 8017262:	440b      	add	r3, r1
 8017264:	335c      	adds	r3, #92	; 0x5c
 8017266:	2201      	movs	r2, #1
 8017268:	701a      	strb	r2, [r3, #0]
		draw_touchbutton(&tb_buttons[TB_M1]);
 801726a:	482b      	ldr	r0, [pc, #172]	; (8017318 <do_button_system2+0x100>)
 801726c:	f002 fece 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_P1]);
 8017270:	482a      	ldr	r0, [pc, #168]	; (801731c <do_button_system2+0x104>)
 8017272:	f002 fecb 	bl	801a00c <draw_touchbutton>
		system_changevalue2(touchbutton);
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f000 f942 	bl	8017500 <system_changevalue2>
	}

	if(touchbutton >= TB_SYSTEM_2_1 && touchbutton < (TB_SYSTEM_2_1+anz))
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2b28      	cmp	r3, #40	; 0x28
 8017280:	dd42      	ble.n	8017308 <do_button_system2+0xf0>
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	3329      	adds	r3, #41	; 0x29
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	429a      	cmp	r2, r3
 801728a:	da3d      	bge.n	8017308 <do_button_system2+0xf0>
	{
		system_editline2 = touchbutton;
 801728c:	4a24      	ldr	r2, [pc, #144]	; (8017320 <do_button_system2+0x108>)
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	6013      	str	r3, [r2, #0]

		for(int i=TB_SYSTEM_2_1; i<(TB_SYSTEM_2_1+anz); i++)
 8017292:	2329      	movs	r3, #41	; 0x29
 8017294:	60fb      	str	r3, [r7, #12]
 8017296:	e032      	b.n	80172fe <do_button_system2+0xe6>
		{
			if(i != touchbutton)
 8017298:	68fa      	ldr	r2, [r7, #12]
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	429a      	cmp	r2, r3
 801729e:	d014      	beq.n	80172ca <do_button_system2+0xb2>
			{
				tb_buttons[i].pressed = 0;
 80172a0:	491c      	ldr	r1, [pc, #112]	; (8017314 <do_button_system2+0xfc>)
 80172a2:	68fa      	ldr	r2, [r7, #12]
 80172a4:	4613      	mov	r3, r2
 80172a6:	005b      	lsls	r3, r3, #1
 80172a8:	4413      	add	r3, r2
 80172aa:	015b      	lsls	r3, r3, #5
 80172ac:	440b      	add	r3, r1
 80172ae:	335c      	adds	r3, #92	; 0x5c
 80172b0:	2200      	movs	r2, #0
 80172b2:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 80172b4:	68fa      	ldr	r2, [r7, #12]
 80172b6:	4613      	mov	r3, r2
 80172b8:	005b      	lsls	r3, r3, #1
 80172ba:	4413      	add	r3, r2
 80172bc:	015b      	lsls	r3, r3, #5
 80172be:	4a15      	ldr	r2, [pc, #84]	; (8017314 <do_button_system2+0xfc>)
 80172c0:	4413      	add	r3, r2
 80172c2:	4618      	mov	r0, r3
 80172c4:	f002 fea2 	bl	801a00c <draw_touchbutton>
 80172c8:	e016      	b.n	80172f8 <do_button_system2+0xe0>
			}
			else
			{
				tb_buttons[i].pressed = 1;
 80172ca:	4912      	ldr	r1, [pc, #72]	; (8017314 <do_button_system2+0xfc>)
 80172cc:	68fa      	ldr	r2, [r7, #12]
 80172ce:	4613      	mov	r3, r2
 80172d0:	005b      	lsls	r3, r3, #1
 80172d2:	4413      	add	r3, r2
 80172d4:	015b      	lsls	r3, r3, #5
 80172d6:	440b      	add	r3, r1
 80172d8:	335c      	adds	r3, #92	; 0x5c
 80172da:	2201      	movs	r2, #1
 80172dc:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 80172de:	68fa      	ldr	r2, [r7, #12]
 80172e0:	4613      	mov	r3, r2
 80172e2:	005b      	lsls	r3, r3, #1
 80172e4:	4413      	add	r3, r2
 80172e6:	015b      	lsls	r3, r3, #5
 80172e8:	4a0a      	ldr	r2, [pc, #40]	; (8017314 <do_button_system2+0xfc>)
 80172ea:	4413      	add	r3, r2
 80172ec:	4618      	mov	r0, r3
 80172ee:	f002 fe8d 	bl	801a00c <draw_touchbutton>
				system_editline2 = i;
 80172f2:	4a0b      	ldr	r2, [pc, #44]	; (8017320 <do_button_system2+0x108>)
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	6013      	str	r3, [r2, #0]
		for(int i=TB_SYSTEM_2_1; i<(TB_SYSTEM_2_1+anz); i++)
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	3301      	adds	r3, #1
 80172fc:	60fb      	str	r3, [r7, #12]
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	3329      	adds	r3, #41	; 0x29
 8017302:	68fa      	ldr	r2, [r7, #12]
 8017304:	429a      	cmp	r2, r3
 8017306:	dbc7      	blt.n	8017298 <do_button_system2+0x80>
			}
		}
	}
	return 1;
 8017308:	2301      	movs	r3, #1
}
 801730a:	4618      	mov	r0, r3
 801730c:	3710      	adds	r7, #16
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	20007078 	.word	0x20007078
 8017318:	20007918 	.word	0x20007918
 801731c:	20007798 	.word	0x20007798
 8017320:	200019d8 	.word	0x200019d8

08017324 <draw_values_system2>:
		"Drehschalt.",
		"4xPTT Eing."
};

void draw_values_system2()
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b092      	sub	sp, #72	; 0x48
 8017328:	af04      	add	r7, sp, #16
int anz = SYSTEM_ITEM2_ANZ;
 801732a:	2306      	movs	r3, #6
 801732c:	633b      	str	r3, [r7, #48]	; 0x30

int x = 370;
 801732e:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8017332:	62fb      	str	r3, [r7, #44]	; 0x2c
int xsize = 300;
 8017334:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8017338:	62bb      	str	r3, [r7, #40]	; 0x28
int ytxt = 8;
 801733a:	2308      	movs	r3, #8
 801733c:	627b      	str	r3, [r7, #36]	; 0x24
int itemysize = (ITEMS2_BOTTOMMARGIN-ITEMS2_TOPMARGIN) / anz;
 801733e:	22f0      	movs	r2, #240	; 0xf0
 8017340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017342:	fb92 f3f3 	sdiv	r3, r2, r3
 8017346:	623b      	str	r3, [r7, #32]
char s[20] = {0};
 8017348:	463b      	mov	r3, r7
 801734a:	2200      	movs	r2, #0
 801734c:	601a      	str	r2, [r3, #0]
 801734e:	605a      	str	r2, [r3, #4]
 8017350:	609a      	str	r2, [r3, #8]
 8017352:	60da      	str	r2, [r3, #12]
 8017354:	611a      	str	r2, [r3, #16]

	for(int i=TB_SYSTEM_2_1; i<(TB_SYSTEM_2_1+anz); i++)
 8017356:	2329      	movs	r3, #41	; 0x29
 8017358:	637b      	str	r3, [r7, #52]	; 0x34
 801735a:	e0b7      	b.n	80174cc <draw_values_system2+0x1a8>
	{
		int y = ITEMS2_TOPMARGIN + (i-TB_SYSTEM_2_1) * itemysize;
 801735c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801735e:	3b29      	subs	r3, #41	; 0x29
 8017360:	6a3a      	ldr	r2, [r7, #32]
 8017362:	fb02 f303 	mul.w	r3, r2, r3
 8017366:	3336      	adds	r3, #54	; 0x36
 8017368:	61fb      	str	r3, [r7, #28]
		int ys = y+1;
 801736a:	69fb      	ldr	r3, [r7, #28]
 801736c:	3301      	adds	r3, #1
 801736e:	61bb      	str	r3, [r7, #24]
		int ye = y + (itemysize-2);
 8017370:	6a3b      	ldr	r3, [r7, #32]
 8017372:	3b02      	subs	r3, #2
 8017374:	69fa      	ldr	r2, [r7, #28]
 8017376:	4413      	add	r3, r2
 8017378:	617b      	str	r3, [r7, #20]

		if(i == system_editline2 || system_editline2 == 0)
 801737a:	4b59      	ldr	r3, [pc, #356]	; (80174e0 <draw_values_system2+0x1bc>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017380:	429a      	cmp	r2, r3
 8017382:	d004      	beq.n	801738e <draw_values_system2+0x6a>
 8017384:	4b56      	ldr	r3, [pc, #344]	; (80174e0 <draw_values_system2+0x1bc>)
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	2b00      	cmp	r3, #0
 801738a:	f040 809c 	bne.w	80174c6 <draw_values_system2+0x1a2>
		{
			TFT_Rectangle(x,ys+2,x+xsize,ye-1,WHITE,2);
 801738e:	69bb      	ldr	r3, [r7, #24]
 8017390:	1c99      	adds	r1, r3, #2
 8017392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017396:	441a      	add	r2, r3
 8017398:	697b      	ldr	r3, [r7, #20]
 801739a:	1e58      	subs	r0, r3, #1
 801739c:	2302      	movs	r3, #2
 801739e:	9301      	str	r3, [sp, #4]
 80173a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173a4:	9300      	str	r3, [sp, #0]
 80173a6:	4603      	mov	r3, r0
 80173a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173aa:	f000 fd9f 	bl	8017eec <TFT_Rectangle>
			if(i == TB_SYSTEM_2_1) strcpy(s,pcfgdata->language?auxtext_de[pcfgdata->auxInputMode]:auxtext_en[pcfgdata->auxInputMode]);
 80173ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173b0:	2b29      	cmp	r3, #41	; 0x29
 80173b2:	d121      	bne.n	80173f8 <draw_values_system2+0xd4>
 80173b4:	4b4b      	ldr	r3, [pc, #300]	; (80174e4 <draw_values_system2+0x1c0>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d00b      	beq.n	80173d8 <draw_values_system2+0xb4>
 80173c0:	4b48      	ldr	r3, [pc, #288]	; (80174e4 <draw_values_system2+0x1c0>)
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80173c8:	461a      	mov	r2, r3
 80173ca:	4613      	mov	r3, r2
 80173cc:	005b      	lsls	r3, r3, #1
 80173ce:	4413      	add	r3, r2
 80173d0:	009b      	lsls	r3, r3, #2
 80173d2:	4a45      	ldr	r2, [pc, #276]	; (80174e8 <draw_values_system2+0x1c4>)
 80173d4:	4413      	add	r3, r2
 80173d6:	e00a      	b.n	80173ee <draw_values_system2+0xca>
 80173d8:	4b42      	ldr	r3, [pc, #264]	; (80174e4 <draw_values_system2+0x1c0>)
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80173e0:	461a      	mov	r2, r3
 80173e2:	4613      	mov	r3, r2
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	4413      	add	r3, r2
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	4a40      	ldr	r2, [pc, #256]	; (80174ec <draw_values_system2+0x1c8>)
 80173ec:	4413      	add	r3, r2
 80173ee:	463a      	mov	r2, r7
 80173f0:	4619      	mov	r1, r3
 80173f2:	4610      	mov	r0, r2
 80173f4:	f007 ff40 	bl	801f278 <strcpy>
			if(i == TB_SYSTEM_2_2) sprintf(s,"%02X", pcfgdata->civ_adr1);
 80173f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173fa:	2b2a      	cmp	r3, #42	; 0x2a
 80173fc:	d109      	bne.n	8017412 <draw_values_system2+0xee>
 80173fe:	4b39      	ldr	r3, [pc, #228]	; (80174e4 <draw_values_system2+0x1c0>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017406:	461a      	mov	r2, r3
 8017408:	463b      	mov	r3, r7
 801740a:	4939      	ldr	r1, [pc, #228]	; (80174f0 <draw_values_system2+0x1cc>)
 801740c:	4618      	mov	r0, r3
 801740e:	f007 ff13 	bl	801f238 <sprintf>
			if(i == TB_SYSTEM_2_3) sprintf(s,"%02X", pcfgdata->civ_adr2);
 8017412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017414:	2b2b      	cmp	r3, #43	; 0x2b
 8017416:	d109      	bne.n	801742c <draw_values_system2+0x108>
 8017418:	4b32      	ldr	r3, [pc, #200]	; (80174e4 <draw_values_system2+0x1c0>)
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017420:	461a      	mov	r2, r3
 8017422:	463b      	mov	r3, r7
 8017424:	4932      	ldr	r1, [pc, #200]	; (80174f0 <draw_values_system2+0x1cc>)
 8017426:	4618      	mov	r0, r3
 8017428:	f007 ff06 	bl	801f238 <sprintf>
			if(i == TB_SYSTEM_2_4) sprintf(s,"%02X", pcfgdata->civ_adr3);
 801742c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801742e:	2b2c      	cmp	r3, #44	; 0x2c
 8017430:	d109      	bne.n	8017446 <draw_values_system2+0x122>
 8017432:	4b2c      	ldr	r3, [pc, #176]	; (80174e4 <draw_values_system2+0x1c0>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801743a:	461a      	mov	r2, r3
 801743c:	463b      	mov	r3, r7
 801743e:	492c      	ldr	r1, [pc, #176]	; (80174f0 <draw_values_system2+0x1cc>)
 8017440:	4618      	mov	r0, r3
 8017442:	f007 fef9 	bl	801f238 <sprintf>
			if(i == TB_SYSTEM_2_5) sprintf(s,"%02X", pcfgdata->civ_adr4);
 8017446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017448:	2b2d      	cmp	r3, #45	; 0x2d
 801744a:	d109      	bne.n	8017460 <draw_values_system2+0x13c>
 801744c:	4b25      	ldr	r3, [pc, #148]	; (80174e4 <draw_values_system2+0x1c0>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017454:	461a      	mov	r2, r3
 8017456:	463b      	mov	r3, r7
 8017458:	4925      	ldr	r1, [pc, #148]	; (80174f0 <draw_values_system2+0x1cc>)
 801745a:	4618      	mov	r0, r3
 801745c:	f007 feec 	bl	801f238 <sprintf>
			if(i == TB_SYSTEM_2_6) strcpy(s,sysmodetxt[pcfgdata->systemMode]);
 8017460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017462:	2b2e      	cmp	r3, #46	; 0x2e
 8017464:	d10f      	bne.n	8017486 <draw_values_system2+0x162>
 8017466:	4b1f      	ldr	r3, [pc, #124]	; (80174e4 <draw_values_system2+0x1c0>)
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801746e:	461a      	mov	r2, r3
 8017470:	4613      	mov	r3, r2
 8017472:	00db      	lsls	r3, r3, #3
 8017474:	1a9b      	subs	r3, r3, r2
 8017476:	005b      	lsls	r3, r3, #1
 8017478:	4a1e      	ldr	r2, [pc, #120]	; (80174f4 <draw_values_system2+0x1d0>)
 801747a:	441a      	add	r2, r3
 801747c:	463b      	mov	r3, r7
 801747e:	4611      	mov	r1, r2
 8017480:	4618      	mov	r0, r3
 8017482:	f007 fef9 	bl	801f278 <strcpy>

			strcat(s,"  ");
 8017486:	463b      	mov	r3, r7
 8017488:	4618      	mov	r0, r3
 801748a:	f7f0 fdd9 	bl	8008040 <strlen>
 801748e:	4603      	mov	r3, r0
 8017490:	461a      	mov	r2, r3
 8017492:	463b      	mov	r3, r7
 8017494:	4413      	add	r3, r2
 8017496:	4a18      	ldr	r2, [pc, #96]	; (80174f8 <draw_values_system2+0x1d4>)
 8017498:	8811      	ldrh	r1, [r2, #0]
 801749a:	7892      	ldrb	r2, [r2, #2]
 801749c:	8019      	strh	r1, [r3, #0]
 801749e:	709a      	strb	r2, [r3, #2]
			tft_print(&lucidaConsole_22ptFontInfo, s, x+20, y+ytxt, 1, WHITE , BLACK);
 80174a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a2:	f103 0014 	add.w	r0, r3, #20
 80174a6:	69fa      	ldr	r2, [r7, #28]
 80174a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174aa:	441a      	add	r2, r3
 80174ac:	4639      	mov	r1, r7
 80174ae:	2300      	movs	r3, #0
 80174b0:	9302      	str	r3, [sp, #8]
 80174b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174b6:	9301      	str	r3, [sp, #4]
 80174b8:	2301      	movs	r3, #1
 80174ba:	9300      	str	r3, [sp, #0]
 80174bc:	4613      	mov	r3, r2
 80174be:	4602      	mov	r2, r0
 80174c0:	480e      	ldr	r0, [pc, #56]	; (80174fc <draw_values_system2+0x1d8>)
 80174c2:	f007 fb6f 	bl	801eba4 <tft_print>
	for(int i=TB_SYSTEM_2_1; i<(TB_SYSTEM_2_1+anz); i++)
 80174c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174c8:	3301      	adds	r3, #1
 80174ca:	637b      	str	r3, [r7, #52]	; 0x34
 80174cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ce:	3329      	adds	r3, #41	; 0x29
 80174d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174d2:	429a      	cmp	r2, r3
 80174d4:	f6ff af42 	blt.w	801735c <draw_values_system2+0x38>
		}
	}
}
 80174d8:	bf00      	nop
 80174da:	3738      	adds	r7, #56	; 0x38
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	200019d8 	.word	0x200019d8
 80174e4:	20000bf0 	.word	0x20000bf0
 80174e8:	20001b00 	.word	0x20001b00
 80174ec:	20001ae8 	.word	0x20001ae8
 80174f0:	08026ca8 	.word	0x08026ca8
 80174f4:	20001acc 	.word	0x20001acc
 80174f8:	08026cb0 	.word	0x08026cb0
 80174fc:	20001c40 	.word	0x20001c40

08017500 <system_changevalue2>:

void system_changevalue2(int touchbutton)
{
 8017500:	b590      	push	{r4, r7, lr}
 8017502:	b083      	sub	sp, #12
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
	if(system_editline2 == TB_SYSTEM_2_1)
 8017508:	4b37      	ldr	r3, [pc, #220]	; (80175e8 <system_changevalue2+0xe8>)
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	2b29      	cmp	r3, #41	; 0x29
 801750e:	d10c      	bne.n	801752a <system_changevalue2+0x2a>
	{
		pcfgdata->auxInputMode = (pcfgdata->auxInputMode?0:1);
 8017510:	4b36      	ldr	r3, [pc, #216]	; (80175ec <system_changevalue2+0xec>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017518:	2b00      	cmp	r3, #0
 801751a:	bf0c      	ite	eq
 801751c:	2301      	moveq	r3, #1
 801751e:	2300      	movne	r3, #0
 8017520:	b2da      	uxtb	r2, r3
 8017522:	4b32      	ldr	r3, [pc, #200]	; (80175ec <system_changevalue2+0xec>)
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}

	if(system_editline2 == TB_SYSTEM_2_2)
 801752a:	4b2f      	ldr	r3, [pc, #188]	; (80175e8 <system_changevalue2+0xe8>)
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	2b2a      	cmp	r3, #42	; 0x2a
 8017530:	d10c      	bne.n	801754c <system_changevalue2+0x4c>
	{
		pcfgdata->civ_adr1 = changeValue(touchbutton, pcfgdata->civ_adr1, 0xff);
 8017532:	4b2e      	ldr	r3, [pc, #184]	; (80175ec <system_changevalue2+0xec>)
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 801753a:	4b2c      	ldr	r3, [pc, #176]	; (80175ec <system_changevalue2+0xec>)
 801753c:	681c      	ldr	r4, [r3, #0]
 801753e:	22ff      	movs	r2, #255	; 0xff
 8017540:	6878      	ldr	r0, [r7, #4]
 8017542:	f7ff fcb5 	bl	8016eb0 <changeValue>
 8017546:	4603      	mov	r3, r0
 8017548:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	}

	if(system_editline2 == TB_SYSTEM_2_3)
 801754c:	4b26      	ldr	r3, [pc, #152]	; (80175e8 <system_changevalue2+0xe8>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	2b2b      	cmp	r3, #43	; 0x2b
 8017552:	d10c      	bne.n	801756e <system_changevalue2+0x6e>
	{
		pcfgdata->civ_adr2 = changeValue(touchbutton, pcfgdata->civ_adr2, 0xff);
 8017554:	4b25      	ldr	r3, [pc, #148]	; (80175ec <system_changevalue2+0xec>)
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 801755c:	4b23      	ldr	r3, [pc, #140]	; (80175ec <system_changevalue2+0xec>)
 801755e:	681c      	ldr	r4, [r3, #0]
 8017560:	22ff      	movs	r2, #255	; 0xff
 8017562:	6878      	ldr	r0, [r7, #4]
 8017564:	f7ff fca4 	bl	8016eb0 <changeValue>
 8017568:	4603      	mov	r3, r0
 801756a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	}

	if(system_editline2 == TB_SYSTEM_2_4)
 801756e:	4b1e      	ldr	r3, [pc, #120]	; (80175e8 <system_changevalue2+0xe8>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	2b2c      	cmp	r3, #44	; 0x2c
 8017574:	d10c      	bne.n	8017590 <system_changevalue2+0x90>
	{
		pcfgdata->civ_adr3 = changeValue(touchbutton, pcfgdata->civ_adr3, 0xff);
 8017576:	4b1d      	ldr	r3, [pc, #116]	; (80175ec <system_changevalue2+0xec>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
 801757e:	4b1b      	ldr	r3, [pc, #108]	; (80175ec <system_changevalue2+0xec>)
 8017580:	681c      	ldr	r4, [r3, #0]
 8017582:	22ff      	movs	r2, #255	; 0xff
 8017584:	6878      	ldr	r0, [r7, #4]
 8017586:	f7ff fc93 	bl	8016eb0 <changeValue>
 801758a:	4603      	mov	r3, r0
 801758c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	}

	if(system_editline2 == TB_SYSTEM_2_5)
 8017590:	4b15      	ldr	r3, [pc, #84]	; (80175e8 <system_changevalue2+0xe8>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	2b2d      	cmp	r3, #45	; 0x2d
 8017596:	d10c      	bne.n	80175b2 <system_changevalue2+0xb2>
	{
		pcfgdata->civ_adr4 = changeValue(touchbutton, pcfgdata->civ_adr4, 0xff);
 8017598:	4b14      	ldr	r3, [pc, #80]	; (80175ec <system_changevalue2+0xec>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80175a0:	4b12      	ldr	r3, [pc, #72]	; (80175ec <system_changevalue2+0xec>)
 80175a2:	681c      	ldr	r4, [r3, #0]
 80175a4:	22ff      	movs	r2, #255	; 0xff
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	f7ff fc82 	bl	8016eb0 <changeValue>
 80175ac:	4603      	mov	r3, r0
 80175ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}

	if(system_editline2 == TB_SYSTEM_2_6)
 80175b2:	4b0d      	ldr	r3, [pc, #52]	; (80175e8 <system_changevalue2+0xe8>)
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2b2e      	cmp	r3, #46	; 0x2e
 80175b8:	d10c      	bne.n	80175d4 <system_changevalue2+0xd4>
	{
		pcfgdata->systemMode = (pcfgdata->systemMode?0:1);
 80175ba:	4b0c      	ldr	r3, [pc, #48]	; (80175ec <system_changevalue2+0xec>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	bf0c      	ite	eq
 80175c6:	2301      	moveq	r3, #1
 80175c8:	2300      	movne	r3, #0
 80175ca:	b2da      	uxtb	r2, r3
 80175cc:	4b07      	ldr	r3, [pc, #28]	; (80175ec <system_changevalue2+0xec>)
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	}

	draw_values_system2();
 80175d4:	f7ff fea6 	bl	8017324 <draw_values_system2>
	setup_modified = 1;
 80175d8:	4b05      	ldr	r3, [pc, #20]	; (80175f0 <system_changevalue2+0xf0>)
 80175da:	2201      	movs	r2, #1
 80175dc:	601a      	str	r2, [r3, #0]
}
 80175de:	bf00      	nop
 80175e0:	370c      	adds	r7, #12
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd90      	pop	{r4, r7, pc}
 80175e6:	bf00      	nop
 80175e8:	200019d8 	.word	0x200019d8
 80175ec:	20000bf0 	.word	0x20000bf0
 80175f0:	2000277c 	.word	0x2000277c

080175f4 <SystemInit>:

uint32_t SystemCoreClock = 180000000;
__I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

void SystemInit(void)
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	af00      	add	r7, sp, #0
	// schalte die FPU ein
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 80175f8:	4b16      	ldr	r3, [pc, #88]	; (8017654 <SystemInit+0x60>)
 80175fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80175fe:	4a15      	ldr	r2, [pc, #84]	; (8017654 <SystemInit+0x60>)
 8017600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Reset the RCC clock configuration to the default reset state ------------*/
  RCC->CR |= (uint32_t)0x00000001;
 8017608:	4b13      	ldr	r3, [pc, #76]	; (8017658 <SystemInit+0x64>)
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	4a12      	ldr	r2, [pc, #72]	; (8017658 <SystemInit+0x64>)
 801760e:	f043 0301 	orr.w	r3, r3, #1
 8017612:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0x00000000;
 8017614:	4b10      	ldr	r3, [pc, #64]	; (8017658 <SystemInit+0x64>)
 8017616:	2200      	movs	r2, #0
 8017618:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801761a:	4b0f      	ldr	r3, [pc, #60]	; (8017658 <SystemInit+0x64>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	4a0e      	ldr	r2, [pc, #56]	; (8017658 <SystemInit+0x64>)
 8017620:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8017624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017628:	6013      	str	r3, [r2, #0]
  RCC->PLLCFGR = 0x24003010;
 801762a:	4b0b      	ldr	r3, [pc, #44]	; (8017658 <SystemInit+0x64>)
 801762c:	4a0b      	ldr	r2, [pc, #44]	; (801765c <SystemInit+0x68>)
 801762e:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8017630:	4b09      	ldr	r3, [pc, #36]	; (8017658 <SystemInit+0x64>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	4a08      	ldr	r2, [pc, #32]	; (8017658 <SystemInit+0x64>)
 8017636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801763a:	6013      	str	r3, [r2, #0]
  RCC->CIR = 0x00000000;
 801763c:	4b06      	ldr	r3, [pc, #24]	; (8017658 <SystemInit+0x64>)
 801763e:	2200      	movs	r2, #0
 8017640:	60da      	str	r2, [r3, #12]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8017642:	f000 f80d 	bl	8017660 <SetSysClock>

  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017646:	4b03      	ldr	r3, [pc, #12]	; (8017654 <SystemInit+0x60>)
 8017648:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801764c:	609a      	str	r2, [r3, #8]
}
 801764e:	bf00      	nop
 8017650:	bd80      	pop	{r7, pc}
 8017652:	bf00      	nop
 8017654:	e000ed00 	.word	0xe000ed00
 8017658:	40023800 	.word	0x40023800
 801765c:	24003010 	.word	0x24003010

08017660 <SetSysClock>:

static void SetSysClock(void)
{
 8017660:	b480      	push	{r7}
 8017662:	b083      	sub	sp, #12
 8017664:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8017666:	2300      	movs	r3, #0
 8017668:	607b      	str	r3, [r7, #4]
 801766a:	2300      	movs	r3, #0
 801766c:	603b      	str	r3, [r7, #0]
  
  // Enable HSE
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 801766e:	4b43      	ldr	r3, [pc, #268]	; (801777c <SetSysClock+0x11c>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	4a42      	ldr	r2, [pc, #264]	; (801777c <SetSysClock+0x11c>)
 8017674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017678:	6013      	str	r3, [r2, #0]
 
  // Wait till HSE is ready and if Time out is reached exit
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 801767a:	4b40      	ldr	r3, [pc, #256]	; (801777c <SetSysClock+0x11c>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017682:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	3301      	adds	r3, #1
 8017688:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 801768a:	683b      	ldr	r3, [r7, #0]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d103      	bne.n	8017698 <SetSysClock+0x38>
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8017696:	d1f0      	bne.n	801767a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8017698:	4b38      	ldr	r3, [pc, #224]	; (801777c <SetSysClock+0x11c>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d002      	beq.n	80176aa <SetSysClock+0x4a>
    HSEStatus = (uint32_t)0x01;
 80176a4:	2301      	movs	r3, #1
 80176a6:	603b      	str	r3, [r7, #0]
 80176a8:	e001      	b.n	80176ae <SetSysClock+0x4e>
  else
    HSEStatus = (uint32_t)0x00;
 80176aa:	2300      	movs	r3, #0
 80176ac:	603b      	str	r3, [r7, #0]

  if (HSEStatus == (uint32_t)0x01)
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	2b01      	cmp	r3, #1
 80176b2:	d15c      	bne.n	801776e <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80176b4:	4b31      	ldr	r3, [pc, #196]	; (801777c <SetSysClock+0x11c>)
 80176b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176b8:	4a30      	ldr	r2, [pc, #192]	; (801777c <SetSysClock+0x11c>)
 80176ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80176be:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80176c0:	4b2f      	ldr	r3, [pc, #188]	; (8017780 <SetSysClock+0x120>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	4a2e      	ldr	r2, [pc, #184]	; (8017780 <SetSysClock+0x120>)
 80176c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80176ca:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80176cc:	4b2b      	ldr	r3, [pc, #172]	; (801777c <SetSysClock+0x11c>)
 80176ce:	4a2b      	ldr	r2, [pc, #172]	; (801777c <SetSysClock+0x11c>)
 80176d0:	689b      	ldr	r3, [r3, #8]
 80176d2:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80176d4:	4b29      	ldr	r3, [pc, #164]	; (801777c <SetSysClock+0x11c>)
 80176d6:	689b      	ldr	r3, [r3, #8]
 80176d8:	4a28      	ldr	r2, [pc, #160]	; (801777c <SetSysClock+0x11c>)
 80176da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80176de:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80176e0:	4b26      	ldr	r3, [pc, #152]	; (801777c <SetSysClock+0x11c>)
 80176e2:	689b      	ldr	r3, [r3, #8]
 80176e4:	4a25      	ldr	r2, [pc, #148]	; (801777c <SetSysClock+0x11c>)
 80176e6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80176ea:	6093      	str	r3, [r2, #8]


    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80176ec:	4b23      	ldr	r3, [pc, #140]	; (801777c <SetSysClock+0x11c>)
 80176ee:	4a25      	ldr	r2, [pc, #148]	; (8017784 <SetSysClock+0x124>)
 80176f0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80176f2:	4b22      	ldr	r3, [pc, #136]	; (801777c <SetSysClock+0x11c>)
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	4a21      	ldr	r2, [pc, #132]	; (801777c <SetSysClock+0x11c>)
 80176f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80176fc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80176fe:	bf00      	nop
 8017700:	4b1e      	ldr	r3, [pc, #120]	; (801777c <SetSysClock+0x11c>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017708:	2b00      	cmp	r3, #0
 801770a:	d0f9      	beq.n	8017700 <SetSysClock+0xa0>
   
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 801770c:	4b1c      	ldr	r3, [pc, #112]	; (8017780 <SetSysClock+0x120>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4a1b      	ldr	r2, [pc, #108]	; (8017780 <SetSysClock+0x120>)
 8017712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017716:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0);
 8017718:	bf00      	nop
 801771a:	4b19      	ldr	r3, [pc, #100]	; (8017780 <SetSysClock+0x120>)
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017722:	2b00      	cmp	r3, #0
 8017724:	d0f9      	beq.n	801771a <SetSysClock+0xba>

    PWR->CR |= PWR_CR_ODSWEN;
 8017726:	4b16      	ldr	r3, [pc, #88]	; (8017780 <SetSysClock+0x120>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	4a15      	ldr	r2, [pc, #84]	; (8017780 <SetSysClock+0x120>)
 801772c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017730:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0);
 8017732:	bf00      	nop
 8017734:	4b12      	ldr	r3, [pc, #72]	; (8017780 <SetSysClock+0x120>)
 8017736:	685b      	ldr	r3, [r3, #4]
 8017738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801773c:	2b00      	cmp	r3, #0
 801773e:	d0f9      	beq.n	8017734 <SetSysClock+0xd4>

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8017740:	4b11      	ldr	r3, [pc, #68]	; (8017788 <SetSysClock+0x128>)
 8017742:	f240 7205 	movw	r2, #1797	; 0x705
 8017746:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8017748:	4b0c      	ldr	r3, [pc, #48]	; (801777c <SetSysClock+0x11c>)
 801774a:	689b      	ldr	r3, [r3, #8]
 801774c:	4a0b      	ldr	r2, [pc, #44]	; (801777c <SetSysClock+0x11c>)
 801774e:	f023 0303 	bic.w	r3, r3, #3
 8017752:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8017754:	4b09      	ldr	r3, [pc, #36]	; (801777c <SetSysClock+0x11c>)
 8017756:	689b      	ldr	r3, [r3, #8]
 8017758:	4a08      	ldr	r2, [pc, #32]	; (801777c <SetSysClock+0x11c>)
 801775a:	f043 0302 	orr.w	r3, r3, #2
 801775e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8017760:	bf00      	nop
 8017762:	4b06      	ldr	r3, [pc, #24]	; (801777c <SetSysClock+0x11c>)
 8017764:	689b      	ldr	r3, [r3, #8]
 8017766:	f003 030c 	and.w	r3, r3, #12
 801776a:	2b08      	cmp	r3, #8
 801776c:	d1f9      	bne.n	8017762 <SetSysClock+0x102>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 801776e:	bf00      	nop
 8017770:	370c      	adds	r7, #12
 8017772:	46bd      	mov	sp, r7
 8017774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017778:	4770      	bx	lr
 801777a:	bf00      	nop
 801777c:	40023800 	.word	0x40023800
 8017780:	40007000 	.word	0x40007000
 8017784:	07402d04 	.word	0x07402d04
 8017788:	40023c00 	.word	0x40023c00

0801778c <TFT_setRegion>:
#include <math.h>

void tft_copy_sd_to_flash(char *fn);

void TFT_setRegion(int xstart, int ystart, int xend, int yend)
{
 801778c:	b480      	push	{r7}
 801778e:	b087      	sub	sp, #28
 8017790:	af00      	add	r7, sp, #0
 8017792:	60f8      	str	r0, [r7, #12]
 8017794:	60b9      	str	r1, [r7, #8]
 8017796:	607a      	str	r2, [r7, #4]
 8017798:	603b      	str	r3, [r7, #0]
int tmp;

	// x=0, y=0 ist links oben
	TFT_REG = 0x36;
 801779a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801779e:	2236      	movs	r2, #54	; 0x36
 80177a0:	801a      	strh	r2, [r3, #0]
	TFT_RAM = 0x02;
 80177a2:	4b24      	ldr	r3, [pc, #144]	; (8017834 <TFT_setRegion+0xa8>)
 80177a4:	2202      	movs	r2, #2
 80177a6:	801a      	strh	r2, [r3, #0]

	if(xstart > xend)
 80177a8:	68fa      	ldr	r2, [r7, #12]
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	429a      	cmp	r2, r3
 80177ae:	dd05      	ble.n	80177bc <TFT_setRegion+0x30>
	{
		tmp = xstart;
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	617b      	str	r3, [r7, #20]
		xstart = xend;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	60fb      	str	r3, [r7, #12]
		xend = tmp;
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	607b      	str	r3, [r7, #4]
	}

	if(ystart > yend)
 80177bc:	68ba      	ldr	r2, [r7, #8]
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	dd05      	ble.n	80177d0 <TFT_setRegion+0x44>
	{
		tmp = ystart;
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	617b      	str	r3, [r7, #20]
		ystart = yend;
 80177c8:	683b      	ldr	r3, [r7, #0]
 80177ca:	60bb      	str	r3, [r7, #8]
		yend = tmp;
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	603b      	str	r3, [r7, #0]
	}

	TFT_REG=0x2A;
 80177d0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80177d4:	222a      	movs	r2, #42	; 0x2a
 80177d6:	801a      	strh	r2, [r3, #0]
	TFT_RAM=xstart >> 8;
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	121a      	asrs	r2, r3, #8
 80177dc:	4b15      	ldr	r3, [pc, #84]	; (8017834 <TFT_setRegion+0xa8>)
 80177de:	b292      	uxth	r2, r2
 80177e0:	801a      	strh	r2, [r3, #0]
	TFT_RAM=xstart;
 80177e2:	4b14      	ldr	r3, [pc, #80]	; (8017834 <TFT_setRegion+0xa8>)
 80177e4:	68fa      	ldr	r2, [r7, #12]
 80177e6:	b292      	uxth	r2, r2
 80177e8:	801a      	strh	r2, [r3, #0]
	TFT_RAM=xend >> 8;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	121a      	asrs	r2, r3, #8
 80177ee:	4b11      	ldr	r3, [pc, #68]	; (8017834 <TFT_setRegion+0xa8>)
 80177f0:	b292      	uxth	r2, r2
 80177f2:	801a      	strh	r2, [r3, #0]
	TFT_RAM=xend;
 80177f4:	4b0f      	ldr	r3, [pc, #60]	; (8017834 <TFT_setRegion+0xa8>)
 80177f6:	687a      	ldr	r2, [r7, #4]
 80177f8:	b292      	uxth	r2, r2
 80177fa:	801a      	strh	r2, [r3, #0]

	TFT_REG=0x2B;
 80177fc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8017800:	222b      	movs	r2, #43	; 0x2b
 8017802:	801a      	strh	r2, [r3, #0]
	TFT_RAM=ystart >> 8;
 8017804:	68bb      	ldr	r3, [r7, #8]
 8017806:	121a      	asrs	r2, r3, #8
 8017808:	4b0a      	ldr	r3, [pc, #40]	; (8017834 <TFT_setRegion+0xa8>)
 801780a:	b292      	uxth	r2, r2
 801780c:	801a      	strh	r2, [r3, #0]
	TFT_RAM=ystart;
 801780e:	4b09      	ldr	r3, [pc, #36]	; (8017834 <TFT_setRegion+0xa8>)
 8017810:	68ba      	ldr	r2, [r7, #8]
 8017812:	b292      	uxth	r2, r2
 8017814:	801a      	strh	r2, [r3, #0]
	TFT_RAM=yend >> 8;
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	121a      	asrs	r2, r3, #8
 801781a:	4b06      	ldr	r3, [pc, #24]	; (8017834 <TFT_setRegion+0xa8>)
 801781c:	b292      	uxth	r2, r2
 801781e:	801a      	strh	r2, [r3, #0]
	TFT_RAM=yend;
 8017820:	4b04      	ldr	r3, [pc, #16]	; (8017834 <TFT_setRegion+0xa8>)
 8017822:	683a      	ldr	r2, [r7, #0]
 8017824:	b292      	uxth	r2, r2
 8017826:	801a      	strh	r2, [r3, #0]
}
 8017828:	bf00      	nop
 801782a:	371c      	adds	r7, #28
 801782c:	46bd      	mov	sp, r7
 801782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017832:	4770      	bx	lr
 8017834:	60020000 	.word	0x60020000

08017838 <TFT_Fill_Rectangle>:

void TFT_Fill_Rectangle(int xs, int ys, int xe, int ye, unsigned int rgb)
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b086      	sub	sp, #24
 801783c:	af00      	add	r7, sp, #0
 801783e:	60f8      	str	r0, [r7, #12]
 8017840:	60b9      	str	r1, [r7, #8]
 8017842:	607a      	str	r2, [r7, #4]
 8017844:	603b      	str	r3, [r7, #0]
    long len = (abs(xe-xs)+1)*(abs(ye-ys)+1);
 8017846:	687a      	ldr	r2, [r7, #4]
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	2b00      	cmp	r3, #0
 801784e:	bfb8      	it	lt
 8017850:	425b      	neglt	r3, r3
 8017852:	3301      	adds	r3, #1
 8017854:	6839      	ldr	r1, [r7, #0]
 8017856:	68ba      	ldr	r2, [r7, #8]
 8017858:	1a8a      	subs	r2, r1, r2
 801785a:	2a00      	cmp	r2, #0
 801785c:	bfb8      	it	lt
 801785e:	4252      	neglt	r2, r2
 8017860:	3201      	adds	r2, #1
 8017862:	fb02 f303 	mul.w	r3, r2, r3
 8017866:	613b      	str	r3, [r7, #16]
    if(len <= 0 || len > (800*480)) return;
 8017868:	693b      	ldr	r3, [r7, #16]
 801786a:	2b00      	cmp	r3, #0
 801786c:	dd1c      	ble.n	80178a8 <TFT_Fill_Rectangle+0x70>
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	4a0f      	ldr	r2, [pc, #60]	; (80178b0 <TFT_Fill_Rectangle+0x78>)
 8017872:	4293      	cmp	r3, r2
 8017874:	dc18      	bgt.n	80178a8 <TFT_Fill_Rectangle+0x70>

    TFT_setRegion(xs, ys, xe, ye);
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	687a      	ldr	r2, [r7, #4]
 801787a:	68b9      	ldr	r1, [r7, #8]
 801787c:	68f8      	ldr	r0, [r7, #12]
 801787e:	f7ff ff85 	bl	801778c <TFT_setRegion>

    TFT_REG=0x2C;
 8017882:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8017886:	222c      	movs	r2, #44	; 0x2c
 8017888:	801a      	strh	r2, [r3, #0]

    for(long pixel = 0; pixel < len; pixel++)
 801788a:	2300      	movs	r3, #0
 801788c:	617b      	str	r3, [r7, #20]
 801788e:	e006      	b.n	801789e <TFT_Fill_Rectangle+0x66>
    	TFT_RAM = rgb;
 8017890:	4b08      	ldr	r3, [pc, #32]	; (80178b4 <TFT_Fill_Rectangle+0x7c>)
 8017892:	6a3a      	ldr	r2, [r7, #32]
 8017894:	b292      	uxth	r2, r2
 8017896:	801a      	strh	r2, [r3, #0]
    for(long pixel = 0; pixel < len; pixel++)
 8017898:	697b      	ldr	r3, [r7, #20]
 801789a:	3301      	adds	r3, #1
 801789c:	617b      	str	r3, [r7, #20]
 801789e:	697a      	ldr	r2, [r7, #20]
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	429a      	cmp	r2, r3
 80178a4:	dbf4      	blt.n	8017890 <TFT_Fill_Rectangle+0x58>
 80178a6:	e000      	b.n	80178aa <TFT_Fill_Rectangle+0x72>
    if(len <= 0 || len > (800*480)) return;
 80178a8:	bf00      	nop
}
 80178aa:	3718      	adds	r7, #24
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}
 80178b0:	0005dc00 	.word	0x0005dc00
 80178b4:	60020000 	.word	0x60020000

080178b8 <TFT_Fill_Screen>:

void TFT_Fill_Screen(unsigned int rgb)
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b084      	sub	sp, #16
 80178bc:	af02      	add	r7, sp, #8
 80178be:	6078      	str	r0, [r7, #4]
	TFT_Fill_Rectangle(0,0,TFT_WIDTH-1,TFT_HEIGHT-1,rgb);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	9300      	str	r3, [sp, #0]
 80178c4:	f240 13df 	movw	r3, #479	; 0x1df
 80178c8:	f240 321f 	movw	r2, #799	; 0x31f
 80178cc:	2100      	movs	r1, #0
 80178ce:	2000      	movs	r0, #0
 80178d0:	f7ff ffb2 	bl	8017838 <TFT_Fill_Rectangle>
}
 80178d4:	bf00      	nop
 80178d6:	3708      	adds	r7, #8
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}

080178dc <TFT_startPicture>:

long totalpiclen = 0;
// Bereite Ausgabe eines Bildes vor
void TFT_startPicture(int xs, int ys, int xe, int ye)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b084      	sub	sp, #16
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	60f8      	str	r0, [r7, #12]
 80178e4:	60b9      	str	r1, [r7, #8]
 80178e6:	607a      	str	r2, [r7, #4]
 80178e8:	603b      	str	r3, [r7, #0]
	totalpiclen = (abs(xe-xs)+1)*(abs(ye-ys)+1);
 80178ea:	687a      	ldr	r2, [r7, #4]
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	1ad3      	subs	r3, r2, r3
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	bfb8      	it	lt
 80178f4:	425b      	neglt	r3, r3
 80178f6:	3301      	adds	r3, #1
 80178f8:	6839      	ldr	r1, [r7, #0]
 80178fa:	68ba      	ldr	r2, [r7, #8]
 80178fc:	1a8a      	subs	r2, r1, r2
 80178fe:	2a00      	cmp	r2, #0
 8017900:	bfb8      	it	lt
 8017902:	4252      	neglt	r2, r2
 8017904:	3201      	adds	r2, #1
 8017906:	fb02 f303 	mul.w	r3, r2, r3
 801790a:	4a10      	ldr	r2, [pc, #64]	; (801794c <TFT_startPicture+0x70>)
 801790c:	6013      	str	r3, [r2, #0]

	if(totalpiclen <= 0 || totalpiclen > (800*480)) return;
 801790e:	4b0f      	ldr	r3, [pc, #60]	; (801794c <TFT_startPicture+0x70>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	dd16      	ble.n	8017944 <TFT_startPicture+0x68>
 8017916:	4b0d      	ldr	r3, [pc, #52]	; (801794c <TFT_startPicture+0x70>)
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	4a0d      	ldr	r2, [pc, #52]	; (8017950 <TFT_startPicture+0x74>)
 801791c:	4293      	cmp	r3, r2
 801791e:	dc11      	bgt.n	8017944 <TFT_startPicture+0x68>


	TFT_setRegion(xs, ys, xe, ye);
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	687a      	ldr	r2, [r7, #4]
 8017924:	68b9      	ldr	r1, [r7, #8]
 8017926:	68f8      	ldr	r0, [r7, #12]
 8017928:	f7ff ff30 	bl	801778c <TFT_setRegion>

	// für diese Bildausgabe stelle x=0 und y=0 auf links unten
	TFT_REG = 0x36;
 801792c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8017930:	2236      	movs	r2, #54	; 0x36
 8017932:	801a      	strh	r2, [r3, #0]
	TFT_RAM = 0x82;
 8017934:	4b07      	ldr	r3, [pc, #28]	; (8017954 <TFT_startPicture+0x78>)
 8017936:	2282      	movs	r2, #130	; 0x82
 8017938:	801a      	strh	r2, [r3, #0]

	TFT_REG=0x2C;
 801793a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801793e:	222c      	movs	r2, #44	; 0x2c
 8017940:	801a      	strh	r2, [r3, #0]
 8017942:	e000      	b.n	8017946 <TFT_startPicture+0x6a>
	if(totalpiclen <= 0 || totalpiclen > (800*480)) return;
 8017944:	bf00      	nop
}
 8017946:	3710      	adds	r7, #16
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}
 801794c:	20002788 	.word	0x20002788
 8017950:	0005dc00 	.word	0x0005dc00
 8017954:	60020000 	.word	0x60020000

08017958 <TFT_SetPixel>:
		TFT_RAM = rgb;
	}
}

void TFT_SetPixel(int x, int y, unsigned int rgb)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b084      	sub	sp, #16
 801795c:	af00      	add	r7, sp, #0
 801795e:	60f8      	str	r0, [r7, #12]
 8017960:	60b9      	str	r1, [r7, #8]
 8017962:	607a      	str	r2, [r7, #4]
	TFT_setRegion(x, y, x, y);
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	68fa      	ldr	r2, [r7, #12]
 8017968:	68b9      	ldr	r1, [r7, #8]
 801796a:	68f8      	ldr	r0, [r7, #12]
 801796c:	f7ff ff0e 	bl	801778c <TFT_setRegion>

	TFT_REG=0x2C;
 8017970:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8017974:	222c      	movs	r2, #44	; 0x2c
 8017976:	801a      	strh	r2, [r3, #0]
   	TFT_RAM = rgb;
 8017978:	4b03      	ldr	r3, [pc, #12]	; (8017988 <TFT_SetPixel+0x30>)
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	b292      	uxth	r2, r2
 801797e:	801a      	strh	r2, [r3, #0]
}
 8017980:	bf00      	nop
 8017982:	3710      	adds	r7, #16
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}
 8017988:	60020000 	.word	0x60020000

0801798c <TFT_Hor_Line>:

void TFT_Hor_Line(int xs, int xe, int y, unsigned int rgb, unsigned int brgb, int linewidth, int pattern)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b086      	sub	sp, #24
 8017990:	af00      	add	r7, sp, #0
 8017992:	60f8      	str	r0, [r7, #12]
 8017994:	60b9      	str	r1, [r7, #8]
 8017996:	607a      	str	r2, [r7, #4]
 8017998:	603b      	str	r3, [r7, #0]
int i;

	TFT_setRegion(xs, y, xe, y+linewidth-1);
 801799a:	687a      	ldr	r2, [r7, #4]
 801799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799e:	4413      	add	r3, r2
 80179a0:	3b01      	subs	r3, #1
 80179a2:	68ba      	ldr	r2, [r7, #8]
 80179a4:	6879      	ldr	r1, [r7, #4]
 80179a6:	68f8      	ldr	r0, [r7, #12]
 80179a8:	f7ff fef0 	bl	801778c <TFT_setRegion>

	TFT_REG=0x2C;
 80179ac:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80179b0:	222c      	movs	r2, #44	; 0x2c
 80179b2:	801a      	strh	r2, [r3, #0]

	for(i=0; i<(xe-xs)*linewidth; i++)
 80179b4:	2300      	movs	r3, #0
 80179b6:	617b      	str	r3, [r7, #20]
 80179b8:	e028      	b.n	8017a0c <TFT_Hor_Line+0x80>
	{
		if(pattern != 0)
 80179ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d01e      	beq.n	80179fe <TFT_Hor_Line+0x72>
		{
			// punktierte Line
			if(!(i%pattern) || !((i-1)%pattern)) // immer 2 Punkte, da Einzelpunkte bei dem Display zum Flackern neigen
 80179c0:	697b      	ldr	r3, [r7, #20]
 80179c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80179c4:	fb93 f2f2 	sdiv	r2, r3, r2
 80179c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80179ca:	fb01 f202 	mul.w	r2, r1, r2
 80179ce:	1a9b      	subs	r3, r3, r2
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d00a      	beq.n	80179ea <TFT_Hor_Line+0x5e>
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	3b01      	subs	r3, #1
 80179d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80179da:	fb93 f2f2 	sdiv	r2, r3, r2
 80179de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80179e0:	fb01 f202 	mul.w	r2, r1, r2
 80179e4:	1a9b      	subs	r3, r3, r2
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d104      	bne.n	80179f4 <TFT_Hor_Line+0x68>
				TFT_RAM = rgb;
 80179ea:	4b0f      	ldr	r3, [pc, #60]	; (8017a28 <TFT_Hor_Line+0x9c>)
 80179ec:	683a      	ldr	r2, [r7, #0]
 80179ee:	b292      	uxth	r2, r2
 80179f0:	801a      	strh	r2, [r3, #0]
 80179f2:	e008      	b.n	8017a06 <TFT_Hor_Line+0x7a>
			else
				TFT_RAM = brgb;
 80179f4:	4b0c      	ldr	r3, [pc, #48]	; (8017a28 <TFT_Hor_Line+0x9c>)
 80179f6:	6a3a      	ldr	r2, [r7, #32]
 80179f8:	b292      	uxth	r2, r2
 80179fa:	801a      	strh	r2, [r3, #0]
 80179fc:	e003      	b.n	8017a06 <TFT_Hor_Line+0x7a>
		}
		else					// durchgezogene Linie
			TFT_RAM = rgb;
 80179fe:	4b0a      	ldr	r3, [pc, #40]	; (8017a28 <TFT_Hor_Line+0x9c>)
 8017a00:	683a      	ldr	r2, [r7, #0]
 8017a02:	b292      	uxth	r2, r2
 8017a04:	801a      	strh	r2, [r3, #0]
	for(i=0; i<(xe-xs)*linewidth; i++)
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	3301      	adds	r3, #1
 8017a0a:	617b      	str	r3, [r7, #20]
 8017a0c:	68ba      	ldr	r2, [r7, #8]
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	1ad3      	subs	r3, r2, r3
 8017a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a14:	fb02 f303 	mul.w	r3, r2, r3
 8017a18:	697a      	ldr	r2, [r7, #20]
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	dbcd      	blt.n	80179ba <TFT_Hor_Line+0x2e>
	}
}
 8017a1e:	bf00      	nop
 8017a20:	3718      	adds	r7, #24
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}
 8017a26:	bf00      	nop
 8017a28:	60020000 	.word	0x60020000

08017a2c <TFT_Vert_Line>:

void TFT_Vert_Line(int x, int ys, int ye, unsigned int rgb, unsigned int brgb, int linewidth, int pattern)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b086      	sub	sp, #24
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	607a      	str	r2, [r7, #4]
 8017a38:	603b      	str	r3, [r7, #0]
int i;

	if(ye < ys)
 8017a3a:	687a      	ldr	r2, [r7, #4]
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	da05      	bge.n	8017a4e <TFT_Vert_Line+0x22>
	{
		int h=ye;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	613b      	str	r3, [r7, #16]
		ye = ys;
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	607b      	str	r3, [r7, #4]
		ys = h;
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	60bb      	str	r3, [r7, #8]
	}

	TFT_setRegion(x, ys, x+linewidth-1, ye);
 8017a4e:	68fa      	ldr	r2, [r7, #12]
 8017a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a52:	4413      	add	r3, r2
 8017a54:	1e5a      	subs	r2, r3, #1
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	68b9      	ldr	r1, [r7, #8]
 8017a5a:	68f8      	ldr	r0, [r7, #12]
 8017a5c:	f7ff fe96 	bl	801778c <TFT_setRegion>

	TFT_REG=0x2C;
 8017a60:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8017a64:	222c      	movs	r2, #44	; 0x2c
 8017a66:	801a      	strh	r2, [r3, #0]

	for(i=0; i<(ye-ys)*linewidth; i++)
 8017a68:	2300      	movs	r3, #0
 8017a6a:	617b      	str	r3, [r7, #20]
 8017a6c:	e028      	b.n	8017ac0 <TFT_Vert_Line+0x94>
	{
		if(pattern != 0)
 8017a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d01e      	beq.n	8017ab2 <TFT_Vert_Line+0x86>
		{
			// punktierte Line
			if(!(i%pattern) || !((i-1)%pattern)) // immer 2 Punkte, da Einzelpunkte bei dem Display zum Flackern neigen
 8017a74:	697b      	ldr	r3, [r7, #20]
 8017a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a78:	fb93 f2f2 	sdiv	r2, r3, r2
 8017a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a7e:	fb01 f202 	mul.w	r2, r1, r2
 8017a82:	1a9b      	subs	r3, r3, r2
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d00a      	beq.n	8017a9e <TFT_Vert_Line+0x72>
 8017a88:	697b      	ldr	r3, [r7, #20]
 8017a8a:	3b01      	subs	r3, #1
 8017a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a8e:	fb93 f2f2 	sdiv	r2, r3, r2
 8017a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a94:	fb01 f202 	mul.w	r2, r1, r2
 8017a98:	1a9b      	subs	r3, r3, r2
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d104      	bne.n	8017aa8 <TFT_Vert_Line+0x7c>
				TFT_RAM = rgb;
 8017a9e:	4b0f      	ldr	r3, [pc, #60]	; (8017adc <TFT_Vert_Line+0xb0>)
 8017aa0:	683a      	ldr	r2, [r7, #0]
 8017aa2:	b292      	uxth	r2, r2
 8017aa4:	801a      	strh	r2, [r3, #0]
 8017aa6:	e008      	b.n	8017aba <TFT_Vert_Line+0x8e>
			else
				TFT_RAM = brgb;
 8017aa8:	4b0c      	ldr	r3, [pc, #48]	; (8017adc <TFT_Vert_Line+0xb0>)
 8017aaa:	6a3a      	ldr	r2, [r7, #32]
 8017aac:	b292      	uxth	r2, r2
 8017aae:	801a      	strh	r2, [r3, #0]
 8017ab0:	e003      	b.n	8017aba <TFT_Vert_Line+0x8e>
		}
		else					// durchgezogene Linie
			TFT_RAM = rgb;
 8017ab2:	4b0a      	ldr	r3, [pc, #40]	; (8017adc <TFT_Vert_Line+0xb0>)
 8017ab4:	683a      	ldr	r2, [r7, #0]
 8017ab6:	b292      	uxth	r2, r2
 8017ab8:	801a      	strh	r2, [r3, #0]
	for(i=0; i<(ye-ys)*linewidth; i++)
 8017aba:	697b      	ldr	r3, [r7, #20]
 8017abc:	3301      	adds	r3, #1
 8017abe:	617b      	str	r3, [r7, #20]
 8017ac0:	687a      	ldr	r2, [r7, #4]
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	1ad3      	subs	r3, r2, r3
 8017ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ac8:	fb02 f303 	mul.w	r3, r2, r3
 8017acc:	697a      	ldr	r2, [r7, #20]
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	dbcd      	blt.n	8017a6e <TFT_Vert_Line+0x42>
	}
}
 8017ad2:	bf00      	nop
 8017ad4:	3718      	adds	r7, #24
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd80      	pop	{r7, pc}
 8017ada:	bf00      	nop
 8017adc:	60020000 	.word	0x60020000

08017ae0 <TFT_DrawLine>:

void TFT_DrawLine(int x0,int y0,int x1,int y1, unsigned int rgb, int linewidth)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b08c      	sub	sp, #48	; 0x30
 8017ae4:	af02      	add	r7, sp, #8
 8017ae6:	60f8      	str	r0, [r7, #12]
 8017ae8:	60b9      	str	r1, [r7, #8]
 8017aea:	607a      	str	r2, [r7, #4]
 8017aec:	603b      	str	r3, [r7, #0]
int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	1ad3      	subs	r3, r2, r3
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	bfb8      	it	lt
 8017af8:	425b      	neglt	r3, r3
 8017afa:	623b      	str	r3, [r7, #32]
 8017afc:	68fa      	ldr	r2, [r7, #12]
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	429a      	cmp	r2, r3
 8017b02:	da01      	bge.n	8017b08 <TFT_DrawLine+0x28>
 8017b04:	2301      	movs	r3, #1
 8017b06:	e001      	b.n	8017b0c <TFT_DrawLine+0x2c>
 8017b08:	f04f 33ff 	mov.w	r3, #4294967295
 8017b0c:	61fb      	str	r3, [r7, #28]
int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
 8017b0e:	683a      	ldr	r2, [r7, #0]
 8017b10:	68bb      	ldr	r3, [r7, #8]
 8017b12:	1ad3      	subs	r3, r2, r3
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	bfb8      	it	lt
 8017b18:	425b      	neglt	r3, r3
 8017b1a:	61bb      	str	r3, [r7, #24]
 8017b1c:	68ba      	ldr	r2, [r7, #8]
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	429a      	cmp	r2, r3
 8017b22:	da01      	bge.n	8017b28 <TFT_DrawLine+0x48>
 8017b24:	2301      	movs	r3, #1
 8017b26:	e001      	b.n	8017b2c <TFT_DrawLine+0x4c>
 8017b28:	f04f 33ff 	mov.w	r3, #4294967295
 8017b2c:	617b      	str	r3, [r7, #20]
int err = (dx>dy ? dx : -dy)/2, e2;
 8017b2e:	6a3a      	ldr	r2, [r7, #32]
 8017b30:	69bb      	ldr	r3, [r7, #24]
 8017b32:	429a      	cmp	r2, r3
 8017b34:	dc05      	bgt.n	8017b42 <TFT_DrawLine+0x62>
 8017b36:	69bb      	ldr	r3, [r7, #24]
 8017b38:	425b      	negs	r3, r3
 8017b3a:	0fda      	lsrs	r2, r3, #31
 8017b3c:	4413      	add	r3, r2
 8017b3e:	105b      	asrs	r3, r3, #1
 8017b40:	e003      	b.n	8017b4a <TFT_DrawLine+0x6a>
 8017b42:	6a3b      	ldr	r3, [r7, #32]
 8017b44:	0fda      	lsrs	r2, r3, #31
 8017b46:	4413      	add	r3, r2
 8017b48:	105b      	asrs	r3, r3, #1
 8017b4a:	627b      	str	r3, [r7, #36]	; 0x24

	while(1)
	{
		if(linewidth == 1)
 8017b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b4e:	2b01      	cmp	r3, #1
 8017b50:	d105      	bne.n	8017b5e <TFT_DrawLine+0x7e>
			TFT_SetPixel(x0,y0,rgb);
 8017b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b54:	68b9      	ldr	r1, [r7, #8]
 8017b56:	68f8      	ldr	r0, [r7, #12]
 8017b58:	f7ff fefe 	bl	8017958 <TFT_SetPixel>
 8017b5c:	e00f      	b.n	8017b7e <TFT_DrawLine+0x9e>
		else
			TFT_Fill_Rectangle(x0, y0, x0+linewidth-1, y0+linewidth-1, rgb);
 8017b5e:	68fa      	ldr	r2, [r7, #12]
 8017b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b62:	4413      	add	r3, r2
 8017b64:	1e59      	subs	r1, r3, #1
 8017b66:	68ba      	ldr	r2, [r7, #8]
 8017b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b6a:	4413      	add	r3, r2
 8017b6c:	1e5a      	subs	r2, r3, #1
 8017b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b70:	9300      	str	r3, [sp, #0]
 8017b72:	4613      	mov	r3, r2
 8017b74:	460a      	mov	r2, r1
 8017b76:	68b9      	ldr	r1, [r7, #8]
 8017b78:	68f8      	ldr	r0, [r7, #12]
 8017b7a:	f7ff fe5d 	bl	8017838 <TFT_Fill_Rectangle>

		if (x0==x1 && y0==y1) break;
 8017b7e:	68fa      	ldr	r2, [r7, #12]
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	429a      	cmp	r2, r3
 8017b84:	d103      	bne.n	8017b8e <TFT_DrawLine+0xae>
 8017b86:	68ba      	ldr	r2, [r7, #8]
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	d01b      	beq.n	8017bc6 <TFT_DrawLine+0xe6>
		e2 = err;
 8017b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b90:	613b      	str	r3, [r7, #16]
		if (e2 >-dx) { err -= dy; x0 += sx; }
 8017b92:	6a3b      	ldr	r3, [r7, #32]
 8017b94:	425b      	negs	r3, r3
 8017b96:	693a      	ldr	r2, [r7, #16]
 8017b98:	429a      	cmp	r2, r3
 8017b9a:	dd07      	ble.n	8017bac <TFT_DrawLine+0xcc>
 8017b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	1ad3      	subs	r3, r2, r3
 8017ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8017ba4:	68fa      	ldr	r2, [r7, #12]
 8017ba6:	69fb      	ldr	r3, [r7, #28]
 8017ba8:	4413      	add	r3, r2
 8017baa:	60fb      	str	r3, [r7, #12]
		if (e2 < dy) { err += dx; y0 += sy; }
 8017bac:	693a      	ldr	r2, [r7, #16]
 8017bae:	69bb      	ldr	r3, [r7, #24]
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	dacb      	bge.n	8017b4c <TFT_DrawLine+0x6c>
 8017bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bb6:	6a3b      	ldr	r3, [r7, #32]
 8017bb8:	4413      	add	r3, r2
 8017bba:	627b      	str	r3, [r7, #36]	; 0x24
 8017bbc:	68ba      	ldr	r2, [r7, #8]
 8017bbe:	697b      	ldr	r3, [r7, #20]
 8017bc0:	4413      	add	r3, r2
 8017bc2:	60bb      	str	r3, [r7, #8]
		if(linewidth == 1)
 8017bc4:	e7c2      	b.n	8017b4c <TFT_DrawLine+0x6c>
		if (x0==x1 && y0==y1) break;
 8017bc6:	bf00      	nop
	}
}
 8017bc8:	bf00      	nop
 8017bca:	3728      	adds	r7, #40	; 0x28
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd80      	pop	{r7, pc}

08017bd0 <TFT_SetPixelSafeBG>:
#define PIXELLINES	8
uint16_t storageBG[PIXELLINES][MAXBGSTORAGE];
int pixnum[PIXELLINES] = {-1,-1,-1,-1};		// Zähler für die Pixelnummer

void TFT_SetPixelSafeBG(int x, int y, int rgb, int linenum)
{
 8017bd0:	b590      	push	{r4, r7, lr}
 8017bd2:	b085      	sub	sp, #20
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	60b9      	str	r1, [r7, #8]
 8017bda:	607a      	str	r2, [r7, #4]
 8017bdc:	603b      	str	r3, [r7, #0]
	TFT_setRegion(x, y, x, y);
 8017bde:	68bb      	ldr	r3, [r7, #8]
 8017be0:	68fa      	ldr	r2, [r7, #12]
 8017be2:	68b9      	ldr	r1, [r7, #8]
 8017be4:	68f8      	ldr	r0, [r7, #12]
 8017be6:	f7ff fdd1 	bl	801778c <TFT_setRegion>

	// Lese Wert des aktuellen Pixels
	TFT_REG=0x2E;
 8017bea:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8017bee:	222e      	movs	r2, #46	; 0x2e
 8017bf0:	801a      	strh	r2, [r3, #0]
	storageBG[linenum][pixnum[linenum]] = TFT_RAM;
 8017bf2:	4a16      	ldr	r2, [pc, #88]	; (8017c4c <TFT_SetPixelSafeBG+0x7c>)
 8017bf4:	4916      	ldr	r1, [pc, #88]	; (8017c50 <TFT_SetPixelSafeBG+0x80>)
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8017bfc:	8812      	ldrh	r2, [r2, #0]
 8017bfe:	b294      	uxth	r4, r2
 8017c00:	4914      	ldr	r1, [pc, #80]	; (8017c54 <TFT_SetPixelSafeBG+0x84>)
 8017c02:	683a      	ldr	r2, [r7, #0]
 8017c04:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8017c08:	fb00 f202 	mul.w	r2, r0, r2
 8017c0c:	4413      	add	r3, r2
 8017c0e:	4622      	mov	r2, r4
 8017c10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if(pixnum[linenum] < MAXBGSTORAGE) pixnum[linenum]++;
 8017c14:	4a0e      	ldr	r2, [pc, #56]	; (8017c50 <TFT_SetPixelSafeBG+0x80>)
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c1c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8017c20:	da08      	bge.n	8017c34 <TFT_SetPixelSafeBG+0x64>
 8017c22:	4a0b      	ldr	r2, [pc, #44]	; (8017c50 <TFT_SetPixelSafeBG+0x80>)
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c2a:	1c5a      	adds	r2, r3, #1
 8017c2c:	4908      	ldr	r1, [pc, #32]	; (8017c50 <TFT_SetPixelSafeBG+0x80>)
 8017c2e:	683b      	ldr	r3, [r7, #0]
 8017c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// setze das Pixel neu
	TFT_REG=0x2C;
 8017c34:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8017c38:	222c      	movs	r2, #44	; 0x2c
 8017c3a:	801a      	strh	r2, [r3, #0]
   	TFT_RAM = rgb;
 8017c3c:	4b03      	ldr	r3, [pc, #12]	; (8017c4c <TFT_SetPixelSafeBG+0x7c>)
 8017c3e:	687a      	ldr	r2, [r7, #4]
 8017c40:	b292      	uxth	r2, r2
 8017c42:	801a      	strh	r2, [r3, #0]
}
 8017c44:	bf00      	nop
 8017c46:	3714      	adds	r7, #20
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd90      	pop	{r4, r7, pc}
 8017c4c:	60020000 	.word	0x60020000
 8017c50:	20001b18 	.word	0x20001b18
 8017c54:	2000576c 	.word	0x2000576c

08017c58 <TFT_DrawLine_aboveY>:
int lastline_y1[PIXELLINES];
int last_linewidth;
int last_aboveY;

void TFT_DrawLine_aboveY(int x0,int y0,int x1,int y1, int aboveY, unsigned int rgb, int linewidth, int linenum)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b08a      	sub	sp, #40	; 0x28
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	60f8      	str	r0, [r7, #12]
 8017c60:	60b9      	str	r1, [r7, #8]
 8017c62:	607a      	str	r2, [r7, #4]
 8017c64:	603b      	str	r3, [r7, #0]
	int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	1ad3      	subs	r3, r2, r3
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	bfb8      	it	lt
 8017c70:	425b      	neglt	r3, r3
 8017c72:	623b      	str	r3, [r7, #32]
 8017c74:	68fa      	ldr	r2, [r7, #12]
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	da01      	bge.n	8017c80 <TFT_DrawLine_aboveY+0x28>
 8017c7c:	2301      	movs	r3, #1
 8017c7e:	e001      	b.n	8017c84 <TFT_DrawLine_aboveY+0x2c>
 8017c80:	f04f 33ff 	mov.w	r3, #4294967295
 8017c84:	61fb      	str	r3, [r7, #28]
	int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
 8017c86:	683a      	ldr	r2, [r7, #0]
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	1ad3      	subs	r3, r2, r3
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	bfb8      	it	lt
 8017c90:	425b      	neglt	r3, r3
 8017c92:	61bb      	str	r3, [r7, #24]
 8017c94:	68ba      	ldr	r2, [r7, #8]
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	429a      	cmp	r2, r3
 8017c9a:	da01      	bge.n	8017ca0 <TFT_DrawLine_aboveY+0x48>
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	e001      	b.n	8017ca4 <TFT_DrawLine_aboveY+0x4c>
 8017ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ca4:	617b      	str	r3, [r7, #20]
	int err = (dx>dy ? dx : -dy)/2, e2;
 8017ca6:	6a3a      	ldr	r2, [r7, #32]
 8017ca8:	69bb      	ldr	r3, [r7, #24]
 8017caa:	429a      	cmp	r2, r3
 8017cac:	dc05      	bgt.n	8017cba <TFT_DrawLine_aboveY+0x62>
 8017cae:	69bb      	ldr	r3, [r7, #24]
 8017cb0:	425b      	negs	r3, r3
 8017cb2:	0fda      	lsrs	r2, r3, #31
 8017cb4:	4413      	add	r3, r2
 8017cb6:	105b      	asrs	r3, r3, #1
 8017cb8:	e003      	b.n	8017cc2 <TFT_DrawLine_aboveY+0x6a>
 8017cba:	6a3b      	ldr	r3, [r7, #32]
 8017cbc:	0fda      	lsrs	r2, r3, #31
 8017cbe:	4413      	add	r3, r2
 8017cc0:	105b      	asrs	r3, r3, #1
 8017cc2:	627b      	str	r3, [r7, #36]	; 0x24

	// speichere aktuelle Line
	lastline_x0[linenum] = x0;
 8017cc4:	4928      	ldr	r1, [pc, #160]	; (8017d68 <TFT_DrawLine_aboveY+0x110>)
 8017cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cc8:	68fa      	ldr	r2, [r7, #12]
 8017cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastline_x1[linenum] = x1;
 8017cce:	4927      	ldr	r1, [pc, #156]	; (8017d6c <TFT_DrawLine_aboveY+0x114>)
 8017cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cd2:	687a      	ldr	r2, [r7, #4]
 8017cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastline_y0[linenum] = y0;
 8017cd8:	4925      	ldr	r1, [pc, #148]	; (8017d70 <TFT_DrawLine_aboveY+0x118>)
 8017cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cdc:	68ba      	ldr	r2, [r7, #8]
 8017cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastline_y1[linenum] = y1;
 8017ce2:	4924      	ldr	r1, [pc, #144]	; (8017d74 <TFT_DrawLine_aboveY+0x11c>)
 8017ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ce6:	683a      	ldr	r2, [r7, #0]
 8017ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	last_linewidth = linewidth;
 8017cec:	4a22      	ldr	r2, [pc, #136]	; (8017d78 <TFT_DrawLine_aboveY+0x120>)
 8017cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf0:	6013      	str	r3, [r2, #0]
	last_aboveY = aboveY;
 8017cf2:	4a22      	ldr	r2, [pc, #136]	; (8017d7c <TFT_DrawLine_aboveY+0x124>)
 8017cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf6:	6013      	str	r3, [r2, #0]

	pixnum[linenum] = 0;
 8017cf8:	4a21      	ldr	r2, [pc, #132]	; (8017d80 <TFT_DrawLine_aboveY+0x128>)
 8017cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cfc:	2100      	movs	r1, #0
 8017cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while(1)
	{
		if(y0 < aboveY)
 8017d02:	68ba      	ldr	r2, [r7, #8]
 8017d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d06:	429a      	cmp	r2, r3
 8017d08:	da05      	bge.n	8017d16 <TFT_DrawLine_aboveY+0xbe>
		{
			TFT_SetPixelSafeBG(x0,y0,rgb,linenum);
 8017d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d0e:	68b9      	ldr	r1, [r7, #8]
 8017d10:	68f8      	ldr	r0, [r7, #12]
 8017d12:	f7ff ff5d 	bl	8017bd0 <TFT_SetPixelSafeBG>
		}
		if (x0==x1 && y0==y1) break;
 8017d16:	68fa      	ldr	r2, [r7, #12]
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	429a      	cmp	r2, r3
 8017d1c:	d103      	bne.n	8017d26 <TFT_DrawLine_aboveY+0xce>
 8017d1e:	68ba      	ldr	r2, [r7, #8]
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d01b      	beq.n	8017d5e <TFT_DrawLine_aboveY+0x106>
		e2 = err;
 8017d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d28:	613b      	str	r3, [r7, #16]
		if (e2 >-dx) { err -= dy; x0 += sx; }
 8017d2a:	6a3b      	ldr	r3, [r7, #32]
 8017d2c:	425b      	negs	r3, r3
 8017d2e:	693a      	ldr	r2, [r7, #16]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	dd07      	ble.n	8017d44 <TFT_DrawLine_aboveY+0xec>
 8017d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d36:	69bb      	ldr	r3, [r7, #24]
 8017d38:	1ad3      	subs	r3, r2, r3
 8017d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8017d3c:	68fa      	ldr	r2, [r7, #12]
 8017d3e:	69fb      	ldr	r3, [r7, #28]
 8017d40:	4413      	add	r3, r2
 8017d42:	60fb      	str	r3, [r7, #12]
		if (e2 < dy) { err += dx; y0 += sy; }
 8017d44:	693a      	ldr	r2, [r7, #16]
 8017d46:	69bb      	ldr	r3, [r7, #24]
 8017d48:	429a      	cmp	r2, r3
 8017d4a:	dada      	bge.n	8017d02 <TFT_DrawLine_aboveY+0xaa>
 8017d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d4e:	6a3b      	ldr	r3, [r7, #32]
 8017d50:	4413      	add	r3, r2
 8017d52:	627b      	str	r3, [r7, #36]	; 0x24
 8017d54:	68ba      	ldr	r2, [r7, #8]
 8017d56:	697b      	ldr	r3, [r7, #20]
 8017d58:	4413      	add	r3, r2
 8017d5a:	60bb      	str	r3, [r7, #8]
		if(y0 < aboveY)
 8017d5c:	e7d1      	b.n	8017d02 <TFT_DrawLine_aboveY+0xaa>
		if (x0==x1 && y0==y1) break;
 8017d5e:	bf00      	nop
	}
}
 8017d60:	bf00      	nop
 8017d62:	3728      	adds	r7, #40	; 0x28
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}
 8017d68:	200056e4 	.word	0x200056e4
 8017d6c:	20005728 	.word	0x20005728
 8017d70:	2000574c 	.word	0x2000574c
 8017d74:	20005708 	.word	0x20005708
 8017d78:	20005704 	.word	0x20005704
 8017d7c:	20005748 	.word	0x20005748
 8017d80:	20001b18 	.word	0x20001b18

08017d84 <TFT_DeleteLastLine>:

// ersetze letzte Linie mit Hintergrund
void TFT_DeleteLastLine(int linenum)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b08c      	sub	sp, #48	; 0x30
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
	if(pixnum[linenum] == -1) return;
 8017d8c:	4a50      	ldr	r2, [pc, #320]	; (8017ed0 <TFT_DeleteLastLine+0x14c>)
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d98:	f000 8093 	beq.w	8017ec2 <TFT_DeleteLastLine+0x13e>

int x0 = lastline_x0[linenum];
 8017d9c:	4a4d      	ldr	r2, [pc, #308]	; (8017ed4 <TFT_DeleteLastLine+0x150>)
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017da4:	62fb      	str	r3, [r7, #44]	; 0x2c
int x1 = lastline_x1[linenum];
 8017da6:	4a4c      	ldr	r2, [pc, #304]	; (8017ed8 <TFT_DeleteLastLine+0x154>)
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017dae:	623b      	str	r3, [r7, #32]
int y0 = lastline_y0[linenum];
 8017db0:	4a4a      	ldr	r2, [pc, #296]	; (8017edc <TFT_DeleteLastLine+0x158>)
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017db8:	62bb      	str	r3, [r7, #40]	; 0x28
int y1 = lastline_y1[linenum];
 8017dba:	4a49      	ldr	r2, [pc, #292]	; (8017ee0 <TFT_DeleteLastLine+0x15c>)
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017dc2:	61fb      	str	r3, [r7, #28]

int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
 8017dc4:	6a3a      	ldr	r2, [r7, #32]
 8017dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc8:	1ad3      	subs	r3, r2, r3
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	bfb8      	it	lt
 8017dce:	425b      	neglt	r3, r3
 8017dd0:	61bb      	str	r3, [r7, #24]
 8017dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017dd4:	6a3b      	ldr	r3, [r7, #32]
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	da01      	bge.n	8017dde <TFT_DeleteLastLine+0x5a>
 8017dda:	2301      	movs	r3, #1
 8017ddc:	e001      	b.n	8017de2 <TFT_DeleteLastLine+0x5e>
 8017dde:	f04f 33ff 	mov.w	r3, #4294967295
 8017de2:	617b      	str	r3, [r7, #20]
int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
 8017de4:	69fa      	ldr	r2, [r7, #28]
 8017de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de8:	1ad3      	subs	r3, r2, r3
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	bfb8      	it	lt
 8017dee:	425b      	neglt	r3, r3
 8017df0:	613b      	str	r3, [r7, #16]
 8017df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017df4:	69fb      	ldr	r3, [r7, #28]
 8017df6:	429a      	cmp	r2, r3
 8017df8:	da01      	bge.n	8017dfe <TFT_DeleteLastLine+0x7a>
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	e001      	b.n	8017e02 <TFT_DeleteLastLine+0x7e>
 8017dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8017e02:	60fb      	str	r3, [r7, #12]
int err = (dx>dy ? dx : -dy)/2, e2;
 8017e04:	69ba      	ldr	r2, [r7, #24]
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	dc05      	bgt.n	8017e18 <TFT_DeleteLastLine+0x94>
 8017e0c:	693b      	ldr	r3, [r7, #16]
 8017e0e:	425b      	negs	r3, r3
 8017e10:	0fda      	lsrs	r2, r3, #31
 8017e12:	4413      	add	r3, r2
 8017e14:	105b      	asrs	r3, r3, #1
 8017e16:	e003      	b.n	8017e20 <TFT_DeleteLastLine+0x9c>
 8017e18:	69bb      	ldr	r3, [r7, #24]
 8017e1a:	0fda      	lsrs	r2, r3, #31
 8017e1c:	4413      	add	r3, r2
 8017e1e:	105b      	asrs	r3, r3, #1
 8017e20:	627b      	str	r3, [r7, #36]	; 0x24

	pixnum[linenum] = 0;
 8017e22:	4a2b      	ldr	r2, [pc, #172]	; (8017ed0 <TFT_DeleteLastLine+0x14c>)
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	2100      	movs	r1, #0
 8017e28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	while(1)
	{
		if(y0 < last_aboveY)
 8017e2c:	4b2d      	ldr	r3, [pc, #180]	; (8017ee4 <TFT_DeleteLastLine+0x160>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e32:	429a      	cmp	r2, r3
 8017e34:	da21      	bge.n	8017e7a <TFT_DeleteLastLine+0xf6>
		{
			TFT_SetPixel(x0,y0,storageBG[linenum][pixnum[linenum]]);
 8017e36:	4a26      	ldr	r2, [pc, #152]	; (8017ed0 <TFT_DeleteLastLine+0x14c>)
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e3e:	492a      	ldr	r1, [pc, #168]	; (8017ee8 <TFT_DeleteLastLine+0x164>)
 8017e40:	687a      	ldr	r2, [r7, #4]
 8017e42:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8017e46:	fb00 f202 	mul.w	r2, r0, r2
 8017e4a:	4413      	add	r3, r2
 8017e4c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017e50:	461a      	mov	r2, r3
 8017e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e56:	f7ff fd7f 	bl	8017958 <TFT_SetPixel>
			if(pixnum[linenum] < MAXBGSTORAGE) pixnum[linenum]++;
 8017e5a:	4a1d      	ldr	r2, [pc, #116]	; (8017ed0 <TFT_DeleteLastLine+0x14c>)
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e62:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8017e66:	da08      	bge.n	8017e7a <TFT_DeleteLastLine+0xf6>
 8017e68:	4a19      	ldr	r2, [pc, #100]	; (8017ed0 <TFT_DeleteLastLine+0x14c>)
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e70:	1c5a      	adds	r2, r3, #1
 8017e72:	4917      	ldr	r1, [pc, #92]	; (8017ed0 <TFT_DeleteLastLine+0x14c>)
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (x0==x1 && y0==y1) break;
 8017e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e7c:	6a3b      	ldr	r3, [r7, #32]
 8017e7e:	429a      	cmp	r2, r3
 8017e80:	d103      	bne.n	8017e8a <TFT_DeleteLastLine+0x106>
 8017e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e84:	69fb      	ldr	r3, [r7, #28]
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d01d      	beq.n	8017ec6 <TFT_DeleteLastLine+0x142>
		e2 = err;
 8017e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8c:	60bb      	str	r3, [r7, #8]
		if (e2 >-dx) { err -= dy; x0 += sx; }
 8017e8e:	69bb      	ldr	r3, [r7, #24]
 8017e90:	425b      	negs	r3, r3
 8017e92:	68ba      	ldr	r2, [r7, #8]
 8017e94:	429a      	cmp	r2, r3
 8017e96:	dd07      	ble.n	8017ea8 <TFT_DeleteLastLine+0x124>
 8017e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	1ad3      	subs	r3, r2, r3
 8017e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8017ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ea2:	697b      	ldr	r3, [r7, #20]
 8017ea4:	4413      	add	r3, r2
 8017ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (e2 < dy) { err += dx; y0 += sy; }
 8017ea8:	68ba      	ldr	r2, [r7, #8]
 8017eaa:	693b      	ldr	r3, [r7, #16]
 8017eac:	429a      	cmp	r2, r3
 8017eae:	dabd      	bge.n	8017e2c <TFT_DeleteLastLine+0xa8>
 8017eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eb2:	69bb      	ldr	r3, [r7, #24]
 8017eb4:	4413      	add	r3, r2
 8017eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8017eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	4413      	add	r3, r2
 8017ebe:	62bb      	str	r3, [r7, #40]	; 0x28
		if(y0 < last_aboveY)
 8017ec0:	e7b4      	b.n	8017e2c <TFT_DeleteLastLine+0xa8>
	if(pixnum[linenum] == -1) return;
 8017ec2:	bf00      	nop
 8017ec4:	e000      	b.n	8017ec8 <TFT_DeleteLastLine+0x144>
		if (x0==x1 && y0==y1) break;
 8017ec6:	bf00      	nop
	}
}
 8017ec8:	3730      	adds	r7, #48	; 0x30
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}
 8017ece:	bf00      	nop
 8017ed0:	20001b18 	.word	0x20001b18
 8017ed4:	200056e4 	.word	0x200056e4
 8017ed8:	20005728 	.word	0x20005728
 8017edc:	2000574c 	.word	0x2000574c
 8017ee0:	20005708 	.word	0x20005708
 8017ee4:	20005748 	.word	0x20005748
 8017ee8:	2000576c 	.word	0x2000576c

08017eec <TFT_Rectangle>:

void TFT_Rectangle(int xs, int ys, int xe, int ye, unsigned int rgb, int linewidth)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b088      	sub	sp, #32
 8017ef0:	af04      	add	r7, sp, #16
 8017ef2:	60f8      	str	r0, [r7, #12]
 8017ef4:	60b9      	str	r1, [r7, #8]
 8017ef6:	607a      	str	r2, [r7, #4]
 8017ef8:	603b      	str	r3, [r7, #0]
	TFT_Hor_Line(xs+linewidth,xe+1,ys,rgb, BLACK, linewidth,0);
 8017efa:	68fa      	ldr	r2, [r7, #12]
 8017efc:	69fb      	ldr	r3, [r7, #28]
 8017efe:	18d0      	adds	r0, r2, r3
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	1c59      	adds	r1, r3, #1
 8017f04:	2300      	movs	r3, #0
 8017f06:	9302      	str	r3, [sp, #8]
 8017f08:	69fb      	ldr	r3, [r7, #28]
 8017f0a:	9301      	str	r3, [sp, #4]
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	9300      	str	r3, [sp, #0]
 8017f10:	69bb      	ldr	r3, [r7, #24]
 8017f12:	68ba      	ldr	r2, [r7, #8]
 8017f14:	f7ff fd3a 	bl	801798c <TFT_Hor_Line>
	TFT_Hor_Line(xs+linewidth,xe+linewidth-1,ye,rgb, BLACK, linewidth,0);
 8017f18:	68fa      	ldr	r2, [r7, #12]
 8017f1a:	69fb      	ldr	r3, [r7, #28]
 8017f1c:	18d0      	adds	r0, r2, r3
 8017f1e:	687a      	ldr	r2, [r7, #4]
 8017f20:	69fb      	ldr	r3, [r7, #28]
 8017f22:	4413      	add	r3, r2
 8017f24:	1e59      	subs	r1, r3, #1
 8017f26:	2300      	movs	r3, #0
 8017f28:	9302      	str	r3, [sp, #8]
 8017f2a:	69fb      	ldr	r3, [r7, #28]
 8017f2c:	9301      	str	r3, [sp, #4]
 8017f2e:	2300      	movs	r3, #0
 8017f30:	9300      	str	r3, [sp, #0]
 8017f32:	69bb      	ldr	r3, [r7, #24]
 8017f34:	683a      	ldr	r2, [r7, #0]
 8017f36:	f7ff fd29 	bl	801798c <TFT_Hor_Line>
	TFT_Vert_Line(xs,ys,ye+linewidth,rgb, BLACK, linewidth, 0);
 8017f3a:	683a      	ldr	r2, [r7, #0]
 8017f3c:	69fb      	ldr	r3, [r7, #28]
 8017f3e:	441a      	add	r2, r3
 8017f40:	2300      	movs	r3, #0
 8017f42:	9302      	str	r3, [sp, #8]
 8017f44:	69fb      	ldr	r3, [r7, #28]
 8017f46:	9301      	str	r3, [sp, #4]
 8017f48:	2300      	movs	r3, #0
 8017f4a:	9300      	str	r3, [sp, #0]
 8017f4c:	69bb      	ldr	r3, [r7, #24]
 8017f4e:	68b9      	ldr	r1, [r7, #8]
 8017f50:	68f8      	ldr	r0, [r7, #12]
 8017f52:	f7ff fd6b 	bl	8017a2c <TFT_Vert_Line>
	TFT_Vert_Line(xe,ys,ye+linewidth,rgb, BLACK, linewidth, 0);
 8017f56:	683a      	ldr	r2, [r7, #0]
 8017f58:	69fb      	ldr	r3, [r7, #28]
 8017f5a:	441a      	add	r2, r3
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	9302      	str	r3, [sp, #8]
 8017f60:	69fb      	ldr	r3, [r7, #28]
 8017f62:	9301      	str	r3, [sp, #4]
 8017f64:	2300      	movs	r3, #0
 8017f66:	9300      	str	r3, [sp, #0]
 8017f68:	69bb      	ldr	r3, [r7, #24]
 8017f6a:	68b9      	ldr	r1, [r7, #8]
 8017f6c:	6878      	ldr	r0, [r7, #4]
 8017f6e:	f7ff fd5d 	bl	8017a2c <TFT_Vert_Line>
}
 8017f72:	bf00      	nop
 8017f74:	3710      	adds	r7, #16
 8017f76:	46bd      	mov	sp, r7
 8017f78:	bd80      	pop	{r7, pc}
 8017f7a:	0000      	movs	r0, r0
 8017f7c:	0000      	movs	r0, r0
	...

08017f80 <TFT_PolarToKartesian>:
        }
    }
}

void TFT_PolarToKartesian(int r, float phi, int *x, int *y)
{
 8017f80:	b5b0      	push	{r4, r5, r7, lr}
 8017f82:	b086      	sub	sp, #24
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	60f8      	str	r0, [r7, #12]
 8017f88:	ed87 0a02 	vstr	s0, [r7, #8]
 8017f8c:	6079      	str	r1, [r7, #4]
 8017f8e:	603a      	str	r2, [r7, #0]
float fphi = (360.0-phi) * 2.0 * 3.14159 / 360.0;
 8017f90:	68b8      	ldr	r0, [r7, #8]
 8017f92:	f7f0 fa11 	bl	80083b8 <__aeabi_f2d>
 8017f96:	4603      	mov	r3, r0
 8017f98:	460c      	mov	r4, r1
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	4623      	mov	r3, r4
 8017f9e:	f04f 0000 	mov.w	r0, #0
 8017fa2:	4939      	ldr	r1, [pc, #228]	; (8018088 <TFT_PolarToKartesian+0x108>)
 8017fa4:	f7f0 f8a8 	bl	80080f8 <__aeabi_dsub>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	460c      	mov	r4, r1
 8017fac:	4618      	mov	r0, r3
 8017fae:	4621      	mov	r1, r4
 8017fb0:	4602      	mov	r2, r0
 8017fb2:	460b      	mov	r3, r1
 8017fb4:	f7f0 f8a2 	bl	80080fc <__adddf3>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	460c      	mov	r4, r1
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	4621      	mov	r1, r4
 8017fc0:	a32f      	add	r3, pc, #188	; (adr r3, 8018080 <TFT_PolarToKartesian+0x100>)
 8017fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fc6:	f7f0 fa4f 	bl	8008468 <__aeabi_dmul>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	460c      	mov	r4, r1
 8017fce:	4618      	mov	r0, r3
 8017fd0:	4621      	mov	r1, r4
 8017fd2:	f04f 0200 	mov.w	r2, #0
 8017fd6:	4b2c      	ldr	r3, [pc, #176]	; (8018088 <TFT_PolarToKartesian+0x108>)
 8017fd8:	f7f0 fb70 	bl	80086bc <__aeabi_ddiv>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	460c      	mov	r4, r1
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	4621      	mov	r1, r4
 8017fe4:	f7f0 fd18 	bl	8008a18 <__aeabi_d2f>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	617b      	str	r3, [r7, #20]

	*x = (int)((float)r * cos(fphi));
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	ee07 3a90 	vmov	s15, r3
 8017ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ff6:	ee17 0a90 	vmov	r0, s15
 8017ffa:	f7f0 f9dd 	bl	80083b8 <__aeabi_f2d>
 8017ffe:	4604      	mov	r4, r0
 8018000:	460d      	mov	r5, r1
 8018002:	6978      	ldr	r0, [r7, #20]
 8018004:	f7f0 f9d8 	bl	80083b8 <__aeabi_f2d>
 8018008:	4602      	mov	r2, r0
 801800a:	460b      	mov	r3, r1
 801800c:	ec43 2b10 	vmov	d0, r2, r3
 8018010:	f00a f8b2 	bl	8022178 <cos>
 8018014:	ec53 2b10 	vmov	r2, r3, d0
 8018018:	4620      	mov	r0, r4
 801801a:	4629      	mov	r1, r5
 801801c:	f7f0 fa24 	bl	8008468 <__aeabi_dmul>
 8018020:	4603      	mov	r3, r0
 8018022:	460c      	mov	r4, r1
 8018024:	4618      	mov	r0, r3
 8018026:	4621      	mov	r1, r4
 8018028:	f7f0 fcce 	bl	80089c8 <__aeabi_d2iz>
 801802c:	4602      	mov	r2, r0
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	601a      	str	r2, [r3, #0]
	*y = (int)((float)r * sin(fphi));
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	ee07 3a90 	vmov	s15, r3
 8018038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801803c:	ee17 0a90 	vmov	r0, s15
 8018040:	f7f0 f9ba 	bl	80083b8 <__aeabi_f2d>
 8018044:	4604      	mov	r4, r0
 8018046:	460d      	mov	r5, r1
 8018048:	6978      	ldr	r0, [r7, #20]
 801804a:	f7f0 f9b5 	bl	80083b8 <__aeabi_f2d>
 801804e:	4602      	mov	r2, r0
 8018050:	460b      	mov	r3, r1
 8018052:	ec43 2b10 	vmov	d0, r2, r3
 8018056:	f00a f8d3 	bl	8022200 <sin>
 801805a:	ec53 2b10 	vmov	r2, r3, d0
 801805e:	4620      	mov	r0, r4
 8018060:	4629      	mov	r1, r5
 8018062:	f7f0 fa01 	bl	8008468 <__aeabi_dmul>
 8018066:	4603      	mov	r3, r0
 8018068:	460c      	mov	r4, r1
 801806a:	4618      	mov	r0, r3
 801806c:	4621      	mov	r1, r4
 801806e:	f7f0 fcab 	bl	80089c8 <__aeabi_d2iz>
 8018072:	4602      	mov	r2, r0
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	601a      	str	r2, [r3, #0]
}
 8018078:	bf00      	nop
 801807a:	3718      	adds	r7, #24
 801807c:	46bd      	mov	sp, r7
 801807e:	bdb0      	pop	{r4, r5, r7, pc}
 8018080:	f01b866e 	.word	0xf01b866e
 8018084:	400921f9 	.word	0x400921f9
 8018088:	40768000 	.word	0x40768000

0801808c <copy_bmp_to_flash>:

uint32_t flashaddress = FLASHDATA_SECTOR9;
uint32_t tableaddess = BMPTABLE_SECTOR11;

void copy_bmp_to_flash()
{
 801808c:	b580      	push	{r7, lr}
 801808e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8018092:	af04      	add	r7, sp, #16
	// prüfe ob SD Karte vorhanden ist
	FATFS FatFs;
	if (f_mount(&FatFs, "", 1) != FR_OK) return;
 8018094:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8018098:	2201      	movs	r2, #1
 801809a:	496f      	ldr	r1, [pc, #444]	; (8018258 <copy_bmp_to_flash+0x1cc>)
 801809c:	4618      	mov	r0, r3
 801809e:	f005 fcf3 	bl	801da88 <f_mount>
 80180a2:	4603      	mov	r3, r0
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	f040 80d1 	bne.w	801824c <copy_bmp_to_flash+0x1c0>
	//f_mount(0, "", 1);

	DIR dir;
	FILINFO fi;
	FRESULT fr = f_findfirst (&dir, &fi, "", "*.cmp");
 80180aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80180ae:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80180b2:	4b6a      	ldr	r3, [pc, #424]	; (801825c <copy_bmp_to_flash+0x1d0>)
 80180b4:	4a68      	ldr	r2, [pc, #416]	; (8018258 <copy_bmp_to_flash+0x1cc>)
 80180b6:	f006 f92e 	bl	801e316 <f_findfirst>
 80180ba:	4603      	mov	r3, r0
 80180bc:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	if(fr != FR_OK || fi.fname[0] == 0 )
 80180c0:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d104      	bne.n	80180d2 <copy_bmp_to_flash+0x46>
 80180c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80180cc:	7a5b      	ldrb	r3, [r3, #9]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d107      	bne.n	80180e2 <copy_bmp_to_flash+0x56>
	{
		// keine bmp auf der SD Karte
		f_mount(0, "", 1);
 80180d2:	2201      	movs	r2, #1
 80180d4:	4960      	ldr	r1, [pc, #384]	; (8018258 <copy_bmp_to_flash+0x1cc>)
 80180d6:	2000      	movs	r0, #0
 80180d8:	f005 fcd6 	bl	801da88 <f_mount>
		FLASH_Lock();
 80180dc:	f7f1 f9de 	bl	800949c <FLASH_Lock>
		return;
 80180e0:	e0b5      	b.n	801824e <copy_bmp_to_flash+0x1c2>
	}

	TFT_Fill_Screen(BLACK);
 80180e2:	2000      	movs	r0, #0
 80180e4:	f7ff fbe8 	bl	80178b8 <TFT_Fill_Screen>
	tft_print(&lucidaConsole_22ptFontInfo, getLang(SD_to_Flash), 0,0, 2, WHITE , BLACK);
 80180e8:	2015      	movs	r0, #21
 80180ea:	f7f8 fe7b 	bl	8010de4 <getLang>
 80180ee:	4601      	mov	r1, r0
 80180f0:	2300      	movs	r3, #0
 80180f2:	9302      	str	r3, [sp, #8]
 80180f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180f8:	9301      	str	r3, [sp, #4]
 80180fa:	2302      	movs	r3, #2
 80180fc:	9300      	str	r3, [sp, #0]
 80180fe:	2300      	movs	r3, #0
 8018100:	2200      	movs	r2, #0
 8018102:	4857      	ldr	r0, [pc, #348]	; (8018260 <copy_bmp_to_flash+0x1d4>)
 8018104:	f006 fd4e 	bl	801eba4 <tft_print>

	tft_print_restclear(&lucidaConsole_22ptFontInfo, getLang(clear_flash), 0,80, 2, WHITE , BLACK, TFT_WIDTH);
 8018108:	2016      	movs	r0, #22
 801810a:	f7f8 fe6b 	bl	8010de4 <getLang>
 801810e:	4601      	mov	r1, r0
 8018110:	f44f 7348 	mov.w	r3, #800	; 0x320
 8018114:	9303      	str	r3, [sp, #12]
 8018116:	2300      	movs	r3, #0
 8018118:	9302      	str	r3, [sp, #8]
 801811a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801811e:	9301      	str	r3, [sp, #4]
 8018120:	2302      	movs	r3, #2
 8018122:	9300      	str	r3, [sp, #0]
 8018124:	2350      	movs	r3, #80	; 0x50
 8018126:	2200      	movs	r2, #0
 8018128:	484d      	ldr	r0, [pc, #308]	; (8018260 <copy_bmp_to_flash+0x1d4>)
 801812a:	f006 fc73 	bl	801ea14 <tft_print_restclear>
	FLASH_Unlock();
 801812e:	f7f1 f99d 	bl	800946c <FLASH_Unlock>
	FLASH_EraseSector(FLASH_Sector_9, VoltageRange_3);
 8018132:	2102      	movs	r1, #2
 8018134:	2048      	movs	r0, #72	; 0x48
 8018136:	f7f1 f9c1 	bl	80094bc <FLASH_EraseSector>
	FLASH_EraseSector(FLASH_Sector_10, VoltageRange_3);
 801813a:	2102      	movs	r1, #2
 801813c:	2050      	movs	r0, #80	; 0x50
 801813e:	f7f1 f9bd 	bl	80094bc <FLASH_EraseSector>
	FLASH_EraseSector(FLASH_Sector_11, VoltageRange_3);
 8018142:	2102      	movs	r1, #2
 8018144:	2058      	movs	r0, #88	; 0x58
 8018146:	f7f1 f9b9 	bl	80094bc <FLASH_EraseSector>

	while(1)
	{
		tft_copy_sd_to_flash(fi.fname);
 801814a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801814e:	3309      	adds	r3, #9
 8018150:	4618      	mov	r0, r3
 8018152:	f000 f88f 	bl	8018274 <tft_copy_sd_to_flash>
		fr = f_findnext(&dir, &fi);
 8018156:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801815a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801815e:	4611      	mov	r1, r2
 8018160:	4618      	mov	r0, r3
 8018162:	f006 f8b0 	bl	801e2c6 <f_findnext>
 8018166:	4603      	mov	r3, r0
 8018168:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
		if(fr != FR_OK || fi.fname[0] == 0 ) break;
 801816c:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8018170:	2b00      	cmp	r3, #0
 8018172:	d105      	bne.n	8018180 <copy_bmp_to_flash+0xf4>
 8018174:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018178:	7a5b      	ldrb	r3, [r3, #9]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d000      	beq.n	8018180 <copy_bmp_to_flash+0xf4>
		tft_copy_sd_to_flash(fi.fname);
 801817e:	e7e4      	b.n	801814a <copy_bmp_to_flash+0xbe>
	}

	// und kopiere noch alle ZIP Dateien, falls vorhanden
	fr = f_findfirst (&dir, &fi, "", "*.zip");
 8018180:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8018184:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8018188:	4b36      	ldr	r3, [pc, #216]	; (8018264 <copy_bmp_to_flash+0x1d8>)
 801818a:	4a33      	ldr	r2, [pc, #204]	; (8018258 <copy_bmp_to_flash+0x1cc>)
 801818c:	f006 f8c3 	bl	801e316 <f_findfirst>
 8018190:	4603      	mov	r3, r0
 8018192:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	if(fr == FR_OK && fi.fname[0] != 0 )
 8018196:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 801819a:	2b00      	cmp	r3, #0
 801819c:	d11f      	bne.n	80181de <copy_bmp_to_flash+0x152>
 801819e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80181a2:	7a5b      	ldrb	r3, [r3, #9]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d01a      	beq.n	80181de <copy_bmp_to_flash+0x152>
	{
		while(1)
		{
			tft_copy_sd_to_flash(fi.fname);
 80181a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80181ac:	3309      	adds	r3, #9
 80181ae:	4618      	mov	r0, r3
 80181b0:	f000 f860 	bl	8018274 <tft_copy_sd_to_flash>
			fr = f_findnext(&dir, &fi);
 80181b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80181b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80181bc:	4611      	mov	r1, r2
 80181be:	4618      	mov	r0, r3
 80181c0:	f006 f881 	bl	801e2c6 <f_findnext>
 80181c4:	4603      	mov	r3, r0
 80181c6:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
			if(fr != FR_OK || fi.fname[0] == 0 ) break;
 80181ca:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d105      	bne.n	80181de <copy_bmp_to_flash+0x152>
 80181d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80181d6:	7a5b      	ldrb	r3, [r3, #9]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d000      	beq.n	80181de <copy_bmp_to_flash+0x152>
			tft_copy_sd_to_flash(fi.fname);
 80181dc:	e7e4      	b.n	80181a8 <copy_bmp_to_flash+0x11c>
		}
	}

	f_mount(0, "", 1);
 80181de:	2201      	movs	r2, #1
 80181e0:	491d      	ldr	r1, [pc, #116]	; (8018258 <copy_bmp_to_flash+0x1cc>)
 80181e2:	2000      	movs	r0, #0
 80181e4:	f005 fc50 	bl	801da88 <f_mount>
	FLASH_Lock();
 80181e8:	f7f1 f958 	bl	800949c <FLASH_Lock>

	char s[50];
	strcpy(s,getLang(SDFINISHED));
 80181ec:	2017      	movs	r0, #23
 80181ee:	f7f8 fdf9 	bl	8010de4 <getLang>
 80181f2:	4602      	mov	r2, r0
 80181f4:	1d3b      	adds	r3, r7, #4
 80181f6:	4611      	mov	r1, r2
 80181f8:	4618      	mov	r0, r3
 80181fa:	f007 f83d 	bl	801f278 <strcpy>
	sprintf(s+strlen(s),": %ld Bytes",BMPTABLE_SECTOR11-flashaddress);
 80181fe:	1d3b      	adds	r3, r7, #4
 8018200:	4618      	mov	r0, r3
 8018202:	f7ef ff1d 	bl	8008040 <strlen>
 8018206:	4602      	mov	r2, r0
 8018208:	1d3b      	adds	r3, r7, #4
 801820a:	1898      	adds	r0, r3, r2
 801820c:	4b16      	ldr	r3, [pc, #88]	; (8018268 <copy_bmp_to_flash+0x1dc>)
 801820e:	681a      	ldr	r2, [r3, #0]
 8018210:	4b16      	ldr	r3, [pc, #88]	; (801826c <copy_bmp_to_flash+0x1e0>)
 8018212:	1a9b      	subs	r3, r3, r2
 8018214:	461a      	mov	r2, r3
 8018216:	4916      	ldr	r1, [pc, #88]	; (8018270 <copy_bmp_to_flash+0x1e4>)
 8018218:	f007 f80e 	bl	801f238 <sprintf>
	tft_print_restclear(&lucidaConsole_22ptFontInfo, s, 0,80, 2, WHITE , BLACK, TFT_WIDTH);
 801821c:	1d39      	adds	r1, r7, #4
 801821e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8018222:	9303      	str	r3, [sp, #12]
 8018224:	2300      	movs	r3, #0
 8018226:	9302      	str	r3, [sp, #8]
 8018228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801822c:	9301      	str	r3, [sp, #4]
 801822e:	2302      	movs	r3, #2
 8018230:	9300      	str	r3, [sp, #0]
 8018232:	2350      	movs	r3, #80	; 0x50
 8018234:	2200      	movs	r2, #0
 8018236:	480a      	ldr	r0, [pc, #40]	; (8018260 <copy_bmp_to_flash+0x1d4>)
 8018238:	f006 fbec 	bl	801ea14 <tft_print_restclear>
	delay_1ms(3000);
 801823c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8018240:	f000 fd46 	bl	8018cd0 <delay_1ms>
	TFT_Fill_Screen(BLACK);
 8018244:	2000      	movs	r0, #0
 8018246:	f7ff fb37 	bl	80178b8 <TFT_Fill_Screen>
 801824a:	e000      	b.n	801824e <copy_bmp_to_flash+0x1c2>
	if (f_mount(&FatFs, "", 1) != FR_OK) return;
 801824c:	bf00      	nop
}
 801824e:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}
 8018256:	bf00      	nop
 8018258:	08026cb4 	.word	0x08026cb4
 801825c:	08026cb8 	.word	0x08026cb8
 8018260:	20001c40 	.word	0x20001c40
 8018264:	08026cc0 	.word	0x08026cc0
 8018268:	20001b38 	.word	0x20001b38
 801826c:	080ffb50 	.word	0x080ffb50
 8018270:	08026cc8 	.word	0x08026cc8

08018274 <tft_copy_sd_to_flash>:

void tft_copy_sd_to_flash(char *fn)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	f5ad 4d6c 	sub.w	sp, sp, #60416	; 0xec00
 801827a:	b0b0      	sub	sp, #192	; 0xc0
 801827c:	af04      	add	r7, sp, #16
 801827e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018282:	3bac      	subs	r3, #172	; 0xac
 8018284:	6018      	str	r0, [r3, #0]
	// Lese das Bild in den Buffer
	FIL fil;
	uint8_t picbuf[MAXPICSIZE];
	UINT picsize = 0;
 8018286:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801828a:	3b9c      	subs	r3, #156	; 0x9c
 801828c:	2200      	movs	r2, #0
 801828e:	601a      	str	r2, [r3, #0]
	uint32_t picaddress;

	//if (f_mount(&FatFs, "", 1) == FR_OK)
	{
		if (f_open(&fil, fn, FA_READ) == FR_OK)
 8018290:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018294:	3bac      	subs	r3, #172	; 0xac
 8018296:	f507 406a 	add.w	r0, r7, #59904	; 0xea00
 801829a:	f100 0078 	add.w	r0, r0, #120	; 0x78
 801829e:	2201      	movs	r2, #1
 80182a0:	6819      	ldr	r1, [r3, #0]
 80182a2:	f005 fc35 	bl	801db10 <f_open>
 80182a6:	4603      	mov	r3, r0
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d114      	bne.n	80182d6 <tft_copy_sd_to_flash+0x62>
		{
			f_read(&fil,picbuf,MAXPICSIZE,&picsize);
 80182ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80182b0:	3b9c      	subs	r3, #156	; 0x9c
 80182b2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80182b6:	3998      	subs	r1, #152	; 0x98
 80182b8:	f507 406a 	add.w	r0, r7, #59904	; 0xea00
 80182bc:	f100 0078 	add.w	r0, r0, #120	; 0x78
 80182c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80182c4:	f005 fd64 	bl	801dd90 <f_read>
			f_close(&fil);
 80182c8:	f507 436a 	add.w	r3, r7, #59904	; 0xea00
 80182cc:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80182d0:	4618      	mov	r0, r3
 80182d2:	f005 ff3c 	bl	801e14e <f_close>
		}
	//	f_mount(0, "", 1); //Unmount drive, don't forget this!
	}
	if(picsize == 0) return; // Bild nicht gefunden
 80182d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80182da:	3b9c      	subs	r3, #156	; 0x9c
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	f000 813f 	beq.w	8018562 <tft_copy_sd_to_flash+0x2ee>

	tft_print_restclear(&lucidaConsole_22ptFontInfo, fn, 0,80, 2, WHITE , BLACK, TFT_WIDTH);
 80182e4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80182e8:	39ac      	subs	r1, #172	; 0xac
 80182ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80182ee:	9303      	str	r3, [sp, #12]
 80182f0:	2300      	movs	r3, #0
 80182f2:	9302      	str	r3, [sp, #8]
 80182f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182f8:	9301      	str	r3, [sp, #4]
 80182fa:	2302      	movs	r3, #2
 80182fc:	9300      	str	r3, [sp, #0]
 80182fe:	2350      	movs	r3, #80	; 0x50
 8018300:	2200      	movs	r2, #0
 8018302:	6809      	ldr	r1, [r1, #0]
 8018304:	489a      	ldr	r0, [pc, #616]	; (8018570 <tft_copy_sd_to_flash+0x2fc>)
 8018306:	f006 fb85 	bl	801ea14 <tft_print_restclear>

	// kopiere Bild ins Flash
	picaddress = flashaddress;
 801830a:	4b9a      	ldr	r3, [pc, #616]	; (8018574 <tft_copy_sd_to_flash+0x300>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8018312:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8018316:	6013      	str	r3, [r2, #0]
	for(int i=0; i<picsize; i++)
 8018318:	2300      	movs	r3, #0
 801831a:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 801831e:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8018322:	6013      	str	r3, [r2, #0]
 8018324:	e01d      	b.n	8018362 <tft_copy_sd_to_flash+0xee>
	{
		FLASH_ProgramByte(flashaddress++, picbuf[i]);
 8018326:	4b93      	ldr	r3, [pc, #588]	; (8018574 <tft_copy_sd_to_flash+0x300>)
 8018328:	681a      	ldr	r2, [r3, #0]
 801832a:	1c53      	adds	r3, r2, #1
 801832c:	4991      	ldr	r1, [pc, #580]	; (8018574 <tft_copy_sd_to_flash+0x300>)
 801832e:	600b      	str	r3, [r1, #0]
 8018330:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018334:	3b98      	subs	r3, #152	; 0x98
 8018336:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 801833a:	f101 01ac 	add.w	r1, r1, #172	; 0xac
 801833e:	6809      	ldr	r1, [r1, #0]
 8018340:	440b      	add	r3, r1
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	4619      	mov	r1, r3
 8018346:	4610      	mov	r0, r2
 8018348:	f7f1 f918 	bl	800957c <FLASH_ProgramByte>
	for(int i=0; i<picsize; i++)
 801834c:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8018350:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	3301      	adds	r3, #1
 8018358:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 801835c:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8018360:	6013      	str	r3, [r2, #0]
 8018362:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8018366:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 801836a:	681a      	ldr	r2, [r3, #0]
 801836c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018370:	3b9c      	subs	r3, #156	; 0x9c
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	429a      	cmp	r2, r3
 8018376:	d3d6      	bcc.n	8018326 <tft_copy_sd_to_flash+0xb2>
	}

	// erzeuge 8Byte Dateinamen
	char filename[8];
	memset(filename,0,8);
 8018378:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801837c:	3ba4      	subs	r3, #164	; 0xa4
 801837e:	2208      	movs	r2, #8
 8018380:	2100      	movs	r1, #0
 8018382:	4618      	mov	r0, r3
 8018384:	f006 ff34 	bl	801f1f0 <memset>
	for(int i=0; i<8; i++)
 8018388:	2300      	movs	r3, #0
 801838a:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 801838e:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8018392:	6013      	str	r3, [r2, #0]
 8018394:	e055      	b.n	8018442 <tft_copy_sd_to_flash+0x1ce>
	{
		if(fn[i] == '.' || fn[0] == 0) break;
 8018396:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 801839a:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 801839e:	681a      	ldr	r2, [r3, #0]
 80183a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80183a4:	3bac      	subs	r3, #172	; 0xac
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	4413      	add	r3, r2
 80183aa:	781b      	ldrb	r3, [r3, #0]
 80183ac:	2b2e      	cmp	r3, #46	; 0x2e
 80183ae:	d04f      	beq.n	8018450 <tft_copy_sd_to_flash+0x1dc>
 80183b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80183b4:	3bac      	subs	r3, #172	; 0xac
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	781b      	ldrb	r3, [r3, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d048      	beq.n	8018450 <tft_copy_sd_to_flash+0x1dc>
		filename[i] = toupper(fn[i]);
 80183be:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80183c2:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 80183c6:	681a      	ldr	r2, [r3, #0]
 80183c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80183cc:	3bac      	subs	r3, #172	; 0xac
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	4413      	add	r3, r2
 80183d2:	781b      	ldrb	r3, [r3, #0]
 80183d4:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 80183d8:	f102 029f 	add.w	r2, r2, #159	; 0x9f
 80183dc:	7013      	strb	r3, [r2, #0]
 80183de:	f006 fc81 	bl	801ece4 <__locale_ctype_ptr>
 80183e2:	4602      	mov	r2, r0
 80183e4:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80183e8:	f103 039f 	add.w	r3, r3, #159	; 0x9f
 80183ec:	781b      	ldrb	r3, [r3, #0]
 80183ee:	3301      	adds	r3, #1
 80183f0:	4413      	add	r3, r2
 80183f2:	781b      	ldrb	r3, [r3, #0]
 80183f4:	f003 0303 	and.w	r3, r3, #3
 80183f8:	2b02      	cmp	r3, #2
 80183fa:	d106      	bne.n	801840a <tft_copy_sd_to_flash+0x196>
 80183fc:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8018400:	f103 039f 	add.w	r3, r3, #159	; 0x9f
 8018404:	781b      	ldrb	r3, [r3, #0]
 8018406:	3b20      	subs	r3, #32
 8018408:	e004      	b.n	8018414 <tft_copy_sd_to_flash+0x1a0>
 801840a:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 801840e:	f103 039f 	add.w	r3, r3, #159	; 0x9f
 8018412:	781b      	ldrb	r3, [r3, #0]
 8018414:	b2d9      	uxtb	r1, r3
 8018416:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801841a:	3ba4      	subs	r3, #164	; 0xa4
 801841c:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8018420:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8018424:	6812      	ldr	r2, [r2, #0]
 8018426:	4413      	add	r3, r2
 8018428:	460a      	mov	r2, r1
 801842a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++)
 801842c:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8018430:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	3301      	adds	r3, #1
 8018438:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 801843c:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8018440:	6013      	str	r3, [r2, #0]
 8018442:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8018446:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	2b07      	cmp	r3, #7
 801844e:	dda2      	ble.n	8018396 <tft_copy_sd_to_flash+0x122>
	}

	// Speichere den Namen
	for(int i=0; i<8; i++)
 8018450:	2300      	movs	r3, #0
 8018452:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8018456:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 801845a:	6013      	str	r3, [r2, #0]
 801845c:	e01d      	b.n	801849a <tft_copy_sd_to_flash+0x226>
	{
		FLASH_ProgramByte(tableaddess++, filename[i]);
 801845e:	4b46      	ldr	r3, [pc, #280]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 8018460:	681a      	ldr	r2, [r3, #0]
 8018462:	1c53      	adds	r3, r2, #1
 8018464:	4944      	ldr	r1, [pc, #272]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 8018466:	600b      	str	r3, [r1, #0]
 8018468:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801846c:	3ba4      	subs	r3, #164	; 0xa4
 801846e:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 8018472:	f101 01a4 	add.w	r1, r1, #164	; 0xa4
 8018476:	6809      	ldr	r1, [r1, #0]
 8018478:	440b      	add	r3, r1
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	4619      	mov	r1, r3
 801847e:	4610      	mov	r0, r2
 8018480:	f7f1 f87c 	bl	800957c <FLASH_ProgramByte>
	for(int i=0; i<8; i++)
 8018484:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8018488:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	3301      	adds	r3, #1
 8018490:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8018494:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8018498:	6013      	str	r3, [r2, #0]
 801849a:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 801849e:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	2b07      	cmp	r3, #7
 80184a6:	ddda      	ble.n	801845e <tft_copy_sd_to_flash+0x1ea>
	}

	// Speichere die Adresse
	FLASH_ProgramByte(tableaddess++, picaddress >> 24);
 80184a8:	4b33      	ldr	r3, [pc, #204]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	1c5a      	adds	r2, r3, #1
 80184ae:	4932      	ldr	r1, [pc, #200]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 80184b0:	600a      	str	r2, [r1, #0]
 80184b2:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 80184b6:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 80184ba:	6812      	ldr	r2, [r2, #0]
 80184bc:	0e12      	lsrs	r2, r2, #24
 80184be:	b2d2      	uxtb	r2, r2
 80184c0:	4611      	mov	r1, r2
 80184c2:	4618      	mov	r0, r3
 80184c4:	f7f1 f85a 	bl	800957c <FLASH_ProgramByte>
	FLASH_ProgramByte(tableaddess++, picaddress >> 16);
 80184c8:	4b2b      	ldr	r3, [pc, #172]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	1c5a      	adds	r2, r3, #1
 80184ce:	492a      	ldr	r1, [pc, #168]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 80184d0:	600a      	str	r2, [r1, #0]
 80184d2:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 80184d6:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 80184da:	6812      	ldr	r2, [r2, #0]
 80184dc:	0c12      	lsrs	r2, r2, #16
 80184de:	b2d2      	uxtb	r2, r2
 80184e0:	4611      	mov	r1, r2
 80184e2:	4618      	mov	r0, r3
 80184e4:	f7f1 f84a 	bl	800957c <FLASH_ProgramByte>
	FLASH_ProgramByte(tableaddess++, picaddress >> 8);
 80184e8:	4b23      	ldr	r3, [pc, #140]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	1c5a      	adds	r2, r3, #1
 80184ee:	4922      	ldr	r1, [pc, #136]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 80184f0:	600a      	str	r2, [r1, #0]
 80184f2:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 80184f6:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 80184fa:	6812      	ldr	r2, [r2, #0]
 80184fc:	0a12      	lsrs	r2, r2, #8
 80184fe:	b2d2      	uxtb	r2, r2
 8018500:	4611      	mov	r1, r2
 8018502:	4618      	mov	r0, r3
 8018504:	f7f1 f83a 	bl	800957c <FLASH_ProgramByte>
	FLASH_ProgramByte(tableaddess++, picaddress);
 8018508:	4b1b      	ldr	r3, [pc, #108]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	1c5a      	adds	r2, r3, #1
 801850e:	491a      	ldr	r1, [pc, #104]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 8018510:	600a      	str	r2, [r1, #0]
 8018512:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8018516:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 801851a:	6812      	ldr	r2, [r2, #0]
 801851c:	b2d2      	uxtb	r2, r2
 801851e:	4611      	mov	r1, r2
 8018520:	4618      	mov	r0, r3
 8018522:	f7f1 f82b 	bl	800957c <FLASH_ProgramByte>

	// Speichere die Länge
	FLASH_ProgramByte(tableaddess++, picsize >> 8);
 8018526:	4b14      	ldr	r3, [pc, #80]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 8018528:	681a      	ldr	r2, [r3, #0]
 801852a:	1c53      	adds	r3, r2, #1
 801852c:	4912      	ldr	r1, [pc, #72]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 801852e:	600b      	str	r3, [r1, #0]
 8018530:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018534:	3b9c      	subs	r3, #156	; 0x9c
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	0a1b      	lsrs	r3, r3, #8
 801853a:	b2db      	uxtb	r3, r3
 801853c:	4619      	mov	r1, r3
 801853e:	4610      	mov	r0, r2
 8018540:	f7f1 f81c 	bl	800957c <FLASH_ProgramByte>
	FLASH_ProgramByte(tableaddess++, picsize);
 8018544:	4b0c      	ldr	r3, [pc, #48]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 8018546:	681a      	ldr	r2, [r3, #0]
 8018548:	1c53      	adds	r3, r2, #1
 801854a:	490b      	ldr	r1, [pc, #44]	; (8018578 <tft_copy_sd_to_flash+0x304>)
 801854c:	600b      	str	r3, [r1, #0]
 801854e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018552:	3b9c      	subs	r3, #156	; 0x9c
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	b2db      	uxtb	r3, r3
 8018558:	4619      	mov	r1, r3
 801855a:	4610      	mov	r0, r2
 801855c:	f7f1 f80e 	bl	800957c <FLASH_ProgramByte>
 8018560:	e000      	b.n	8018564 <tft_copy_sd_to_flash+0x2f0>
	if(picsize == 0) return; // Bild nicht gefunden
 8018562:	bf00      	nop
}
 8018564:	f507 476c 	add.w	r7, r7, #60416	; 0xec00
 8018568:	37b0      	adds	r7, #176	; 0xb0
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}
 801856e:	bf00      	nop
 8018570:	20001c40 	.word	0x20001c40
 8018574:	20001b38 	.word	0x20001b38
 8018578:	20001b3c 	.word	0x20001b3c

0801857c <TFT_DrawFlash>:
*/


// zeichnet LZE(2Byte) komprimierte 5-6-5 Bitmaps
int TFT_DrawFlash(char *fn, int x, int y)
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b092      	sub	sp, #72	; 0x48
 8018580:	af00      	add	r7, sp, #0
 8018582:	60f8      	str	r0, [r7, #12]
 8018584:	60b9      	str	r1, [r7, #8]
 8018586:	607a      	str	r2, [r7, #4]
uint8_t *ptable = (unsigned char *)BMPTABLE_SECTOR11;
 8018588:	4b66      	ldr	r3, [pc, #408]	; (8018724 <TFT_DrawFlash+0x1a8>)
 801858a:	647b      	str	r3, [r7, #68]	; 0x44
uint8_t *pflash = 0;
 801858c:	2300      	movs	r3, #0
 801858e:	643b      	str	r3, [r7, #64]	; 0x40
char filename[9];
int decomppos=0;
 8018590:	2300      	movs	r3, #0
 8018592:	63fb      	str	r3, [r7, #60]	; 0x3c
uint8_t anz;
int width=1, height;
 8018594:	2301      	movs	r3, #1
 8018596:	63bb      	str	r3, [r7, #56]	; 0x38
uint16_t data;

	// filename muss 8 Zeichen haben, mit 0 aufgefüllt
	memset(filename,0,9);
 8018598:	f107 0310 	add.w	r3, r7, #16
 801859c:	2209      	movs	r2, #9
 801859e:	2100      	movs	r1, #0
 80185a0:	4618      	mov	r0, r3
 80185a2:	f006 fe25 	bl	801f1f0 <memset>
	strncpy(filename,fn,8);
 80185a6:	f107 0310 	add.w	r3, r7, #16
 80185aa:	2208      	movs	r2, #8
 80185ac:	68f9      	ldr	r1, [r7, #12]
 80185ae:	4618      	mov	r0, r3
 80185b0:	f006 fe6a 	bl	801f288 <strncpy>
	for(int i=0; i<strlen(filename); i++)
 80185b4:	2300      	movs	r3, #0
 80185b6:	637b      	str	r3, [r7, #52]	; 0x34
 80185b8:	e01e      	b.n	80185f8 <TFT_DrawFlash+0x7c>
		filename[i] = toupper(filename[i]);
 80185ba:	f107 0210 	add.w	r2, r7, #16
 80185be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185c0:	4413      	add	r3, r2
 80185c2:	781b      	ldrb	r3, [r3, #0]
 80185c4:	76fb      	strb	r3, [r7, #27]
 80185c6:	f006 fb8d 	bl	801ece4 <__locale_ctype_ptr>
 80185ca:	4602      	mov	r2, r0
 80185cc:	7efb      	ldrb	r3, [r7, #27]
 80185ce:	3301      	adds	r3, #1
 80185d0:	4413      	add	r3, r2
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	f003 0303 	and.w	r3, r3, #3
 80185d8:	2b02      	cmp	r3, #2
 80185da:	d102      	bne.n	80185e2 <TFT_DrawFlash+0x66>
 80185dc:	7efb      	ldrb	r3, [r7, #27]
 80185de:	3b20      	subs	r3, #32
 80185e0:	e000      	b.n	80185e4 <TFT_DrawFlash+0x68>
 80185e2:	7efb      	ldrb	r3, [r7, #27]
 80185e4:	b2d9      	uxtb	r1, r3
 80185e6:	f107 0210 	add.w	r2, r7, #16
 80185ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ec:	4413      	add	r3, r2
 80185ee:	460a      	mov	r2, r1
 80185f0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<strlen(filename); i++)
 80185f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185f4:	3301      	adds	r3, #1
 80185f6:	637b      	str	r3, [r7, #52]	; 0x34
 80185f8:	f107 0310 	add.w	r3, r7, #16
 80185fc:	4618      	mov	r0, r3
 80185fe:	f7ef fd1f 	bl	8008040 <strlen>
 8018602:	4602      	mov	r2, r0
 8018604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018606:	429a      	cmp	r2, r3
 8018608:	d8d7      	bhi.n	80185ba <TFT_DrawFlash+0x3e>


	// suche das Bild in der Tabelle
	while((uint32_t)ptable < (0x08100000 - 8 - 4 -2))
 801860a:	e080      	b.n	801870e <TFT_DrawFlash+0x192>
	{
		if(!memcmp(ptable,filename,8))
 801860c:	f107 0310 	add.w	r3, r7, #16
 8018610:	2208      	movs	r2, #8
 8018612:	4619      	mov	r1, r3
 8018614:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018616:	f006 fdc3 	bl	801f1a0 <memcmp>
 801861a:	4603      	mov	r3, r0
 801861c:	2b00      	cmp	r3, #0
 801861e:	d173      	bne.n	8018708 <TFT_DrawFlash+0x18c>
		{
			// Bild gefunden
			// ptable zeigt auf die Dateitabelle in Sector 11:
			// 8 Byte Dateiname, 4 Byte Flashadresse, 2 Byte Dateilänge
			// lese Adresse
			uint32_t adr = (uint32_t)(ptable[8])<<24;
 8018620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018622:	3308      	adds	r3, #8
 8018624:	781b      	ldrb	r3, [r3, #0]
 8018626:	061b      	lsls	r3, r3, #24
 8018628:	62bb      	str	r3, [r7, #40]	; 0x28
			adr += (uint32_t)(ptable[9])<<16;
 801862a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801862c:	3309      	adds	r3, #9
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	041b      	lsls	r3, r3, #16
 8018632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018634:	4413      	add	r3, r2
 8018636:	62bb      	str	r3, [r7, #40]	; 0x28
			adr += (uint32_t)(ptable[10])<<8;
 8018638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801863a:	330a      	adds	r3, #10
 801863c:	781b      	ldrb	r3, [r3, #0]
 801863e:	021b      	lsls	r3, r3, #8
 8018640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018642:	4413      	add	r3, r2
 8018644:	62bb      	str	r3, [r7, #40]	; 0x28
			adr += ptable[11];
 8018646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018648:	330b      	adds	r3, #11
 801864a:	781b      	ldrb	r3, [r3, #0]
 801864c:	461a      	mov	r2, r3
 801864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018650:	4413      	add	r3, r2
 8018652:	62bb      	str	r3, [r7, #40]	; 0x28
			pflash = (uint8_t *)adr;
 8018654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018656:	643b      	str	r3, [r7, #64]	; 0x40
			// lese Länge
			uint16_t len = (uint16_t)(ptable[12])<<8;
 8018658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801865a:	330c      	adds	r3, #12
 801865c:	781b      	ldrb	r3, [r3, #0]
 801865e:	b29b      	uxth	r3, r3
 8018660:	021b      	lsls	r3, r3, #8
 8018662:	84fb      	strh	r3, [r7, #38]	; 0x26
			len += ptable[13];
 8018664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018666:	330d      	adds	r3, #13
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	b29a      	uxth	r2, r3
 801866c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801866e:	4413      	add	r3, r2
 8018670:	84fb      	strh	r3, [r7, #38]	; 0x26

			// pflash zeigt auf das erste Byte des komprimierten Bildes im Flash
			// gehe jetzt durch diese komprimierte Datei
			for(int complen = 0; complen < len; complen+=2)
 8018672:	2300      	movs	r3, #0
 8018674:	633b      	str	r3, [r7, #48]	; 0x30
 8018676:	e041      	b.n	80186fc <TFT_DrawFlash+0x180>
			{
				data = *pflash++;
 8018678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801867a:	1c5a      	adds	r2, r3, #1
 801867c:	643a      	str	r2, [r7, #64]	; 0x40
 801867e:	781b      	ldrb	r3, [r3, #0]
 8018680:	84bb      	strh	r3, [r7, #36]	; 0x24
				data += (((int)*pflash++)<<8);
 8018682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018684:	1c5a      	adds	r2, r3, #1
 8018686:	643a      	str	r2, [r7, #64]	; 0x40
 8018688:	781b      	ldrb	r3, [r3, #0]
 801868a:	021b      	lsls	r3, r3, #8
 801868c:	b29a      	uxth	r2, r3
 801868e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018690:	4413      	add	r3, r2
 8018692:	84bb      	strh	r3, [r7, #36]	; 0x24
				anz = *pflash++;
 8018694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018696:	1c5a      	adds	r2, r3, #1
 8018698:	643a      	str	r2, [r7, #64]	; 0x40
 801869a:	781b      	ldrb	r3, [r3, #0]
 801869c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				// anz: Anzahl der 16 Bit Werte
				for(int i=0; i<anz; i++)
 80186a0:	2300      	movs	r3, #0
 80186a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80186a4:	e022      	b.n	80186ec <TFT_DrawFlash+0x170>
				{
					// hier stehen die originalen Bytes zur Verfügung (in data), bearbeite sie
					// lese Höhe und Breite der Bitmap aus dem Header
					if(decomppos == 18) width = data;
 80186a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186a8:	2b12      	cmp	r3, #18
 80186aa:	d101      	bne.n	80186b0 <TFT_DrawFlash+0x134>
 80186ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186ae:	63bb      	str	r3, [r7, #56]	; 0x38
					if(decomppos == 22)
 80186b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186b2:	2b16      	cmp	r3, #22
 80186b4:	d10e      	bne.n	80186d4 <TFT_DrawFlash+0x158>
					{
						height = data;
 80186b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186b8:	61fb      	str	r3, [r7, #28]
						// Header fertig gelesen, initialisiere das Zeichnen der Bitmap
						TFT_startPicture(x,y,x+width-1,y+height-2); //-2 bei der Höhe, weil sonst ein Pixel rechts oben stehen bleibt
 80186ba:	68ba      	ldr	r2, [r7, #8]
 80186bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186be:	4413      	add	r3, r2
 80186c0:	1e59      	subs	r1, r3, #1
 80186c2:	687a      	ldr	r2, [r7, #4]
 80186c4:	69fb      	ldr	r3, [r7, #28]
 80186c6:	4413      	add	r3, r2
 80186c8:	3b02      	subs	r3, #2
 80186ca:	460a      	mov	r2, r1
 80186cc:	6879      	ldr	r1, [r7, #4]
 80186ce:	68b8      	ldr	r0, [r7, #8]
 80186d0:	f7ff f904 	bl	80178dc <TFT_startPicture>
					}
					// der Bildinhalt beginnt ab Byte 140
					if(decomppos >= 140)
 80186d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186d6:	2b8b      	cmp	r3, #139	; 0x8b
 80186d8:	dd02      	ble.n	80186e0 <TFT_DrawFlash+0x164>
					{
						TFT_RAM = data;
 80186da:	4a13      	ldr	r2, [pc, #76]	; (8018728 <TFT_DrawFlash+0x1ac>)
 80186dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186de:	8013      	strh	r3, [r2, #0]
					}

					decomppos+=2;
 80186e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186e2:	3302      	adds	r3, #2
 80186e4:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int i=0; i<anz; i++)
 80186e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e8:	3301      	adds	r3, #1
 80186ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80186ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80186f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186f2:	429a      	cmp	r2, r3
 80186f4:	dbd7      	blt.n	80186a6 <TFT_DrawFlash+0x12a>
			for(int complen = 0; complen < len; complen+=2)
 80186f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186f8:	3302      	adds	r3, #2
 80186fa:	633b      	str	r3, [r7, #48]	; 0x30
 80186fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80186fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018700:	429a      	cmp	r2, r3
 8018702:	dbb9      	blt.n	8018678 <TFT_DrawFlash+0xfc>
				}
			}
			return 1;
 8018704:	2301      	movs	r3, #1
 8018706:	e008      	b.n	801871a <TFT_DrawFlash+0x19e>

		}
		ptable += (8+4+2);
 8018708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801870a:	330e      	adds	r3, #14
 801870c:	647b      	str	r3, [r7, #68]	; 0x44
	while((uint32_t)ptable < (0x08100000 - 8 - 4 -2))
 801870e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018710:	4a06      	ldr	r2, [pc, #24]	; (801872c <TFT_DrawFlash+0x1b0>)
 8018712:	4293      	cmp	r3, r2
 8018714:	f67f af7a 	bls.w	801860c <TFT_DrawFlash+0x90>
	}
	return 0;
 8018718:	2300      	movs	r3, #0
}
 801871a:	4618      	mov	r0, r3
 801871c:	3748      	adds	r7, #72	; 0x48
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}
 8018722:	bf00      	nop
 8018724:	080ffb50 	.word	0x080ffb50
 8018728:	60020000 	.word	0x60020000
 801872c:	080ffff1 	.word	0x080ffff1

08018730 <init_TFT_and_Perif>:
void TFT_FMCConfig();
void SSD1963_Init1();

// Initialisiert das komplette TFT Display (800x480 Pixel)
void init_TFT_and_Perif()
{
 8018730:	b580      	push	{r7, lr}
 8018732:	af00      	add	r7, sp, #0
	TFT_CtrlLinesConfig();	// stelle die GPIOs ein
 8018734:	f000 f80c 	bl	8018750 <TFT_CtrlLinesConfig>
	delay_1ms(10);
 8018738:	200a      	movs	r0, #10
 801873a:	f000 fac9 	bl	8018cd0 <delay_1ms>
	TFT_FMCConfig();		// aktiviere FMC
 801873e:	f000 f8b7 	bl	80188b0 <TFT_FMCConfig>
	SSD1963_Init1();		// initialisiere das Display
 8018742:	f000 f8f7 	bl	8018934 <SSD1963_Init1>

	TFT_Fill_Screen(BLACK);
 8018746:	2000      	movs	r0, #0
 8018748:	f7ff f8b6 	bl	80178b8 <TFT_Fill_Screen>
}
 801874c:	bf00      	nop
 801874e:	bd80      	pop	{r7, pc}

08018750 <TFT_CtrlLinesConfig>:

// ========== GPIO für das TFT =================

 void TFT_CtrlLinesConfig(void)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStructure;

		/* Enable GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF, ENABLE);
 8018756:	2101      	movs	r1, #1
 8018758:	2078      	movs	r0, #120	; 0x78
 801875a:	f7f1 fa7f 	bl	8009c5c <RCC_AHB1PeriphClockCmd>

		/*-- GPIO Configuration ------------------------------------------------------*/
		/* SRAM Data lines,  NOE (/RD) and NWE (/WR) configuration */
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 | GPIO_Pin_4 | GPIO_Pin_5;
 801875e:	f24c 7333 	movw	r3, #50995	; 0xc733
 8018762:	603b      	str	r3, [r7, #0]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8018764:	2302      	movs	r3, #2
 8018766:	713b      	strb	r3, [r7, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8018768:	2303      	movs	r3, #3
 801876a:	717b      	strb	r3, [r7, #5]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801876c:	2300      	movs	r3, #0
 801876e:	71bb      	strb	r3, [r7, #6]
		GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8018770:	2300      	movs	r3, #0
 8018772:	71fb      	strb	r3, [r7, #7]
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 8018774:	463b      	mov	r3, r7
 8018776:	4619      	mov	r1, r3
 8018778:	484b      	ldr	r0, [pc, #300]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 801877a:	f7f1 f89f 	bl	80098bc <GPIO_Init>

		GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 801877e:	220c      	movs	r2, #12
 8018780:	2100      	movs	r1, #0
 8018782:	4849      	ldr	r0, [pc, #292]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 8018784:	f7f1 f978 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 8018788:	220c      	movs	r2, #12
 801878a:	2101      	movs	r1, #1
 801878c:	4846      	ldr	r0, [pc, #280]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 801878e:	f7f1 f973 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FMC);
 8018792:	220c      	movs	r2, #12
 8018794:	2104      	movs	r1, #4
 8018796:	4844      	ldr	r0, [pc, #272]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 8018798:	f7f1 f96e 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FMC);
 801879c:	220c      	movs	r2, #12
 801879e:	2105      	movs	r1, #5
 80187a0:	4841      	ldr	r0, [pc, #260]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 80187a2:	f7f1 f969 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 80187a6:	220c      	movs	r2, #12
 80187a8:	2108      	movs	r1, #8
 80187aa:	483f      	ldr	r0, [pc, #252]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 80187ac:	f7f1 f964 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 80187b0:	220c      	movs	r2, #12
 80187b2:	2109      	movs	r1, #9
 80187b4:	483c      	ldr	r0, [pc, #240]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 80187b6:	f7f1 f95f 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 80187ba:	220c      	movs	r2, #12
 80187bc:	210a      	movs	r1, #10
 80187be:	483a      	ldr	r0, [pc, #232]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 80187c0:	f7f1 f95a 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 80187c4:	220c      	movs	r2, #12
 80187c6:	210e      	movs	r1, #14
 80187c8:	4837      	ldr	r0, [pc, #220]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 80187ca:	f7f1 f955 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 80187ce:	220c      	movs	r2, #12
 80187d0:	210f      	movs	r1, #15
 80187d2:	4835      	ldr	r0, [pc, #212]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 80187d4:	f7f1 f950 	bl	8009a78 <GPIO_PinAFConfig>

		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80187d8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80187dc:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOE, &GPIO_InitStructure);
 80187de:	463b      	mov	r3, r7
 80187e0:	4619      	mov	r1, r3
 80187e2:	4832      	ldr	r0, [pc, #200]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 80187e4:	f7f1 f86a 	bl	80098bc <GPIO_Init>

		GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 80187e8:	220c      	movs	r2, #12
 80187ea:	2107      	movs	r1, #7
 80187ec:	482f      	ldr	r0, [pc, #188]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 80187ee:	f7f1 f943 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 80187f2:	220c      	movs	r2, #12
 80187f4:	2108      	movs	r1, #8
 80187f6:	482d      	ldr	r0, [pc, #180]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 80187f8:	f7f1 f93e 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 80187fc:	220c      	movs	r2, #12
 80187fe:	2109      	movs	r1, #9
 8018800:	482a      	ldr	r0, [pc, #168]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 8018802:	f7f1 f939 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 8018806:	220c      	movs	r2, #12
 8018808:	210a      	movs	r1, #10
 801880a:	4828      	ldr	r0, [pc, #160]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 801880c:	f7f1 f934 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8018810:	220c      	movs	r2, #12
 8018812:	210b      	movs	r1, #11
 8018814:	4825      	ldr	r0, [pc, #148]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 8018816:	f7f1 f92f 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 801881a:	220c      	movs	r2, #12
 801881c:	210c      	movs	r1, #12
 801881e:	4823      	ldr	r0, [pc, #140]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 8018820:	f7f1 f92a 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 8018824:	220c      	movs	r2, #12
 8018826:	210d      	movs	r1, #13
 8018828:	4820      	ldr	r0, [pc, #128]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 801882a:	f7f1 f925 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 801882e:	220c      	movs	r2, #12
 8018830:	210e      	movs	r1, #14
 8018832:	481e      	ldr	r0, [pc, #120]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 8018834:	f7f1 f920 	bl	8009a78 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 8018838:	220c      	movs	r2, #12
 801883a:	210f      	movs	r1, #15
 801883c:	481b      	ldr	r0, [pc, #108]	; (80188ac <TFT_CtrlLinesConfig+0x15c>)
 801883e:	f7f1 f91b 	bl	8009a78 <GPIO_PinAFConfig>

		/* SRAM Address lines configuration (/RS)*/
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8018842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018846:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 8018848:	463b      	mov	r3, r7
 801884a:	4619      	mov	r1, r3
 801884c:	4816      	ldr	r0, [pc, #88]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 801884e:	f7f1 f835 	bl	80098bc <GPIO_Init>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource11, GPIO_AF_FMC);
 8018852:	220c      	movs	r2, #12
 8018854:	210b      	movs	r1, #11
 8018856:	4814      	ldr	r0, [pc, #80]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 8018858:	f7f1 f90e 	bl	8009a78 <GPIO_PinAFConfig>

		/* NE3 configuration (/CS)*/
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 801885c:	2380      	movs	r3, #128	; 0x80
 801885e:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 8018860:	463b      	mov	r3, r7
 8018862:	4619      	mov	r1, r3
 8018864:	4810      	ldr	r0, [pc, #64]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 8018866:	f7f1 f829 	bl	80098bc <GPIO_Init>

		GPIO_PinAFConfig(GPIOD, GPIO_PinSource7, GPIO_AF_FMC);
 801886a:	220c      	movs	r2, #12
 801886c:	2107      	movs	r1, #7
 801886e:	480e      	ldr	r0, [pc, #56]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 8018870:	f7f1 f902 	bl	8009a78 <GPIO_PinAFConfig>

		/*/RESET */
		GPIO_InitStructure.GPIO_Pin=GPIO_Pin_12;
 8018874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018878:	603b      	str	r3, [r7, #0]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801887a:	2301      	movs	r3, #1
 801887c:	713b      	strb	r3, [r7, #4]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 801887e:	2303      	movs	r3, #3
 8018880:	717b      	strb	r3, [r7, #5]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8018882:	2300      	movs	r3, #0
 8018884:	71bb      	strb	r3, [r7, #6]
		GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8018886:	2301      	movs	r3, #1
 8018888:	71fb      	strb	r3, [r7, #7]
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 801888a:	463b      	mov	r3, r7
 801888c:	4619      	mov	r1, r3
 801888e:	4806      	ldr	r0, [pc, #24]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 8018890:	f7f1 f814 	bl	80098bc <GPIO_Init>
		GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 8018894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018898:	4803      	ldr	r0, [pc, #12]	; (80188a8 <TFT_CtrlLinesConfig+0x158>)
 801889a:	f7f1 f8c6 	bl	8009a2a <GPIO_ResetBits>
}
 801889e:	bf00      	nop
 80188a0:	3708      	adds	r7, #8
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	40020c00 	.word	0x40020c00
 80188ac:	40021000 	.word	0x40021000

080188b0 <TFT_FMCConfig>:

// ========== FMC =============================

void TFT_FMCConfig(void)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b098      	sub	sp, #96	; 0x60
 80188b4:	af00      	add	r7, sp, #0
	FMC_NORSRAMInitTypeDef  FMC_NORSRAMInitStructure;
	FMC_NORSRAMTimingInitTypeDef  p;

	/* Enable FMC clock */
	RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 80188b6:	2101      	movs	r1, #1
 80188b8:	2001      	movs	r0, #1
 80188ba:	f7f1 f9ef 	bl	8009c9c <RCC_AHB3PeriphClockCmd>

	/*-- FMC Configuration ------------------------------------------------------*/
	/*----------------------- SRAM Bank 1 ----------------------------------------*/
	/* FMC_Bank1_NORSRAM1 configuration */
	// langsame Version: flackert leicht, ist immer stabil
	p.FMC_AddressSetupTime = 10;
 80188be:	230a      	movs	r3, #10
 80188c0:	607b      	str	r3, [r7, #4]
	p.FMC_AddressHoldTime = 10;
 80188c2:	230a      	movs	r3, #10
 80188c4:	60bb      	str	r3, [r7, #8]
	p.FMC_BusTurnAroundDuration = 20;
 80188c6:	2314      	movs	r3, #20
 80188c8:	613b      	str	r3, [r7, #16]

	p.FMC_DataSetupTime = 20;
 80188ca:	2314      	movs	r3, #20
 80188cc:	60fb      	str	r3, [r7, #12]
	p.FMC_CLKDivision = 1;
 80188ce:	2301      	movs	r3, #1
 80188d0:	617b      	str	r3, [r7, #20]
	p.FMC_DataLatency = 0;
 80188d2:	2300      	movs	r3, #0
 80188d4:	61bb      	str	r3, [r7, #24]
	p.FMC_AccessMode = FMC_AccessMode_A;
 80188d6:	2300      	movs	r3, #0
 80188d8:	61fb      	str	r3, [r7, #28]
	- Data Width = 16bit
	- Write Operation = Enable
	- Extended Mode = Enable
	- Asynchronous Wait = Disable */

	FMC_NORSRAMInitStructure.FMC_Bank = FMC_Bank1_NORSRAM1;
 80188da:	2300      	movs	r3, #0
 80188dc:	623b      	str	r3, [r7, #32]
	FMC_NORSRAMInitStructure.FMC_DataAddressMux = FMC_DataAddressMux_Disable;
 80188de:	2300      	movs	r3, #0
 80188e0:	627b      	str	r3, [r7, #36]	; 0x24
	FMC_NORSRAMInitStructure.FMC_MemoryType = FMC_MemoryType_SRAM;
 80188e2:	2300      	movs	r3, #0
 80188e4:	62bb      	str	r3, [r7, #40]	; 0x28
	FMC_NORSRAMInitStructure.FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 80188e6:	2310      	movs	r3, #16
 80188e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	FMC_NORSRAMInitStructure.FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 80188ea:	2300      	movs	r3, #0
 80188ec:	633b      	str	r3, [r7, #48]	; 0x30
	FMC_NORSRAMInitStructure.FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 80188ee:	2300      	movs	r3, #0
 80188f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	FMC_NORSRAMInitStructure.FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 80188f2:	2300      	movs	r3, #0
 80188f4:	637b      	str	r3, [r7, #52]	; 0x34
	FMC_NORSRAMInitStructure.FMC_WrapMode = FMC_WrapMode_Disable;
 80188f6:	2300      	movs	r3, #0
 80188f8:	63bb      	str	r3, [r7, #56]	; 0x38
	FMC_NORSRAMInitStructure.FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 80188fa:	2300      	movs	r3, #0
 80188fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	FMC_NORSRAMInitStructure.FMC_WriteOperation = FMC_WriteOperation_Enable;
 80188fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018902:	643b      	str	r3, [r7, #64]	; 0x40
	FMC_NORSRAMInitStructure.FMC_WaitSignal = FMC_WaitSignal_Disable;
 8018904:	2300      	movs	r3, #0
 8018906:	647b      	str	r3, [r7, #68]	; 0x44
	FMC_NORSRAMInitStructure.FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 8018908:	2300      	movs	r3, #0
 801890a:	64bb      	str	r3, [r7, #72]	; 0x48
	FMC_NORSRAMInitStructure.FMC_WriteBurst = FMC_WriteBurst_Disable;
 801890c:	2300      	movs	r3, #0
 801890e:	653b      	str	r3, [r7, #80]	; 0x50
	FMC_NORSRAMInitStructure.FMC_ReadWriteTimingStruct = &p;
 8018910:	1d3b      	adds	r3, r7, #4
 8018912:	65bb      	str	r3, [r7, #88]	; 0x58
	FMC_NORSRAMInitStructure.FMC_WriteTimingStruct = &p;
 8018914:	1d3b      	adds	r3, r7, #4
 8018916:	65fb      	str	r3, [r7, #92]	; 0x5c

	FMC_NORSRAMInit(&FMC_NORSRAMInitStructure);
 8018918:	f107 0320 	add.w	r3, r7, #32
 801891c:	4618      	mov	r0, r3
 801891e:	f7f0 feb7 	bl	8009690 <FMC_NORSRAMInit>

	/* Enable FMC NOR/SRAM Bank1 */
	FMC_NORSRAMCmd(FMC_Bank1_NORSRAM1, ENABLE);
 8018922:	2101      	movs	r1, #1
 8018924:	2000      	movs	r0, #0
 8018926:	f7f0 ff9f 	bl	8009868 <FMC_NORSRAMCmd>
}
 801892a:	bf00      	nop
 801892c:	3760      	adds	r7, #96	; 0x60
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}
	...

08018934 <SSD1963_Init1>:

#define mHIGH(x) (x >> 8)
#define mLOW(x) (x & 0xFF)

void SSD1963_Init1 (void)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 8018938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801893c:	486f      	ldr	r0, [pc, #444]	; (8018afc <SSD1963_Init1+0x1c8>)
 801893e:	f7f1 f874 	bl	8009a2a <GPIO_ResetBits>
	delay_1ms(10);
 8018942:	200a      	movs	r0, #10
 8018944:	f000 f9c4 	bl	8018cd0 <delay_1ms>
	GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8018948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801894c:	486b      	ldr	r0, [pc, #428]	; (8018afc <SSD1963_Init1+0x1c8>)
 801894e:	f7f1 f85d 	bl	8009a0c <GPIO_SetBits>
	delay_1ms(100);
 8018952:	2064      	movs	r0, #100	; 0x64
 8018954:	f000 f9bc 	bl	8018cd0 <delay_1ms>

	//from display manual:
	//For a 10MHz reference clock to obtain 115MHz PLL frequency, user cannot program N = 23 and M = 2. The closet
	//setting in this situation is setting N=34 and M=3, where 10 x 34 / 3 = 113.33MHz.

		TFT_REG = (0xE2);		//PLL multiplier, set PLL clock to 120M - too low. manual say >250Mhz
 8018958:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801895c:	22e2      	movs	r2, #226	; 0xe2
 801895e:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x38);	    //N=0x36 for 6.5M, 0x23 for 10M crystal (mit 23 hat ein Display gegrieselt, während andere gingen)
 8018960:	4b67      	ldr	r3, [pc, #412]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018962:	2238      	movs	r2, #56	; 0x38
 8018964:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x02);		//better 0x38 / 2 = 280MHz
 8018966:	4b66      	ldr	r3, [pc, #408]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018968:	2202      	movs	r2, #2
 801896a:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x54);
 801896c:	4b64      	ldr	r3, [pc, #400]	; (8018b00 <SSD1963_Init1+0x1cc>)
 801896e:	2254      	movs	r2, #84	; 0x54
 8018970:	801a      	strh	r2, [r3, #0]

		delay_1ms(10);
 8018972:	200a      	movs	r0, #10
 8018974:	f000 f9ac 	bl	8018cd0 <delay_1ms>

		TFT_REG = (0xE0);		// PLL enable
 8018978:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801897c:	22e0      	movs	r2, #224	; 0xe0
 801897e:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x01);
 8018980:	4b5f      	ldr	r3, [pc, #380]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018982:	2201      	movs	r2, #1
 8018984:	801a      	strh	r2, [r3, #0]

		delay_1ms(10);
 8018986:	200a      	movs	r0, #10
 8018988:	f000 f9a2 	bl	8018cd0 <delay_1ms>

		TFT_REG = (0xE0);
 801898c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018990:	22e0      	movs	r2, #224	; 0xe0
 8018992:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x03);
 8018994:	4b5a      	ldr	r3, [pc, #360]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018996:	2203      	movs	r2, #3
 8018998:	801a      	strh	r2, [r3, #0]

		delay_1ms(10);
 801899a:	200a      	movs	r0, #10
 801899c:	f000 f998 	bl	8018cd0 <delay_1ms>

		TFT_REG = (0x01);		// software reset
 80189a0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80189a4:	2201      	movs	r2, #1
 80189a6:	801a      	strh	r2, [r3, #0]

		delay_1ms(100);
 80189a8:	2064      	movs	r0, #100	; 0x64
 80189aa:	f000 f991 	bl	8018cd0 <delay_1ms>

		TFT_REG = (0xE6);		//PLL setting for PCLK, depends on resolution
 80189ae:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80189b2:	22e6      	movs	r2, #230	; 0xe6
 80189b4:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x03);
 80189b6:	4b52      	ldr	r3, [pc, #328]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189b8:	2203      	movs	r2, #3
 80189ba:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0xFF);
 80189bc:	4b50      	ldr	r3, [pc, #320]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189be:	22ff      	movs	r2, #255	; 0xff
 80189c0:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0xFF);
 80189c2:	4b4f      	ldr	r3, [pc, #316]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189c4:	22ff      	movs	r2, #255	; 0xff
 80189c6:	801a      	strh	r2, [r3, #0]

		TFT_REG = (0xB0);		//LCD SPECIFICATION
 80189c8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80189cc:	22b0      	movs	r2, #176	; 0xb0
 80189ce:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x0c);
 80189d0:	4b4b      	ldr	r3, [pc, #300]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189d2:	220c      	movs	r2, #12
 80189d4:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);
 80189d6:	4b4a      	ldr	r3, [pc, #296]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189d8:	2200      	movs	r2, #0
 80189da:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x03);		//Set HDP	799
 80189dc:	4b48      	ldr	r3, [pc, #288]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189de:	2203      	movs	r2, #3
 80189e0:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x1F);
 80189e2:	4b47      	ldr	r3, [pc, #284]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189e4:	221f      	movs	r2, #31
 80189e6:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x01);		//Set VDP	479
 80189e8:	4b45      	ldr	r3, [pc, #276]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189ea:	2201      	movs	r2, #1
 80189ec:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0xDF);
 80189ee:	4b44      	ldr	r3, [pc, #272]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189f0:	22df      	movs	r2, #223	; 0xdf
 80189f2:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);
 80189f4:	4b42      	ldr	r3, [pc, #264]	; (8018b00 <SSD1963_Init1+0x1cc>)
 80189f6:	2200      	movs	r2, #0
 80189f8:	801a      	strh	r2, [r3, #0]

		TFT_REG = (0xB4);		//HSYNC
 80189fa:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80189fe:	22b4      	movs	r2, #180	; 0xb4
 8018a00:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x03);		//Set HT	928
 8018a02:	4b3f      	ldr	r3, [pc, #252]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a04:	2203      	movs	r2, #3
 8018a06:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0xA0);
 8018a08:	4b3d      	ldr	r3, [pc, #244]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a0a:	22a0      	movs	r2, #160	; 0xa0
 8018a0c:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);		//Set HPS	46
 8018a0e:	4b3c      	ldr	r3, [pc, #240]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a10:	2200      	movs	r2, #0
 8018a12:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x2E);
 8018a14:	4b3a      	ldr	r3, [pc, #232]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a16:	222e      	movs	r2, #46	; 0x2e
 8018a18:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x30);		//Set HPW	48
 8018a1a:	4b39      	ldr	r3, [pc, #228]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a1c:	2230      	movs	r2, #48	; 0x30
 8018a1e:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);		//Set LPS	15
 8018a20:	4b37      	ldr	r3, [pc, #220]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a22:	2200      	movs	r2, #0
 8018a24:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x0F);
 8018a26:	4b36      	ldr	r3, [pc, #216]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a28:	220f      	movs	r2, #15
 8018a2a:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);
 8018a2c:	4b34      	ldr	r3, [pc, #208]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a2e:	2200      	movs	r2, #0
 8018a30:	801a      	strh	r2, [r3, #0]

		TFT_REG = (0xB6);		//VSYNC
 8018a32:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018a36:	22b6      	movs	r2, #182	; 0xb6
 8018a38:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x02);		//Set VT	525
 8018a3a:	4b31      	ldr	r3, [pc, #196]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a3c:	2202      	movs	r2, #2
 8018a3e:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x0D);
 8018a40:	4b2f      	ldr	r3, [pc, #188]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a42:	220d      	movs	r2, #13
 8018a44:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);		//Set VPS	16
 8018a46:	4b2e      	ldr	r3, [pc, #184]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a48:	2200      	movs	r2, #0
 8018a4a:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x10);
 8018a4c:	4b2c      	ldr	r3, [pc, #176]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a4e:	2210      	movs	r2, #16
 8018a50:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x10);		//Set VPW	16
 8018a52:	4b2b      	ldr	r3, [pc, #172]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a54:	2210      	movs	r2, #16
 8018a56:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);		//Set FPS	8
 8018a58:	4b29      	ldr	r3, [pc, #164]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x08);
 8018a5e:	4b28      	ldr	r3, [pc, #160]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a60:	2208      	movs	r2, #8
 8018a62:	801a      	strh	r2, [r3, #0]

		setDisplayamKopf();
 8018a64:	f000 f84e 	bl	8018b04 <setDisplayamKopf>
		//TFT_REG = (0xBA);
		//TFT_RAM = (0x0F);		//GPIO[3:0] out 1

		TFT_REG = (0xB8);
 8018a68:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018a6c:	22b8      	movs	r2, #184	; 0xb8
 8018a6e:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x07);	    //GPIO3=input, GPIO[2:0]=output
 8018a70:	4b23      	ldr	r3, [pc, #140]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a72:	2207      	movs	r2, #7
 8018a74:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x01);		//GPIO0 normal
 8018a76:	4b22      	ldr	r3, [pc, #136]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a78:	2201      	movs	r2, #1
 8018a7a:	801a      	strh	r2, [r3, #0]

		TFT_REG = (0x36);		//rotation
 8018a7c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018a80:	2236      	movs	r2, #54	; 0x36
 8018a82:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x22);
 8018a84:	4b1e      	ldr	r3, [pc, #120]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a86:	2222      	movs	r2, #34	; 0x22
 8018a88:	801a      	strh	r2, [r3, #0]

		TFT_REG = (0xF0);		//pixel data interface
 8018a8a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018a8e:	22f0      	movs	r2, #240	; 0xf0
 8018a90:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x03);
 8018a92:	4b1b      	ldr	r3, [pc, #108]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018a94:	2203      	movs	r2, #3
 8018a96:	801a      	strh	r2, [r3, #0]


		delay_1ms(1);
 8018a98:	2001      	movs	r0, #1
 8018a9a:	f000 f919 	bl	8018cd0 <delay_1ms>

		TFT_setRegion(0, 0, 799, 479);
 8018a9e:	f240 13df 	movw	r3, #479	; 0x1df
 8018aa2:	f240 321f 	movw	r2, #799	; 0x31f
 8018aa6:	2100      	movs	r1, #0
 8018aa8:	2000      	movs	r0, #0
 8018aaa:	f7fe fe6f 	bl	801778c <TFT_setRegion>
		TFT_REG = (0x29);		//display on
 8018aae:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018ab2:	2229      	movs	r2, #41	; 0x29
 8018ab4:	801a      	strh	r2, [r3, #0]

		TFT_REG = (0xBE);		//set PWM for B/L
 8018ab6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018aba:	22be      	movs	r2, #190	; 0xbe
 8018abc:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x06);
 8018abe:	4b10      	ldr	r3, [pc, #64]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018ac0:	2206      	movs	r2, #6
 8018ac2:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0xf0);
 8018ac4:	4b0e      	ldr	r3, [pc, #56]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018ac6:	22f0      	movs	r2, #240	; 0xf0
 8018ac8:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x01);
 8018aca:	4b0d      	ldr	r3, [pc, #52]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018acc:	2201      	movs	r2, #1
 8018ace:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0xf0);
 8018ad0:	4b0b      	ldr	r3, [pc, #44]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018ad2:	22f0      	movs	r2, #240	; 0xf0
 8018ad4:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);
 8018ad6:	4b0a      	ldr	r3, [pc, #40]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018ad8:	2200      	movs	r2, #0
 8018ada:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x00);
 8018adc:	4b08      	ldr	r3, [pc, #32]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018ade:	2200      	movs	r2, #0
 8018ae0:	801a      	strh	r2, [r3, #0]

		TFT_REG = (0xd0);
 8018ae2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018ae6:	22d0      	movs	r2, #208	; 0xd0
 8018ae8:	801a      	strh	r2, [r3, #0]
		TFT_RAM = (0x0d);
 8018aea:	4b05      	ldr	r3, [pc, #20]	; (8018b00 <SSD1963_Init1+0x1cc>)
 8018aec:	220d      	movs	r2, #13
 8018aee:	801a      	strh	r2, [r3, #0]

		TFT_REG = (0x2C);
 8018af0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018af4:	222c      	movs	r2, #44	; 0x2c
 8018af6:	801a      	strh	r2, [r3, #0]
		return;
 8018af8:	bf00      	nop

		delay_1ms(10);

		TFT_REG = (0x29);		//display on
		delay_1ms(10);
}
 8018afa:	bd80      	pop	{r7, pc}
 8018afc:	40020c00 	.word	0x40020c00
 8018b00:	60020000 	.word	0x60020000

08018b04 <setDisplayamKopf>:

void setDisplayamKopf()
{
 8018b04:	b480      	push	{r7}
 8018b06:	af00      	add	r7, sp, #0
	TFT_REG = (0xBA);
 8018b08:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8018b0c:	22ba      	movs	r2, #186	; 0xba
 8018b0e:	801a      	strh	r2, [r3, #0]
	if(pcfgdata->display_reverse)
 8018b10:	4b08      	ldr	r3, [pc, #32]	; (8018b34 <setDisplayamKopf+0x30>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d003      	beq.n	8018b24 <setDisplayamKopf+0x20>
		TFT_RAM = (0x0F);		// Bild umdrehen mit 0 oder 0x0f
 8018b1c:	4b06      	ldr	r3, [pc, #24]	; (8018b38 <setDisplayamKopf+0x34>)
 8018b1e:	220f      	movs	r2, #15
 8018b20:	801a      	strh	r2, [r3, #0]
	else
		TFT_RAM = (0x00);
}
 8018b22:	e002      	b.n	8018b2a <setDisplayamKopf+0x26>
		TFT_RAM = (0x00);
 8018b24:	4b04      	ldr	r3, [pc, #16]	; (8018b38 <setDisplayamKopf+0x34>)
 8018b26:	2200      	movs	r2, #0
 8018b28:	801a      	strh	r2, [r3, #0]
}
 8018b2a:	bf00      	nop
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b32:	4770      	bx	lr
 8018b34:	20000bf0 	.word	0x20000bf0
 8018b38:	60020000 	.word	0x60020000

08018b3c <TIM3_IRQHandler>:
volatile unsigned int civ_period;
int storeStartMenuFlag = 0;

// Handle TIM3 interrupt, einmal pro ms
void TIM3_IRQHandler(void)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	af00      	add	r7, sp, #0
static int w10s = 0;

	if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
 8018b40:	2101      	movs	r1, #1
 8018b42:	483b      	ldr	r0, [pc, #236]	; (8018c30 <TIM3_IRQHandler+0xf4>)
 8018b44:	f7f1 fa7c 	bl	800a040 <TIM_GetITStatus>
 8018b48:	4603      	mov	r3, r0
 8018b4a:	2b01      	cmp	r3, #1
 8018b4c:	d16e      	bne.n	8018c2c <TIM3_IRQHandler+0xf0>
	{
		tim3_cpt++;
 8018b4e:	4b39      	ldr	r3, [pc, #228]	; (8018c34 <TIM3_IRQHandler+0xf8>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	3301      	adds	r3, #1
 8018b54:	4a37      	ldr	r2, [pc, #220]	; (8018c34 <TIM3_IRQHandler+0xf8>)
 8018b56:	6013      	str	r3, [r2, #0]
		uptime++;
 8018b58:	4b37      	ldr	r3, [pc, #220]	; (8018c38 <TIM3_IRQHandler+0xfc>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	4a36      	ldr	r2, [pc, #216]	; (8018c38 <TIM3_IRQHandler+0xfc>)
 8018b60:	6013      	str	r3, [r2, #0]
		txtime++;
 8018b62:	4b36      	ldr	r3, [pc, #216]	; (8018c3c <TIM3_IRQHandler+0x100>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	3301      	adds	r3, #1
 8018b68:	4a34      	ldr	r2, [pc, #208]	; (8018c3c <TIM3_IRQHandler+0x100>)
 8018b6a:	6013      	str	r3, [r2, #0]
		swr_filter_fail++;
 8018b6c:	4b34      	ldr	r3, [pc, #208]	; (8018c40 <TIM3_IRQHandler+0x104>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	3301      	adds	r3, #1
 8018b72:	4a33      	ldr	r2, [pc, #204]	; (8018c40 <TIM3_IRQHandler+0x104>)
 8018b74:	6013      	str	r3, [r2, #0]
		swr_ant_fail++;
 8018b76:	4b33      	ldr	r3, [pc, #204]	; (8018c44 <TIM3_IRQHandler+0x108>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	3301      	adds	r3, #1
 8018b7c:	4a31      	ldr	r2, [pc, #196]	; (8018c44 <TIM3_IRQHandler+0x108>)
 8018b7e:	6013      	str	r3, [r2, #0]
		fwd_drv_fail++;
 8018b80:	4b31      	ldr	r3, [pc, #196]	; (8018c48 <TIM3_IRQHandler+0x10c>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	3301      	adds	r3, #1
 8018b86:	4a30      	ldr	r2, [pc, #192]	; (8018c48 <TIM3_IRQHandler+0x10c>)
 8018b88:	6013      	str	r3, [r2, #0]
		if(civ_period > 0) civ_period--;
 8018b8a:	4b30      	ldr	r3, [pc, #192]	; (8018c4c <TIM3_IRQHandler+0x110>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d004      	beq.n	8018b9c <TIM3_IRQHandler+0x60>
 8018b92:	4b2e      	ldr	r3, [pc, #184]	; (8018c4c <TIM3_IRQHandler+0x110>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	3b01      	subs	r3, #1
 8018b98:	4a2c      	ldr	r2, [pc, #176]	; (8018c4c <TIM3_IRQHandler+0x110>)
 8018b9a:	6013      	str	r3, [r2, #0]
		if(downcnt > 0) downcnt--;
 8018b9c:	4b2c      	ldr	r3, [pc, #176]	; (8018c50 <TIM3_IRQHandler+0x114>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d004      	beq.n	8018bae <TIM3_IRQHandler+0x72>
 8018ba4:	4b2a      	ldr	r3, [pc, #168]	; (8018c50 <TIM3_IRQHandler+0x114>)
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	3b01      	subs	r3, #1
 8018baa:	4a29      	ldr	r2, [pc, #164]	; (8018c50 <TIM3_IRQHandler+0x114>)
 8018bac:	6013      	str	r3, [r2, #0]
		if(hist_1s > 0) hist_1s--;
 8018bae:	4b29      	ldr	r3, [pc, #164]	; (8018c54 <TIM3_IRQHandler+0x118>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d004      	beq.n	8018bc0 <TIM3_IRQHandler+0x84>
 8018bb6:	4b27      	ldr	r3, [pc, #156]	; (8018c54 <TIM3_IRQHandler+0x118>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	3b01      	subs	r3, #1
 8018bbc:	4a25      	ldr	r2, [pc, #148]	; (8018c54 <TIM3_IRQHandler+0x118>)
 8018bbe:	6013      	str	r3, [r2, #0]
		if(hist_10ms > 0) hist_10ms--;
 8018bc0:	4b25      	ldr	r3, [pc, #148]	; (8018c58 <TIM3_IRQHandler+0x11c>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d004      	beq.n	8018bd2 <TIM3_IRQHandler+0x96>
 8018bc8:	4b23      	ldr	r3, [pc, #140]	; (8018c58 <TIM3_IRQHandler+0x11c>)
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	3b01      	subs	r3, #1
 8018bce:	4a22      	ldr	r2, [pc, #136]	; (8018c58 <TIM3_IRQHandler+0x11c>)
 8018bd0:	6013      	str	r3, [r2, #0]
		if(wifi_1s > 0) wifi_1s--;
 8018bd2:	4b22      	ldr	r3, [pc, #136]	; (8018c5c <TIM3_IRQHandler+0x120>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d004      	beq.n	8018be4 <TIM3_IRQHandler+0xa8>
 8018bda:	4b20      	ldr	r3, [pc, #128]	; (8018c5c <TIM3_IRQHandler+0x120>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	3b01      	subs	r3, #1
 8018be0:	4a1e      	ldr	r2, [pc, #120]	; (8018c5c <TIM3_IRQHandler+0x120>)
 8018be2:	6013      	str	r3, [r2, #0]

		fan_timer();
 8018be4:	f7f5 ffb8 	bl	800eb58 <fan_timer>

		if(--peakval_holdtime <= 0)
 8018be8:	4b1d      	ldr	r3, [pc, #116]	; (8018c60 <TIM3_IRQHandler+0x124>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	3b01      	subs	r3, #1
 8018bee:	4a1c      	ldr	r2, [pc, #112]	; (8018c60 <TIM3_IRQHandler+0x124>)
 8018bf0:	6013      	str	r3, [r2, #0]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	dc05      	bgt.n	8018c02 <TIM3_IRQHandler+0xc6>
		{
			clear_peakvals();
 8018bf6:	f7f1 fef1 	bl	800a9dc <clear_peakvals>
			peakval_holdtime = 2000;
 8018bfa:	4b19      	ldr	r3, [pc, #100]	; (8018c60 <TIM3_IRQHandler+0x124>)
 8018bfc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8018c00:	601a      	str	r2, [r3, #0]
		}

		// alle 20 Sekunden sichere aktuelles Menü, falls geändert
		if(++w10s >= 20000)
 8018c02:	4b18      	ldr	r3, [pc, #96]	; (8018c64 <TIM3_IRQHandler+0x128>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	3301      	adds	r3, #1
 8018c08:	4a16      	ldr	r2, [pc, #88]	; (8018c64 <TIM3_IRQHandler+0x128>)
 8018c0a:	6013      	str	r3, [r2, #0]
 8018c0c:	4b15      	ldr	r3, [pc, #84]	; (8018c64 <TIM3_IRQHandler+0x128>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8018c14:	4293      	cmp	r3, r2
 8018c16:	dd05      	ble.n	8018c24 <TIM3_IRQHandler+0xe8>
		{
			w10s = 0;
 8018c18:	4b12      	ldr	r3, [pc, #72]	; (8018c64 <TIM3_IRQHandler+0x128>)
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	601a      	str	r2, [r3, #0]
			storeStartMenuFlag = 1;
 8018c1e:	4b12      	ldr	r3, [pc, #72]	; (8018c68 <TIM3_IRQHandler+0x12c>)
 8018c20:	2201      	movs	r2, #1
 8018c22:	601a      	str	r2, [r3, #0]
		}

		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8018c24:	2101      	movs	r1, #1
 8018c26:	4802      	ldr	r0, [pc, #8]	; (8018c30 <TIM3_IRQHandler+0xf4>)
 8018c28:	f7f1 fa34 	bl	800a094 <TIM_ClearITPendingBit>
	}
}
 8018c2c:	bf00      	nop
 8018c2e:	bd80      	pop	{r7, pc}
 8018c30:	40000400 	.word	0x40000400
 8018c34:	2000278c 	.word	0x2000278c
 8018c38:	200027a4 	.word	0x200027a4
 8018c3c:	20002794 	.word	0x20002794
 8018c40:	20002798 	.word	0x20002798
 8018c44:	2000279c 	.word	0x2000279c
 8018c48:	200027a0 	.word	0x200027a0
 8018c4c:	2000706c 	.word	0x2000706c
 8018c50:	20002790 	.word	0x20002790
 8018c54:	20001b40 	.word	0x20001b40
 8018c58:	20001b44 	.word	0x20001b44
 8018c5c:	20001b48 	.word	0x20001b48
 8018c60:	200027a8 	.word	0x200027a8
 8018c64:	200027b0 	.word	0x200027b0
 8018c68:	200027ac 	.word	0x200027ac

08018c6c <TIM3_Initialization>:

void TIM3_Initialization()
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b084      	sub	sp, #16
 8018c70:	af00      	add	r7, sp, #0
 	NVIC_InitTypeDef NVIC_InitStructure;
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	// Enable the TIM3 gloabal Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8018c72:	231d      	movs	r3, #29
 8018c74:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8018c76:	2300      	movs	r3, #0
 8018c78:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8018c7e:	2301      	movs	r3, #1
 8018c80:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8018c82:	f107 030c 	add.w	r3, r7, #12
 8018c86:	4618      	mov	r0, r3
 8018c88:	f7f0 f896 	bl	8008db8 <NVIC_Init>

	// TIM3 clock enable
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8018c8c:	2101      	movs	r1, #1
 8018c8e:	2002      	movs	r0, #2
 8018c90:	f7f1 f824 	bl	8009cdc <RCC_APB1PeriphClockCmd>

	// APB1 hat 90 MHz
	TIM_TimeBaseStructure.TIM_Period = 90;			// hier noch 1 MHz
 8018c94:	235a      	movs	r3, #90	; 0x5a
 8018c96:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = 1000;		// und hier 1ms
 8018c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018c9c:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
 8018ca2:	2310      	movs	r3, #16
 8018ca4:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8018ca6:	463b      	mov	r3, r7
 8018ca8:	4619      	mov	r1, r3
 8018caa:	4808      	ldr	r0, [pc, #32]	; (8018ccc <TIM3_Initialization+0x60>)
 8018cac:	f7f1 f918 	bl	8009ee0 <TIM_TimeBaseInit>

	// Interrupt enable
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8018cb0:	2201      	movs	r2, #1
 8018cb2:	2101      	movs	r1, #1
 8018cb4:	4805      	ldr	r0, [pc, #20]	; (8018ccc <TIM3_Initialization+0x60>)
 8018cb6:	f7f1 f99f 	bl	8009ff8 <TIM_ITConfig>

	// TIM3 einschalten
	TIM_Cmd(TIM3, ENABLE);
 8018cba:	2101      	movs	r1, #1
 8018cbc:	4803      	ldr	r0, [pc, #12]	; (8018ccc <TIM3_Initialization+0x60>)
 8018cbe:	f7f1 f97b 	bl	8009fb8 <TIM_Cmd>
}
 8018cc2:	bf00      	nop
 8018cc4:	3710      	adds	r7, #16
 8018cc6:	46bd      	mov	sp, r7
 8018cc8:	bd80      	pop	{r7, pc}
 8018cca:	bf00      	nop
 8018ccc:	40000400 	.word	0x40000400

08018cd0 <delay_1ms>:

void delay_1ms(int ms)
{
 8018cd0:	b480      	push	{r7}
 8018cd2:	b083      	sub	sp, #12
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
	if(ms == 0) return;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d009      	beq.n	8018cf2 <delay_1ms+0x22>

	tim3_cpt=0;
 8018cde:	4b08      	ldr	r3, [pc, #32]	; (8018d00 <delay_1ms+0x30>)
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	601a      	str	r2, [r3, #0]
	while(tim3_cpt < ms);
 8018ce4:	bf00      	nop
 8018ce6:	4b06      	ldr	r3, [pc, #24]	; (8018d00 <delay_1ms+0x30>)
 8018ce8:	681a      	ldr	r2, [r3, #0]
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d3fa      	bcc.n	8018ce6 <delay_1ms+0x16>
 8018cf0:	e000      	b.n	8018cf4 <delay_1ms+0x24>
	if(ms == 0) return;
 8018cf2:	bf00      	nop
}
 8018cf4:	370c      	adds	r7, #12
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfc:	4770      	bx	lr
 8018cfe:	bf00      	nop
 8018d00:	2000278c 	.word	0x2000278c

08018d04 <set_Downcounter>:

void set_Downcounter(unsigned int ms)
{
 8018d04:	b480      	push	{r7}
 8018d06:	b083      	sub	sp, #12
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
	downcnt = ms;
 8018d0c:	4a04      	ldr	r2, [pc, #16]	; (8018d20 <set_Downcounter+0x1c>)
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	6013      	str	r3, [r2, #0]
}
 8018d12:	bf00      	nop
 8018d14:	370c      	adds	r7, #12
 8018d16:	46bd      	mov	sp, r7
 8018d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1c:	4770      	bx	lr
 8018d1e:	bf00      	nop
 8018d20:	20002790 	.word	0x20002790

08018d24 <check_Downcounter>:

int check_Downcounter()
{
 8018d24:	b480      	push	{r7}
 8018d26:	af00      	add	r7, sp, #0
	return downcnt;
 8018d28:	4b03      	ldr	r3, [pc, #12]	; (8018d38 <check_Downcounter+0x14>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
}
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr
 8018d36:	bf00      	nop
 8018d38:	20002790 	.word	0x20002790

08018d3c <set_touchref>:
#define	CHX 	0xD0
#define	CHY 	0x90
#define	CHZ 	0xB0

int set_touchref(int newleft, int newright, int newtop, int newbottom)
{
 8018d3c:	b480      	push	{r7}
 8018d3e:	b085      	sub	sp, #20
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	60f8      	str	r0, [r7, #12]
 8018d44:	60b9      	str	r1, [r7, #8]
 8018d46:	607a      	str	r2, [r7, #4]
 8018d48:	603b      	str	r3, [r7, #0]
	if(newright < 0 || newright > 500) return 0;
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	db03      	blt.n	8018d58 <set_touchref+0x1c>
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8018d56:	dd01      	ble.n	8018d5c <set_touchref+0x20>
 8018d58:	2300      	movs	r3, #0
 8018d5a:	e046      	b.n	8018dea <set_touchref+0xae>
	if(newleft < 3500 || newleft > 4095) return 0;
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	f640 52ab 	movw	r2, #3499	; 0xdab
 8018d62:	4293      	cmp	r3, r2
 8018d64:	dd03      	ble.n	8018d6e <set_touchref+0x32>
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018d6c:	db01      	blt.n	8018d72 <set_touchref+0x36>
 8018d6e:	2300      	movs	r3, #0
 8018d70:	e03b      	b.n	8018dea <set_touchref+0xae>
	if(newbottom < 0 || newbottom > 700) return 0;
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	db03      	blt.n	8018d80 <set_touchref+0x44>
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8018d7e:	dd01      	ble.n	8018d84 <set_touchref+0x48>
 8018d80:	2300      	movs	r3, #0
 8018d82:	e032      	b.n	8018dea <set_touchref+0xae>
	if(newtop < 3500 || newtop > 4095) return 0;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f640 52ab 	movw	r2, #3499	; 0xdab
 8018d8a:	4293      	cmp	r3, r2
 8018d8c:	dd03      	ble.n	8018d96 <set_touchref+0x5a>
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018d94:	db01      	blt.n	8018d9a <set_touchref+0x5e>
 8018d96:	2300      	movs	r3, #0
 8018d98:	e027      	b.n	8018dea <set_touchref+0xae>

	if(pcfgdata->display_reverse != 0)
 8018d9a:	4b17      	ldr	r3, [pc, #92]	; (8018df8 <set_touchref+0xbc>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d010      	beq.n	8018dc8 <set_touchref+0x8c>
	{
		pcfgdata->touch_left = newleft;
 8018da6:	4b14      	ldr	r3, [pc, #80]	; (8018df8 <set_touchref+0xbc>)
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	68fa      	ldr	r2, [r7, #12]
 8018dac:	605a      	str	r2, [r3, #4]
		pcfgdata->touch_right = newright;
 8018dae:	4b12      	ldr	r3, [pc, #72]	; (8018df8 <set_touchref+0xbc>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	68ba      	ldr	r2, [r7, #8]
 8018db4:	609a      	str	r2, [r3, #8]
		pcfgdata->touch_top = newtop;
 8018db6:	4b10      	ldr	r3, [pc, #64]	; (8018df8 <set_touchref+0xbc>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	687a      	ldr	r2, [r7, #4]
 8018dbc:	60da      	str	r2, [r3, #12]
		pcfgdata->touch_bottom = newbottom;
 8018dbe:	4b0e      	ldr	r3, [pc, #56]	; (8018df8 <set_touchref+0xbc>)
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	683a      	ldr	r2, [r7, #0]
 8018dc4:	611a      	str	r2, [r3, #16]
 8018dc6:	e00f      	b.n	8018de8 <set_touchref+0xac>
	}
	else
	{
		pcfgdata->touch_right = newleft;
 8018dc8:	4b0b      	ldr	r3, [pc, #44]	; (8018df8 <set_touchref+0xbc>)
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	68fa      	ldr	r2, [r7, #12]
 8018dce:	609a      	str	r2, [r3, #8]
		pcfgdata->touch_left = newright;
 8018dd0:	4b09      	ldr	r3, [pc, #36]	; (8018df8 <set_touchref+0xbc>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	68ba      	ldr	r2, [r7, #8]
 8018dd6:	605a      	str	r2, [r3, #4]
		pcfgdata->touch_bottom = newtop;
 8018dd8:	4b07      	ldr	r3, [pc, #28]	; (8018df8 <set_touchref+0xbc>)
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	687a      	ldr	r2, [r7, #4]
 8018dde:	611a      	str	r2, [r3, #16]
		pcfgdata->touch_top = newbottom;
 8018de0:	4b05      	ldr	r3, [pc, #20]	; (8018df8 <set_touchref+0xbc>)
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	683a      	ldr	r2, [r7, #0]
 8018de6:	60da      	str	r2, [r3, #12]
	}

	return 1;
 8018de8:	2301      	movs	r3, #1
}
 8018dea:	4618      	mov	r0, r3
 8018dec:	3714      	adds	r7, #20
 8018dee:	46bd      	mov	sp, r7
 8018df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df4:	4770      	bx	lr
 8018df6:	bf00      	nop
 8018df8:	20000bf0 	.word	0x20000bf0

08018dfc <touch_init>:

void touch_init()
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b088      	sub	sp, #32
 8018e00:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
	  SPI_InitTypeDef  SPI_InitStructure;

	  /* Configure GPIOs ---------------------------------------------------------*/
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8018e02:	2101      	movs	r1, #1
 8018e04:	2004      	movs	r0, #4
 8018e06:	f7f0 ff29 	bl	8009c5c <RCC_AHB1PeriphClockCmd>

	  /* Configure SPI3 pins: SCK, MISO and MOSI ---------------------------------*/
	  GPIO_InitStruct.GPIO_Pin = XPT2046_SCK_PIN | XPT2046_MISO_PIN | XPT2046_MOSI_PIN;
 8018e0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8018e0e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8018e10:	2302      	movs	r3, #2
 8018e12:	773b      	strb	r3, [r7, #28]
	  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8018e14:	2300      	movs	r3, #0
 8018e16:	77bb      	strb	r3, [r7, #30]
	  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8018e18:	2303      	movs	r3, #3
 8018e1a:	777b      	strb	r3, [r7, #29]
	  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	77fb      	strb	r3, [r7, #31]
	  GPIO_Init(XPT2046_PORT, &GPIO_InitStruct);
 8018e20:	f107 0318 	add.w	r3, r7, #24
 8018e24:	4619      	mov	r1, r3
 8018e26:	4827      	ldr	r0, [pc, #156]	; (8018ec4 <touch_init+0xc8>)
 8018e28:	f7f0 fd48 	bl	80098bc <GPIO_Init>

	  /* TP_CS */
	  GPIO_InitStruct.GPIO_Pin = XPT2046_CS_PIN;
 8018e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018e30:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8018e32:	2301      	movs	r3, #1
 8018e34:	773b      	strb	r3, [r7, #28]
	  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8018e36:	2300      	movs	r3, #0
 8018e38:	77bb      	strb	r3, [r7, #30]
	  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8018e3a:	2303      	movs	r3, #3
 8018e3c:	777b      	strb	r3, [r7, #29]
	  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	77fb      	strb	r3, [r7, #31]
	  GPIO_Init(XPT2046_PORT, &GPIO_InitStruct);
 8018e42:	f107 0318 	add.w	r3, r7, #24
 8018e46:	4619      	mov	r1, r3
 8018e48:	481e      	ldr	r0, [pc, #120]	; (8018ec4 <touch_init+0xc8>)
 8018e4a:	f7f0 fd37 	bl	80098bc <GPIO_Init>

	  GPIO_PinAFConfig(XPT2046_PORT, GPIO_PinSource10, GPIO_AF_SPI3);
 8018e4e:	2206      	movs	r2, #6
 8018e50:	210a      	movs	r1, #10
 8018e52:	481c      	ldr	r0, [pc, #112]	; (8018ec4 <touch_init+0xc8>)
 8018e54:	f7f0 fe10 	bl	8009a78 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(XPT2046_PORT, GPIO_PinSource11, GPIO_AF_SPI3);
 8018e58:	2206      	movs	r2, #6
 8018e5a:	210b      	movs	r1, #11
 8018e5c:	4819      	ldr	r0, [pc, #100]	; (8018ec4 <touch_init+0xc8>)
 8018e5e:	f7f0 fe0b 	bl	8009a78 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(XPT2046_PORT, GPIO_PinSource12, GPIO_AF_SPI3);
 8018e62:	2206      	movs	r2, #6
 8018e64:	210c      	movs	r1, #12
 8018e66:	4817      	ldr	r0, [pc, #92]	; (8018ec4 <touch_init+0xc8>)
 8018e68:	f7f0 fe06 	bl	8009a78 <GPIO_PinAFConfig>

	  set_touchCS();
 8018e6c:	f000 f82e 	bl	8018ecc <set_touchCS>

	  /* Configure SPI -----------------------------------------------------------*/
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8018e70:	2101      	movs	r1, #1
 8018e72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8018e76:	f7f0 ff31 	bl	8009cdc <RCC_APB1PeriphClockCmd>
	  /* DISABLE SPI3 */
	  SPI_Cmd(SPI3, DISABLE);
 8018e7a:	2100      	movs	r1, #0
 8018e7c:	4812      	ldr	r0, [pc, #72]	; (8018ec8 <touch_init+0xcc>)
 8018e7e:	f7f0 ffd6 	bl	8009e2e <SPI_Cmd>
	  /* SPI3 Config -------------------------------------------------------------*/
	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8018e82:	2300      	movs	r3, #0
 8018e84:	80bb      	strh	r3, [r7, #4]
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8018e86:	f44f 7382 	mov.w	r3, #260	; 0x104
 8018e8a:	80fb      	strh	r3, [r7, #6]
	  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	813b      	strh	r3, [r7, #8]
	  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8018e90:	2300      	movs	r3, #0
 8018e92:	817b      	strh	r3, [r7, #10]
	  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8018e94:	2300      	movs	r3, #0
 8018e96:	81bb      	strh	r3, [r7, #12]
	  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8018e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018e9c:	81fb      	strh	r3, [r7, #14]
	  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8018e9e:	2330      	movs	r3, #48	; 0x30
 8018ea0:	823b      	strh	r3, [r7, #16]
	  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	827b      	strh	r3, [r7, #18]
	  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8018ea6:	2307      	movs	r3, #7
 8018ea8:	82bb      	strh	r3, [r7, #20]
	  SPI_Init(SPI3, &SPI_InitStructure);
 8018eaa:	1d3b      	adds	r3, r7, #4
 8018eac:	4619      	mov	r1, r3
 8018eae:	4806      	ldr	r0, [pc, #24]	; (8018ec8 <touch_init+0xcc>)
 8018eb0:	f7f0 ff54 	bl	8009d5c <SPI_Init>
	  /* Enable SPI3 */
	  SPI_Cmd(SPI3, ENABLE);
 8018eb4:	2101      	movs	r1, #1
 8018eb6:	4804      	ldr	r0, [pc, #16]	; (8018ec8 <touch_init+0xcc>)
 8018eb8:	f7f0 ffb9 	bl	8009e2e <SPI_Cmd>
}
 8018ebc:	bf00      	nop
 8018ebe:	3720      	adds	r7, #32
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}
 8018ec4:	40020800 	.word	0x40020800
 8018ec8:	40003c00 	.word	0x40003c00

08018ecc <set_touchCS>:

void set_touchCS(void)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	af00      	add	r7, sp, #0
  GPIO_SetBits(XPT2046_PORT, XPT2046_CS_PIN);
 8018ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018ed4:	4802      	ldr	r0, [pc, #8]	; (8018ee0 <set_touchCS+0x14>)
 8018ed6:	f7f0 fd99 	bl	8009a0c <GPIO_SetBits>
}
 8018eda:	bf00      	nop
 8018edc:	bd80      	pop	{r7, pc}
 8018ede:	bf00      	nop
 8018ee0:	40020800 	.word	0x40020800

08018ee4 <reset_touchCS>:

void reset_touchCS(void)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	af00      	add	r7, sp, #0
  GPIO_ResetBits(XPT2046_PORT, XPT2046_CS_PIN);
 8018ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018eec:	4802      	ldr	r0, [pc, #8]	; (8018ef8 <reset_touchCS+0x14>)
 8018eee:	f7f0 fd9c 	bl	8009a2a <GPIO_ResetBits>
}
 8018ef2:	bf00      	nop
 8018ef4:	bd80      	pop	{r7, pc}
 8018ef6:	bf00      	nop
 8018ef8:	40020800 	.word	0x40020800

08018efc <Read_X>:

uint16_t Read_X(void)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b082      	sub	sp, #8
 8018f00:	af00      	add	r7, sp, #0
  uint16_t curr_X;

  reset_touchCS();
 8018f02:	f7ff ffef 	bl	8018ee4 <reset_touchCS>
  WR_CMD(CHX);
 8018f06:	20d0      	movs	r0, #208	; 0xd0
 8018f08:	f000 fad8 	bl	80194bc <WR_CMD>
  curr_X=RD_AD();
 8018f0c:	f000 fafa 	bl	8019504 <RD_AD>
 8018f10:	4603      	mov	r3, r0
 8018f12:	80fb      	strh	r3, [r7, #6]
  set_touchCS();
 8018f14:	f7ff ffda 	bl	8018ecc <set_touchCS>
  return curr_X;
 8018f18:	88fb      	ldrh	r3, [r7, #6]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3708      	adds	r7, #8
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}

08018f22 <Read_Y>:

uint16_t Read_Y(void)
{
 8018f22:	b580      	push	{r7, lr}
 8018f24:	b082      	sub	sp, #8
 8018f26:	af00      	add	r7, sp, #0
  uint16_t curr_Y;

  reset_touchCS();
 8018f28:	f7ff ffdc 	bl	8018ee4 <reset_touchCS>
  WR_CMD(CHY);
 8018f2c:	2090      	movs	r0, #144	; 0x90
 8018f2e:	f000 fac5 	bl	80194bc <WR_CMD>
  curr_Y=RD_AD();
 8018f32:	f000 fae7 	bl	8019504 <RD_AD>
 8018f36:	4603      	mov	r3, r0
 8018f38:	80fb      	strh	r3, [r7, #6]
  set_touchCS();
 8018f3a:	f7ff ffc7 	bl	8018ecc <set_touchCS>
  return curr_Y;
 8018f3e:	88fb      	ldrh	r3, [r7, #6]
}
 8018f40:	4618      	mov	r0, r3
 8018f42:	3708      	adds	r7, #8
 8018f44:	46bd      	mov	sp, r7
 8018f46:	bd80      	pop	{r7, pc}

08018f48 <Read_Z>:

uint16_t Read_Z(void)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
  uint16_t curr_Z;

  reset_touchCS();
 8018f4e:	f7ff ffc9 	bl	8018ee4 <reset_touchCS>
  WR_CMD(CHZ);
 8018f52:	20b0      	movs	r0, #176	; 0xb0
 8018f54:	f000 fab2 	bl	80194bc <WR_CMD>
  curr_Z=RD_AD();
 8018f58:	f000 fad4 	bl	8019504 <RD_AD>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	80fb      	strh	r3, [r7, #6]
  set_touchCS();
 8018f60:	f7ff ffb4 	bl	8018ecc <set_touchCS>
  return curr_Z;
 8018f64:	88fb      	ldrh	r3, [r7, #6]
}
 8018f66:	4618      	mov	r0, r3
 8018f68:	3708      	adds	r7, #8
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd80      	pop	{r7, pc}

08018f6e <del_value>:

#define MAXTOUCHLOOPS 10

void del_value(uint16_t *arr, int mode)
{
 8018f6e:	b480      	push	{r7}
 8018f70:	b085      	sub	sp, #20
 8018f72:	af00      	add	r7, sp, #0
 8018f74:	6078      	str	r0, [r7, #4]
 8018f76:	6039      	str	r1, [r7, #0]
	uint16_t vmin = 0, vmax=29999;
 8018f78:	2300      	movs	r3, #0
 8018f7a:	81fb      	strh	r3, [r7, #14]
 8018f7c:	f247 532f 	movw	r3, #29999	; 0x752f
 8018f80:	81bb      	strh	r3, [r7, #12]
	uint16_t di = 0;
 8018f82:	2300      	movs	r3, #0
 8018f84:	817b      	strh	r3, [r7, #10]
	for(uint16_t i=0; i<MAXTOUCHLOOPS; i++)
 8018f86:	2300      	movs	r3, #0
 8018f88:	813b      	strh	r3, [r7, #8]
 8018f8a:	e026      	b.n	8018fda <del_value+0x6c>
	{
		if(mode)
 8018f8c:	683b      	ldr	r3, [r7, #0]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d010      	beq.n	8018fb4 <del_value+0x46>
		{
			if(arr[i] > vmin)
 8018f92:	893b      	ldrh	r3, [r7, #8]
 8018f94:	005b      	lsls	r3, r3, #1
 8018f96:	687a      	ldr	r2, [r7, #4]
 8018f98:	4413      	add	r3, r2
 8018f9a:	881b      	ldrh	r3, [r3, #0]
 8018f9c:	89fa      	ldrh	r2, [r7, #14]
 8018f9e:	429a      	cmp	r2, r3
 8018fa0:	d218      	bcs.n	8018fd4 <del_value+0x66>
			{
				vmin = arr[i];
 8018fa2:	893b      	ldrh	r3, [r7, #8]
 8018fa4:	005b      	lsls	r3, r3, #1
 8018fa6:	687a      	ldr	r2, [r7, #4]
 8018fa8:	4413      	add	r3, r2
 8018faa:	881b      	ldrh	r3, [r3, #0]
 8018fac:	81fb      	strh	r3, [r7, #14]
				di = i;
 8018fae:	893b      	ldrh	r3, [r7, #8]
 8018fb0:	817b      	strh	r3, [r7, #10]
 8018fb2:	e00f      	b.n	8018fd4 <del_value+0x66>
			}
		}
		else
		{
			if(arr[i] < vmax)
 8018fb4:	893b      	ldrh	r3, [r7, #8]
 8018fb6:	005b      	lsls	r3, r3, #1
 8018fb8:	687a      	ldr	r2, [r7, #4]
 8018fba:	4413      	add	r3, r2
 8018fbc:	881b      	ldrh	r3, [r3, #0]
 8018fbe:	89ba      	ldrh	r2, [r7, #12]
 8018fc0:	429a      	cmp	r2, r3
 8018fc2:	d907      	bls.n	8018fd4 <del_value+0x66>
			{
				vmax = arr[i];
 8018fc4:	893b      	ldrh	r3, [r7, #8]
 8018fc6:	005b      	lsls	r3, r3, #1
 8018fc8:	687a      	ldr	r2, [r7, #4]
 8018fca:	4413      	add	r3, r2
 8018fcc:	881b      	ldrh	r3, [r3, #0]
 8018fce:	81bb      	strh	r3, [r7, #12]
				di = i;
 8018fd0:	893b      	ldrh	r3, [r7, #8]
 8018fd2:	817b      	strh	r3, [r7, #10]
	for(uint16_t i=0; i<MAXTOUCHLOOPS; i++)
 8018fd4:	893b      	ldrh	r3, [r7, #8]
 8018fd6:	3301      	adds	r3, #1
 8018fd8:	813b      	strh	r3, [r7, #8]
 8018fda:	893b      	ldrh	r3, [r7, #8]
 8018fdc:	2b09      	cmp	r3, #9
 8018fde:	d9d5      	bls.n	8018f8c <del_value+0x1e>
			}
		}
	}
	arr[di] = 29999;
 8018fe0:	897b      	ldrh	r3, [r7, #10]
 8018fe2:	005b      	lsls	r3, r3, #1
 8018fe4:	687a      	ldr	r2, [r7, #4]
 8018fe6:	4413      	add	r3, r2
 8018fe8:	f247 522f 	movw	r2, #29999	; 0x752f
 8018fec:	801a      	strh	r2, [r3, #0]
}
 8018fee:	bf00      	nop
 8018ff0:	3714      	adds	r7, #20
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ff8:	4770      	bx	lr
	...

08018ffc <XPT2046_GetAdXY>:

#define TOUCHMAXDIFF	150
int lastx,lasty;

int XPT2046_GetAdXY(int *x,int *y, int *rawx, int *rawy)
{
 8018ffc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8019000:	b09a      	sub	sp, #104	; 0x68
 8019002:	af00      	add	r7, sp, #0
 8019004:	60f8      	str	r0, [r7, #12]
 8019006:	60b9      	str	r1, [r7, #8]
 8019008:	607a      	str	r2, [r7, #4]
 801900a:	603b      	str	r3, [r7, #0]
uint16_t i,vx,vy,vz,xanz,yanz,zanz;
uint16_t xarr[MAXTOUCHLOOPS],yarr[MAXTOUCHLOOPS],zarr[MAXTOUCHLOOPS];
int ret = 0;
 801900c:	2300      	movs	r3, #0
 801900e:	657b      	str	r3, [r7, #84]	; 0x54

	// Lese n Werte
	for(i=0; i<MAXTOUCHLOOPS; i++)
 8019010:	2300      	movs	r3, #0
 8019012:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8019016:	e028      	b.n	801906a <XPT2046_GetAdXY+0x6e>
	{
		xarr[i] = Read_X();
 8019018:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 801901c:	f7ff ff6e 	bl	8018efc <Read_X>
 8019020:	4603      	mov	r3, r0
 8019022:	461a      	mov	r2, r3
 8019024:	0063      	lsls	r3, r4, #1
 8019026:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801902a:	440b      	add	r3, r1
 801902c:	f823 2c2c 	strh.w	r2, [r3, #-44]
		yarr[i] = Read_Y();
 8019030:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8019034:	f7ff ff75 	bl	8018f22 <Read_Y>
 8019038:	4603      	mov	r3, r0
 801903a:	461a      	mov	r2, r3
 801903c:	0063      	lsls	r3, r4, #1
 801903e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8019042:	440b      	add	r3, r1
 8019044:	f823 2c40 	strh.w	r2, [r3, #-64]
		zarr[i] = Read_Z();
 8019048:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 801904c:	f7ff ff7c 	bl	8018f48 <Read_Z>
 8019050:	4603      	mov	r3, r0
 8019052:	461a      	mov	r2, r3
 8019054:	0063      	lsls	r3, r4, #1
 8019056:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801905a:	440b      	add	r3, r1
 801905c:	f823 2c54 	strh.w	r2, [r3, #-84]
	for(i=0; i<MAXTOUCHLOOPS; i++)
 8019060:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8019064:	3301      	adds	r3, #1
 8019066:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801906a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801906e:	2b09      	cmp	r3, #9
 8019070:	d9d2      	bls.n	8019018 <XPT2046_GetAdXY+0x1c>
	}

	// Lösche höchsten und niedrigsten Wert
	del_value(xarr,0);
 8019072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019076:	2100      	movs	r1, #0
 8019078:	4618      	mov	r0, r3
 801907a:	f7ff ff78 	bl	8018f6e <del_value>
	del_value(xarr,1);
 801907e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019082:	2101      	movs	r1, #1
 8019084:	4618      	mov	r0, r3
 8019086:	f7ff ff72 	bl	8018f6e <del_value>
	del_value(yarr,0);
 801908a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801908e:	2100      	movs	r1, #0
 8019090:	4618      	mov	r0, r3
 8019092:	f7ff ff6c 	bl	8018f6e <del_value>
	del_value(yarr,1);
 8019096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801909a:	2101      	movs	r1, #1
 801909c:	4618      	mov	r0, r3
 801909e:	f7ff ff66 	bl	8018f6e <del_value>
	del_value(zarr,0);
 80190a2:	f107 0314 	add.w	r3, r7, #20
 80190a6:	2100      	movs	r1, #0
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7ff ff60 	bl	8018f6e <del_value>
	del_value(zarr,1);
 80190ae:	f107 0314 	add.w	r3, r7, #20
 80190b2:	2101      	movs	r1, #1
 80190b4:	4618      	mov	r0, r3
 80190b6:	f7ff ff5a 	bl	8018f6e <del_value>

	// bilde Mittelwert aus den verbliebenen Werten
	vx = vy = vz = xanz = yanz = zanz =0;
 80190ba:	2300      	movs	r3, #0
 80190bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80190c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80190c4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80190c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80190cc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80190d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80190d4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80190d8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80190dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80190e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80190e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	for(i=0; i<MAXTOUCHLOOPS; i++)
 80190e8:	2300      	movs	r3, #0
 80190ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80190ee:	e05e      	b.n	80191ae <XPT2046_GetAdXY+0x1b2>
	{
		if(xarr[i] < 9999) { vx += xarr[i]; xanz++; }
 80190f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80190f4:	005b      	lsls	r3, r3, #1
 80190f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80190fa:	4413      	add	r3, r2
 80190fc:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8019100:	f242 720e 	movw	r2, #9998	; 0x270e
 8019104:	4293      	cmp	r3, r2
 8019106:	d811      	bhi.n	801912c <XPT2046_GetAdXY+0x130>
 8019108:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801910c:	005b      	lsls	r3, r3, #1
 801910e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8019112:	4413      	add	r3, r2
 8019114:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 8019118:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801911c:	4413      	add	r3, r2
 801911e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8019122:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019126:	3301      	adds	r3, #1
 8019128:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		if(yarr[i] < 9999) { vy += yarr[i]; yanz++; }
 801912c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8019130:	005b      	lsls	r3, r3, #1
 8019132:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8019136:	4413      	add	r3, r2
 8019138:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 801913c:	f242 720e 	movw	r2, #9998	; 0x270e
 8019140:	4293      	cmp	r3, r2
 8019142:	d811      	bhi.n	8019168 <XPT2046_GetAdXY+0x16c>
 8019144:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8019148:	005b      	lsls	r3, r3, #1
 801914a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801914e:	4413      	add	r3, r2
 8019150:	f833 2c40 	ldrh.w	r2, [r3, #-64]
 8019154:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8019158:	4413      	add	r3, r2
 801915a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801915e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019162:	3301      	adds	r3, #1
 8019164:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		if(zarr[i] < 9999) { vz += zarr[i]; zanz++; }
 8019168:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801916c:	005b      	lsls	r3, r3, #1
 801916e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8019172:	4413      	add	r3, r2
 8019174:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8019178:	f242 720e 	movw	r2, #9998	; 0x270e
 801917c:	4293      	cmp	r3, r2
 801917e:	d811      	bhi.n	80191a4 <XPT2046_GetAdXY+0x1a8>
 8019180:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8019184:	005b      	lsls	r3, r3, #1
 8019186:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801918a:	4413      	add	r3, r2
 801918c:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8019190:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8019194:	4413      	add	r3, r2
 8019196:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801919a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801919e:	3301      	adds	r3, #1
 80191a0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	for(i=0; i<MAXTOUCHLOOPS; i++)
 80191a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80191a8:	3301      	adds	r3, #1
 80191aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80191ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80191b2:	2b09      	cmp	r3, #9
 80191b4:	d99c      	bls.n	80190f0 <XPT2046_GetAdXY+0xf4>
	}

	*x= vx/xanz;
 80191b6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80191ba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80191be:	fbb2 f3f3 	udiv	r3, r2, r3
 80191c2:	b29b      	uxth	r3, r3
 80191c4:	461a      	mov	r2, r3
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	601a      	str	r2, [r3, #0]
	*y= vy/yanz;
 80191ca:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80191ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80191d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80191d6:	b29b      	uxth	r3, r3
 80191d8:	461a      	mov	r2, r3
 80191da:	68bb      	ldr	r3, [r7, #8]
 80191dc:	601a      	str	r2, [r3, #0]
	int z= vz/zanz;
 80191de:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80191e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80191e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80191ea:	b29b      	uxth	r3, r3
 80191ec:	653b      	str	r3, [r7, #80]	; 0x50

	if(z > 100 && *x<=(lastx+TOUCHMAXDIFF) && *x>=(lastx-TOUCHMAXDIFF) && *y<=(lasty+TOUCHMAXDIFF) && *y>=(lasty-TOUCHMAXDIFF))
 80191ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191f0:	2b64      	cmp	r3, #100	; 0x64
 80191f2:	dd1d      	ble.n	8019230 <XPT2046_GetAdXY+0x234>
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	4bad      	ldr	r3, [pc, #692]	; (80194b0 <XPT2046_GetAdXY+0x4b4>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	3396      	adds	r3, #150	; 0x96
 80191fe:	429a      	cmp	r2, r3
 8019200:	dc16      	bgt.n	8019230 <XPT2046_GetAdXY+0x234>
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	681a      	ldr	r2, [r3, #0]
 8019206:	4baa      	ldr	r3, [pc, #680]	; (80194b0 <XPT2046_GetAdXY+0x4b4>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	3b96      	subs	r3, #150	; 0x96
 801920c:	429a      	cmp	r2, r3
 801920e:	db0f      	blt.n	8019230 <XPT2046_GetAdXY+0x234>
 8019210:	68bb      	ldr	r3, [r7, #8]
 8019212:	681a      	ldr	r2, [r3, #0]
 8019214:	4ba7      	ldr	r3, [pc, #668]	; (80194b4 <XPT2046_GetAdXY+0x4b8>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	3396      	adds	r3, #150	; 0x96
 801921a:	429a      	cmp	r2, r3
 801921c:	dc08      	bgt.n	8019230 <XPT2046_GetAdXY+0x234>
 801921e:	68bb      	ldr	r3, [r7, #8]
 8019220:	681a      	ldr	r2, [r3, #0]
 8019222:	4ba4      	ldr	r3, [pc, #656]	; (80194b4 <XPT2046_GetAdXY+0x4b8>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	3b96      	subs	r3, #150	; 0x96
 8019228:	429a      	cmp	r2, r3
 801922a:	db01      	blt.n	8019230 <XPT2046_GetAdXY+0x234>
		ret = 1;
 801922c:	2301      	movs	r3, #1
 801922e:	657b      	str	r3, [r7, #84]	; 0x54

	*rawx = lastx = *x;
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	4a9e      	ldr	r2, [pc, #632]	; (80194b0 <XPT2046_GetAdXY+0x4b4>)
 8019236:	6013      	str	r3, [r2, #0]
 8019238:	4b9d      	ldr	r3, [pc, #628]	; (80194b0 <XPT2046_GetAdXY+0x4b4>)
 801923a:	681a      	ldr	r2, [r3, #0]
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	601a      	str	r2, [r3, #0]
	*rawy = lasty = *y;
 8019240:	68bb      	ldr	r3, [r7, #8]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	4a9b      	ldr	r2, [pc, #620]	; (80194b4 <XPT2046_GetAdXY+0x4b8>)
 8019246:	6013      	str	r3, [r2, #0]
 8019248:	4b9a      	ldr	r3, [pc, #616]	; (80194b4 <XPT2046_GetAdXY+0x4b8>)
 801924a:	681a      	ldr	r2, [r3, #0]
 801924c:	683b      	ldr	r3, [r7, #0]
 801924e:	601a      	str	r2, [r3, #0]

	// rechne Touch- in Displaykoordinaten um
	if(pcfgdata->touch_left > pcfgdata->touch_right)
 8019250:	4b99      	ldr	r3, [pc, #612]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	685a      	ldr	r2, [r3, #4]
 8019256:	4b98      	ldr	r3, [pc, #608]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	689b      	ldr	r3, [r3, #8]
 801925c:	429a      	cmp	r2, r3
 801925e:	dd45      	ble.n	80192ec <XPT2046_GetAdXY+0x2f0>
		*x = ((*x - pcfgdata->touch_right) * TFT_WIDTH) / (pcfgdata->touch_left - pcfgdata->touch_right);
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	681a      	ldr	r2, [r3, #0]
 8019264:	4b94      	ldr	r3, [pc, #592]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	689b      	ldr	r3, [r3, #8]
 801926a:	1ad3      	subs	r3, r2, r3
 801926c:	461d      	mov	r5, r3
 801926e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8019272:	46ab      	mov	fp, r5
 8019274:	46b4      	mov	ip, r6
 8019276:	eb1b 030b 	adds.w	r3, fp, fp
 801927a:	eb4c 040c 	adc.w	r4, ip, ip
 801927e:	469b      	mov	fp, r3
 8019280:	46a4      	mov	ip, r4
 8019282:	eb1b 0b05 	adds.w	fp, fp, r5
 8019286:	eb4c 0c06 	adc.w	ip, ip, r6
 801928a:	f04f 0100 	mov.w	r1, #0
 801928e:	f04f 0200 	mov.w	r2, #0
 8019292:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019296:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 801929a:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 801929e:	468b      	mov	fp, r1
 80192a0:	4694      	mov	ip, r2
 80192a2:	eb1b 0b05 	adds.w	fp, fp, r5
 80192a6:	eb4c 0c06 	adc.w	ip, ip, r6
 80192aa:	f04f 0100 	mov.w	r1, #0
 80192ae:	f04f 0200 	mov.w	r2, #0
 80192b2:	ea4f 124c 	mov.w	r2, ip, lsl #5
 80192b6:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 80192ba:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80192be:	468b      	mov	fp, r1
 80192c0:	4694      	mov	ip, r2
 80192c2:	4658      	mov	r0, fp
 80192c4:	4661      	mov	r1, ip
 80192c6:	4b7c      	ldr	r3, [pc, #496]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	685a      	ldr	r2, [r3, #4]
 80192cc:	4b7a      	ldr	r3, [pc, #488]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	689b      	ldr	r3, [r3, #8]
 80192d2:	1ad3      	subs	r3, r2, r3
 80192d4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80192d8:	461a      	mov	r2, r3
 80192da:	4623      	mov	r3, r4
 80192dc:	f7ef fbec 	bl	8008ab8 <__aeabi_uldivmod>
 80192e0:	4603      	mov	r3, r0
 80192e2:	460c      	mov	r4, r1
 80192e4:	461a      	mov	r2, r3
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	601a      	str	r2, [r3, #0]
 80192ea:	e044      	b.n	8019376 <XPT2046_GetAdXY+0x37a>
	else
		*x = ((*x - pcfgdata->touch_left) * TFT_WIDTH) / (pcfgdata->touch_right - pcfgdata->touch_left);
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	681a      	ldr	r2, [r3, #0]
 80192f0:	4b71      	ldr	r3, [pc, #452]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	685b      	ldr	r3, [r3, #4]
 80192f6:	1ad3      	subs	r3, r2, r3
 80192f8:	461d      	mov	r5, r3
 80192fa:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80192fe:	46ab      	mov	fp, r5
 8019300:	46b4      	mov	ip, r6
 8019302:	eb1b 030b 	adds.w	r3, fp, fp
 8019306:	eb4c 040c 	adc.w	r4, ip, ip
 801930a:	469b      	mov	fp, r3
 801930c:	46a4      	mov	ip, r4
 801930e:	eb1b 0b05 	adds.w	fp, fp, r5
 8019312:	eb4c 0c06 	adc.w	ip, ip, r6
 8019316:	f04f 0100 	mov.w	r1, #0
 801931a:	f04f 0200 	mov.w	r2, #0
 801931e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019322:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8019326:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 801932a:	468b      	mov	fp, r1
 801932c:	4694      	mov	ip, r2
 801932e:	eb1b 0b05 	adds.w	fp, fp, r5
 8019332:	eb4c 0c06 	adc.w	ip, ip, r6
 8019336:	f04f 0100 	mov.w	r1, #0
 801933a:	f04f 0200 	mov.w	r2, #0
 801933e:	ea4f 124c 	mov.w	r2, ip, lsl #5
 8019342:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8019346:	ea4f 114b 	mov.w	r1, fp, lsl #5
 801934a:	468b      	mov	fp, r1
 801934c:	4694      	mov	ip, r2
 801934e:	4658      	mov	r0, fp
 8019350:	4661      	mov	r1, ip
 8019352:	4b59      	ldr	r3, [pc, #356]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	689a      	ldr	r2, [r3, #8]
 8019358:	4b57      	ldr	r3, [pc, #348]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	685b      	ldr	r3, [r3, #4]
 801935e:	1ad3      	subs	r3, r2, r3
 8019360:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8019364:	461a      	mov	r2, r3
 8019366:	4623      	mov	r3, r4
 8019368:	f7ef fba6 	bl	8008ab8 <__aeabi_uldivmod>
 801936c:	4603      	mov	r3, r0
 801936e:	460c      	mov	r4, r1
 8019370:	461a      	mov	r2, r3
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	601a      	str	r2, [r3, #0]
	*x = TFT_WIDTH - *x;
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 801937e:	461a      	mov	r2, r3
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	601a      	str	r2, [r3, #0]

	if(pcfgdata->touch_top > pcfgdata->touch_bottom)
 8019384:	4b4c      	ldr	r3, [pc, #304]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	68da      	ldr	r2, [r3, #12]
 801938a:	4b4b      	ldr	r3, [pc, #300]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	691b      	ldr	r3, [r3, #16]
 8019390:	429a      	cmp	r2, r3
 8019392:	dd36      	ble.n	8019402 <XPT2046_GetAdXY+0x406>
		*y = ((*y - pcfgdata->touch_bottom) * TFT_HEIGHT) / (pcfgdata->touch_top - pcfgdata->touch_bottom);
 8019394:	68bb      	ldr	r3, [r7, #8]
 8019396:	681a      	ldr	r2, [r3, #0]
 8019398:	4b47      	ldr	r3, [pc, #284]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	691b      	ldr	r3, [r3, #16]
 801939e:	1ad3      	subs	r3, r2, r3
 80193a0:	461d      	mov	r5, r3
 80193a2:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80193a6:	462b      	mov	r3, r5
 80193a8:	4634      	mov	r4, r6
 80193aa:	f04f 0100 	mov.w	r1, #0
 80193ae:	f04f 0200 	mov.w	r2, #0
 80193b2:	0122      	lsls	r2, r4, #4
 80193b4:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80193b8:	0119      	lsls	r1, r3, #4
 80193ba:	460b      	mov	r3, r1
 80193bc:	4614      	mov	r4, r2
 80193be:	1b5b      	subs	r3, r3, r5
 80193c0:	eb64 0406 	sbc.w	r4, r4, r6
 80193c4:	f04f 0100 	mov.w	r1, #0
 80193c8:	f04f 0200 	mov.w	r2, #0
 80193cc:	0162      	lsls	r2, r4, #5
 80193ce:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80193d2:	0159      	lsls	r1, r3, #5
 80193d4:	460b      	mov	r3, r1
 80193d6:	4614      	mov	r4, r2
 80193d8:	4618      	mov	r0, r3
 80193da:	4621      	mov	r1, r4
 80193dc:	4b36      	ldr	r3, [pc, #216]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	68da      	ldr	r2, [r3, #12]
 80193e2:	4b35      	ldr	r3, [pc, #212]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	691b      	ldr	r3, [r3, #16]
 80193e8:	1ad3      	subs	r3, r2, r3
 80193ea:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80193ee:	461a      	mov	r2, r3
 80193f0:	4623      	mov	r3, r4
 80193f2:	f7ef fb61 	bl	8008ab8 <__aeabi_uldivmod>
 80193f6:	4603      	mov	r3, r0
 80193f8:	460c      	mov	r4, r1
 80193fa:	461a      	mov	r2, r3
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	601a      	str	r2, [r3, #0]
 8019400:	e035      	b.n	801946e <XPT2046_GetAdXY+0x472>
	else
		*y = ((*y - pcfgdata->touch_top) * TFT_HEIGHT) / (pcfgdata->touch_bottom - pcfgdata->touch_top);
 8019402:	68bb      	ldr	r3, [r7, #8]
 8019404:	681a      	ldr	r2, [r3, #0]
 8019406:	4b2c      	ldr	r3, [pc, #176]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	68db      	ldr	r3, [r3, #12]
 801940c:	1ad3      	subs	r3, r2, r3
 801940e:	461d      	mov	r5, r3
 8019410:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8019414:	462b      	mov	r3, r5
 8019416:	4634      	mov	r4, r6
 8019418:	f04f 0100 	mov.w	r1, #0
 801941c:	f04f 0200 	mov.w	r2, #0
 8019420:	0122      	lsls	r2, r4, #4
 8019422:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8019426:	0119      	lsls	r1, r3, #4
 8019428:	460b      	mov	r3, r1
 801942a:	4614      	mov	r4, r2
 801942c:	1b5b      	subs	r3, r3, r5
 801942e:	eb64 0406 	sbc.w	r4, r4, r6
 8019432:	f04f 0100 	mov.w	r1, #0
 8019436:	f04f 0200 	mov.w	r2, #0
 801943a:	0162      	lsls	r2, r4, #5
 801943c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8019440:	0159      	lsls	r1, r3, #5
 8019442:	460b      	mov	r3, r1
 8019444:	4614      	mov	r4, r2
 8019446:	4618      	mov	r0, r3
 8019448:	4621      	mov	r1, r4
 801944a:	4b1b      	ldr	r3, [pc, #108]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	691a      	ldr	r2, [r3, #16]
 8019450:	4b19      	ldr	r3, [pc, #100]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	1ad3      	subs	r3, r2, r3
 8019458:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801945c:	461a      	mov	r2, r3
 801945e:	4623      	mov	r3, r4
 8019460:	f7ef fb2a 	bl	8008ab8 <__aeabi_uldivmod>
 8019464:	4603      	mov	r3, r0
 8019466:	460c      	mov	r4, r1
 8019468:	461a      	mov	r2, r3
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	601a      	str	r2, [r3, #0]
	*y = TFT_HEIGHT - *y;
 801946e:	68bb      	ldr	r3, [r7, #8]
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8019476:	461a      	mov	r2, r3
 8019478:	68bb      	ldr	r3, [r7, #8]
 801947a:	601a      	str	r2, [r3, #0]

	if(pcfgdata->display_reverse == 0)
 801947c:	4b0e      	ldr	r3, [pc, #56]	; (80194b8 <XPT2046_GetAdXY+0x4bc>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8019484:	2b00      	cmp	r3, #0
 8019486:	d10d      	bne.n	80194a4 <XPT2046_GetAdXY+0x4a8>
	{
		*x = TFT_WIDTH - *x;
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8019490:	461a      	mov	r2, r3
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	601a      	str	r2, [r3, #0]
		*y = TFT_HEIGHT - *y;
 8019496:	68bb      	ldr	r3, [r7, #8]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 801949e:	461a      	mov	r2, r3
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	601a      	str	r2, [r3, #0]
	}

	return ret;
 80194a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3768      	adds	r7, #104	; 0x68
 80194aa:	46bd      	mov	sp, r7
 80194ac:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80194b0:	20007070 	.word	0x20007070
 80194b4:	20007074 	.word	0x20007074
 80194b8:	20000bf0 	.word	0x20000bf0

080194bc <WR_CMD>:

void WR_CMD (uint16_t cmd)
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	b082      	sub	sp, #8
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	4603      	mov	r3, r0
 80194c4:	80fb      	strh	r3, [r7, #6]
  /* Wait for SPI3 Tx buffer empty */
  while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) == RESET);
 80194c6:	bf00      	nop
 80194c8:	2102      	movs	r1, #2
 80194ca:	480d      	ldr	r0, [pc, #52]	; (8019500 <WR_CMD+0x44>)
 80194cc:	f7f0 fceb 	bl	8009ea6 <SPI_I2S_GetFlagStatus>
 80194d0:	4603      	mov	r3, r0
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d0f8      	beq.n	80194c8 <WR_CMD+0xc>
  /* Send SPI3 data */
  SPI_I2S_SendData(SPI3,cmd);
 80194d6:	88fb      	ldrh	r3, [r7, #6]
 80194d8:	4619      	mov	r1, r3
 80194da:	4809      	ldr	r0, [pc, #36]	; (8019500 <WR_CMD+0x44>)
 80194dc:	f7f0 fcd4 	bl	8009e88 <SPI_I2S_SendData>
  /* Wait for SPI3 data reception */
  while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE) == RESET);
 80194e0:	bf00      	nop
 80194e2:	2101      	movs	r1, #1
 80194e4:	4806      	ldr	r0, [pc, #24]	; (8019500 <WR_CMD+0x44>)
 80194e6:	f7f0 fcde 	bl	8009ea6 <SPI_I2S_GetFlagStatus>
 80194ea:	4603      	mov	r3, r0
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d0f8      	beq.n	80194e2 <WR_CMD+0x26>
  /* Read SPI3 received data */
  SPI_I2S_ReceiveData(SPI3);
 80194f0:	4803      	ldr	r0, [pc, #12]	; (8019500 <WR_CMD+0x44>)
 80194f2:	f7f0 fcbc 	bl	8009e6e <SPI_I2S_ReceiveData>
}
 80194f6:	bf00      	nop
 80194f8:	3708      	adds	r7, #8
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	40003c00 	.word	0x40003c00

08019504 <RD_AD>:

uint16_t RD_AD(void)
{
 8019504:	b580      	push	{r7, lr}
 8019506:	b082      	sub	sp, #8
 8019508:	af00      	add	r7, sp, #0
  uint16_t buf, temp;
  /* Wait for SPI3 Tx buffer empty */
  while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) == RESET);
 801950a:	bf00      	nop
 801950c:	2102      	movs	r1, #2
 801950e:	4821      	ldr	r0, [pc, #132]	; (8019594 <RD_AD+0x90>)
 8019510:	f7f0 fcc9 	bl	8009ea6 <SPI_I2S_GetFlagStatus>
 8019514:	4603      	mov	r3, r0
 8019516:	2b00      	cmp	r3, #0
 8019518:	d0f8      	beq.n	801950c <RD_AD+0x8>
  /* Send SPI3 data */
  SPI_I2S_SendData(SPI3,0x0000);
 801951a:	2100      	movs	r1, #0
 801951c:	481d      	ldr	r0, [pc, #116]	; (8019594 <RD_AD+0x90>)
 801951e:	f7f0 fcb3 	bl	8009e88 <SPI_I2S_SendData>
  /* Wait for SPI3 data reception */
  while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE) == RESET);
 8019522:	bf00      	nop
 8019524:	2101      	movs	r1, #1
 8019526:	481b      	ldr	r0, [pc, #108]	; (8019594 <RD_AD+0x90>)
 8019528:	f7f0 fcbd 	bl	8009ea6 <SPI_I2S_GetFlagStatus>
 801952c:	4603      	mov	r3, r0
 801952e:	2b00      	cmp	r3, #0
 8019530:	d0f8      	beq.n	8019524 <RD_AD+0x20>
  /* Read SPI3 received data */
  temp=SPI_I2S_ReceiveData(SPI3);
 8019532:	4818      	ldr	r0, [pc, #96]	; (8019594 <RD_AD+0x90>)
 8019534:	f7f0 fc9b 	bl	8009e6e <SPI_I2S_ReceiveData>
 8019538:	4603      	mov	r3, r0
 801953a:	80fb      	strh	r3, [r7, #6]
  buf=temp<<8;
 801953c:	88fb      	ldrh	r3, [r7, #6]
 801953e:	021b      	lsls	r3, r3, #8
 8019540:	80bb      	strh	r3, [r7, #4]
  while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) == RESET);
 8019542:	bf00      	nop
 8019544:	2102      	movs	r1, #2
 8019546:	4813      	ldr	r0, [pc, #76]	; (8019594 <RD_AD+0x90>)
 8019548:	f7f0 fcad 	bl	8009ea6 <SPI_I2S_GetFlagStatus>
 801954c:	4603      	mov	r3, r0
 801954e:	2b00      	cmp	r3, #0
 8019550:	d0f8      	beq.n	8019544 <RD_AD+0x40>
  /* Send SPI3 data */
  SPI_I2S_SendData(SPI3,0x0000);
 8019552:	2100      	movs	r1, #0
 8019554:	480f      	ldr	r0, [pc, #60]	; (8019594 <RD_AD+0x90>)
 8019556:	f7f0 fc97 	bl	8009e88 <SPI_I2S_SendData>
  /* Wait for SPI3 data reception */
  while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE) == RESET);
 801955a:	bf00      	nop
 801955c:	2101      	movs	r1, #1
 801955e:	480d      	ldr	r0, [pc, #52]	; (8019594 <RD_AD+0x90>)
 8019560:	f7f0 fca1 	bl	8009ea6 <SPI_I2S_GetFlagStatus>
 8019564:	4603      	mov	r3, r0
 8019566:	2b00      	cmp	r3, #0
 8019568:	d0f8      	beq.n	801955c <RD_AD+0x58>
  /* Read SPI3 received data */
  temp=SPI_I2S_ReceiveData(SPI3);
 801956a:	480a      	ldr	r0, [pc, #40]	; (8019594 <RD_AD+0x90>)
 801956c:	f7f0 fc7f 	bl	8009e6e <SPI_I2S_ReceiveData>
 8019570:	4603      	mov	r3, r0
 8019572:	80fb      	strh	r3, [r7, #6]
  buf |= temp;
 8019574:	88ba      	ldrh	r2, [r7, #4]
 8019576:	88fb      	ldrh	r3, [r7, #6]
 8019578:	4313      	orrs	r3, r2
 801957a:	80bb      	strh	r3, [r7, #4]
  buf>>=3;
 801957c:	88bb      	ldrh	r3, [r7, #4]
 801957e:	08db      	lsrs	r3, r3, #3
 8019580:	80bb      	strh	r3, [r7, #4]
  buf&=0xfff;
 8019582:	88bb      	ldrh	r3, [r7, #4]
 8019584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019588:	80bb      	strh	r3, [r7, #4]
  return buf;
 801958a:	88bb      	ldrh	r3, [r7, #4]
}
 801958c:	4618      	mov	r0, r3
 801958e:	3708      	adds	r7, #8
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}
 8019594:	40003c00 	.word	0x40003c00

08019598 <init_touchbuttons>:
#include <main.h>

t_touchbutton tb_buttons[MAXBUTTONS];

void init_touchbuttons()
{
 8019598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801959a:	b0a9      	sub	sp, #164	; 0xa4
 801959c:	af0c      	add	r7, sp, #48	; 0x30
	// Bottom Menu Buttons
	int x = 0;
 801959e:	2300      	movs	r3, #0
 80195a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	int w = 200;
 80195a2:	23c8      	movs	r3, #200	; 0xc8
 80195a4:	667b      	str	r3, [r7, #100]	; 0x64
	int w_swrpwr = 133;
 80195a6:	2385      	movs	r3, #133	; 0x85
 80195a8:	663b      	str	r3, [r7, #96]	; 0x60
	int yb = 420;
 80195aa:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80195ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	int ybottom = TFT_HEIGHT-17;
 80195b0:	f240 13cf 	movw	r3, #463	; 0x1cf
 80195b4:	65bb      	str	r3, [r7, #88]	; 0x58
	if(pcfgdata->language == 0)
 80195b6:	4b4c      	ldr	r3, [pc, #304]	; (80196e8 <init_touchbuttons+0x150>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d11f      	bne.n	8019602 <init_touchbuttons+0x6a>
		setup_touchbutton(&tb_buttons[TB_EMERG_OFF],x,yb+2,w,ybottom-yb,0,0,0,"",lucidaConsole_22ptFontInfo, 1,"bt_on","bt_off");
 80195c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80195c4:	1c9d      	adds	r5, r3, #2
 80195c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80195c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80195ca:	1ad4      	subs	r4, r2, r3
 80195cc:	4b47      	ldr	r3, [pc, #284]	; (80196ec <init_touchbuttons+0x154>)
 80195ce:	930a      	str	r3, [sp, #40]	; 0x28
 80195d0:	4b47      	ldr	r3, [pc, #284]	; (80196f0 <init_touchbuttons+0x158>)
 80195d2:	9309      	str	r3, [sp, #36]	; 0x24
 80195d4:	2301      	movs	r3, #1
 80195d6:	9308      	str	r3, [sp, #32]
 80195d8:	4a46      	ldr	r2, [pc, #280]	; (80196f4 <init_touchbuttons+0x15c>)
 80195da:	ab05      	add	r3, sp, #20
 80195dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80195de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80195e2:	4b45      	ldr	r3, [pc, #276]	; (80196f8 <init_touchbuttons+0x160>)
 80195e4:	9304      	str	r3, [sp, #16]
 80195e6:	2300      	movs	r3, #0
 80195e8:	9303      	str	r3, [sp, #12]
 80195ea:	2300      	movs	r3, #0
 80195ec:	9302      	str	r3, [sp, #8]
 80195ee:	2300      	movs	r3, #0
 80195f0:	9301      	str	r3, [sp, #4]
 80195f2:	9400      	str	r4, [sp, #0]
 80195f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80195f6:	462a      	mov	r2, r5
 80195f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80195fa:	4840      	ldr	r0, [pc, #256]	; (80196fc <init_touchbuttons+0x164>)
 80195fc:	f000 fc1f 	bl	8019e3e <setup_touchbutton>
 8019600:	e01e      	b.n	8019640 <init_touchbuttons+0xa8>
	else
		setup_touchbutton(&tb_buttons[TB_EMERG_OFF],x,yb+2,w,ybottom-yb,0,0,0,"",lucidaConsole_22ptFontInfo, 1,"bt_ein","bt_aus");
 8019602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019604:	1c9d      	adds	r5, r3, #2
 8019606:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801960a:	1ad4      	subs	r4, r2, r3
 801960c:	4b3c      	ldr	r3, [pc, #240]	; (8019700 <init_touchbuttons+0x168>)
 801960e:	930a      	str	r3, [sp, #40]	; 0x28
 8019610:	4b3c      	ldr	r3, [pc, #240]	; (8019704 <init_touchbuttons+0x16c>)
 8019612:	9309      	str	r3, [sp, #36]	; 0x24
 8019614:	2301      	movs	r3, #1
 8019616:	9308      	str	r3, [sp, #32]
 8019618:	4a36      	ldr	r2, [pc, #216]	; (80196f4 <init_touchbuttons+0x15c>)
 801961a:	ab05      	add	r3, sp, #20
 801961c:	ca07      	ldmia	r2, {r0, r1, r2}
 801961e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019622:	4b35      	ldr	r3, [pc, #212]	; (80196f8 <init_touchbuttons+0x160>)
 8019624:	9304      	str	r3, [sp, #16]
 8019626:	2300      	movs	r3, #0
 8019628:	9303      	str	r3, [sp, #12]
 801962a:	2300      	movs	r3, #0
 801962c:	9302      	str	r3, [sp, #8]
 801962e:	2300      	movs	r3, #0
 8019630:	9301      	str	r3, [sp, #4]
 8019632:	9400      	str	r4, [sp, #0]
 8019634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019636:	462a      	mov	r2, r5
 8019638:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801963a:	4830      	ldr	r0, [pc, #192]	; (80196fc <init_touchbuttons+0x164>)
 801963c:	f000 fbff 	bl	8019e3e <setup_touchbutton>
	x += w;
 8019640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8019642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019644:	4413      	add	r3, r2
 8019646:	66fb      	str	r3, [r7, #108]	; 0x6c
	if(pcfgdata->systemMode == 0)
 8019648:	4b27      	ldr	r3, [pc, #156]	; (80196e8 <init_touchbuttons+0x150>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019650:	2b00      	cmp	r3, #0
 8019652:	d15f      	bne.n	8019714 <init_touchbuttons+0x17c>
	{
		// PA-Controller Modus
		setup_touchbutton(&tb_buttons[TB_ACTIVE],x,yb,w,ybottom-yb,BLUE,GREEN,WHITE,getLang(BTACTIVE),lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 8019654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019658:	1ad4      	subs	r4, r2, r3
 801965a:	2018      	movs	r0, #24
 801965c:	f7f7 fbc2 	bl	8010de4 <getLang>
 8019660:	4605      	mov	r5, r0
 8019662:	2300      	movs	r3, #0
 8019664:	930a      	str	r3, [sp, #40]	; 0x28
 8019666:	2300      	movs	r3, #0
 8019668:	9309      	str	r3, [sp, #36]	; 0x24
 801966a:	2300      	movs	r3, #0
 801966c:	9308      	str	r3, [sp, #32]
 801966e:	4a21      	ldr	r2, [pc, #132]	; (80196f4 <init_touchbuttons+0x15c>)
 8019670:	ab05      	add	r3, sp, #20
 8019672:	ca07      	ldmia	r2, {r0, r1, r2}
 8019674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019678:	9504      	str	r5, [sp, #16]
 801967a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801967e:	9303      	str	r3, [sp, #12]
 8019680:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8019684:	9302      	str	r3, [sp, #8]
 8019686:	231f      	movs	r3, #31
 8019688:	9301      	str	r3, [sp, #4]
 801968a:	9400      	str	r4, [sp, #0]
 801968c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801968e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019690:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8019692:	481d      	ldr	r0, [pc, #116]	; (8019708 <init_touchbuttons+0x170>)
 8019694:	f000 fbd3 	bl	8019e3e <setup_touchbutton>
		x += w;
 8019698:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801969a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801969c:	4413      	add	r3, r2
 801969e:	66fb      	str	r3, [r7, #108]	; 0x6c
		setup_touchbutton(&tb_buttons[TB_STANDBY],x,yb,w,ybottom-yb,BLUE,GREEN,WHITE,"STANDBY",lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 80196a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80196a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80196a4:	1ad4      	subs	r4, r2, r3
 80196a6:	2300      	movs	r3, #0
 80196a8:	930a      	str	r3, [sp, #40]	; 0x28
 80196aa:	2300      	movs	r3, #0
 80196ac:	9309      	str	r3, [sp, #36]	; 0x24
 80196ae:	2300      	movs	r3, #0
 80196b0:	9308      	str	r3, [sp, #32]
 80196b2:	4a10      	ldr	r2, [pc, #64]	; (80196f4 <init_touchbuttons+0x15c>)
 80196b4:	ab05      	add	r3, sp, #20
 80196b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80196b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80196bc:	4b13      	ldr	r3, [pc, #76]	; (801970c <init_touchbuttons+0x174>)
 80196be:	9304      	str	r3, [sp, #16]
 80196c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80196c4:	9303      	str	r3, [sp, #12]
 80196c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80196ca:	9302      	str	r3, [sp, #8]
 80196cc:	231f      	movs	r3, #31
 80196ce:	9301      	str	r3, [sp, #4]
 80196d0:	9400      	str	r4, [sp, #0]
 80196d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80196d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80196d6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80196d8:	480d      	ldr	r0, [pc, #52]	; (8019710 <init_touchbuttons+0x178>)
 80196da:	f000 fbb0 	bl	8019e3e <setup_touchbutton>
		x += w;
 80196de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80196e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80196e2:	4413      	add	r3, r2
 80196e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80196e6:	e08d      	b.n	8019804 <init_touchbuttons+0x26c>
 80196e8:	20000bf0 	.word	0x20000bf0
 80196ec:	08026cd4 	.word	0x08026cd4
 80196f0:	08026cdc 	.word	0x08026cdc
 80196f4:	20001c40 	.word	0x20001c40
 80196f8:	08026ce4 	.word	0x08026ce4
 80196fc:	20007138 	.word	0x20007138
 8019700:	08026ce8 	.word	0x08026ce8
 8019704:	08026cf0 	.word	0x08026cf0
 8019708:	20007078 	.word	0x20007078
 801970c:	08026cf8 	.word	0x08026cf8
 8019710:	200070d8 	.word	0x200070d8
	}
	else if(pcfgdata->systemMode == 1)
 8019714:	4b57      	ldr	r3, [pc, #348]	; (8019874 <init_touchbuttons+0x2dc>)
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801971c:	2b01      	cmp	r3, #1
 801971e:	d171      	bne.n	8019804 <init_touchbuttons+0x26c>
	{
		// Power/SWR Modus
		setup_touchbutton(&tb_buttons[TB_KOP1],x,yb,w_swrpwr,ybottom-yb,BLUE,GREEN,WHITE,getLang(COUPLER1),lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 8019720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019724:	1ad4      	subs	r4, r2, r3
 8019726:	2042      	movs	r0, #66	; 0x42
 8019728:	f7f7 fb5c 	bl	8010de4 <getLang>
 801972c:	4605      	mov	r5, r0
 801972e:	2300      	movs	r3, #0
 8019730:	930a      	str	r3, [sp, #40]	; 0x28
 8019732:	2300      	movs	r3, #0
 8019734:	9309      	str	r3, [sp, #36]	; 0x24
 8019736:	2300      	movs	r3, #0
 8019738:	9308      	str	r3, [sp, #32]
 801973a:	4a4f      	ldr	r2, [pc, #316]	; (8019878 <init_touchbuttons+0x2e0>)
 801973c:	ab05      	add	r3, sp, #20
 801973e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019744:	9504      	str	r5, [sp, #16]
 8019746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801974a:	9303      	str	r3, [sp, #12]
 801974c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8019750:	9302      	str	r3, [sp, #8]
 8019752:	231f      	movs	r3, #31
 8019754:	9301      	str	r3, [sp, #4]
 8019756:	9400      	str	r4, [sp, #0]
 8019758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801975a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801975c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801975e:	4847      	ldr	r0, [pc, #284]	; (801987c <init_touchbuttons+0x2e4>)
 8019760:	f000 fb6d 	bl	8019e3e <setup_touchbutton>
		x += w_swrpwr;
 8019764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8019766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019768:	4413      	add	r3, r2
 801976a:	66fb      	str	r3, [r7, #108]	; 0x6c
		setup_touchbutton(&tb_buttons[TB_KOP2],x,yb,w_swrpwr,ybottom-yb,BLUE,GREEN,WHITE,getLang(COUPLER2),lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 801976c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801976e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019770:	1ad4      	subs	r4, r2, r3
 8019772:	2043      	movs	r0, #67	; 0x43
 8019774:	f7f7 fb36 	bl	8010de4 <getLang>
 8019778:	4605      	mov	r5, r0
 801977a:	2300      	movs	r3, #0
 801977c:	930a      	str	r3, [sp, #40]	; 0x28
 801977e:	2300      	movs	r3, #0
 8019780:	9309      	str	r3, [sp, #36]	; 0x24
 8019782:	2300      	movs	r3, #0
 8019784:	9308      	str	r3, [sp, #32]
 8019786:	4a3c      	ldr	r2, [pc, #240]	; (8019878 <init_touchbuttons+0x2e0>)
 8019788:	ab05      	add	r3, sp, #20
 801978a:	ca07      	ldmia	r2, {r0, r1, r2}
 801978c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019790:	9504      	str	r5, [sp, #16]
 8019792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019796:	9303      	str	r3, [sp, #12]
 8019798:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801979c:	9302      	str	r3, [sp, #8]
 801979e:	231f      	movs	r3, #31
 80197a0:	9301      	str	r3, [sp, #4]
 80197a2:	9400      	str	r4, [sp, #0]
 80197a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80197a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80197a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80197aa:	4835      	ldr	r0, [pc, #212]	; (8019880 <init_touchbuttons+0x2e8>)
 80197ac:	f000 fb47 	bl	8019e3e <setup_touchbutton>
		x += w_swrpwr;
 80197b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80197b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80197b4:	4413      	add	r3, r2
 80197b6:	66fb      	str	r3, [r7, #108]	; 0x6c
		setup_touchbutton(&tb_buttons[TB_KOP3],x,yb,w_swrpwr,ybottom-yb,BLUE,GREEN,WHITE,getLang(COUPLER3),lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 80197b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80197ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197bc:	1ad4      	subs	r4, r2, r3
 80197be:	2044      	movs	r0, #68	; 0x44
 80197c0:	f7f7 fb10 	bl	8010de4 <getLang>
 80197c4:	4605      	mov	r5, r0
 80197c6:	2300      	movs	r3, #0
 80197c8:	930a      	str	r3, [sp, #40]	; 0x28
 80197ca:	2300      	movs	r3, #0
 80197cc:	9309      	str	r3, [sp, #36]	; 0x24
 80197ce:	2300      	movs	r3, #0
 80197d0:	9308      	str	r3, [sp, #32]
 80197d2:	4a29      	ldr	r2, [pc, #164]	; (8019878 <init_touchbuttons+0x2e0>)
 80197d4:	ab05      	add	r3, sp, #20
 80197d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80197d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80197dc:	9504      	str	r5, [sp, #16]
 80197de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80197e2:	9303      	str	r3, [sp, #12]
 80197e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80197e8:	9302      	str	r3, [sp, #8]
 80197ea:	231f      	movs	r3, #31
 80197ec:	9301      	str	r3, [sp, #4]
 80197ee:	9400      	str	r4, [sp, #0]
 80197f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80197f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80197f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80197f6:	4823      	ldr	r0, [pc, #140]	; (8019884 <init_touchbuttons+0x2ec>)
 80197f8:	f000 fb21 	bl	8019e3e <setup_touchbutton>
		x += w_swrpwr;
 80197fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80197fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019800:	4413      	add	r3, r2
 8019802:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	setup_touchbutton(&tb_buttons[TB_MENU],x,yb,w,ybottom-yb,RGB16(0,0,255),RGB16(0,255,0),WHITE,getLang(BTMENU),lucidaConsole_22ptFontInfo, 0,NULL,NULL);
 8019804:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019808:	1ad4      	subs	r4, r2, r3
 801980a:	201a      	movs	r0, #26
 801980c:	f7f7 faea 	bl	8010de4 <getLang>
 8019810:	4605      	mov	r5, r0
 8019812:	2300      	movs	r3, #0
 8019814:	930a      	str	r3, [sp, #40]	; 0x28
 8019816:	2300      	movs	r3, #0
 8019818:	9309      	str	r3, [sp, #36]	; 0x24
 801981a:	2300      	movs	r3, #0
 801981c:	9308      	str	r3, [sp, #32]
 801981e:	4a16      	ldr	r2, [pc, #88]	; (8019878 <init_touchbuttons+0x2e0>)
 8019820:	ab05      	add	r3, sp, #20
 8019822:	ca07      	ldmia	r2, {r0, r1, r2}
 8019824:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019828:	9504      	str	r5, [sp, #16]
 801982a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801982e:	9303      	str	r3, [sp, #12]
 8019830:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8019834:	9302      	str	r3, [sp, #8]
 8019836:	231f      	movs	r3, #31
 8019838:	9301      	str	r3, [sp, #4]
 801983a:	9400      	str	r4, [sp, #0]
 801983c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801983e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019840:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8019842:	4811      	ldr	r0, [pc, #68]	; (8019888 <init_touchbuttons+0x2f0>)
 8019844:	f000 fafb 	bl	8019e3e <setup_touchbutton>

	// Right Band Buttons
	int bandbuttons_bottom = 420;	// bis hierher geht der unterste Button
 8019848:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 801984c:	657b      	str	r3, [r7, #84]	; 0x54
	int itemysize = (bandbuttons_bottom) / BANDBUTTONS_ANZ;
 801984e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019850:	4a0e      	ldr	r2, [pc, #56]	; (801988c <init_touchbuttons+0x2f4>)
 8019852:	fb82 1203 	smull	r1, r2, r2, r3
 8019856:	1052      	asrs	r2, r2, #1
 8019858:	17db      	asrs	r3, r3, #31
 801985a:	1ad3      	subs	r3, r2, r3
 801985c:	653b      	str	r3, [r7, #80]	; 0x50
	int xs = 650;
 801985e:	f240 238a 	movw	r3, #650	; 0x28a
 8019862:	64fb      	str	r3, [r7, #76]	; 0x4c
	int text_rect_width = TFT_WIDTH - xs - 2;
 8019864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019866:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 801986a:	3302      	adds	r3, #2
 801986c:	64bb      	str	r3, [r7, #72]	; 0x48

	for(int i=0; i<BANDBUTTONS_ANZ; i++)
 801986e:	2300      	movs	r3, #0
 8019870:	66bb      	str	r3, [r7, #104]	; 0x68
 8019872:	e056      	b.n	8019922 <init_touchbuttons+0x38a>
 8019874:	20000bf0 	.word	0x20000bf0
 8019878:	20001c40 	.word	0x20001c40
 801987c:	200084b8 	.word	0x200084b8
 8019880:	20008518 	.word	0x20008518
 8019884:	20008578 	.word	0x20008578
 8019888:	20007198 	.word	0x20007198
 801988c:	2aaaaaab 	.word	0x2aaaaaab
	{
		int y = i * itemysize;
 8019890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019892:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019894:	fb02 f303 	mul.w	r3, r2, r3
 8019898:	60bb      	str	r3, [r7, #8]
		int ys = y+1;
 801989a:	68bb      	ldr	r3, [r7, #8]
 801989c:	3301      	adds	r3, #1
 801989e:	607b      	str	r3, [r7, #4]
		int ye = y + (itemysize-2);
 80198a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80198a2:	3b02      	subs	r3, #2
 80198a4:	68ba      	ldr	r2, [r7, #8]
 80198a6:	4413      	add	r3, r2
 80198a8:	603b      	str	r3, [r7, #0]

		setup_touchbutton(&tb_buttons[TB_BAND1+i],xs,ys,text_rect_width,ye-ys+2,YELLOW,GREEN,BLACK,bandbuttons_text[pcfgdata->bandmode][i],lucidaConsole_18ptFontInfo, 0,NULL,NULL);
 80198aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80198ac:	1d1a      	adds	r2, r3, #4
 80198ae:	4613      	mov	r3, r2
 80198b0:	005b      	lsls	r3, r3, #1
 80198b2:	4413      	add	r3, r2
 80198b4:	015b      	lsls	r3, r3, #5
 80198b6:	4aa4      	ldr	r2, [pc, #656]	; (8019b48 <init_touchbuttons+0x5b0>)
 80198b8:	189e      	adds	r6, r3, r2
 80198ba:	683a      	ldr	r2, [r7, #0]
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	1ad3      	subs	r3, r2, r3
 80198c0:	1c9c      	adds	r4, r3, #2
 80198c2:	4ba2      	ldr	r3, [pc, #648]	; (8019b4c <init_touchbuttons+0x5b4>)
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80198ca:	4619      	mov	r1, r3
 80198cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80198ce:	461a      	mov	r2, r3
 80198d0:	0092      	lsls	r2, r2, #2
 80198d2:	441a      	add	r2, r3
 80198d4:	0053      	lsls	r3, r2, #1
 80198d6:	461a      	mov	r2, r3
 80198d8:	460b      	mov	r3, r1
 80198da:	011b      	lsls	r3, r3, #4
 80198dc:	1a5b      	subs	r3, r3, r1
 80198de:	00db      	lsls	r3, r3, #3
 80198e0:	4413      	add	r3, r2
 80198e2:	4a9b      	ldr	r2, [pc, #620]	; (8019b50 <init_touchbuttons+0x5b8>)
 80198e4:	189d      	adds	r5, r3, r2
 80198e6:	2300      	movs	r3, #0
 80198e8:	930a      	str	r3, [sp, #40]	; 0x28
 80198ea:	2300      	movs	r3, #0
 80198ec:	9309      	str	r3, [sp, #36]	; 0x24
 80198ee:	2300      	movs	r3, #0
 80198f0:	9308      	str	r3, [sp, #32]
 80198f2:	4a98      	ldr	r2, [pc, #608]	; (8019b54 <init_touchbuttons+0x5bc>)
 80198f4:	ab05      	add	r3, sp, #20
 80198f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80198f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198fc:	9504      	str	r5, [sp, #16]
 80198fe:	2300      	movs	r3, #0
 8019900:	9303      	str	r3, [sp, #12]
 8019902:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8019906:	9302      	str	r3, [sp, #8]
 8019908:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801990c:	9301      	str	r3, [sp, #4]
 801990e:	9400      	str	r4, [sp, #0]
 8019910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019912:	687a      	ldr	r2, [r7, #4]
 8019914:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019916:	4630      	mov	r0, r6
 8019918:	f000 fa91 	bl	8019e3e <setup_touchbutton>
	for(int i=0; i<BANDBUTTONS_ANZ; i++)
 801991c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801991e:	3301      	adds	r3, #1
 8019920:	66bb      	str	r3, [r7, #104]	; 0x68
 8019922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019924:	2b0b      	cmp	r3, #11
 8019926:	ddb3      	ble.n	8019890 <init_touchbuttons+0x2f8>
	}

	// Plus/Minus Buttons für die Setupeinstellungen
	int xbut = 490;
 8019928:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 801992c:	647b      	str	r3, [r7, #68]	; 0x44
	int xbutspc = 80;
 801992e:	2350      	movs	r3, #80	; 0x50
 8019930:	643b      	str	r3, [r7, #64]	; 0x40
	int yup = 100;
 8019932:	2364      	movs	r3, #100	; 0x64
 8019934:	63fb      	str	r3, [r7, #60]	; 0x3c
	int ydn = 250;
 8019936:	23fa      	movs	r3, #250	; 0xfa
 8019938:	63bb      	str	r3, [r7, #56]	; 0x38
	setup_touchbutton(&tb_buttons[TB_P1000],xbut,yup,64,64,0,0,0,"",lucidaConsoleBold_18ptFontInfo, 1, "arrowup", "arruppr");
 801993a:	4b87      	ldr	r3, [pc, #540]	; (8019b58 <init_touchbuttons+0x5c0>)
 801993c:	930a      	str	r3, [sp, #40]	; 0x28
 801993e:	4b87      	ldr	r3, [pc, #540]	; (8019b5c <init_touchbuttons+0x5c4>)
 8019940:	9309      	str	r3, [sp, #36]	; 0x24
 8019942:	2301      	movs	r3, #1
 8019944:	9308      	str	r3, [sp, #32]
 8019946:	4a86      	ldr	r2, [pc, #536]	; (8019b60 <init_touchbuttons+0x5c8>)
 8019948:	ab05      	add	r3, sp, #20
 801994a:	ca07      	ldmia	r2, {r0, r1, r2}
 801994c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019950:	4b84      	ldr	r3, [pc, #528]	; (8019b64 <init_touchbuttons+0x5cc>)
 8019952:	9304      	str	r3, [sp, #16]
 8019954:	2300      	movs	r3, #0
 8019956:	9303      	str	r3, [sp, #12]
 8019958:	2300      	movs	r3, #0
 801995a:	9302      	str	r3, [sp, #8]
 801995c:	2300      	movs	r3, #0
 801995e:	9301      	str	r3, [sp, #4]
 8019960:	2340      	movs	r3, #64	; 0x40
 8019962:	9300      	str	r3, [sp, #0]
 8019964:	2340      	movs	r3, #64	; 0x40
 8019966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019968:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801996a:	487f      	ldr	r0, [pc, #508]	; (8019b68 <init_touchbuttons+0x5d0>)
 801996c:	f000 fa67 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_P100] ,xbut+1*xbutspc,yup,64,64,0,0,0,"",lucidaConsoleBold_18ptFontInfo, 1, "arrowup", "arruppr");
 8019970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019974:	18d4      	adds	r4, r2, r3
 8019976:	4b78      	ldr	r3, [pc, #480]	; (8019b58 <init_touchbuttons+0x5c0>)
 8019978:	930a      	str	r3, [sp, #40]	; 0x28
 801997a:	4b78      	ldr	r3, [pc, #480]	; (8019b5c <init_touchbuttons+0x5c4>)
 801997c:	9309      	str	r3, [sp, #36]	; 0x24
 801997e:	2301      	movs	r3, #1
 8019980:	9308      	str	r3, [sp, #32]
 8019982:	4a77      	ldr	r2, [pc, #476]	; (8019b60 <init_touchbuttons+0x5c8>)
 8019984:	ab05      	add	r3, sp, #20
 8019986:	ca07      	ldmia	r2, {r0, r1, r2}
 8019988:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801998c:	4b75      	ldr	r3, [pc, #468]	; (8019b64 <init_touchbuttons+0x5cc>)
 801998e:	9304      	str	r3, [sp, #16]
 8019990:	2300      	movs	r3, #0
 8019992:	9303      	str	r3, [sp, #12]
 8019994:	2300      	movs	r3, #0
 8019996:	9302      	str	r3, [sp, #8]
 8019998:	2300      	movs	r3, #0
 801999a:	9301      	str	r3, [sp, #4]
 801999c:	2340      	movs	r3, #64	; 0x40
 801999e:	9300      	str	r3, [sp, #0]
 80199a0:	2340      	movs	r3, #64	; 0x40
 80199a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80199a4:	4621      	mov	r1, r4
 80199a6:	4871      	ldr	r0, [pc, #452]	; (8019b6c <init_touchbuttons+0x5d4>)
 80199a8:	f000 fa49 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_P10]  ,xbut+2*xbutspc,yup,64,64,0,0,0,"",lucidaConsoleBold_18ptFontInfo, 1, "arrowup", "arruppr");
 80199ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199ae:	005a      	lsls	r2, r3, #1
 80199b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80199b2:	18d4      	adds	r4, r2, r3
 80199b4:	4b68      	ldr	r3, [pc, #416]	; (8019b58 <init_touchbuttons+0x5c0>)
 80199b6:	930a      	str	r3, [sp, #40]	; 0x28
 80199b8:	4b68      	ldr	r3, [pc, #416]	; (8019b5c <init_touchbuttons+0x5c4>)
 80199ba:	9309      	str	r3, [sp, #36]	; 0x24
 80199bc:	2301      	movs	r3, #1
 80199be:	9308      	str	r3, [sp, #32]
 80199c0:	4a67      	ldr	r2, [pc, #412]	; (8019b60 <init_touchbuttons+0x5c8>)
 80199c2:	ab05      	add	r3, sp, #20
 80199c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80199c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80199ca:	4b66      	ldr	r3, [pc, #408]	; (8019b64 <init_touchbuttons+0x5cc>)
 80199cc:	9304      	str	r3, [sp, #16]
 80199ce:	2300      	movs	r3, #0
 80199d0:	9303      	str	r3, [sp, #12]
 80199d2:	2300      	movs	r3, #0
 80199d4:	9302      	str	r3, [sp, #8]
 80199d6:	2300      	movs	r3, #0
 80199d8:	9301      	str	r3, [sp, #4]
 80199da:	2340      	movs	r3, #64	; 0x40
 80199dc:	9300      	str	r3, [sp, #0]
 80199de:	2340      	movs	r3, #64	; 0x40
 80199e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80199e2:	4621      	mov	r1, r4
 80199e4:	4862      	ldr	r0, [pc, #392]	; (8019b70 <init_touchbuttons+0x5d8>)
 80199e6:	f000 fa2a 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_P1]   ,xbut+3*xbutspc,yup,64,64,0,0,0,"",lucidaConsoleBold_18ptFontInfo, 1, "arrowup", "arruppr");
 80199ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80199ec:	4613      	mov	r3, r2
 80199ee:	005b      	lsls	r3, r3, #1
 80199f0:	441a      	add	r2, r3
 80199f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80199f4:	18d4      	adds	r4, r2, r3
 80199f6:	4b58      	ldr	r3, [pc, #352]	; (8019b58 <init_touchbuttons+0x5c0>)
 80199f8:	930a      	str	r3, [sp, #40]	; 0x28
 80199fa:	4b58      	ldr	r3, [pc, #352]	; (8019b5c <init_touchbuttons+0x5c4>)
 80199fc:	9309      	str	r3, [sp, #36]	; 0x24
 80199fe:	2301      	movs	r3, #1
 8019a00:	9308      	str	r3, [sp, #32]
 8019a02:	4a57      	ldr	r2, [pc, #348]	; (8019b60 <init_touchbuttons+0x5c8>)
 8019a04:	ab05      	add	r3, sp, #20
 8019a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8019a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019a0c:	4b55      	ldr	r3, [pc, #340]	; (8019b64 <init_touchbuttons+0x5cc>)
 8019a0e:	9304      	str	r3, [sp, #16]
 8019a10:	2300      	movs	r3, #0
 8019a12:	9303      	str	r3, [sp, #12]
 8019a14:	2300      	movs	r3, #0
 8019a16:	9302      	str	r3, [sp, #8]
 8019a18:	2300      	movs	r3, #0
 8019a1a:	9301      	str	r3, [sp, #4]
 8019a1c:	2340      	movs	r3, #64	; 0x40
 8019a1e:	9300      	str	r3, [sp, #0]
 8019a20:	2340      	movs	r3, #64	; 0x40
 8019a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019a24:	4621      	mov	r1, r4
 8019a26:	4853      	ldr	r0, [pc, #332]	; (8019b74 <init_touchbuttons+0x5dc>)
 8019a28:	f000 fa09 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_M1000],xbut,ydn,64,64,0,0,0,"",lucidaConsoleBold_18ptFontInfo, 1, "arrowdn", "arrdnpr");
 8019a2c:	4b52      	ldr	r3, [pc, #328]	; (8019b78 <init_touchbuttons+0x5e0>)
 8019a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8019a30:	4b52      	ldr	r3, [pc, #328]	; (8019b7c <init_touchbuttons+0x5e4>)
 8019a32:	9309      	str	r3, [sp, #36]	; 0x24
 8019a34:	2301      	movs	r3, #1
 8019a36:	9308      	str	r3, [sp, #32]
 8019a38:	4a49      	ldr	r2, [pc, #292]	; (8019b60 <init_touchbuttons+0x5c8>)
 8019a3a:	ab05      	add	r3, sp, #20
 8019a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8019a3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019a42:	4b48      	ldr	r3, [pc, #288]	; (8019b64 <init_touchbuttons+0x5cc>)
 8019a44:	9304      	str	r3, [sp, #16]
 8019a46:	2300      	movs	r3, #0
 8019a48:	9303      	str	r3, [sp, #12]
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	9302      	str	r3, [sp, #8]
 8019a4e:	2300      	movs	r3, #0
 8019a50:	9301      	str	r3, [sp, #4]
 8019a52:	2340      	movs	r3, #64	; 0x40
 8019a54:	9300      	str	r3, [sp, #0]
 8019a56:	2340      	movs	r3, #64	; 0x40
 8019a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019a5c:	4848      	ldr	r0, [pc, #288]	; (8019b80 <init_touchbuttons+0x5e8>)
 8019a5e:	f000 f9ee 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_M100] ,xbut+1*xbutspc,ydn,64,64,0,0,0,"",lucidaConsoleBold_18ptFontInfo, 1, "arrowdn", "arrdnpr");
 8019a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a66:	18d4      	adds	r4, r2, r3
 8019a68:	4b43      	ldr	r3, [pc, #268]	; (8019b78 <init_touchbuttons+0x5e0>)
 8019a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8019a6c:	4b43      	ldr	r3, [pc, #268]	; (8019b7c <init_touchbuttons+0x5e4>)
 8019a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8019a70:	2301      	movs	r3, #1
 8019a72:	9308      	str	r3, [sp, #32]
 8019a74:	4a3a      	ldr	r2, [pc, #232]	; (8019b60 <init_touchbuttons+0x5c8>)
 8019a76:	ab05      	add	r3, sp, #20
 8019a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8019a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019a7e:	4b39      	ldr	r3, [pc, #228]	; (8019b64 <init_touchbuttons+0x5cc>)
 8019a80:	9304      	str	r3, [sp, #16]
 8019a82:	2300      	movs	r3, #0
 8019a84:	9303      	str	r3, [sp, #12]
 8019a86:	2300      	movs	r3, #0
 8019a88:	9302      	str	r3, [sp, #8]
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	9301      	str	r3, [sp, #4]
 8019a8e:	2340      	movs	r3, #64	; 0x40
 8019a90:	9300      	str	r3, [sp, #0]
 8019a92:	2340      	movs	r3, #64	; 0x40
 8019a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a96:	4621      	mov	r1, r4
 8019a98:	483a      	ldr	r0, [pc, #232]	; (8019b84 <init_touchbuttons+0x5ec>)
 8019a9a:	f000 f9d0 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_M10]  ,xbut+2*xbutspc,ydn,64,64,0,0,0,"",lucidaConsoleBold_18ptFontInfo, 1, "arrowdn", "arrdnpr");
 8019a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019aa0:	005a      	lsls	r2, r3, #1
 8019aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019aa4:	18d4      	adds	r4, r2, r3
 8019aa6:	4b34      	ldr	r3, [pc, #208]	; (8019b78 <init_touchbuttons+0x5e0>)
 8019aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8019aaa:	4b34      	ldr	r3, [pc, #208]	; (8019b7c <init_touchbuttons+0x5e4>)
 8019aac:	9309      	str	r3, [sp, #36]	; 0x24
 8019aae:	2301      	movs	r3, #1
 8019ab0:	9308      	str	r3, [sp, #32]
 8019ab2:	4a2b      	ldr	r2, [pc, #172]	; (8019b60 <init_touchbuttons+0x5c8>)
 8019ab4:	ab05      	add	r3, sp, #20
 8019ab6:	ca07      	ldmia	r2, {r0, r1, r2}
 8019ab8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019abc:	4b29      	ldr	r3, [pc, #164]	; (8019b64 <init_touchbuttons+0x5cc>)
 8019abe:	9304      	str	r3, [sp, #16]
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	9303      	str	r3, [sp, #12]
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	9302      	str	r3, [sp, #8]
 8019ac8:	2300      	movs	r3, #0
 8019aca:	9301      	str	r3, [sp, #4]
 8019acc:	2340      	movs	r3, #64	; 0x40
 8019ace:	9300      	str	r3, [sp, #0]
 8019ad0:	2340      	movs	r3, #64	; 0x40
 8019ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ad4:	4621      	mov	r1, r4
 8019ad6:	482c      	ldr	r0, [pc, #176]	; (8019b88 <init_touchbuttons+0x5f0>)
 8019ad8:	f000 f9b1 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_M1]   ,xbut+3*xbutspc,ydn,64,64,0,0,0,"",lucidaConsoleBold_18ptFontInfo, 1, "arrowdn", "arrdnpr");
 8019adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019ade:	4613      	mov	r3, r2
 8019ae0:	005b      	lsls	r3, r3, #1
 8019ae2:	441a      	add	r2, r3
 8019ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ae6:	18d4      	adds	r4, r2, r3
 8019ae8:	4b23      	ldr	r3, [pc, #140]	; (8019b78 <init_touchbuttons+0x5e0>)
 8019aea:	930a      	str	r3, [sp, #40]	; 0x28
 8019aec:	4b23      	ldr	r3, [pc, #140]	; (8019b7c <init_touchbuttons+0x5e4>)
 8019aee:	9309      	str	r3, [sp, #36]	; 0x24
 8019af0:	2301      	movs	r3, #1
 8019af2:	9308      	str	r3, [sp, #32]
 8019af4:	4a1a      	ldr	r2, [pc, #104]	; (8019b60 <init_touchbuttons+0x5c8>)
 8019af6:	ab05      	add	r3, sp, #20
 8019af8:	ca07      	ldmia	r2, {r0, r1, r2}
 8019afa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019afe:	4b19      	ldr	r3, [pc, #100]	; (8019b64 <init_touchbuttons+0x5cc>)
 8019b00:	9304      	str	r3, [sp, #16]
 8019b02:	2300      	movs	r3, #0
 8019b04:	9303      	str	r3, [sp, #12]
 8019b06:	2300      	movs	r3, #0
 8019b08:	9302      	str	r3, [sp, #8]
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	9301      	str	r3, [sp, #4]
 8019b0e:	2340      	movs	r3, #64	; 0x40
 8019b10:	9300      	str	r3, [sp, #0]
 8019b12:	2340      	movs	r3, #64	; 0x40
 8019b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b16:	4621      	mov	r1, r4
 8019b18:	481c      	ldr	r0, [pc, #112]	; (8019b8c <init_touchbuttons+0x5f4>)
 8019b1a:	f000 f990 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_GETVAL],xbut+1*xbutspc,340,64+xbutspc,52,RGB16(255,255,0),RGB16(0,255,0),BLACK,getLang(GETVALMV),lucidaConsoleBold_18ptFontInfo, 0,NULL,NULL);
 8019b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b22:	18d4      	adds	r4, r2, r3
 8019b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b26:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8019b2a:	2047      	movs	r0, #71	; 0x47
 8019b2c:	f7f7 f95a 	bl	8010de4 <getLang>
 8019b30:	4606      	mov	r6, r0
 8019b32:	2300      	movs	r3, #0
 8019b34:	930a      	str	r3, [sp, #40]	; 0x28
 8019b36:	2300      	movs	r3, #0
 8019b38:	9309      	str	r3, [sp, #36]	; 0x24
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	9308      	str	r3, [sp, #32]
 8019b3e:	4a08      	ldr	r2, [pc, #32]	; (8019b60 <init_touchbuttons+0x5c8>)
 8019b40:	ab05      	add	r3, sp, #20
 8019b42:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b44:	e024      	b.n	8019b90 <init_touchbuttons+0x5f8>
 8019b46:	bf00      	nop
 8019b48:	20007078 	.word	0x20007078
 8019b4c:	20000bf0 	.word	0x20000bf0
 8019b50:	20000108 	.word	0x20000108
 8019b54:	20001c34 	.word	0x20001c34
 8019b58:	08026d00 	.word	0x08026d00
 8019b5c:	08026d08 	.word	0x08026d08
 8019b60:	20001c4c 	.word	0x20001c4c
 8019b64:	08026ce4 	.word	0x08026ce4
 8019b68:	20007678 	.word	0x20007678
 8019b6c:	200076d8 	.word	0x200076d8
 8019b70:	20007738 	.word	0x20007738
 8019b74:	20007798 	.word	0x20007798
 8019b78:	08026d10 	.word	0x08026d10
 8019b7c:	08026d18 	.word	0x08026d18
 8019b80:	200077f8 	.word	0x200077f8
 8019b84:	20007858 	.word	0x20007858
 8019b88:	200078b8 	.word	0x200078b8
 8019b8c:	20007918 	.word	0x20007918
 8019b90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019b94:	9604      	str	r6, [sp, #16]
 8019b96:	2300      	movs	r3, #0
 8019b98:	9303      	str	r3, [sp, #12]
 8019b9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8019b9e:	9302      	str	r3, [sp, #8]
 8019ba0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8019ba4:	9301      	str	r3, [sp, #4]
 8019ba6:	2334      	movs	r3, #52	; 0x34
 8019ba8:	9300      	str	r3, [sp, #0]
 8019baa:	462b      	mov	r3, r5
 8019bac:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8019bb0:	4621      	mov	r1, r4
 8019bb2:	488a      	ldr	r0, [pc, #552]	; (8019ddc <init_touchbuttons+0x844>)
 8019bb4:	f000 f943 	bl	8019e3e <setup_touchbutton>

	// Buttons für das Setup Menü
	init_setup_buttons();
 8019bb8:	f7fc fa0a 	bl	8015fd0 <init_setup_buttons>
	init_system_buttons();
 8019bbc:	f7fc ff2e 	bl	8016a1c <init_system_buttons>
	init_system_buttons2();
 8019bc0:	f7fd faba 	bl	8017138 <init_system_buttons2>

	// Buttons für die History
	int hb_wid = 140;
 8019bc4:	238c      	movs	r3, #140	; 0x8c
 8019bc6:	637b      	str	r3, [r7, #52]	; 0x34
	int hb_step = 160;
 8019bc8:	23a0      	movs	r3, #160	; 0xa0
 8019bca:	633b      	str	r3, [r7, #48]	; 0x30
	int hb_left = 15;
 8019bcc:	230f      	movs	r3, #15
 8019bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	int hbnum = 0;
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	int hby = 370;
 8019bd4:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8019bd8:	627b      	str	r3, [r7, #36]	; 0x24
	int hb_height = 40;
 8019bda:	2328      	movs	r3, #40	; 0x28
 8019bdc:	623b      	str	r3, [r7, #32]
	setup_touchbutton(&tb_buttons[TB_HIST100] ,hbnum++*hb_step+hb_left,hby,hb_wid,hb_height,DARKBLUE,BLUE,WHITE,"0.1s",lucidaConsole_14ptFontInfo, 0,NULL,NULL);
 8019bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019be0:	1c5a      	adds	r2, r3, #1
 8019be2:	62ba      	str	r2, [r7, #40]	; 0x28
 8019be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019be6:	fb02 f203 	mul.w	r2, r2, r3
 8019bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bec:	18d4      	adds	r4, r2, r3
 8019bee:	2300      	movs	r3, #0
 8019bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	9308      	str	r3, [sp, #32]
 8019bfa:	4a79      	ldr	r2, [pc, #484]	; (8019de0 <init_touchbuttons+0x848>)
 8019bfc:	ab05      	add	r3, sp, #20
 8019bfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019c04:	4b77      	ldr	r3, [pc, #476]	; (8019de4 <init_touchbuttons+0x84c>)
 8019c06:	9304      	str	r3, [sp, #16]
 8019c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c0c:	9303      	str	r3, [sp, #12]
 8019c0e:	231f      	movs	r3, #31
 8019c10:	9302      	str	r3, [sp, #8]
 8019c12:	2307      	movs	r3, #7
 8019c14:	9301      	str	r3, [sp, #4]
 8019c16:	6a3b      	ldr	r3, [r7, #32]
 8019c18:	9300      	str	r3, [sp, #0]
 8019c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c1e:	4621      	mov	r1, r4
 8019c20:	4871      	ldr	r0, [pc, #452]	; (8019de8 <init_touchbuttons+0x850>)
 8019c22:	f000 f90c 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_HIST250] ,hbnum++*hb_step+hb_left,hby,hb_wid,hb_height,DARKBLUE,BLUE,WHITE,"0.25s",lucidaConsole_14ptFontInfo, 0,NULL,NULL);
 8019c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c28:	1c5a      	adds	r2, r3, #1
 8019c2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8019c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c2e:	fb02 f203 	mul.w	r2, r2, r3
 8019c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c34:	18d4      	adds	r4, r2, r3
 8019c36:	2300      	movs	r3, #0
 8019c38:	930a      	str	r3, [sp, #40]	; 0x28
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c3e:	2300      	movs	r3, #0
 8019c40:	9308      	str	r3, [sp, #32]
 8019c42:	4a67      	ldr	r2, [pc, #412]	; (8019de0 <init_touchbuttons+0x848>)
 8019c44:	ab05      	add	r3, sp, #20
 8019c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019c4c:	4b67      	ldr	r3, [pc, #412]	; (8019dec <init_touchbuttons+0x854>)
 8019c4e:	9304      	str	r3, [sp, #16]
 8019c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c54:	9303      	str	r3, [sp, #12]
 8019c56:	231f      	movs	r3, #31
 8019c58:	9302      	str	r3, [sp, #8]
 8019c5a:	2307      	movs	r3, #7
 8019c5c:	9301      	str	r3, [sp, #4]
 8019c5e:	6a3b      	ldr	r3, [r7, #32]
 8019c60:	9300      	str	r3, [sp, #0]
 8019c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c66:	4621      	mov	r1, r4
 8019c68:	4861      	ldr	r0, [pc, #388]	; (8019df0 <init_touchbuttons+0x858>)
 8019c6a:	f000 f8e8 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_HIST500] ,hbnum++*hb_step+hb_left,hby,hb_wid,hb_height,DARKBLUE,BLUE,WHITE,"0.5s",lucidaConsole_14ptFontInfo, 0,NULL,NULL);
 8019c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c70:	1c5a      	adds	r2, r3, #1
 8019c72:	62ba      	str	r2, [r7, #40]	; 0x28
 8019c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c76:	fb02 f203 	mul.w	r2, r2, r3
 8019c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c7c:	18d4      	adds	r4, r2, r3
 8019c7e:	2300      	movs	r3, #0
 8019c80:	930a      	str	r3, [sp, #40]	; 0x28
 8019c82:	2300      	movs	r3, #0
 8019c84:	9309      	str	r3, [sp, #36]	; 0x24
 8019c86:	2300      	movs	r3, #0
 8019c88:	9308      	str	r3, [sp, #32]
 8019c8a:	4a55      	ldr	r2, [pc, #340]	; (8019de0 <init_touchbuttons+0x848>)
 8019c8c:	ab05      	add	r3, sp, #20
 8019c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019c94:	4b57      	ldr	r3, [pc, #348]	; (8019df4 <init_touchbuttons+0x85c>)
 8019c96:	9304      	str	r3, [sp, #16]
 8019c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c9c:	9303      	str	r3, [sp, #12]
 8019c9e:	231f      	movs	r3, #31
 8019ca0:	9302      	str	r3, [sp, #8]
 8019ca2:	2307      	movs	r3, #7
 8019ca4:	9301      	str	r3, [sp, #4]
 8019ca6:	6a3b      	ldr	r3, [r7, #32]
 8019ca8:	9300      	str	r3, [sp, #0]
 8019caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cae:	4621      	mov	r1, r4
 8019cb0:	4851      	ldr	r0, [pc, #324]	; (8019df8 <init_touchbuttons+0x860>)
 8019cb2:	f000 f8c4 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_HIST1000] ,hbnum++*hb_step+hb_left,hby,hb_wid,hb_height,DARKBLUE,BLUE,WHITE,"1s",lucidaConsole_14ptFontInfo, 0,NULL,NULL);
 8019cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb8:	1c5a      	adds	r2, r3, #1
 8019cba:	62ba      	str	r2, [r7, #40]	; 0x28
 8019cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019cbe:	fb02 f203 	mul.w	r2, r2, r3
 8019cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc4:	18d4      	adds	r4, r2, r3
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8019cca:	2300      	movs	r3, #0
 8019ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8019cce:	2300      	movs	r3, #0
 8019cd0:	9308      	str	r3, [sp, #32]
 8019cd2:	4a43      	ldr	r2, [pc, #268]	; (8019de0 <init_touchbuttons+0x848>)
 8019cd4:	ab05      	add	r3, sp, #20
 8019cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8019cd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019cdc:	4b47      	ldr	r3, [pc, #284]	; (8019dfc <init_touchbuttons+0x864>)
 8019cde:	9304      	str	r3, [sp, #16]
 8019ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ce4:	9303      	str	r3, [sp, #12]
 8019ce6:	231f      	movs	r3, #31
 8019ce8:	9302      	str	r3, [sp, #8]
 8019cea:	2307      	movs	r3, #7
 8019cec:	9301      	str	r3, [sp, #4]
 8019cee:	6a3b      	ldr	r3, [r7, #32]
 8019cf0:	9300      	str	r3, [sp, #0]
 8019cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cf6:	4621      	mov	r1, r4
 8019cf8:	4841      	ldr	r0, [pc, #260]	; (8019e00 <init_touchbuttons+0x868>)
 8019cfa:	f000 f8a0 	bl	8019e3e <setup_touchbutton>

	// Buttons für die Antennenschalter
	int aleftx = 20;
 8019cfe:	2314      	movs	r3, #20
 8019d00:	61fb      	str	r3, [r7, #28]
	int atopy = 350;
 8019d02:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8019d06:	61bb      	str	r3, [r7, #24]
	int awidth = 170;
 8019d08:	23aa      	movs	r3, #170	; 0xaa
 8019d0a:	617b      	str	r3, [r7, #20]
	int aheight = 50;
 8019d0c:	2332      	movs	r3, #50	; 0x32
 8019d0e:	613b      	str	r3, [r7, #16]
	int aspace = awidth + 30;
 8019d10:	697b      	ldr	r3, [r7, #20]
 8019d12:	331e      	adds	r3, #30
 8019d14:	60fb      	str	r3, [r7, #12]
	setup_touchbutton(&tb_buttons[TB_ANTSW1] ,aleftx,atopy,awidth,aheight,DARKBLUE,LIGHTBLUEANT,WHITE,"ANT-1",lucidaConsole_18ptFontInfo, 0,NULL,NULL);
 8019d16:	2300      	movs	r3, #0
 8019d18:	930a      	str	r3, [sp, #40]	; 0x28
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8019d1e:	2300      	movs	r3, #0
 8019d20:	9308      	str	r3, [sp, #32]
 8019d22:	4a38      	ldr	r2, [pc, #224]	; (8019e04 <init_touchbuttons+0x86c>)
 8019d24:	ab05      	add	r3, sp, #20
 8019d26:	ca07      	ldmia	r2, {r0, r1, r2}
 8019d28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019d2c:	4b36      	ldr	r3, [pc, #216]	; (8019e08 <init_touchbuttons+0x870>)
 8019d2e:	9304      	str	r3, [sp, #16]
 8019d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d34:	9303      	str	r3, [sp, #12]
 8019d36:	f647 33da 	movw	r3, #31706	; 0x7bda
 8019d3a:	9302      	str	r3, [sp, #8]
 8019d3c:	2307      	movs	r3, #7
 8019d3e:	9301      	str	r3, [sp, #4]
 8019d40:	693b      	ldr	r3, [r7, #16]
 8019d42:	9300      	str	r3, [sp, #0]
 8019d44:	697b      	ldr	r3, [r7, #20]
 8019d46:	69ba      	ldr	r2, [r7, #24]
 8019d48:	69f9      	ldr	r1, [r7, #28]
 8019d4a:	4830      	ldr	r0, [pc, #192]	; (8019e0c <init_touchbuttons+0x874>)
 8019d4c:	f000 f877 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_ANTSW2] ,aleftx+aspace*1,atopy,awidth,aheight,DARKBLUE,LIGHTBLUEANT,WHITE,"ANT-2",lucidaConsole_18ptFontInfo, 0,NULL,NULL);
 8019d50:	69fa      	ldr	r2, [r7, #28]
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	18d4      	adds	r4, r2, r3
 8019d56:	2300      	movs	r3, #0
 8019d58:	930a      	str	r3, [sp, #40]	; 0x28
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8019d5e:	2300      	movs	r3, #0
 8019d60:	9308      	str	r3, [sp, #32]
 8019d62:	4a28      	ldr	r2, [pc, #160]	; (8019e04 <init_touchbuttons+0x86c>)
 8019d64:	ab05      	add	r3, sp, #20
 8019d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8019d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019d6c:	4b28      	ldr	r3, [pc, #160]	; (8019e10 <init_touchbuttons+0x878>)
 8019d6e:	9304      	str	r3, [sp, #16]
 8019d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d74:	9303      	str	r3, [sp, #12]
 8019d76:	f647 33da 	movw	r3, #31706	; 0x7bda
 8019d7a:	9302      	str	r3, [sp, #8]
 8019d7c:	2307      	movs	r3, #7
 8019d7e:	9301      	str	r3, [sp, #4]
 8019d80:	693b      	ldr	r3, [r7, #16]
 8019d82:	9300      	str	r3, [sp, #0]
 8019d84:	697b      	ldr	r3, [r7, #20]
 8019d86:	69ba      	ldr	r2, [r7, #24]
 8019d88:	4621      	mov	r1, r4
 8019d8a:	4822      	ldr	r0, [pc, #136]	; (8019e14 <init_touchbuttons+0x87c>)
 8019d8c:	f000 f857 	bl	8019e3e <setup_touchbutton>
	setup_touchbutton(&tb_buttons[TB_ANTSW3] ,aleftx+aspace*2,atopy,awidth,aheight,DARKBLUE,LIGHTBLUEANT,WHITE,"ANT-3",lucidaConsole_18ptFontInfo, 0,NULL,NULL);
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	005a      	lsls	r2, r3, #1
 8019d94:	69fb      	ldr	r3, [r7, #28]
 8019d96:	18d4      	adds	r4, r2, r3
 8019d98:	2300      	movs	r3, #0
 8019d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8019da0:	2300      	movs	r3, #0
 8019da2:	9308      	str	r3, [sp, #32]
 8019da4:	4a17      	ldr	r2, [pc, #92]	; (8019e04 <init_touchbuttons+0x86c>)
 8019da6:	ab05      	add	r3, sp, #20
 8019da8:	ca07      	ldmia	r2, {r0, r1, r2}
 8019daa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019dae:	4b1a      	ldr	r3, [pc, #104]	; (8019e18 <init_touchbuttons+0x880>)
 8019db0:	9304      	str	r3, [sp, #16]
 8019db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019db6:	9303      	str	r3, [sp, #12]
 8019db8:	f647 33da 	movw	r3, #31706	; 0x7bda
 8019dbc:	9302      	str	r3, [sp, #8]
 8019dbe:	2307      	movs	r3, #7
 8019dc0:	9301      	str	r3, [sp, #4]
 8019dc2:	693b      	ldr	r3, [r7, #16]
 8019dc4:	9300      	str	r3, [sp, #0]
 8019dc6:	697b      	ldr	r3, [r7, #20]
 8019dc8:	69ba      	ldr	r2, [r7, #24]
 8019dca:	4621      	mov	r1, r4
 8019dcc:	4813      	ldr	r0, [pc, #76]	; (8019e1c <init_touchbuttons+0x884>)
 8019dce:	f000 f836 	bl	8019e3e <setup_touchbutton>
}
 8019dd2:	bf00      	nop
 8019dd4:	3774      	adds	r7, #116	; 0x74
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019dda:	bf00      	nop
 8019ddc:	20007978 	.word	0x20007978
 8019de0:	20001c28 	.word	0x20001c28
 8019de4:	08026d20 	.word	0x08026d20
 8019de8:	20008338 	.word	0x20008338
 8019dec:	08026d28 	.word	0x08026d28
 8019df0:	20008398 	.word	0x20008398
 8019df4:	08026d30 	.word	0x08026d30
 8019df8:	200083f8 	.word	0x200083f8
 8019dfc:	08026d38 	.word	0x08026d38
 8019e00:	20008458 	.word	0x20008458
 8019e04:	20001c34 	.word	0x20001c34
 8019e08:	08026d3c 	.word	0x08026d3c
 8019e0c:	200085d8 	.word	0x200085d8
 8019e10:	08026d44 	.word	0x08026d44
 8019e14:	20008638 	.word	0x20008638
 8019e18:	08026d4c 	.word	0x08026d4c
 8019e1c:	20008698 	.word	0x20008698

08019e20 <setup_touchbutton_presscolor>:

void setup_touchbutton_presscolor(t_touchbutton *ptb, uint16_t col)
{
 8019e20:	b480      	push	{r7}
 8019e22:	b083      	sub	sp, #12
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
 8019e28:	460b      	mov	r3, r1
 8019e2a:	807b      	strh	r3, [r7, #2]
	ptb->press_color = col;
 8019e2c:	887a      	ldrh	r2, [r7, #2]
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	615a      	str	r2, [r3, #20]
}
 8019e32:	bf00      	nop
 8019e34:	370c      	adds	r7, #12
 8019e36:	46bd      	mov	sp, r7
 8019e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e3c:	4770      	bx	lr

08019e3e <setup_touchbutton>:

void setup_touchbutton(t_touchbutton *ptb, int x, int y, int w, int h, int color, int presscolor, int textcolor, char *text, FONT_INFO font,
						int picture, char *picname, char *presspicname)
{
 8019e3e:	b580      	push	{r7, lr}
 8019e40:	b086      	sub	sp, #24
 8019e42:	af00      	add	r7, sp, #0
 8019e44:	60f8      	str	r0, [r7, #12]
 8019e46:	60b9      	str	r1, [r7, #8]
 8019e48:	607a      	str	r2, [r7, #4]
 8019e4a:	603b      	str	r3, [r7, #0]
	// speichere die Eigenschaften des Buttons
	ptb->x = x;
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	68ba      	ldr	r2, [r7, #8]
 8019e50:	601a      	str	r2, [r3, #0]
	ptb->y = y;
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	687a      	ldr	r2, [r7, #4]
 8019e56:	605a      	str	r2, [r3, #4]
	ptb->width = w;
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	683a      	ldr	r2, [r7, #0]
 8019e5c:	609a      	str	r2, [r3, #8]
	ptb->height = h;
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	6a3a      	ldr	r2, [r7, #32]
 8019e62:	60da      	str	r2, [r3, #12]
	ptb->release_color = color;
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e68:	611a      	str	r2, [r3, #16]
	ptb->press_color = presscolor;
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e6e:	615a      	str	r2, [r3, #20]
	ptb->text_color = textcolor;
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e74:	619a      	str	r2, [r3, #24]
	ptb->font = font;
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	3330      	adds	r3, #48	; 0x30
 8019e7a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8019e7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019e80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strncpy(ptb->text, text, 19);
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	331c      	adds	r3, #28
 8019e88:	2213      	movs	r2, #19
 8019e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f005 f9fb 	bl	801f288 <strncpy>
	ptb->text[19] = 0;
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	2200      	movs	r2, #0
 8019e96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	ptb->picture = picture;
 8019e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e9c:	b2da      	uxtb	r2, r3
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	strncpy(ptb->picname,picname,9);
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	333d      	adds	r3, #61	; 0x3d
 8019ea8:	2209      	movs	r2, #9
 8019eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019eac:	4618      	mov	r0, r3
 8019eae:	f005 f9eb 	bl	801f288 <strncpy>
	ptb->picname[9]=0;
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	2200      	movs	r2, #0
 8019eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	strncpy(ptb->presspicname,presspicname,9);
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	3347      	adds	r3, #71	; 0x47
 8019ebe:	2209      	movs	r2, #9
 8019ec0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f005 f9e0 	bl	801f288 <strncpy>
	ptb->presspicname[9]=0;
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	2200      	movs	r2, #0
 8019ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	// Berechne Position des Textes
	// Hole hor.Größe des Textes in Pixel
	int tw, th;
	tft_textwidth_pixel(&ptb->font, ptb->text, &tw, &th);
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	f103 011c 	add.w	r1, r3, #28
 8019edc:	f107 0310 	add.w	r3, r7, #16
 8019ee0:	f107 0214 	add.w	r2, r7, #20
 8019ee4:	f004 fe77 	bl	801ebd6 <tft_textwidth_pixel>
	ptb->txpos = (ptb->width - tw) / 2;
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	689a      	ldr	r2, [r3, #8]
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	1ad3      	subs	r3, r2, r3
 8019ef0:	0fda      	lsrs	r2, r3, #31
 8019ef2:	4413      	add	r3, r2
 8019ef4:	105b      	asrs	r3, r3, #1
 8019ef6:	461a      	mov	r2, r3
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	655a      	str	r2, [r3, #84]	; 0x54
	if(ptb->txpos < 0) ptb->txpos = 0;
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	da02      	bge.n	8019f0a <setup_touchbutton+0xcc>
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	2200      	movs	r2, #0
 8019f08:	655a      	str	r2, [r3, #84]	; 0x54
	ptb->typos = (ptb->height - th) / 2;
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	68da      	ldr	r2, [r3, #12]
 8019f0e:	693b      	ldr	r3, [r7, #16]
 8019f10:	1ad3      	subs	r3, r2, r3
 8019f12:	0fda      	lsrs	r2, r3, #31
 8019f14:	4413      	add	r3, r2
 8019f16:	105b      	asrs	r3, r3, #1
 8019f18:	461a      	mov	r2, r3
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	659a      	str	r2, [r3, #88]	; 0x58
	if(ptb->typos < 0) ptb->typos = 0;
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	da02      	bge.n	8019f2c <setup_touchbutton+0xee>
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	2200      	movs	r2, #0
 8019f2a:	659a      	str	r2, [r3, #88]	; 0x58

	ptb->txpos += ptb->x;
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	441a      	add	r2, r3
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	655a      	str	r2, [r3, #84]	; 0x54
	ptb->typos += ptb->y;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	441a      	add	r2, r3
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	659a      	str	r2, [r3, #88]	; 0x58
}
 8019f48:	bf00      	nop
 8019f4a:	3718      	adds	r7, #24
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}

08019f50 <blink_touchbutton>:

void blink_touchbutton(t_touchbutton *ptb, char *blinktext)
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b08e      	sub	sp, #56	; 0x38
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
 8019f58:	6039      	str	r1, [r7, #0]
char orig_text[20];
int orig_release_color;
int orig_press_color;
int orig_text_color;
FONT_INFO fnt = ptb->font;
 8019f5a:	687a      	ldr	r2, [r7, #4]
 8019f5c:	f107 030c 	add.w	r3, r7, #12
 8019f60:	3230      	adds	r2, #48	; 0x30
 8019f62:	ca07      	ldmia	r2, {r0, r1, r2}
 8019f64:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// merke originale Werte
	orig_release_color = ptb->release_color;
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	691b      	ldr	r3, [r3, #16]
 8019f6c:	637b      	str	r3, [r7, #52]	; 0x34
	orig_press_color = ptb->press_color;
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	695b      	ldr	r3, [r3, #20]
 8019f72:	633b      	str	r3, [r7, #48]	; 0x30
	orig_text_color = ptb->text_color;
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	699b      	ldr	r3, [r3, #24]
 8019f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	strcpy(orig_text, ptb->text);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	f103 021c 	add.w	r2, r3, #28
 8019f80:	f107 0318 	add.w	r3, r7, #24
 8019f84:	4611      	mov	r1, r2
 8019f86:	4618      	mov	r0, r3
 8019f88:	f005 f976 	bl	801f278 <strcpy>

	ptb->release_color = YELLOW;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8019f92:	611a      	str	r2, [r3, #16]
	ptb->press_color = YELLOW;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8019f9a:	615a      	str	r2, [r3, #20]
	ptb->text_color = BLACK;
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	619a      	str	r2, [r3, #24]
	ptb->font = lucidaConsole_14ptFontInfo;
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	4a18      	ldr	r2, [pc, #96]	; (801a008 <blink_touchbutton+0xb8>)
 8019fa6:	3330      	adds	r3, #48	; 0x30
 8019fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8019faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(ptb->text,blinktext);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	331c      	adds	r3, #28
 8019fb2:	6839      	ldr	r1, [r7, #0]
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f005 f95f 	bl	801f278 <strcpy>
	draw_touchbutton(ptb);
 8019fba:	6878      	ldr	r0, [r7, #4]
 8019fbc:	f000 f826 	bl	801a00c <draw_touchbutton>
	delay_1ms(500);
 8019fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8019fc4:	f7fe fe84 	bl	8018cd0 <delay_1ms>
		draw_touchbutton(ptb);
		delay_1ms(250);
	}*/

	// restauriere originale Werte
	ptb->release_color = orig_release_color;
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019fcc:	611a      	str	r2, [r3, #16]
	ptb->press_color = orig_press_color;
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019fd2:	615a      	str	r2, [r3, #20]
	ptb->text_color = orig_text_color;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fd8:	619a      	str	r2, [r3, #24]
	ptb->font = fnt;
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	3330      	adds	r3, #48	; 0x30
 8019fde:	f107 020c 	add.w	r2, r7, #12
 8019fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8019fe4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(ptb->text,orig_text);
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	331c      	adds	r3, #28
 8019fec:	f107 0218 	add.w	r2, r7, #24
 8019ff0:	4611      	mov	r1, r2
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f005 f940 	bl	801f278 <strcpy>
	draw_touchbutton(ptb);
 8019ff8:	6878      	ldr	r0, [r7, #4]
 8019ffa:	f000 f807 	bl	801a00c <draw_touchbutton>
}
 8019ffe:	bf00      	nop
 801a000:	3738      	adds	r7, #56	; 0x38
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
 801a006:	bf00      	nop
 801a008:	20001c28 	.word	0x20001c28

0801a00c <draw_touchbutton>:

void draw_touchbutton(t_touchbutton *ptb)
{
 801a00c:	b5b0      	push	{r4, r5, r7, lr}
 801a00e:	b088      	sub	sp, #32
 801a010:	af04      	add	r7, sp, #16
 801a012:	6078      	str	r0, [r7, #4]
	if(ptb == NULL) return;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d05e      	beq.n	801a0d8 <draw_touchbutton+0xcc>

	int color = ptb->release_color;
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	691b      	ldr	r3, [r3, #16]
 801a01e:	60fb      	str	r3, [r7, #12]
	char *fn = ptb->picname;
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	333d      	adds	r3, #61	; 0x3d
 801a024:	60bb      	str	r3, [r7, #8]
	if(ptb->pressed == 1)
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a02c:	2b01      	cmp	r3, #1
 801a02e:	d105      	bne.n	801a03c <draw_touchbutton+0x30>
	{
		color = ptb->press_color;
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	695b      	ldr	r3, [r3, #20]
 801a034:	60fb      	str	r3, [r7, #12]
		fn = ptb->presspicname;
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	3347      	adds	r3, #71	; 0x47
 801a03a:	60bb      	str	r3, [r7, #8]
	}

	// Zeichne Button
	if(ptb->picture == 0)
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a042:	2b00      	cmp	r3, #0
 801a044:	d13f      	bne.n	801a0c6 <draw_touchbutton+0xba>
	{
		// gezeichneter und beschrifteter Button
		TFT_Fill_Rectangle(ptb->x, ptb->y, ptb->x + ptb->width, ptb->y + ptb->height, color);
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	6818      	ldr	r0, [r3, #0]
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	6859      	ldr	r1, [r3, #4]
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	681a      	ldr	r2, [r3, #0]
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	689b      	ldr	r3, [r3, #8]
 801a056:	18d4      	adds	r4, r2, r3
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	685a      	ldr	r2, [r3, #4]
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	441a      	add	r2, r3
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	9300      	str	r3, [sp, #0]
 801a066:	4613      	mov	r3, r2
 801a068:	4622      	mov	r2, r4
 801a06a:	f7fd fbe5 	bl	8017838 <TFT_Fill_Rectangle>
		TFT_Rectangle(ptb->x, ptb->y, ptb->x + ptb->width, ptb->y + ptb->height, BLACK, 2);
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	6818      	ldr	r0, [r3, #0]
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	6859      	ldr	r1, [r3, #4]
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	681a      	ldr	r2, [r3, #0]
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	689b      	ldr	r3, [r3, #8]
 801a07e:	18d4      	adds	r4, r2, r3
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	685a      	ldr	r2, [r3, #4]
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	68db      	ldr	r3, [r3, #12]
 801a088:	441a      	add	r2, r3
 801a08a:	2302      	movs	r3, #2
 801a08c:	9301      	str	r3, [sp, #4]
 801a08e:	2300      	movs	r3, #0
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	4613      	mov	r3, r2
 801a094:	4622      	mov	r2, r4
 801a096:	f7fd ff29 	bl	8017eec <TFT_Rectangle>
		tft_print(&ptb->font, ptb->text, ptb->txpos, ptb->typos, 1, ptb->text_color , color);
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	f103 011c 	add.w	r1, r3, #28
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	699b      	ldr	r3, [r3, #24]
 801a0b2:	461d      	mov	r5, r3
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	9302      	str	r3, [sp, #8]
 801a0b8:	9501      	str	r5, [sp, #4]
 801a0ba:	2301      	movs	r3, #1
 801a0bc:	9300      	str	r3, [sp, #0]
 801a0be:	4623      	mov	r3, r4
 801a0c0:	f004 fd70 	bl	801eba4 <tft_print>
 801a0c4:	e009      	b.n	801a0da <draw_touchbutton+0xce>
	}
	else
	{
		// Picture Button
		TFT_DrawFlash(fn,ptb->x, ptb->y);
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	6819      	ldr	r1, [r3, #0]
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	685b      	ldr	r3, [r3, #4]
 801a0ce:	461a      	mov	r2, r3
 801a0d0:	68b8      	ldr	r0, [r7, #8]
 801a0d2:	f7fe fa53 	bl	801857c <TFT_DrawFlash>
 801a0d6:	e000      	b.n	801a0da <draw_touchbutton+0xce>
	if(ptb == NULL) return;
 801a0d8:	bf00      	nop
	}
}
 801a0da:	3710      	adds	r7, #16
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bdb0      	pop	{r4, r5, r7, pc}

0801a0e0 <draw_touchbuttons_history>:

void draw_touchbuttons_history()
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b082      	sub	sp, #8
 801a0e4:	af00      	add	r7, sp, #0
	for(int i=TB_HIST100; i<=TB_HIST1000; i++)
 801a0e6:	2332      	movs	r3, #50	; 0x32
 801a0e8:	607b      	str	r3, [r7, #4]
 801a0ea:	e00c      	b.n	801a106 <draw_touchbuttons_history+0x26>
	{
		draw_touchbutton(&tb_buttons[i]);
 801a0ec:	687a      	ldr	r2, [r7, #4]
 801a0ee:	4613      	mov	r3, r2
 801a0f0:	005b      	lsls	r3, r3, #1
 801a0f2:	4413      	add	r3, r2
 801a0f4:	015b      	lsls	r3, r3, #5
 801a0f6:	4a07      	ldr	r2, [pc, #28]	; (801a114 <draw_touchbuttons_history+0x34>)
 801a0f8:	4413      	add	r3, r2
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	f7ff ff86 	bl	801a00c <draw_touchbutton>
	for(int i=TB_HIST100; i<=TB_HIST1000; i++)
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	3301      	adds	r3, #1
 801a104:	607b      	str	r3, [r7, #4]
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	2b35      	cmp	r3, #53	; 0x35
 801a10a:	ddef      	ble.n	801a0ec <draw_touchbuttons_history+0xc>
	}
}
 801a10c:	bf00      	nop
 801a10e:	3708      	adds	r7, #8
 801a110:	46bd      	mov	sp, r7
 801a112:	bd80      	pop	{r7, pc}
 801a114:	20007078 	.word	0x20007078

0801a118 <draw_touchbuttons_bottom>:

void draw_touchbuttons_bottom()
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b082      	sub	sp, #8
 801a11c:	af00      	add	r7, sp, #0
	for(int i=0; i<=TB_MENU; i++)
 801a11e:	2300      	movs	r3, #0
 801a120:	607b      	str	r3, [r7, #4]
 801a122:	e00c      	b.n	801a13e <draw_touchbuttons_bottom+0x26>
	{
		draw_touchbutton(&tb_buttons[i]);
 801a124:	687a      	ldr	r2, [r7, #4]
 801a126:	4613      	mov	r3, r2
 801a128:	005b      	lsls	r3, r3, #1
 801a12a:	4413      	add	r3, r2
 801a12c:	015b      	lsls	r3, r3, #5
 801a12e:	4a07      	ldr	r2, [pc, #28]	; (801a14c <draw_touchbuttons_bottom+0x34>)
 801a130:	4413      	add	r3, r2
 801a132:	4618      	mov	r0, r3
 801a134:	f7ff ff6a 	bl	801a00c <draw_touchbutton>
	for(int i=0; i<=TB_MENU; i++)
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	3301      	adds	r3, #1
 801a13c:	607b      	str	r3, [r7, #4]
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2b03      	cmp	r3, #3
 801a142:	ddef      	ble.n	801a124 <draw_touchbuttons_bottom+0xc>
	}
}
 801a144:	bf00      	nop
 801a146:	3708      	adds	r7, #8
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}
 801a14c:	20007078 	.word	0x20007078

0801a150 <draw_touchbuttons_mainmenu>:

void draw_touchbuttons_mainmenu()
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b082      	sub	sp, #8
 801a154:	af00      	add	r7, sp, #0
	draw_touchbutton(&tb_buttons[TB_EMERG_OFF]);
 801a156:	481d      	ldr	r0, [pc, #116]	; (801a1cc <draw_touchbuttons_mainmenu+0x7c>)
 801a158:	f7ff ff58 	bl	801a00c <draw_touchbutton>
	draw_touchbutton(&tb_buttons[TB_MENU]);
 801a15c:	481c      	ldr	r0, [pc, #112]	; (801a1d0 <draw_touchbuttons_mainmenu+0x80>)
 801a15e:	f7ff ff55 	bl	801a00c <draw_touchbutton>

	if(pcfgdata->systemMode == 0)
 801a162:	4b1c      	ldr	r3, [pc, #112]	; (801a1d4 <draw_touchbuttons_mainmenu+0x84>)
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d106      	bne.n	801a17c <draw_touchbuttons_mainmenu+0x2c>
	{
		draw_touchbutton(&tb_buttons[TB_ACTIVE]);
 801a16e:	481a      	ldr	r0, [pc, #104]	; (801a1d8 <draw_touchbuttons_mainmenu+0x88>)
 801a170:	f7ff ff4c 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_STANDBY]);
 801a174:	4819      	ldr	r0, [pc, #100]	; (801a1dc <draw_touchbuttons_mainmenu+0x8c>)
 801a176:	f7ff ff49 	bl	801a00c <draw_touchbutton>
 801a17a:	e00e      	b.n	801a19a <draw_touchbuttons_mainmenu+0x4a>
	}
	else if(pcfgdata->systemMode == 1)
 801a17c:	4b15      	ldr	r3, [pc, #84]	; (801a1d4 <draw_touchbuttons_mainmenu+0x84>)
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a184:	2b01      	cmp	r3, #1
 801a186:	d108      	bne.n	801a19a <draw_touchbuttons_mainmenu+0x4a>
	{
		draw_touchbutton(&tb_buttons[TB_KOP1]);
 801a188:	4815      	ldr	r0, [pc, #84]	; (801a1e0 <draw_touchbuttons_mainmenu+0x90>)
 801a18a:	f7ff ff3f 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_KOP2]);
 801a18e:	4815      	ldr	r0, [pc, #84]	; (801a1e4 <draw_touchbuttons_mainmenu+0x94>)
 801a190:	f7ff ff3c 	bl	801a00c <draw_touchbutton>
		draw_touchbutton(&tb_buttons[TB_KOP3]);
 801a194:	4814      	ldr	r0, [pc, #80]	; (801a1e8 <draw_touchbuttons_mainmenu+0x98>)
 801a196:	f7ff ff39 	bl	801a00c <draw_touchbutton>
	}

	for(int i=TB_BAND1; i<=TB_BAND12; i++)
 801a19a:	2304      	movs	r3, #4
 801a19c:	607b      	str	r3, [r7, #4]
 801a19e:	e00c      	b.n	801a1ba <draw_touchbuttons_mainmenu+0x6a>
	{
		draw_touchbutton(&tb_buttons[i]);
 801a1a0:	687a      	ldr	r2, [r7, #4]
 801a1a2:	4613      	mov	r3, r2
 801a1a4:	005b      	lsls	r3, r3, #1
 801a1a6:	4413      	add	r3, r2
 801a1a8:	015b      	lsls	r3, r3, #5
 801a1aa:	4a0b      	ldr	r2, [pc, #44]	; (801a1d8 <draw_touchbuttons_mainmenu+0x88>)
 801a1ac:	4413      	add	r3, r2
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	f7ff ff2c 	bl	801a00c <draw_touchbutton>
	for(int i=TB_BAND1; i<=TB_BAND12; i++)
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	3301      	adds	r3, #1
 801a1b8:	607b      	str	r3, [r7, #4]
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	2b0f      	cmp	r3, #15
 801a1be:	ddef      	ble.n	801a1a0 <draw_touchbuttons_mainmenu+0x50>
	}

	activate_bandtouchbutton();	// aktiviere den zum gewählten Band zugehörigen Touchbutton
 801a1c0:	f7f1 f924 	bl	800b40c <activate_bandtouchbutton>
}
 801a1c4:	bf00      	nop
 801a1c6:	3708      	adds	r7, #8
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd80      	pop	{r7, pc}
 801a1cc:	20007138 	.word	0x20007138
 801a1d0:	20007198 	.word	0x20007198
 801a1d4:	20000bf0 	.word	0x20000bf0
 801a1d8:	20007078 	.word	0x20007078
 801a1dc:	200070d8 	.word	0x200070d8
 801a1e0:	200084b8 	.word	0x200084b8
 801a1e4:	20008518 	.word	0x20008518
 801a1e8:	20008578 	.word	0x20008578

0801a1ec <process_touchbuttons>:

int secret_count = 0;

void process_touchbuttons()
{
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b088      	sub	sp, #32
 801a1f0:	af00      	add	r7, sp, #0
	int x,y,rawx,rawy;
	static int ispressed = 0;

	int ret = XPT2046_GetAdXY(&x, &y,&rawx,&rawy);
 801a1f2:	1d3b      	adds	r3, r7, #4
 801a1f4:	f107 0208 	add.w	r2, r7, #8
 801a1f8:	f107 010c 	add.w	r1, r7, #12
 801a1fc:	f107 0010 	add.w	r0, r7, #16
 801a200:	f7fe fefc 	bl	8018ffc <XPT2046_GetAdXY>
 801a204:	6178      	str	r0, [r7, #20]
	/*char s[50] = {"                      "};
	if(ret)
		sprintf(s,"x:%d y:%d           ",x,y);
	tft_print(&lucidaConsole_12ptFontInfo, s, 400, 400, 4, WHITE , BLACK);*/

	if(ret)
 801a206:	697b      	ldr	r3, [r7, #20]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	f000 8084 	beq.w	801a316 <process_touchbuttons+0x12a>
	{
		// Touch wurde gedrückt

		if(menunum == MENU_TOUCHCAL)
 801a20e:	4b63      	ldr	r3, [pc, #396]	; (801a39c <process_touchbuttons+0x1b0>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	2b0f      	cmp	r3, #15
 801a214:	d106      	bne.n	801a224 <process_touchbuttons+0x38>
		{
			// Touch Kalibration, behandelt Dauerdrücken selbst
			touchcal(x,y,rawx,rawy);
 801a216:	6938      	ldr	r0, [r7, #16]
 801a218:	68f9      	ldr	r1, [r7, #12]
 801a21a:	68ba      	ldr	r2, [r7, #8]
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	f7f9 fdbd 	bl	8013d9c <touchcal>
			return;
 801a222:	e0b7      	b.n	801a394 <process_touchbuttons+0x1a8>
		}

		if(ispressed == 1) return;	// es ist bereits gedrückt
 801a224:	4b5e      	ldr	r3, [pc, #376]	; (801a3a0 <process_touchbuttons+0x1b4>)
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	2b01      	cmp	r3, #1
 801a22a:	f000 80b0 	beq.w	801a38e <process_touchbuttons+0x1a2>
		ispressed = 1;
 801a22e:	4b5c      	ldr	r3, [pc, #368]	; (801a3a0 <process_touchbuttons+0x1b4>)
 801a230:	2201      	movs	r2, #1
 801a232:	601a      	str	r2, [r3, #0]
			}
		}*/

		// zunächst die Aktionen welche nichts mit Buttons zu tun haben sondern
		// die Touchkoordinaten selbst bearbeiten
		if(menunum == MENU_SELECTION)
 801a234:	4b59      	ldr	r3, [pc, #356]	; (801a39c <process_touchbuttons+0x1b0>)
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d106      	bne.n	801a24a <process_touchbuttons+0x5e>
		{
			// Haupt-Auswahlmenu
			selection_menu(x,y);
 801a23c:	693b      	ldr	r3, [r7, #16]
 801a23e:	68fa      	ldr	r2, [r7, #12]
 801a240:	4611      	mov	r1, r2
 801a242:	4618      	mov	r0, r3
 801a244:	f7f7 fb88 	bl	8011958 <selection_menu>
			return;
 801a248:	e0a4      	b.n	801a394 <process_touchbuttons+0x1a8>
		}
		if(menunum == MENU_SWITCH)
 801a24a:	4b54      	ldr	r3, [pc, #336]	; (801a39c <process_touchbuttons+0x1b0>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2b09      	cmp	r3, #9
 801a250:	d105      	bne.n	801a25e <process_touchbuttons+0x72>
		{
			// Manuelle Ausgangsumschaltung
			switch_outputs(x,y);
 801a252:	693b      	ldr	r3, [r7, #16]
 801a254:	68fa      	ldr	r2, [r7, #12]
 801a256:	4611      	mov	r1, r2
 801a258:	4618      	mov	r0, r3
 801a25a:	f7f9 fbeb 	bl	8013a34 <switch_outputs>
		}

		if(menunum == MENU_CALIB)
 801a25e:	4b4f      	ldr	r3, [pc, #316]	; (801a39c <process_touchbuttons+0x1b0>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	2b0c      	cmp	r3, #12
 801a264:	d105      	bne.n	801a272 <process_touchbuttons+0x86>
		{
			calib_touch(x,y);
 801a266:	693b      	ldr	r3, [r7, #16]
 801a268:	68fa      	ldr	r2, [r7, #12]
 801a26a:	4611      	mov	r1, r2
 801a26c:	4618      	mov	r0, r3
 801a26e:	f7f3 ff75 	bl	800e15c <calib_touch>
		}

		// jetzt suchen welcher Button gedrückt wurde
		for(int i=0; i<MAXBUTTONS; i++)
 801a272:	2300      	movs	r3, #0
 801a274:	61fb      	str	r3, [r7, #28]
 801a276:	e04a      	b.n	801a30e <process_touchbuttons+0x122>
		{
			if(x > tb_buttons[i].x && x < (tb_buttons[i].x+tb_buttons[i].width) &&
 801a278:	494a      	ldr	r1, [pc, #296]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a27a:	69fa      	ldr	r2, [r7, #28]
 801a27c:	4613      	mov	r3, r2
 801a27e:	005b      	lsls	r3, r3, #1
 801a280:	4413      	add	r3, r2
 801a282:	015b      	lsls	r3, r3, #5
 801a284:	440b      	add	r3, r1
 801a286:	681a      	ldr	r2, [r3, #0]
 801a288:	693b      	ldr	r3, [r7, #16]
 801a28a:	429a      	cmp	r2, r3
 801a28c:	da3c      	bge.n	801a308 <process_touchbuttons+0x11c>
 801a28e:	4945      	ldr	r1, [pc, #276]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a290:	69fa      	ldr	r2, [r7, #28]
 801a292:	4613      	mov	r3, r2
 801a294:	005b      	lsls	r3, r3, #1
 801a296:	4413      	add	r3, r2
 801a298:	015b      	lsls	r3, r3, #5
 801a29a:	440b      	add	r3, r1
 801a29c:	6819      	ldr	r1, [r3, #0]
 801a29e:	4841      	ldr	r0, [pc, #260]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a2a0:	69fa      	ldr	r2, [r7, #28]
 801a2a2:	4613      	mov	r3, r2
 801a2a4:	005b      	lsls	r3, r3, #1
 801a2a6:	4413      	add	r3, r2
 801a2a8:	015b      	lsls	r3, r3, #5
 801a2aa:	4403      	add	r3, r0
 801a2ac:	3308      	adds	r3, #8
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	18ca      	adds	r2, r1, r3
 801a2b2:	693b      	ldr	r3, [r7, #16]
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	dd27      	ble.n	801a308 <process_touchbuttons+0x11c>
			   y > tb_buttons[i].y && y < (tb_buttons[i].y+tb_buttons[i].height))
 801a2b8:	493a      	ldr	r1, [pc, #232]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a2ba:	69fa      	ldr	r2, [r7, #28]
 801a2bc:	4613      	mov	r3, r2
 801a2be:	005b      	lsls	r3, r3, #1
 801a2c0:	4413      	add	r3, r2
 801a2c2:	015b      	lsls	r3, r3, #5
 801a2c4:	440b      	add	r3, r1
 801a2c6:	3304      	adds	r3, #4
 801a2c8:	681a      	ldr	r2, [r3, #0]
 801a2ca:	68fb      	ldr	r3, [r7, #12]
			if(x > tb_buttons[i].x && x < (tb_buttons[i].x+tb_buttons[i].width) &&
 801a2cc:	429a      	cmp	r2, r3
 801a2ce:	da1b      	bge.n	801a308 <process_touchbuttons+0x11c>
			   y > tb_buttons[i].y && y < (tb_buttons[i].y+tb_buttons[i].height))
 801a2d0:	4934      	ldr	r1, [pc, #208]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a2d2:	69fa      	ldr	r2, [r7, #28]
 801a2d4:	4613      	mov	r3, r2
 801a2d6:	005b      	lsls	r3, r3, #1
 801a2d8:	4413      	add	r3, r2
 801a2da:	015b      	lsls	r3, r3, #5
 801a2dc:	440b      	add	r3, r1
 801a2de:	3304      	adds	r3, #4
 801a2e0:	6819      	ldr	r1, [r3, #0]
 801a2e2:	4830      	ldr	r0, [pc, #192]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a2e4:	69fa      	ldr	r2, [r7, #28]
 801a2e6:	4613      	mov	r3, r2
 801a2e8:	005b      	lsls	r3, r3, #1
 801a2ea:	4413      	add	r3, r2
 801a2ec:	015b      	lsls	r3, r3, #5
 801a2ee:	4403      	add	r3, r0
 801a2f0:	330c      	adds	r3, #12
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	18ca      	adds	r2, r1, r3
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	429a      	cmp	r2, r3
 801a2fa:	dd05      	ble.n	801a308 <process_touchbuttons+0x11c>
			{
				// Button gefunden
				// bearbeite das Kommando
				if(process_button(i))
 801a2fc:	69f8      	ldr	r0, [r7, #28]
 801a2fe:	f7f6 ffd5 	bl	80112ac <process_button>
 801a302:	4603      	mov	r3, r0
 801a304:	2b00      	cmp	r3, #0
 801a306:	d144      	bne.n	801a392 <process_touchbuttons+0x1a6>
		for(int i=0; i<MAXBUTTONS; i++)
 801a308:	69fb      	ldr	r3, [r7, #28]
 801a30a:	3301      	adds	r3, #1
 801a30c:	61fb      	str	r3, [r7, #28]
 801a30e:	69fb      	ldr	r3, [r7, #28]
 801a310:	2b3b      	cmp	r3, #59	; 0x3b
 801a312:	ddb1      	ble.n	801a278 <process_touchbuttons+0x8c>
 801a314:	e03e      	b.n	801a394 <process_touchbuttons+0x1a8>
		}
	}
	else
	{
		// es ist kein Button gedrückt
		ispressed = 0;
 801a316:	4b22      	ldr	r3, [pc, #136]	; (801a3a0 <process_touchbuttons+0x1b4>)
 801a318:	2200      	movs	r2, #0
 801a31a:	601a      	str	r2, [r3, #0]

		switch_outputs(-1,-1);		// melde das dem Switch Menü
 801a31c:	f04f 31ff 	mov.w	r1, #4294967295
 801a320:	f04f 30ff 	mov.w	r0, #4294967295
 801a324:	f7f9 fb86 	bl	8013a34 <switch_outputs>
		touchcal(-1,-1,-1,-1); 		// melde es der Touch Kalibration
 801a328:	f04f 33ff 	mov.w	r3, #4294967295
 801a32c:	f04f 32ff 	mov.w	r2, #4294967295
 801a330:	f04f 31ff 	mov.w	r1, #4294967295
 801a334:	f04f 30ff 	mov.w	r0, #4294967295
 801a338:	f7f9 fd30 	bl	8013d9c <touchcal>

		// release Number Buttons
		for(int i=TB_P1000; i<=TB_GETVAL; i++)
 801a33c:	2310      	movs	r3, #16
 801a33e:	61bb      	str	r3, [r7, #24]
 801a340:	e021      	b.n	801a386 <process_touchbuttons+0x19a>
		{
			if(tb_buttons[i].pressed)
 801a342:	4918      	ldr	r1, [pc, #96]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a344:	69ba      	ldr	r2, [r7, #24]
 801a346:	4613      	mov	r3, r2
 801a348:	005b      	lsls	r3, r3, #1
 801a34a:	4413      	add	r3, r2
 801a34c:	015b      	lsls	r3, r3, #5
 801a34e:	440b      	add	r3, r1
 801a350:	335c      	adds	r3, #92	; 0x5c
 801a352:	781b      	ldrb	r3, [r3, #0]
 801a354:	2b00      	cmp	r3, #0
 801a356:	d013      	beq.n	801a380 <process_touchbuttons+0x194>
			{
				tb_buttons[i].pressed = 0;
 801a358:	4912      	ldr	r1, [pc, #72]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a35a:	69ba      	ldr	r2, [r7, #24]
 801a35c:	4613      	mov	r3, r2
 801a35e:	005b      	lsls	r3, r3, #1
 801a360:	4413      	add	r3, r2
 801a362:	015b      	lsls	r3, r3, #5
 801a364:	440b      	add	r3, r1
 801a366:	335c      	adds	r3, #92	; 0x5c
 801a368:	2200      	movs	r2, #0
 801a36a:	701a      	strb	r2, [r3, #0]
				draw_touchbutton(&tb_buttons[i]);
 801a36c:	69ba      	ldr	r2, [r7, #24]
 801a36e:	4613      	mov	r3, r2
 801a370:	005b      	lsls	r3, r3, #1
 801a372:	4413      	add	r3, r2
 801a374:	015b      	lsls	r3, r3, #5
 801a376:	4a0b      	ldr	r2, [pc, #44]	; (801a3a4 <process_touchbuttons+0x1b8>)
 801a378:	4413      	add	r3, r2
 801a37a:	4618      	mov	r0, r3
 801a37c:	f7ff fe46 	bl	801a00c <draw_touchbutton>
		for(int i=TB_P1000; i<=TB_GETVAL; i++)
 801a380:	69bb      	ldr	r3, [r7, #24]
 801a382:	3301      	adds	r3, #1
 801a384:	61bb      	str	r3, [r7, #24]
 801a386:	69bb      	ldr	r3, [r7, #24]
 801a388:	2b18      	cmp	r3, #24
 801a38a:	ddda      	ble.n	801a342 <process_touchbuttons+0x156>
 801a38c:	e002      	b.n	801a394 <process_touchbuttons+0x1a8>
		if(ispressed == 1) return;	// es ist bereits gedrückt
 801a38e:	bf00      	nop
 801a390:	e000      	b.n	801a394 <process_touchbuttons+0x1a8>
					break;
 801a392:	bf00      	nop
			}
		}
	}
}
 801a394:	3720      	adds	r7, #32
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}
 801a39a:	bf00      	nop
 801a39c:	20000c24 	.word	0x20000c24
 801a3a0:	200027b8 	.word	0x200027b8
 801a3a4:	20007078 	.word	0x20007078

0801a3a8 <init_wifi_uart>:

// USART-2: PA2=TX, PA3=RX
// TX: DMA-1, Stream-6, Channel-4

void init_wifi_uart()
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b088      	sub	sp, #32
 801a3ac:	af00      	add	r7, sp, #0
	// Enable USART2, DMA2 and GPIO clocks
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 801a3ae:	2101      	movs	r1, #1
 801a3b0:	4831      	ldr	r0, [pc, #196]	; (801a478 <init_wifi_uart+0xd0>)
 801a3b2:	f7ef fc53 	bl	8009c5c <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 801a3b6:	2101      	movs	r1, #1
 801a3b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801a3bc:	f7ef fc8e 	bl	8009cdc <RCC_APB1PeriphClockCmd>

	// GPIO alternative function
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 801a3c0:	230c      	movs	r3, #12
 801a3c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801a3c4:	2302      	movs	r3, #2
 801a3c6:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 801a3c8:	2303      	movs	r3, #3
 801a3ca:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 801a3d4:	f107 0318 	add.w	r3, r7, #24
 801a3d8:	4619      	mov	r1, r3
 801a3da:	4828      	ldr	r0, [pc, #160]	; (801a47c <init_wifi_uart+0xd4>)
 801a3dc:	f7ef fa6e 	bl	80098bc <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 801a3e0:	2207      	movs	r2, #7
 801a3e2:	2102      	movs	r1, #2
 801a3e4:	4825      	ldr	r0, [pc, #148]	; (801a47c <init_wifi_uart+0xd4>)
 801a3e6:	f7ef fb47 	bl	8009a78 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 801a3ea:	2207      	movs	r2, #7
 801a3ec:	2103      	movs	r1, #3
 801a3ee:	4823      	ldr	r0, [pc, #140]	; (801a47c <init_wifi_uart+0xd4>)
 801a3f0:	f7ef fb42 	bl	8009a78 <GPIO_PinAFConfig>

	// init UART-2
	USART_InitTypeDef USART_InitStruct;
	USART_InitStruct.USART_BaudRate = 38400;
 801a3f4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 801a3f8:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 801a3fe:	230c      	movs	r3, #12
 801a400:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 801a402:	2300      	movs	r3, #0
 801a404:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 801a406:	2300      	movs	r3, #0
 801a408:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 801a40a:	2300      	movs	r3, #0
 801a40c:	81bb      	strh	r3, [r7, #12]
	USART_Init(USART2,&USART_InitStruct);
 801a40e:	f107 0308 	add.w	r3, r7, #8
 801a412:	4619      	mov	r1, r3
 801a414:	481a      	ldr	r0, [pc, #104]	; (801a480 <init_wifi_uart+0xd8>)
 801a416:	f7ef fe4f 	bl	800a0b8 <USART_Init>
	{
		USART_SendData(USART2,0x55); // OK
	}*/

	// Init DMA
	init_USART_DMA_TX(MAXWIFIDATA);
 801a41a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801a41e:	f000 f833 	bl	801a488 <init_USART_DMA_TX>

	// Init NVIC
	// DMA (TX) Transfer Complete IRQ
	NVIC_InitTypeDef   NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream6_IRQn;
 801a422:	2311      	movs	r3, #17
 801a424:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 801a426:	2302      	movs	r3, #2
 801a428:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 801a42a:	2302      	movs	r3, #2
 801a42c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801a42e:	2301      	movs	r3, #1
 801a430:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 801a432:	1d3b      	adds	r3, r7, #4
 801a434:	4618      	mov	r0, r3
 801a436:	f7ee fcbf 	bl	8008db8 <NVIC_Init>
	DMA_ITConfig(DMA1_Stream6, DMA_IT_TC, ENABLE); // DMA_IT_TC ... transfer complete
 801a43a:	2201      	movs	r2, #1
 801a43c:	2110      	movs	r1, #16
 801a43e:	4811      	ldr	r0, [pc, #68]	; (801a484 <init_wifi_uart+0xdc>)
 801a440:	f7ee ff54 	bl	80092ec <DMA_ITConfig>

	// USART-2 IRQ
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 801a444:	2326      	movs	r3, #38	; 0x26
 801a446:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 801a448:	2302      	movs	r3, #2
 801a44a:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 801a44c:	2302      	movs	r3, #2
 801a44e:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801a450:	2301      	movs	r3, #1
 801a452:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 801a454:	1d3b      	adds	r3, r7, #4
 801a456:	4618      	mov	r0, r3
 801a458:	f7ee fcae 	bl	8008db8 <NVIC_Init>
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 801a45c:	2201      	movs	r2, #1
 801a45e:	f240 5125 	movw	r1, #1317	; 0x525
 801a462:	4807      	ldr	r0, [pc, #28]	; (801a480 <init_wifi_uart+0xd8>)
 801a464:	f7ef ff36 	bl	800a2d4 <USART_ITConfig>

	USART_Cmd(USART2,ENABLE);
 801a468:	2101      	movs	r1, #1
 801a46a:	4805      	ldr	r0, [pc, #20]	; (801a480 <init_wifi_uart+0xd8>)
 801a46c:	f7ef fede 	bl	800a22c <USART_Cmd>
	{
		memset(wifidata,MAXWIFIDATA,0x55);
		wifi_send(MAXWIFIDATA);
		delay_1ms(1000);
	}*/
}
 801a470:	bf00      	nop
 801a472:	3720      	adds	r7, #32
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}
 801a478:	00200001 	.word	0x00200001
 801a47c:	40020000 	.word	0x40020000
 801a480:	40004400 	.word	0x40004400
 801a484:	400260a0 	.word	0x400260a0

0801a488 <init_USART_DMA_TX>:

void init_USART_DMA_TX(int len)
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b092      	sub	sp, #72	; 0x48
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef DMA_InitStructure;
	DMA_InitStructure.DMA_Channel = DMA_Channel_4;
 801a490:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a494:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART2->DR;
 801a496:	4b14      	ldr	r3, [pc, #80]	; (801a4e8 <init_USART_DMA_TX+0x60>)
 801a498:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)wifidata;
 801a49a:	4b14      	ldr	r3, [pc, #80]	; (801a4ec <init_USART_DMA_TX+0x64>)
 801a49c:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801a49e:	2340      	movs	r3, #64	; 0x40
 801a4a0:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_BufferSize = len;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801a4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a4ae:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 801a4bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801a4c0:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 801a4c6:	2301      	movs	r3, #1
 801a4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init(DMA1_Stream6, &DMA_InitStructure);
 801a4d2:	f107 030c 	add.w	r3, r7, #12
 801a4d6:	4619      	mov	r1, r3
 801a4d8:	4805      	ldr	r0, [pc, #20]	; (801a4f0 <init_USART_DMA_TX+0x68>)
 801a4da:	f7ee fe7b 	bl	80091d4 <DMA_Init>
}
 801a4de:	bf00      	nop
 801a4e0:	3748      	adds	r7, #72	; 0x48
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	bd80      	pop	{r7, pc}
 801a4e6:	bf00      	nop
 801a4e8:	40004404 	.word	0x40004404
 801a4ec:	20008994 	.word	0x20008994
 801a4f0:	400260a0 	.word	0x400260a0

0801a4f4 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler()
{
 801a4f4:	b580      	push	{r7, lr}
 801a4f6:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA1_Stream6,DMA_IT_TCIF6) == SET)
 801a4f8:	4906      	ldr	r1, [pc, #24]	; (801a514 <DMA1_Stream6_IRQHandler+0x20>)
 801a4fa:	4807      	ldr	r0, [pc, #28]	; (801a518 <DMA1_Stream6_IRQHandler+0x24>)
 801a4fc:	f7ee ff30 	bl	8009360 <DMA_GetITStatus>
 801a500:	4603      	mov	r3, r0
 801a502:	2b01      	cmp	r3, #1
 801a504:	d103      	bne.n	801a50e <DMA1_Stream6_IRQHandler+0x1a>
	{
		// mach irgendwas
		DMA_ClearITPendingBit(DMA1_Stream6,DMA_IT_TCIF6);
 801a506:	4903      	ldr	r1, [pc, #12]	; (801a514 <DMA1_Stream6_IRQHandler+0x20>)
 801a508:	4803      	ldr	r0, [pc, #12]	; (801a518 <DMA1_Stream6_IRQHandler+0x24>)
 801a50a:	f7ee ff81 	bl	8009410 <DMA_ClearITPendingBit>
	}
}
 801a50e:	bf00      	nop
 801a510:	bd80      	pop	{r7, pc}
 801a512:	bf00      	nop
 801a514:	20208000 	.word	0x20208000
 801a518:	400260a0 	.word	0x400260a0

0801a51c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 801a51c:	b580      	push	{r7, lr}
 801a51e:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_FLAG_RXNE) != (u16)RESET)
 801a520:	4b0f      	ldr	r3, [pc, #60]	; (801a560 <USART2_IRQHandler+0x44>)
 801a522:	881b      	ldrh	r3, [r3, #0]
 801a524:	b29b      	uxth	r3, r3
 801a526:	f003 0320 	and.w	r3, r3, #32
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d00b      	beq.n	801a546 <USART2_IRQHandler+0x2a>
	{
		handle_wifi(USART_ReceiveData(USART2) & 0xff);
 801a52e:	480c      	ldr	r0, [pc, #48]	; (801a560 <USART2_IRQHandler+0x44>)
 801a530:	f7ef fe9c 	bl	800a26c <USART_ReceiveData>
 801a534:	4603      	mov	r3, r0
 801a536:	b2db      	uxtb	r3, r3
 801a538:	4618      	mov	r0, r3
 801a53a:	f000 fcaf 	bl	801ae9c <handle_wifi>

		USART_ClearFlag(USART2, USART_FLAG_RXNE);
 801a53e:	2120      	movs	r1, #32
 801a540:	4807      	ldr	r0, [pc, #28]	; (801a560 <USART2_IRQHandler+0x44>)
 801a542:	f7ef ff0f 	bl	800a364 <USART_ClearFlag>
	}

	if ((USART2->SR & USART_FLAG_ORE) != (u16)RESET)
 801a546:	4b06      	ldr	r3, [pc, #24]	; (801a560 <USART2_IRQHandler+0x44>)
 801a548:	881b      	ldrh	r3, [r3, #0]
 801a54a:	b29b      	uxth	r3, r3
 801a54c:	f003 0308 	and.w	r3, r3, #8
 801a550:	2b00      	cmp	r3, #0
 801a552:	d003      	beq.n	801a55c <USART2_IRQHandler+0x40>
	{
		// Receiver overrun
		// führt beim Debuggen zu ununterbrochenem Auslösen des IRQs
		USART_ClearFlag(USART2, USART_FLAG_ORE);
 801a554:	2108      	movs	r1, #8
 801a556:	4802      	ldr	r0, [pc, #8]	; (801a560 <USART2_IRQHandler+0x44>)
 801a558:	f7ef ff04 	bl	800a364 <USART_ClearFlag>
	}
}
 801a55c:	bf00      	nop
 801a55e:	bd80      	pop	{r7, pc}
 801a560:	40004400 	.word	0x40004400

0801a564 <wifi_send>:

// sende Datensatz via DMA zum ESP8266
void wifi_send(int len)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b082      	sub	sp, #8
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
	if(!DMA_GetCmdStatus(DMA1_Stream6))
 801a56c:	480d      	ldr	r0, [pc, #52]	; (801a5a4 <wifi_send+0x40>)
 801a56e:	f7ee fea5 	bl	80092bc <DMA_GetCmdStatus>
 801a572:	4603      	mov	r3, r0
 801a574:	2b00      	cmp	r3, #0
 801a576:	d110      	bne.n	801a59a <wifi_send+0x36>
	{
		init_USART_DMA_TX(len);
 801a578:	6878      	ldr	r0, [r7, #4]
 801a57a:	f7ff ff85 	bl	801a488 <init_USART_DMA_TX>
		DMA_ITConfig(DMA1_Stream6, DMA_IT_TC, ENABLE);
 801a57e:	2201      	movs	r2, #1
 801a580:	2110      	movs	r1, #16
 801a582:	4808      	ldr	r0, [pc, #32]	; (801a5a4 <wifi_send+0x40>)
 801a584:	f7ee feb2 	bl	80092ec <DMA_ITConfig>
		DMA_Cmd(DMA1_Stream6, ENABLE);
 801a588:	2101      	movs	r1, #1
 801a58a:	4806      	ldr	r0, [pc, #24]	; (801a5a4 <wifi_send+0x40>)
 801a58c:	f7ee fe7a 	bl	8009284 <DMA_Cmd>
		USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);
 801a590:	2201      	movs	r2, #1
 801a592:	2180      	movs	r1, #128	; 0x80
 801a594:	4804      	ldr	r0, [pc, #16]	; (801a5a8 <wifi_send+0x44>)
 801a596:	f7ef fe79 	bl	800a28c <USART_DMACmd>
	}
}
 801a59a:	bf00      	nop
 801a59c:	3708      	adds	r7, #8
 801a59e:	46bd      	mov	sp, r7
 801a5a0:	bd80      	pop	{r7, pc}
 801a5a2:	bf00      	nop
 801a5a4:	400260a0 	.word	0x400260a0
 801a5a8:	40004400 	.word	0x40004400

0801a5ac <init_CIV_uart>:
// USART-1: PA9=TX, PA10=RX
// TX: DMA-2, Stream-7, Channel-4
// (RX: DMA-2, Stream-5, Channel-4), not used

void init_CIV_uart()
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b088      	sub	sp, #32
 801a5b0:	af00      	add	r7, sp, #0
	// Enable USART2, DMA2 and GPIO clocks
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA, ENABLE);
 801a5b2:	2101      	movs	r1, #1
 801a5b4:	4831      	ldr	r0, [pc, #196]	; (801a67c <init_CIV_uart+0xd0>)
 801a5b6:	f7ef fb51 	bl	8009c5c <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 801a5ba:	2101      	movs	r1, #1
 801a5bc:	2010      	movs	r0, #16
 801a5be:	f7ef fbad 	bl	8009d1c <RCC_APB2PeriphClockCmd>

	// GPIO alternative function
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 801a5c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801a5c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801a5c8:	2302      	movs	r3, #2
 801a5ca:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 801a5cc:	2303      	movs	r3, #3
 801a5ce:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 801a5d8:	f107 0318 	add.w	r3, r7, #24
 801a5dc:	4619      	mov	r1, r3
 801a5de:	4828      	ldr	r0, [pc, #160]	; (801a680 <init_CIV_uart+0xd4>)
 801a5e0:	f7ef f96c 	bl	80098bc <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 801a5e4:	2207      	movs	r2, #7
 801a5e6:	2109      	movs	r1, #9
 801a5e8:	4825      	ldr	r0, [pc, #148]	; (801a680 <init_CIV_uart+0xd4>)
 801a5ea:	f7ef fa45 	bl	8009a78 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 801a5ee:	2207      	movs	r2, #7
 801a5f0:	210a      	movs	r1, #10
 801a5f2:	4823      	ldr	r0, [pc, #140]	; (801a680 <init_CIV_uart+0xd4>)
 801a5f4:	f7ef fa40 	bl	8009a78 <GPIO_PinAFConfig>

	// init UART-1
	USART_InitTypeDef USART_InitStruct;
	USART_InitStruct.USART_BaudRate = 4800;
 801a5f8:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 801a5fc:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 801a5fe:	2300      	movs	r3, #0
 801a600:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 801a602:	230c      	movs	r3, #12
 801a604:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 801a606:	2300      	movs	r3, #0
 801a608:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 801a60a:	2300      	movs	r3, #0
 801a60c:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 801a60e:	2300      	movs	r3, #0
 801a610:	81bb      	strh	r3, [r7, #12]
	USART_Init(USART1,&USART_InitStruct);
 801a612:	f107 0308 	add.w	r3, r7, #8
 801a616:	4619      	mov	r1, r3
 801a618:	481a      	ldr	r0, [pc, #104]	; (801a684 <init_CIV_uart+0xd8>)
 801a61a:	f7ef fd4d 	bl	800a0b8 <USART_Init>
	{
		USART_SendData(USART1,0x55); // OK
	}*/

	// Init DMA
	init_USART_DMA_TX_CIV(MAXWIFIDATA);
 801a61e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801a622:	f000 f833 	bl	801a68c <init_USART_DMA_TX_CIV>

	// Init NVIC
	// DMA (TX) Transfer Complete IRQ
	NVIC_InitTypeDef   NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream7_IRQn;
 801a626:	2346      	movs	r3, #70	; 0x46
 801a628:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 801a62a:	2302      	movs	r3, #2
 801a62c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 801a62e:	2302      	movs	r3, #2
 801a630:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801a632:	2301      	movs	r3, #1
 801a634:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 801a636:	1d3b      	adds	r3, r7, #4
 801a638:	4618      	mov	r0, r3
 801a63a:	f7ee fbbd 	bl	8008db8 <NVIC_Init>
	DMA_ITConfig(DMA2_Stream7, DMA_IT_TC, ENABLE); // DMA_IT_TC ... transfer complete
 801a63e:	2201      	movs	r2, #1
 801a640:	2110      	movs	r1, #16
 801a642:	4811      	ldr	r0, [pc, #68]	; (801a688 <init_CIV_uart+0xdc>)
 801a644:	f7ee fe52 	bl	80092ec <DMA_ITConfig>

	// USART-1 IRQ
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 801a648:	2325      	movs	r3, #37	; 0x25
 801a64a:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 801a64c:	2302      	movs	r3, #2
 801a64e:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 801a650:	2302      	movs	r3, #2
 801a652:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 801a654:	2301      	movs	r3, #1
 801a656:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 801a658:	1d3b      	adds	r3, r7, #4
 801a65a:	4618      	mov	r0, r3
 801a65c:	f7ee fbac 	bl	8008db8 <NVIC_Init>
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 801a660:	2201      	movs	r2, #1
 801a662:	f240 5125 	movw	r1, #1317	; 0x525
 801a666:	4807      	ldr	r0, [pc, #28]	; (801a684 <init_CIV_uart+0xd8>)
 801a668:	f7ef fe34 	bl	800a2d4 <USART_ITConfig>

	USART_Cmd(USART1,ENABLE);
 801a66c:	2101      	movs	r1, #1
 801a66e:	4805      	ldr	r0, [pc, #20]	; (801a684 <init_CIV_uart+0xd8>)
 801a670:	f7ef fddc 	bl	800a22c <USART_Cmd>
		civTXdata[4] = 4;
		civTXdata[5] = 0xfd;
		civ_send(6);
		delay_1ms(1000);
	}*/
}
 801a674:	bf00      	nop
 801a676:	3720      	adds	r7, #32
 801a678:	46bd      	mov	sp, r7
 801a67a:	bd80      	pop	{r7, pc}
 801a67c:	00400001 	.word	0x00400001
 801a680:	40020000 	.word	0x40020000
 801a684:	40011000 	.word	0x40011000
 801a688:	400264b8 	.word	0x400264b8

0801a68c <init_USART_DMA_TX_CIV>:

void init_USART_DMA_TX_CIV(int len)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b092      	sub	sp, #72	; 0x48
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef DMA_InitStructure;
	DMA_InitStructure.DMA_Channel = DMA_Channel_4;
 801a694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a698:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR;
 801a69a:	4b14      	ldr	r3, [pc, #80]	; (801a6ec <init_USART_DMA_TX_CIV+0x60>)
 801a69c:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)civTXdata;
 801a69e:	4b14      	ldr	r3, [pc, #80]	; (801a6f0 <init_USART_DMA_TX_CIV+0x64>)
 801a6a0:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801a6a2:	2340      	movs	r3, #64	; 0x40
 801a6a4:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_BufferSize = len;
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801a6ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a6b2:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 801a6bc:	2300      	movs	r3, #0
 801a6be:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 801a6c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801a6c4:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 801a6ca:	2301      	movs	r3, #1
 801a6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init(DMA2_Stream7, &DMA_InitStructure);
 801a6d6:	f107 030c 	add.w	r3, r7, #12
 801a6da:	4619      	mov	r1, r3
 801a6dc:	4805      	ldr	r0, [pc, #20]	; (801a6f4 <init_USART_DMA_TX_CIV+0x68>)
 801a6de:	f7ee fd79 	bl	80091d4 <DMA_Init>
}
 801a6e2:	bf00      	nop
 801a6e4:	3748      	adds	r7, #72	; 0x48
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bd80      	pop	{r7, pc}
 801a6ea:	bf00      	nop
 801a6ec:	40011004 	.word	0x40011004
 801a6f0:	20008718 	.word	0x20008718
 801a6f4:	400264b8 	.word	0x400264b8

0801a6f8 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	af00      	add	r7, sp, #0
	if ((USART1->SR & USART_FLAG_RXNE) != (u16)RESET)
 801a6fc:	4b0f      	ldr	r3, [pc, #60]	; (801a73c <USART1_IRQHandler+0x44>)
 801a6fe:	881b      	ldrh	r3, [r3, #0]
 801a700:	b29b      	uxth	r3, r3
 801a702:	f003 0320 	and.w	r3, r3, #32
 801a706:	2b00      	cmp	r3, #0
 801a708:	d00b      	beq.n	801a722 <USART1_IRQHandler+0x2a>
	{
		handle_civrx(USART_ReceiveData(USART1) & 0xff);
 801a70a:	480c      	ldr	r0, [pc, #48]	; (801a73c <USART1_IRQHandler+0x44>)
 801a70c:	f7ef fdae 	bl	800a26c <USART_ReceiveData>
 801a710:	4603      	mov	r3, r0
 801a712:	b2db      	uxtb	r3, r3
 801a714:	4618      	mov	r0, r3
 801a716:	f000 f8b1 	bl	801a87c <handle_civrx>

		USART_ClearFlag(USART1, USART_FLAG_RXNE);
 801a71a:	2120      	movs	r1, #32
 801a71c:	4807      	ldr	r0, [pc, #28]	; (801a73c <USART1_IRQHandler+0x44>)
 801a71e:	f7ef fe21 	bl	800a364 <USART_ClearFlag>
	}

	if ((USART1->SR & USART_FLAG_ORE) != (u16)RESET)
 801a722:	4b06      	ldr	r3, [pc, #24]	; (801a73c <USART1_IRQHandler+0x44>)
 801a724:	881b      	ldrh	r3, [r3, #0]
 801a726:	b29b      	uxth	r3, r3
 801a728:	f003 0308 	and.w	r3, r3, #8
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d003      	beq.n	801a738 <USART1_IRQHandler+0x40>
	{
		// Receiver overrun
		// führt beim Debuggen zu ununterbrochenem Auslösen des IRQs
		USART_ClearFlag(USART1, USART_FLAG_ORE);
 801a730:	2108      	movs	r1, #8
 801a732:	4802      	ldr	r0, [pc, #8]	; (801a73c <USART1_IRQHandler+0x44>)
 801a734:	f7ef fe16 	bl	800a364 <USART_ClearFlag>
	}
}
 801a738:	bf00      	nop
 801a73a:	bd80      	pop	{r7, pc}
 801a73c:	40011000 	.word	0x40011000

0801a740 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler()
{
 801a740:	b580      	push	{r7, lr}
 801a742:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream7,DMA_IT_TCIF7) == SET)
 801a744:	4906      	ldr	r1, [pc, #24]	; (801a760 <DMA2_Stream7_IRQHandler+0x20>)
 801a746:	4807      	ldr	r0, [pc, #28]	; (801a764 <DMA2_Stream7_IRQHandler+0x24>)
 801a748:	f7ee fe0a 	bl	8009360 <DMA_GetITStatus>
 801a74c:	4603      	mov	r3, r0
 801a74e:	2b01      	cmp	r3, #1
 801a750:	d103      	bne.n	801a75a <DMA2_Stream7_IRQHandler+0x1a>
	{
		// mach irgendwas
		DMA_ClearITPendingBit(DMA2_Stream7,DMA_IT_TCIF7);
 801a752:	4903      	ldr	r1, [pc, #12]	; (801a760 <DMA2_Stream7_IRQHandler+0x20>)
 801a754:	4803      	ldr	r0, [pc, #12]	; (801a764 <DMA2_Stream7_IRQHandler+0x24>)
 801a756:	f7ee fe5b 	bl	8009410 <DMA_ClearITPendingBit>
	}
}
 801a75a:	bf00      	nop
 801a75c:	bd80      	pop	{r7, pc}
 801a75e:	bf00      	nop
 801a760:	28008000 	.word	0x28008000
 801a764:	400264b8 	.word	0x400264b8

0801a768 <civ_send>:

// sende Datensatz via CIV
void civ_send(uint8_t *pdata, int len)
{
 801a768:	b580      	push	{r7, lr}
 801a76a:	b084      	sub	sp, #16
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	6078      	str	r0, [r7, #4]
 801a770:	6039      	str	r1, [r7, #0]
	if(DMA_GetITStatus(DMA2_Stream7,DMA_IT_TCIF7) == SET)
 801a772:	491b      	ldr	r1, [pc, #108]	; (801a7e0 <civ_send+0x78>)
 801a774:	481b      	ldr	r0, [pc, #108]	; (801a7e4 <civ_send+0x7c>)
 801a776:	f7ee fdf3 	bl	8009360 <DMA_GetITStatus>
 801a77a:	4603      	mov	r3, r0
 801a77c:	2b01      	cmp	r3, #1
 801a77e:	d02a      	beq.n	801a7d6 <civ_send+0x6e>
		return;	// letztes Senden ist noch nicht fertig

	for(int i=0; i<len; i++)
 801a780:	2300      	movs	r3, #0
 801a782:	60fb      	str	r3, [r7, #12]
 801a784:	e00b      	b.n	801a79e <civ_send+0x36>
	{
		civTXdata[i] = pdata[i];
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	687a      	ldr	r2, [r7, #4]
 801a78a:	4413      	add	r3, r2
 801a78c:	7819      	ldrb	r1, [r3, #0]
 801a78e:	4a16      	ldr	r2, [pc, #88]	; (801a7e8 <civ_send+0x80>)
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	4413      	add	r3, r2
 801a794:	460a      	mov	r2, r1
 801a796:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<len; i++)
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	3301      	adds	r3, #1
 801a79c:	60fb      	str	r3, [r7, #12]
 801a79e:	68fa      	ldr	r2, [r7, #12]
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	429a      	cmp	r2, r3
 801a7a4:	dbef      	blt.n	801a786 <civ_send+0x1e>
	}

	if(!DMA_GetCmdStatus(DMA2_Stream7))
 801a7a6:	480f      	ldr	r0, [pc, #60]	; (801a7e4 <civ_send+0x7c>)
 801a7a8:	f7ee fd88 	bl	80092bc <DMA_GetCmdStatus>
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d112      	bne.n	801a7d8 <civ_send+0x70>
	{
		init_USART_DMA_TX_CIV(len);
 801a7b2:	6838      	ldr	r0, [r7, #0]
 801a7b4:	f7ff ff6a 	bl	801a68c <init_USART_DMA_TX_CIV>
		DMA_ITConfig(DMA2_Stream7, DMA_IT_TC, ENABLE);
 801a7b8:	2201      	movs	r2, #1
 801a7ba:	2110      	movs	r1, #16
 801a7bc:	4809      	ldr	r0, [pc, #36]	; (801a7e4 <civ_send+0x7c>)
 801a7be:	f7ee fd95 	bl	80092ec <DMA_ITConfig>
		DMA_Cmd(DMA2_Stream7, ENABLE);
 801a7c2:	2101      	movs	r1, #1
 801a7c4:	4807      	ldr	r0, [pc, #28]	; (801a7e4 <civ_send+0x7c>)
 801a7c6:	f7ee fd5d 	bl	8009284 <DMA_Cmd>
		USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 801a7ca:	2201      	movs	r2, #1
 801a7cc:	2180      	movs	r1, #128	; 0x80
 801a7ce:	4807      	ldr	r0, [pc, #28]	; (801a7ec <civ_send+0x84>)
 801a7d0:	f7ef fd5c 	bl	800a28c <USART_DMACmd>
 801a7d4:	e000      	b.n	801a7d8 <civ_send+0x70>
		return;	// letztes Senden ist noch nicht fertig
 801a7d6:	bf00      	nop
	}
}
 801a7d8:	3710      	adds	r7, #16
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	28008000 	.word	0x28008000
 801a7e4:	400264b8 	.word	0x400264b8
 801a7e8:	20008718 	.word	0x20008718
 801a7ec:	40011000 	.word	0x40011000

0801a7f0 <civ_request_frequency>:

uint8_t civ_adr = 0;

void civ_request_frequency()
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b082      	sub	sp, #8
 801a7f4:	af00      	add	r7, sp, #0
uint8_t cmd0_getfreq[6] = {0xfe, 0xfe, 0x00, 0xe0, 0x03, 0xfd};
 801a7f6:	4a1d      	ldr	r2, [pc, #116]	; (801a86c <civ_request_frequency+0x7c>)
 801a7f8:	463b      	mov	r3, r7
 801a7fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a7fe:	6018      	str	r0, [r3, #0]
 801a800:	3304      	adds	r3, #4
 801a802:	8019      	strh	r1, [r3, #0]

	// CI-V 1 ist die Default Adresse, da nicht alle TRX die 00 als Broadcast erkennen
	cmd0_getfreq[2] = pcfgdata->civ_adr1;
 801a804:	4b1a      	ldr	r3, [pc, #104]	; (801a870 <civ_request_frequency+0x80>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a80c:	70bb      	strb	r3, [r7, #2]

	if(pcfgdata->auxInputMode == PTT4x)
 801a80e:	4b18      	ldr	r3, [pc, #96]	; (801a870 <civ_request_frequency+0x80>)
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a816:	2b01      	cmp	r3, #1
 801a818:	d11a      	bne.n	801a850 <civ_request_frequency+0x60>
	{
		if(gpio_stat[ROTS_B2] == 0) cmd0_getfreq[2] = pcfgdata->civ_adr2;
 801a81a:	4b16      	ldr	r3, [pc, #88]	; (801a874 <civ_request_frequency+0x84>)
 801a81c:	791b      	ldrb	r3, [r3, #4]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d104      	bne.n	801a82c <civ_request_frequency+0x3c>
 801a822:	4b13      	ldr	r3, [pc, #76]	; (801a870 <civ_request_frequency+0x80>)
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a82a:	70bb      	strb	r3, [r7, #2]
		if(gpio_stat[ROTS_B3] == 0) cmd0_getfreq[2] = pcfgdata->civ_adr3;
 801a82c:	4b11      	ldr	r3, [pc, #68]	; (801a874 <civ_request_frequency+0x84>)
 801a82e:	795b      	ldrb	r3, [r3, #5]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d104      	bne.n	801a83e <civ_request_frequency+0x4e>
 801a834:	4b0e      	ldr	r3, [pc, #56]	; (801a870 <civ_request_frequency+0x80>)
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a83c:	70bb      	strb	r3, [r7, #2]
		if(gpio_stat[ROTS_B4] == 0) cmd0_getfreq[2] = pcfgdata->civ_adr4;
 801a83e:	4b0d      	ldr	r3, [pc, #52]	; (801a874 <civ_request_frequency+0x84>)
 801a840:	799b      	ldrb	r3, [r3, #6]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d104      	bne.n	801a850 <civ_request_frequency+0x60>
 801a846:	4b0a      	ldr	r3, [pc, #40]	; (801a870 <civ_request_frequency+0x80>)
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a84e:	70bb      	strb	r3, [r7, #2]
	}

	civ_send(cmd0_getfreq, 6);
 801a850:	463b      	mov	r3, r7
 801a852:	2106      	movs	r1, #6
 801a854:	4618      	mov	r0, r3
 801a856:	f7ff ff87 	bl	801a768 <civ_send>
	civ_requestanz++;
 801a85a:	4b07      	ldr	r3, [pc, #28]	; (801a878 <civ_request_frequency+0x88>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	3301      	adds	r3, #1
 801a860:	4a05      	ldr	r2, [pc, #20]	; (801a878 <civ_request_frequency+0x88>)
 801a862:	6013      	str	r3, [r2, #0]
}
 801a864:	bf00      	nop
 801a866:	3708      	adds	r7, #8
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd80      	pop	{r7, pc}
 801a86c:	08026d54 	.word	0x08026d54
 801a870:	20000bf0 	.word	0x20000bf0
 801a874:	2000498c 	.word	0x2000498c
 801a878:	200027c0 	.word	0x200027c0

0801a87c <handle_civrx>:

void handle_civrx(uint8_t data)
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b084      	sub	sp, #16
 801a880:	af00      	add	r7, sp, #0
 801a882:	4603      	mov	r3, r0
 801a884:	71fb      	strb	r3, [r7, #7]
	// mache vorne Platz
	for(int i=(MAXCIVDATA-1); i>0; i--)
 801a886:	231d      	movs	r3, #29
 801a888:	60fb      	str	r3, [r7, #12]
 801a88a:	e00b      	b.n	801a8a4 <handle_civrx+0x28>
		civRXdata[i] = civRXdata[i-1];
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	3b01      	subs	r3, #1
 801a890:	4a26      	ldr	r2, [pc, #152]	; (801a92c <handle_civrx+0xb0>)
 801a892:	5cd1      	ldrb	r1, [r2, r3]
 801a894:	4a25      	ldr	r2, [pc, #148]	; (801a92c <handle_civrx+0xb0>)
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	4413      	add	r3, r2
 801a89a:	460a      	mov	r2, r1
 801a89c:	701a      	strb	r2, [r3, #0]
	for(int i=(MAXCIVDATA-1); i>0; i--)
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	3b01      	subs	r3, #1
 801a8a2:	60fb      	str	r3, [r7, #12]
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	dcf0      	bgt.n	801a88c <handle_civrx+0x10>

	// neues Byte
	civRXdata[0] = data;
 801a8aa:	4a20      	ldr	r2, [pc, #128]	; (801a92c <handle_civrx+0xb0>)
 801a8ac:	79fb      	ldrb	r3, [r7, #7]
 801a8ae:	7013      	strb	r3, [r2, #0]

	// der Datensatz steht verkehrt herum in civRXdata
	if(civRXdata[0] == 0xfd)
 801a8b0:	4b1e      	ldr	r3, [pc, #120]	; (801a92c <handle_civrx+0xb0>)
 801a8b2:	781b      	ldrb	r3, [r3, #0]
 801a8b4:	2bfd      	cmp	r3, #253	; 0xfd
 801a8b6:	d135      	bne.n	801a924 <handle_civrx+0xa8>
	{
		// Ende erkannt
		if(civRXdata[8] == 0xe0 && civRXdata[9] == 0xfe && civRXdata[10] == 0xfe)
 801a8b8:	4b1c      	ldr	r3, [pc, #112]	; (801a92c <handle_civrx+0xb0>)
 801a8ba:	7a1b      	ldrb	r3, [r3, #8]
 801a8bc:	2be0      	cmp	r3, #224	; 0xe0
 801a8be:	d116      	bne.n	801a8ee <handle_civrx+0x72>
 801a8c0:	4b1a      	ldr	r3, [pc, #104]	; (801a92c <handle_civrx+0xb0>)
 801a8c2:	7a5b      	ldrb	r3, [r3, #9]
 801a8c4:	2bfe      	cmp	r3, #254	; 0xfe
 801a8c6:	d112      	bne.n	801a8ee <handle_civrx+0x72>
 801a8c8:	4b18      	ldr	r3, [pc, #96]	; (801a92c <handle_civrx+0xb0>)
 801a8ca:	7a9b      	ldrb	r3, [r3, #10]
 801a8cc:	2bfe      	cmp	r3, #254	; 0xfe
 801a8ce:	d10e      	bne.n	801a8ee <handle_civrx+0x72>
		{
			// 5 byte Datensatz
			civ_adr = civRXdata[7];
 801a8d0:	4b16      	ldr	r3, [pc, #88]	; (801a92c <handle_civrx+0xb0>)
 801a8d2:	79da      	ldrb	r2, [r3, #7]
 801a8d4:	4b16      	ldr	r3, [pc, #88]	; (801a930 <handle_civrx+0xb4>)
 801a8d6:	701a      	strb	r2, [r3, #0]
			civ_freq = bcdToint32(civRXdata+1,5);
 801a8d8:	4b16      	ldr	r3, [pc, #88]	; (801a934 <handle_civrx+0xb8>)
 801a8da:	2105      	movs	r1, #5
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f000 f857 	bl	801a990 <bcdToint32>
 801a8e2:	4602      	mov	r2, r0
 801a8e4:	4b14      	ldr	r3, [pc, #80]	; (801a938 <handle_civrx+0xbc>)
 801a8e6:	601a      	str	r2, [r3, #0]
			civ_requestanz = 0;
 801a8e8:	4b14      	ldr	r3, [pc, #80]	; (801a93c <handle_civrx+0xc0>)
 801a8ea:	2200      	movs	r2, #0
 801a8ec:	601a      	str	r2, [r3, #0]
		}
		if(civRXdata[7] == 0xe0 && civRXdata[8] == 0xfe && civRXdata[9] == 0xfe)
 801a8ee:	4b0f      	ldr	r3, [pc, #60]	; (801a92c <handle_civrx+0xb0>)
 801a8f0:	79db      	ldrb	r3, [r3, #7]
 801a8f2:	2be0      	cmp	r3, #224	; 0xe0
 801a8f4:	d116      	bne.n	801a924 <handle_civrx+0xa8>
 801a8f6:	4b0d      	ldr	r3, [pc, #52]	; (801a92c <handle_civrx+0xb0>)
 801a8f8:	7a1b      	ldrb	r3, [r3, #8]
 801a8fa:	2bfe      	cmp	r3, #254	; 0xfe
 801a8fc:	d112      	bne.n	801a924 <handle_civrx+0xa8>
 801a8fe:	4b0b      	ldr	r3, [pc, #44]	; (801a92c <handle_civrx+0xb0>)
 801a900:	7a5b      	ldrb	r3, [r3, #9]
 801a902:	2bfe      	cmp	r3, #254	; 0xfe
 801a904:	d10e      	bne.n	801a924 <handle_civrx+0xa8>
		{
			// 4 byte Datensatz
			civ_adr = civRXdata[6];
 801a906:	4b09      	ldr	r3, [pc, #36]	; (801a92c <handle_civrx+0xb0>)
 801a908:	799a      	ldrb	r2, [r3, #6]
 801a90a:	4b09      	ldr	r3, [pc, #36]	; (801a930 <handle_civrx+0xb4>)
 801a90c:	701a      	strb	r2, [r3, #0]
			civ_freq = bcdToint32(civRXdata+1,4);
 801a90e:	4b09      	ldr	r3, [pc, #36]	; (801a934 <handle_civrx+0xb8>)
 801a910:	2104      	movs	r1, #4
 801a912:	4618      	mov	r0, r3
 801a914:	f000 f83c 	bl	801a990 <bcdToint32>
 801a918:	4602      	mov	r2, r0
 801a91a:	4b07      	ldr	r3, [pc, #28]	; (801a938 <handle_civrx+0xbc>)
 801a91c:	601a      	str	r2, [r3, #0]
			civ_requestanz = 0;
 801a91e:	4b07      	ldr	r3, [pc, #28]	; (801a93c <handle_civrx+0xc0>)
 801a920:	2200      	movs	r2, #0
 801a922:	601a      	str	r2, [r3, #0]
		}
	}
}
 801a924:	bf00      	nop
 801a926:	3710      	adds	r7, #16
 801a928:	46bd      	mov	sp, r7
 801a92a:	bd80      	pop	{r7, pc}
 801a92c:	200086f8 	.word	0x200086f8
 801a930:	200027c5 	.word	0x200027c5
 801a934:	200086f9 	.word	0x200086f9
 801a938:	200027bc 	.word	0x200027bc
 801a93c:	200027c0 	.word	0x200027c0

0801a940 <bcdconv>:

uint32_t bcdconv(uint8_t v, uint32_t mult)
{
 801a940:	b480      	push	{r7}
 801a942:	b085      	sub	sp, #20
 801a944:	af00      	add	r7, sp, #0
 801a946:	4603      	mov	r3, r0
 801a948:	6039      	str	r1, [r7, #0]
 801a94a:	71fb      	strb	r3, [r7, #7]
uint32_t tmp,f;

	tmp = (v >> 4) & 0x0f;
 801a94c:	79fb      	ldrb	r3, [r7, #7]
 801a94e:	091b      	lsrs	r3, r3, #4
 801a950:	b2db      	uxtb	r3, r3
 801a952:	f003 030f 	and.w	r3, r3, #15
 801a956:	60fb      	str	r3, [r7, #12]
	f = tmp * mult * 10;
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	683a      	ldr	r2, [r7, #0]
 801a95c:	fb02 f203 	mul.w	r2, r2, r3
 801a960:	4613      	mov	r3, r2
 801a962:	009b      	lsls	r3, r3, #2
 801a964:	4413      	add	r3, r2
 801a966:	005b      	lsls	r3, r3, #1
 801a968:	60bb      	str	r3, [r7, #8]
	tmp = v & 0x0f;
 801a96a:	79fb      	ldrb	r3, [r7, #7]
 801a96c:	f003 030f 	and.w	r3, r3, #15
 801a970:	60fb      	str	r3, [r7, #12]
	f += tmp * mult;
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	683a      	ldr	r2, [r7, #0]
 801a976:	fb02 f303 	mul.w	r3, r2, r3
 801a97a:	68ba      	ldr	r2, [r7, #8]
 801a97c:	4413      	add	r3, r2
 801a97e:	60bb      	str	r3, [r7, #8]

	return f;
 801a980:	68bb      	ldr	r3, [r7, #8]
}
 801a982:	4618      	mov	r0, r3
 801a984:	3714      	adds	r7, #20
 801a986:	46bd      	mov	sp, r7
 801a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98c:	4770      	bx	lr
	...

0801a990 <bcdToint32>:

// Wandle ICOM Frequenzangabe um
uint32_t bcdToint32(uint8_t *d, int mode)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b084      	sub	sp, #16
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
 801a998:	6039      	str	r1, [r7, #0]
uint32_t f=0;
 801a99a:	2300      	movs	r3, #0
 801a99c:	60fb      	str	r3, [r7, #12]

	if(mode == 5)
 801a99e:	683b      	ldr	r3, [r7, #0]
 801a9a0:	2b05      	cmp	r3, #5
 801a9a2:	d136      	bne.n	801aa12 <bcdToint32+0x82>
	{
		f += bcdconv(d[0],100000000);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	781b      	ldrb	r3, [r3, #0]
 801a9a8:	4934      	ldr	r1, [pc, #208]	; (801aa7c <bcdToint32+0xec>)
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	f7ff ffc8 	bl	801a940 <bcdconv>
 801a9b0:	4602      	mov	r2, r0
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	4413      	add	r3, r2
 801a9b6:	60fb      	str	r3, [r7, #12]
		f += bcdconv(d[1],1000000);
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	781b      	ldrb	r3, [r3, #0]
 801a9be:	4930      	ldr	r1, [pc, #192]	; (801aa80 <bcdToint32+0xf0>)
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	f7ff ffbd 	bl	801a940 <bcdconv>
 801a9c6:	4602      	mov	r2, r0
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	4413      	add	r3, r2
 801a9cc:	60fb      	str	r3, [r7, #12]
		f += bcdconv(d[2],10000);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	3302      	adds	r3, #2
 801a9d2:	781b      	ldrb	r3, [r3, #0]
 801a9d4:	f242 7110 	movw	r1, #10000	; 0x2710
 801a9d8:	4618      	mov	r0, r3
 801a9da:	f7ff ffb1 	bl	801a940 <bcdconv>
 801a9de:	4602      	mov	r2, r0
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	4413      	add	r3, r2
 801a9e4:	60fb      	str	r3, [r7, #12]
		f += bcdconv(d[3],100);
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	3303      	adds	r3, #3
 801a9ea:	781b      	ldrb	r3, [r3, #0]
 801a9ec:	2164      	movs	r1, #100	; 0x64
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	f7ff ffa6 	bl	801a940 <bcdconv>
 801a9f4:	4602      	mov	r2, r0
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	4413      	add	r3, r2
 801a9fa:	60fb      	str	r3, [r7, #12]
		f += bcdconv(d[4],1);
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	3304      	adds	r3, #4
 801aa00:	781b      	ldrb	r3, [r3, #0]
 801aa02:	2101      	movs	r1, #1
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7ff ff9b 	bl	801a940 <bcdconv>
 801aa0a:	4602      	mov	r2, r0
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	4413      	add	r3, r2
 801aa10:	60fb      	str	r3, [r7, #12]
	}

	if(mode == 4)
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	2b04      	cmp	r3, #4
 801aa16:	d12b      	bne.n	801aa70 <bcdToint32+0xe0>
	{
		f += bcdconv(d[0],1000000);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	781b      	ldrb	r3, [r3, #0]
 801aa1c:	4918      	ldr	r1, [pc, #96]	; (801aa80 <bcdToint32+0xf0>)
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7ff ff8e 	bl	801a940 <bcdconv>
 801aa24:	4602      	mov	r2, r0
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	4413      	add	r3, r2
 801aa2a:	60fb      	str	r3, [r7, #12]
		f += bcdconv(d[1],10000);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	3301      	adds	r3, #1
 801aa30:	781b      	ldrb	r3, [r3, #0]
 801aa32:	f242 7110 	movw	r1, #10000	; 0x2710
 801aa36:	4618      	mov	r0, r3
 801aa38:	f7ff ff82 	bl	801a940 <bcdconv>
 801aa3c:	4602      	mov	r2, r0
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	4413      	add	r3, r2
 801aa42:	60fb      	str	r3, [r7, #12]
		f += bcdconv(d[2],100);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	3302      	adds	r3, #2
 801aa48:	781b      	ldrb	r3, [r3, #0]
 801aa4a:	2164      	movs	r1, #100	; 0x64
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	f7ff ff77 	bl	801a940 <bcdconv>
 801aa52:	4602      	mov	r2, r0
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	4413      	add	r3, r2
 801aa58:	60fb      	str	r3, [r7, #12]
		f += bcdconv(d[3],1);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	3303      	adds	r3, #3
 801aa5e:	781b      	ldrb	r3, [r3, #0]
 801aa60:	2101      	movs	r1, #1
 801aa62:	4618      	mov	r0, r3
 801aa64:	f7ff ff6c 	bl	801a940 <bcdconv>
 801aa68:	4602      	mov	r2, r0
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	4413      	add	r3, r2
 801aa6e:	60fb      	str	r3, [r7, #12]
	}
	return f;
 801aa70:	68fb      	ldr	r3, [r7, #12]
}
 801aa72:	4618      	mov	r0, r3
 801aa74:	3710      	adds	r7, #16
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	05f5e100 	.word	0x05f5e100
 801aa80:	000f4240 	.word	0x000f4240

0801aa84 <getCIVfreq>:

uint32_t last_civfreq = 0;

uint32_t getCIVfreq()
{
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b082      	sub	sp, #8
 801aa88:	af00      	add	r7, sp, #0
uint32_t freq;

	USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);
 801aa8a:	2200      	movs	r2, #0
 801aa8c:	f240 5125 	movw	r1, #1317	; 0x525
 801aa90:	4810      	ldr	r0, [pc, #64]	; (801aad4 <getCIVfreq+0x50>)
 801aa92:	f7ef fc1f 	bl	800a2d4 <USART_ITConfig>
	freq = civ_freq;
 801aa96:	4b10      	ldr	r3, [pc, #64]	; (801aad8 <getCIVfreq+0x54>)
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	607b      	str	r3, [r7, #4]
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 801aa9c:	2201      	movs	r2, #1
 801aa9e:	f240 5125 	movw	r1, #1317	; 0x525
 801aaa2:	480c      	ldr	r0, [pc, #48]	; (801aad4 <getCIVfreq+0x50>)
 801aaa4:	f7ef fc16 	bl	800a2d4 <USART_ITConfig>

	// wenn nach 3 Anforderungen keine Antwort kam, so ignoriere CIV Werte
	if(civ_requestanz > 3)
 801aaa8:	4b0c      	ldr	r3, [pc, #48]	; (801aadc <getCIVfreq+0x58>)
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	2b03      	cmp	r3, #3
 801aaae:	dd06      	ble.n	801aabe <getCIVfreq+0x3a>
	{
		civ_freq = 0;
 801aab0:	4b09      	ldr	r3, [pc, #36]	; (801aad8 <getCIVfreq+0x54>)
 801aab2:	2200      	movs	r2, #0
 801aab4:	601a      	str	r2, [r3, #0]
		civ_avail = 0;
 801aab6:	4b0a      	ldr	r3, [pc, #40]	; (801aae0 <getCIVfreq+0x5c>)
 801aab8:	2200      	movs	r2, #0
 801aaba:	701a      	strb	r2, [r3, #0]
 801aabc:	e005      	b.n	801aaca <getCIVfreq+0x46>
	}
	else
	{
		if(freq > 0)
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d002      	beq.n	801aaca <getCIVfreq+0x46>
			civ_avail = 1;
 801aac4:	4b06      	ldr	r3, [pc, #24]	; (801aae0 <getCIVfreq+0x5c>)
 801aac6:	2201      	movs	r2, #1
 801aac8:	701a      	strb	r2, [r3, #0]
	}

	return freq; // in Hz
 801aaca:	687b      	ldr	r3, [r7, #4]
}
 801aacc:	4618      	mov	r0, r3
 801aace:	3708      	adds	r7, #8
 801aad0:	46bd      	mov	sp, r7
 801aad2:	bd80      	pop	{r7, pc}
 801aad4:	40011000 	.word	0x40011000
 801aad8:	200027bc 	.word	0x200027bc
 801aadc:	200027c0 	.word	0x200027c0
 801aae0:	200027c4 	.word	0x200027c4

0801aae4 <NVIC_SystemReset>:
{
 801aae4:	b480      	push	{r7}
 801aae6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801aae8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801aaec:	4b05      	ldr	r3, [pc, #20]	; (801ab04 <NVIC_SystemReset+0x20>)
 801aaee:	68db      	ldr	r3, [r3, #12]
 801aaf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801aaf4:	4903      	ldr	r1, [pc, #12]	; (801ab04 <NVIC_SystemReset+0x20>)
 801aaf6:	4b04      	ldr	r3, [pc, #16]	; (801ab08 <NVIC_SystemReset+0x24>)
 801aaf8:	4313      	orrs	r3, r2
 801aafa:	60cb      	str	r3, [r1, #12]
 801aafc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 801ab00:	bf00      	nop
  while(1) { __NOP(); }                                             /* wait until reset */
 801ab02:	e7fd      	b.n	801ab00 <NVIC_SystemReset+0x1c>
 801ab04:	e000ed00 	.word	0xe000ed00
 801ab08:	05fa0004 	.word	0x05fa0004

0801ab0c <add_crc16>:
 * len byte ... Inhalt
 * 2 byte ... crc16
 */

void add_crc16(int len)
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b084      	sub	sp, #16
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
	uint16_t crc16 = crc16_messagecalc(wifidata, len);
 801ab14:	6879      	ldr	r1, [r7, #4]
 801ab16:	480c      	ldr	r0, [pc, #48]	; (801ab48 <add_crc16+0x3c>)
 801ab18:	f7f4 fbac 	bl	800f274 <crc16_messagecalc>
 801ab1c:	4603      	mov	r3, r0
 801ab1e:	81fb      	strh	r3, [r7, #14]
	*pwdata++ = (crc16 >> 8);
 801ab20:	89fb      	ldrh	r3, [r7, #14]
 801ab22:	0a1b      	lsrs	r3, r3, #8
 801ab24:	b298      	uxth	r0, r3
 801ab26:	4b09      	ldr	r3, [pc, #36]	; (801ab4c <add_crc16+0x40>)
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	1c5a      	adds	r2, r3, #1
 801ab2c:	4907      	ldr	r1, [pc, #28]	; (801ab4c <add_crc16+0x40>)
 801ab2e:	600a      	str	r2, [r1, #0]
 801ab30:	b2c2      	uxtb	r2, r0
 801ab32:	701a      	strb	r2, [r3, #0]
	*pwdata = (crc16 & 0xff);
 801ab34:	4b05      	ldr	r3, [pc, #20]	; (801ab4c <add_crc16+0x40>)
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	89fa      	ldrh	r2, [r7, #14]
 801ab3a:	b2d2      	uxtb	r2, r2
 801ab3c:	701a      	strb	r2, [r3, #0]
}
 801ab3e:	bf00      	nop
 801ab40:	3710      	adds	r7, #16
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd80      	pop	{r7, pc}
 801ab46:	bf00      	nop
 801ab48:	20008994 	.word	0x20008994
 801ab4c:	20008ac4 	.word	0x20008ac4

0801ab50 <wifi>:

void wifi()
{
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b082      	sub	sp, #8
 801ab54:	af00      	add	r7, sp, #0
	// prüfe ob neue Config angekommen ist
	install_new_cfg();
 801ab56:	f000 faf1 	bl	801b13c <install_new_cfg>

	// sende Messdaten
	// mache das 10x pro Sekunde
	if(wifi_1s == 0)	// wird vom Timer heruntergezählt
 801ab5a:	4b1c      	ldr	r3, [pc, #112]	; (801abcc <wifi+0x7c>)
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d130      	bne.n	801abc4 <wifi+0x74>
	{
		wifi_1s = 100;
 801ab62:	4b1a      	ldr	r3, [pc, #104]	; (801abcc <wifi+0x7c>)
 801ab64:	2264      	movs	r2, #100	; 0x64
 801ab66:	601a      	str	r2, [r3, #0]

		if(send_config)
 801ab68:	4b19      	ldr	r3, [pc, #100]	; (801abd0 <wifi+0x80>)
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d005      	beq.n	801ab7c <wifi+0x2c>
		{
			dataset = 2;
 801ab70:	4b18      	ldr	r3, [pc, #96]	; (801abd4 <wifi+0x84>)
 801ab72:	2202      	movs	r2, #2
 801ab74:	601a      	str	r2, [r3, #0]
			send_config = 0;
 801ab76:	4b16      	ldr	r3, [pc, #88]	; (801abd0 <wifi+0x80>)
 801ab78:	2200      	movs	r2, #0
 801ab7a:	601a      	str	r2, [r3, #0]
		}
		int len = build_wifi_data();	// len hat Header und Längenbytes schon mit dabei
 801ab7c:	f000 f8e8 	bl	801ad50 <build_wifi_data>
 801ab80:	6078      	str	r0, [r7, #4]
		if(++dataset >= MAXDATASET) dataset = 0;
 801ab82:	4b14      	ldr	r3, [pc, #80]	; (801abd4 <wifi+0x84>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	3301      	adds	r3, #1
 801ab88:	4a12      	ldr	r2, [pc, #72]	; (801abd4 <wifi+0x84>)
 801ab8a:	6013      	str	r3, [r2, #0]
 801ab8c:	4b11      	ldr	r3, [pc, #68]	; (801abd4 <wifi+0x84>)
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	2b01      	cmp	r3, #1
 801ab92:	dd02      	ble.n	801ab9a <wifi+0x4a>
 801ab94:	4b0f      	ldr	r3, [pc, #60]	; (801abd4 <wifi+0x84>)
 801ab96:	2200      	movs	r2, #0
 801ab98:	601a      	str	r2, [r3, #0]

		wifidata[4] = (len >> 8);
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	121b      	asrs	r3, r3, #8
 801ab9e:	b2da      	uxtb	r2, r3
 801aba0:	4b0d      	ldr	r3, [pc, #52]	; (801abd8 <wifi+0x88>)
 801aba2:	711a      	strb	r2, [r3, #4]
		wifidata[5] = (len & 0xff);
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	b2da      	uxtb	r2, r3
 801aba8:	4b0b      	ldr	r3, [pc, #44]	; (801abd8 <wifi+0x88>)
 801abaa:	715a      	strb	r2, [r3, #5]

		add_crc16(len); // mit Header und Länge
 801abac:	6878      	ldr	r0, [r7, #4]
 801abae:	f7ff ffad 	bl	801ab0c <add_crc16>

		if(len < MAXWIFIDATA)
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801abb8:	da04      	bge.n	801abc4 <wifi+0x74>
			wifi_send(len+2);		// sende via DMA aus
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	3302      	adds	r3, #2
 801abbe:	4618      	mov	r0, r3
 801abc0:	f7ff fcd0 	bl	801a564 <wifi_send>
		// else ... Puffer zu klein definiert
	}
}
 801abc4:	bf00      	nop
 801abc6:	3708      	adds	r7, #8
 801abc8:	46bd      	mov	sp, r7
 801abca:	bd80      	pop	{r7, pc}
 801abcc:	20001b48 	.word	0x20001b48
 801abd0:	200027d0 	.word	0x200027d0
 801abd4:	200027cc 	.word	0x200027cc
 801abd8:	20008994 	.word	0x20008994

0801abdc <wifi_insert_32bit>:

// Einfügefunktionen in den Wifi Datensatz

void wifi_insert_32bit(int32_t iv)
{
 801abdc:	b480      	push	{r7}
 801abde:	b083      	sub	sp, #12
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
	*pwdata++ = iv >> 24;
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	1618      	asrs	r0, r3, #24
 801abe8:	4b13      	ldr	r3, [pc, #76]	; (801ac38 <wifi_insert_32bit+0x5c>)
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	1c5a      	adds	r2, r3, #1
 801abee:	4912      	ldr	r1, [pc, #72]	; (801ac38 <wifi_insert_32bit+0x5c>)
 801abf0:	600a      	str	r2, [r1, #0]
 801abf2:	b2c2      	uxtb	r2, r0
 801abf4:	701a      	strb	r2, [r3, #0]
	*pwdata++ = iv >> 16;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	1418      	asrs	r0, r3, #16
 801abfa:	4b0f      	ldr	r3, [pc, #60]	; (801ac38 <wifi_insert_32bit+0x5c>)
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	1c5a      	adds	r2, r3, #1
 801ac00:	490d      	ldr	r1, [pc, #52]	; (801ac38 <wifi_insert_32bit+0x5c>)
 801ac02:	600a      	str	r2, [r1, #0]
 801ac04:	b2c2      	uxtb	r2, r0
 801ac06:	701a      	strb	r2, [r3, #0]
	*pwdata++ = iv >> 8;
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	1218      	asrs	r0, r3, #8
 801ac0c:	4b0a      	ldr	r3, [pc, #40]	; (801ac38 <wifi_insert_32bit+0x5c>)
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	1c5a      	adds	r2, r3, #1
 801ac12:	4909      	ldr	r1, [pc, #36]	; (801ac38 <wifi_insert_32bit+0x5c>)
 801ac14:	600a      	str	r2, [r1, #0]
 801ac16:	b2c2      	uxtb	r2, r0
 801ac18:	701a      	strb	r2, [r3, #0]
	*pwdata++ = iv;
 801ac1a:	4b07      	ldr	r3, [pc, #28]	; (801ac38 <wifi_insert_32bit+0x5c>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	1c5a      	adds	r2, r3, #1
 801ac20:	4905      	ldr	r1, [pc, #20]	; (801ac38 <wifi_insert_32bit+0x5c>)
 801ac22:	600a      	str	r2, [r1, #0]
 801ac24:	687a      	ldr	r2, [r7, #4]
 801ac26:	b2d2      	uxtb	r2, r2
 801ac28:	701a      	strb	r2, [r3, #0]
}
 801ac2a:	bf00      	nop
 801ac2c:	370c      	adds	r7, #12
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac34:	4770      	bx	lr
 801ac36:	bf00      	nop
 801ac38:	20008ac4 	.word	0x20008ac4

0801ac3c <wifi_insert_float>:

void wifi_insert_float(float fval)
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b082      	sub	sp, #8
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	ed87 0a01 	vstr	s0, [r7, #4]
	// sende einen float als 32bit int, als das 10fache, also mit einer Kommastelle
	wifi_insert_32bit((int32_t)(fval * 10));
 801ac46:	edd7 7a01 	vldr	s15, [r7, #4]
 801ac4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801ac4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ac52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ac56:	ee17 0a90 	vmov	r0, s15
 801ac5a:	f7ff ffbf 	bl	801abdc <wifi_insert_32bit>
}
 801ac5e:	bf00      	nop
 801ac60:	3708      	adds	r7, #8
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}
	...

0801ac68 <wifi_insert_8bit>:

void wifi_insert_8bit(uint8_t v)
{
 801ac68:	b480      	push	{r7}
 801ac6a:	b083      	sub	sp, #12
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	4603      	mov	r3, r0
 801ac70:	71fb      	strb	r3, [r7, #7]
	*pwdata++ = v;
 801ac72:	4b06      	ldr	r3, [pc, #24]	; (801ac8c <wifi_insert_8bit+0x24>)
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	1c5a      	adds	r2, r3, #1
 801ac78:	4904      	ldr	r1, [pc, #16]	; (801ac8c <wifi_insert_8bit+0x24>)
 801ac7a:	600a      	str	r2, [r1, #0]
 801ac7c:	79fa      	ldrb	r2, [r7, #7]
 801ac7e:	701a      	strb	r2, [r3, #0]
}
 801ac80:	bf00      	nop
 801ac82:	370c      	adds	r7, #12
 801ac84:	46bd      	mov	sp, r7
 801ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8a:	4770      	bx	lr
 801ac8c:	20008ac4 	.word	0x20008ac4

0801ac90 <wifi_insert_config>:

void wifi_insert_config()
{
 801ac90:	b480      	push	{r7}
 801ac92:	b085      	sub	sp, #20
 801ac94:	af00      	add	r7, sp, #0
int len = sizeof(flashdata[0]);
 801ac96:	23d0      	movs	r3, #208	; 0xd0
 801ac98:	607b      	str	r3, [r7, #4]
uint8_t *p = (uint8_t *)pcfgdata;
 801ac9a:	4b0e      	ldr	r3, [pc, #56]	; (801acd4 <wifi_insert_config+0x44>)
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<len; i++)
 801aca0:	2300      	movs	r3, #0
 801aca2:	60bb      	str	r3, [r7, #8]
 801aca4:	e00c      	b.n	801acc0 <wifi_insert_config+0x30>
	{
		*pwdata++ = *p++;
 801aca6:	68fa      	ldr	r2, [r7, #12]
 801aca8:	1c53      	adds	r3, r2, #1
 801acaa:	60fb      	str	r3, [r7, #12]
 801acac:	4b0a      	ldr	r3, [pc, #40]	; (801acd8 <wifi_insert_config+0x48>)
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	1c59      	adds	r1, r3, #1
 801acb2:	4809      	ldr	r0, [pc, #36]	; (801acd8 <wifi_insert_config+0x48>)
 801acb4:	6001      	str	r1, [r0, #0]
 801acb6:	7812      	ldrb	r2, [r2, #0]
 801acb8:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<len; i++)
 801acba:	68bb      	ldr	r3, [r7, #8]
 801acbc:	3301      	adds	r3, #1
 801acbe:	60bb      	str	r3, [r7, #8]
 801acc0:	68ba      	ldr	r2, [r7, #8]
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	429a      	cmp	r2, r3
 801acc6:	dbee      	blt.n	801aca6 <wifi_insert_config+0x16>
	}
}
 801acc8:	bf00      	nop
 801acca:	3714      	adds	r7, #20
 801accc:	46bd      	mov	sp, r7
 801acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd2:	4770      	bx	lr
 801acd4:	20000bf0 	.word	0x20000bf0
 801acd8:	20008ac4 	.word	0x20008ac4

0801acdc <insert_pwrswr>:

// baue einen Datensatz zusammen, sende diesen dann via DMA aus

void insert_pwrswr(t_pwrswr *p)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b082      	sub	sp, #8
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]
	wifi_insert_float(p->fwd_watt);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	edd3 7a02 	vldr	s15, [r3, #8]
 801acea:	eeb0 0a67 	vmov.f32	s0, s15
 801acee:	f7ff ffa5 	bl	801ac3c <wifi_insert_float>
	wifi_insert_float(p->fwd_peakwatt);
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	edd3 7a03 	vldr	s15, [r3, #12]
 801acf8:	eeb0 0a67 	vmov.f32	s0, s15
 801acfc:	f7ff ff9e 	bl	801ac3c <wifi_insert_float>
	wifi_insert_float(p->fwd_dBm);
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	edd3 7a00 	vldr	s15, [r3]
 801ad06:	eeb0 0a67 	vmov.f32	s0, s15
 801ad0a:	f7ff ff97 	bl	801ac3c <wifi_insert_float>
	wifi_insert_float(p->fwd_dBmpeak);
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	edd3 7a01 	vldr	s15, [r3, #4]
 801ad14:	eeb0 0a67 	vmov.f32	s0, s15
 801ad18:	f7ff ff90 	bl	801ac3c <wifi_insert_float>
	wifi_insert_float(p->rev_watt);
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	edd3 7a05 	vldr	s15, [r3, #20]
 801ad22:	eeb0 0a67 	vmov.f32	s0, s15
 801ad26:	f7ff ff89 	bl	801ac3c <wifi_insert_float>
	wifi_insert_float(p->rev_dBm);
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	edd3 7a04 	vldr	s15, [r3, #16]
 801ad30:	eeb0 0a67 	vmov.f32	s0, s15
 801ad34:	f7ff ff82 	bl	801ac3c <wifi_insert_float>
	wifi_insert_float(p->swr);
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	edd3 7a06 	vldr	s15, [r3, #24]
 801ad3e:	eeb0 0a67 	vmov.f32	s0, s15
 801ad42:	f7ff ff7b 	bl	801ac3c <wifi_insert_float>
}
 801ad46:	bf00      	nop
 801ad48:	3708      	adds	r7, #8
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	bd80      	pop	{r7, pc}
	...

0801ad50 <build_wifi_data>:

int build_wifi_data()
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b082      	sub	sp, #8
 801ad54:	af00      	add	r7, sp, #0
	pwdata = wifidata;
 801ad56:	4b42      	ldr	r3, [pc, #264]	; (801ae60 <build_wifi_data+0x110>)
 801ad58:	4a42      	ldr	r2, [pc, #264]	; (801ae64 <build_wifi_data+0x114>)
 801ad5a:	601a      	str	r2, [r3, #0]

	if(dataset == 0)
 801ad5c:	4b42      	ldr	r3, [pc, #264]	; (801ae68 <build_wifi_data+0x118>)
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d148      	bne.n	801adf6 <build_wifi_data+0xa6>
	{
		// Header
		wifi_insert_32bit(0x1e7cfe56);	// feste Bitkombination zur Start-Erkennung
 801ad64:	4841      	ldr	r0, [pc, #260]	; (801ae6c <build_wifi_data+0x11c>)
 801ad66:	f7ff ff39 	bl	801abdc <wifi_insert_32bit>

		pwdata+=2;	// Platz für Länge
 801ad6a:	4b3d      	ldr	r3, [pc, #244]	; (801ae60 <build_wifi_data+0x110>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	3302      	adds	r3, #2
 801ad70:	4a3b      	ldr	r2, [pc, #236]	; (801ae60 <build_wifi_data+0x110>)
 801ad72:	6013      	str	r3, [r2, #0]

		// diverse Status- und Configwerte
		wifi_insert_8bit(state);
 801ad74:	4b3e      	ldr	r3, [pc, #248]	; (801ae70 <build_wifi_data+0x120>)
 801ad76:	781b      	ldrb	r3, [r3, #0]
 801ad78:	4618      	mov	r0, r3
 801ad7a:	f7ff ff75 	bl	801ac68 <wifi_insert_8bit>
		wifi_insert_8bit(pcfgdata->antsw);
 801ad7e:	4b3d      	ldr	r3, [pc, #244]	; (801ae74 <build_wifi_data+0x124>)
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 801ad86:	4618      	mov	r0, r3
 801ad88:	f7ff ff6e 	bl	801ac68 <wifi_insert_8bit>
		wifi_insert_32bit(_selected_band);
 801ad8c:	4b3a      	ldr	r3, [pc, #232]	; (801ae78 <build_wifi_data+0x128>)
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	4618      	mov	r0, r3
 801ad92:	f7ff ff23 	bl	801abdc <wifi_insert_32bit>
		wifi_insert_8bit(gpio_stat[PTTOUT]);
 801ad96:	4b39      	ldr	r3, [pc, #228]	; (801ae7c <build_wifi_data+0x12c>)
 801ad98:	7d1b      	ldrb	r3, [r3, #20]
 801ad9a:	4618      	mov	r0, r3
 801ad9c:	f7ff ff64 	bl	801ac68 <wifi_insert_8bit>
		wifi_insert_8bit(gpio_stat[FAN_ONOFF]);
 801ada0:	4b36      	ldr	r3, [pc, #216]	; (801ae7c <build_wifi_data+0x12c>)
 801ada2:	7c9b      	ldrb	r3, [r3, #18]
 801ada4:	4618      	mov	r0, r3
 801ada6:	f7ff ff5f 	bl	801ac68 <wifi_insert_8bit>
		wifi_insert_8bit(pcfgdata->tempunits);
 801adaa:	4b32      	ldr	r3, [pc, #200]	; (801ae74 <build_wifi_data+0x124>)
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801adb2:	4618      	mov	r0, r3
 801adb4:	f7ff ff58 	bl	801ac68 <wifi_insert_8bit>
		wifi_insert_8bit(pcfgdata->bandmode);
 801adb8:	4b2e      	ldr	r3, [pc, #184]	; (801ae74 <build_wifi_data+0x124>)
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801adc0:	4618      	mov	r0, r3
 801adc2:	f7ff ff51 	bl	801ac68 <wifi_insert_8bit>
		wifi_insert_32bit(uptime);
 801adc6:	4b2e      	ldr	r3, [pc, #184]	; (801ae80 <build_wifi_data+0x130>)
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	4618      	mov	r0, r3
 801adcc:	f7ff ff06 	bl	801abdc <wifi_insert_32bit>

		// adc_realvals
		for(int i=0; i<NUMADCVALS; i++)
 801add0:	2300      	movs	r3, #0
 801add2:	607b      	str	r3, [r7, #4]
 801add4:	e00c      	b.n	801adf0 <build_wifi_data+0xa0>
		{
			wifi_insert_float(adc_realvals[i]);
 801add6:	4a2b      	ldr	r2, [pc, #172]	; (801ae84 <build_wifi_data+0x134>)
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	009b      	lsls	r3, r3, #2
 801addc:	4413      	add	r3, r2
 801adde:	edd3 7a00 	vldr	s15, [r3]
 801ade2:	eeb0 0a67 	vmov.f32	s0, s15
 801ade6:	f7ff ff29 	bl	801ac3c <wifi_insert_float>
		for(int i=0; i<NUMADCVALS; i++)
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	3301      	adds	r3, #1
 801adee:	607b      	str	r3, [r7, #4]
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	2b10      	cmp	r3, #16
 801adf4:	ddef      	ble.n	801add6 <build_wifi_data+0x86>
		}
	}

	if(dataset == 1)
 801adf6:	4b1c      	ldr	r3, [pc, #112]	; (801ae68 <build_wifi_data+0x118>)
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	2b01      	cmp	r3, #1
 801adfc:	d117      	bne.n	801ae2e <build_wifi_data+0xde>
	{
		// Header
		wifi_insert_32bit(0x6478ab61);	// feste Bitkombination zur Start-Erkennung
 801adfe:	4822      	ldr	r0, [pc, #136]	; (801ae88 <build_wifi_data+0x138>)
 801ae00:	f7ff feec 	bl	801abdc <wifi_insert_32bit>

		pwdata+=2;	// Platz für Länge
 801ae04:	4b16      	ldr	r3, [pc, #88]	; (801ae60 <build_wifi_data+0x110>)
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	3302      	adds	r3, #2
 801ae0a:	4a15      	ldr	r2, [pc, #84]	; (801ae60 <build_wifi_data+0x110>)
 801ae0c:	6013      	str	r3, [r2, #0]

		wifi_insert_8bit(pcfgdata->systemMode); // 0=PA-Controller, 1=PwrSwrMeter
 801ae0e:	4b19      	ldr	r3, [pc, #100]	; (801ae74 <build_wifi_data+0x124>)
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ae16:	4618      	mov	r0, r3
 801ae18:	f7ff ff26 	bl	801ac68 <wifi_insert_8bit>

		// Pwr/Swr Werte
		insert_pwrswr(&pwrswr_antenna);
 801ae1c:	481b      	ldr	r0, [pc, #108]	; (801ae8c <build_wifi_data+0x13c>)
 801ae1e:	f7ff ff5d 	bl	801acdc <insert_pwrswr>
		insert_pwrswr(&pwrswr_filter);
 801ae22:	481b      	ldr	r0, [pc, #108]	; (801ae90 <build_wifi_data+0x140>)
 801ae24:	f7ff ff5a 	bl	801acdc <insert_pwrswr>
		insert_pwrswr(&pwrswr_input);
 801ae28:	481a      	ldr	r0, [pc, #104]	; (801ae94 <build_wifi_data+0x144>)
 801ae2a:	f7ff ff57 	bl	801acdc <insert_pwrswr>
	}

	if(dataset == 2)
 801ae2e:	4b0e      	ldr	r3, [pc, #56]	; (801ae68 <build_wifi_data+0x118>)
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	2b02      	cmp	r3, #2
 801ae34:	d109      	bne.n	801ae4a <build_wifi_data+0xfa>
	{
		// Header
		wifi_insert_32bit(0x01020305);	// feste Bitkombination zur Start-Erkennung
 801ae36:	4818      	ldr	r0, [pc, #96]	; (801ae98 <build_wifi_data+0x148>)
 801ae38:	f7ff fed0 	bl	801abdc <wifi_insert_32bit>

		pwdata+=2;	// Platz für Länge
 801ae3c:	4b08      	ldr	r3, [pc, #32]	; (801ae60 <build_wifi_data+0x110>)
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	3302      	adds	r3, #2
 801ae42:	4a07      	ldr	r2, [pc, #28]	; (801ae60 <build_wifi_data+0x110>)
 801ae44:	6013      	str	r3, [r2, #0]

		wifi_insert_config();
 801ae46:	f7ff ff23 	bl	801ac90 <wifi_insert_config>
	}

	int len = (int)((uint32_t)pwdata - (uint32_t)wifidata);
 801ae4a:	4b05      	ldr	r3, [pc, #20]	; (801ae60 <build_wifi_data+0x110>)
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	461a      	mov	r2, r3
 801ae50:	4b04      	ldr	r3, [pc, #16]	; (801ae64 <build_wifi_data+0x114>)
 801ae52:	1ad3      	subs	r3, r2, r3
 801ae54:	603b      	str	r3, [r7, #0]

	return len;
 801ae56:	683b      	ldr	r3, [r7, #0]
}
 801ae58:	4618      	mov	r0, r3
 801ae5a:	3708      	adds	r7, #8
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	bd80      	pop	{r7, pc}
 801ae60:	20008ac4 	.word	0x20008ac4
 801ae64:	20008994 	.word	0x20008994
 801ae68:	200027cc 	.word	0x200027cc
 801ae6c:	1e7cfe56 	.word	0x1e7cfe56
 801ae70:	200026a0 	.word	0x200026a0
 801ae74:	20000bf0 	.word	0x20000bf0
 801ae78:	20000720 	.word	0x20000720
 801ae7c:	2000498c 	.word	0x2000498c
 801ae80:	200027a4 	.word	0x200027a4
 801ae84:	2000314c 	.word	0x2000314c
 801ae88:	6478ab61 	.word	0x6478ab61
 801ae8c:	20005684 	.word	0x20005684
 801ae90:	20005634 	.word	0x20005634
 801ae94:	200055e4 	.word	0x200055e4
 801ae98:	01020305 	.word	0x01020305

0801ae9c <handle_wifi>:
unsigned char rxcfg[300];
int rxcfg_ready = 0;

// wird aus dem UART RX IRQ aufgerufen
void handle_wifi(uint8_t data)
{
 801ae9c:	b480      	push	{r7}
 801ae9e:	b083      	sub	sp, #12
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	4603      	mov	r3, r0
 801aea4:	71fb      	strb	r3, [r7, #7]
static int state = 0;
static int idx = 0;

	switch (state)
 801aea6:	4b95      	ldr	r3, [pc, #596]	; (801b0fc <handle_wifi+0x260>)
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	2b03      	cmp	r3, #3
 801aeac:	d03c      	beq.n	801af28 <handle_wifi+0x8c>
 801aeae:	2b03      	cmp	r3, #3
 801aeb0:	dc06      	bgt.n	801aec0 <handle_wifi+0x24>
 801aeb2:	2b01      	cmp	r3, #1
 801aeb4:	d01e      	beq.n	801aef4 <handle_wifi+0x58>
 801aeb6:	2b01      	cmp	r3, #1
 801aeb8:	dc29      	bgt.n	801af0e <handle_wifi+0x72>
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d010      	beq.n	801aee0 <handle_wifi+0x44>
				}
				state = 0;
			}
			break;
	}
}
 801aebe:	e136      	b.n	801b12e <handle_wifi+0x292>
	switch (state)
 801aec0:	2b65      	cmp	r3, #101	; 0x65
 801aec2:	f000 80b9 	beq.w	801b038 <handle_wifi+0x19c>
 801aec6:	2b65      	cmp	r3, #101	; 0x65
 801aec8:	dc03      	bgt.n	801aed2 <handle_wifi+0x36>
 801aeca:	2b64      	cmp	r3, #100	; 0x64
 801aecc:	f000 809e 	beq.w	801b00c <handle_wifi+0x170>
}
 801aed0:	e12d      	b.n	801b12e <handle_wifi+0x292>
	switch (state)
 801aed2:	2b66      	cmp	r3, #102	; 0x66
 801aed4:	f000 80ce 	beq.w	801b074 <handle_wifi+0x1d8>
 801aed8:	2bc8      	cmp	r3, #200	; 0xc8
 801aeda:	f000 80e8 	beq.w	801b0ae <handle_wifi+0x212>
}
 801aede:	e126      	b.n	801b12e <handle_wifi+0x292>
	case 0: if(data == 0x01) state++; break;
 801aee0:	79fb      	ldrb	r3, [r7, #7]
 801aee2:	2b01      	cmp	r3, #1
 801aee4:	f040 8106 	bne.w	801b0f4 <handle_wifi+0x258>
 801aee8:	4b84      	ldr	r3, [pc, #528]	; (801b0fc <handle_wifi+0x260>)
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	3301      	adds	r3, #1
 801aeee:	4a83      	ldr	r2, [pc, #524]	; (801b0fc <handle_wifi+0x260>)
 801aef0:	6013      	str	r3, [r2, #0]
 801aef2:	e0ff      	b.n	801b0f4 <handle_wifi+0x258>
	case 1: if(data == 0x02) state++; else state = 0; break;
 801aef4:	79fb      	ldrb	r3, [r7, #7]
 801aef6:	2b02      	cmp	r3, #2
 801aef8:	d105      	bne.n	801af06 <handle_wifi+0x6a>
 801aefa:	4b80      	ldr	r3, [pc, #512]	; (801b0fc <handle_wifi+0x260>)
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	3301      	adds	r3, #1
 801af00:	4a7e      	ldr	r2, [pc, #504]	; (801b0fc <handle_wifi+0x260>)
 801af02:	6013      	str	r3, [r2, #0]
 801af04:	e113      	b.n	801b12e <handle_wifi+0x292>
 801af06:	4b7d      	ldr	r3, [pc, #500]	; (801b0fc <handle_wifi+0x260>)
 801af08:	2200      	movs	r2, #0
 801af0a:	601a      	str	r2, [r3, #0]
 801af0c:	e10f      	b.n	801b12e <handle_wifi+0x292>
	case 2: if(data == 0x03) state++; else state = 0; break;
 801af0e:	79fb      	ldrb	r3, [r7, #7]
 801af10:	2b03      	cmp	r3, #3
 801af12:	d105      	bne.n	801af20 <handle_wifi+0x84>
 801af14:	4b79      	ldr	r3, [pc, #484]	; (801b0fc <handle_wifi+0x260>)
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	3301      	adds	r3, #1
 801af1a:	4a78      	ldr	r2, [pc, #480]	; (801b0fc <handle_wifi+0x260>)
 801af1c:	6013      	str	r3, [r2, #0]
 801af1e:	e106      	b.n	801b12e <handle_wifi+0x292>
 801af20:	4b76      	ldr	r3, [pc, #472]	; (801b0fc <handle_wifi+0x260>)
 801af22:	2200      	movs	r2, #0
 801af24:	601a      	str	r2, [r3, #0]
 801af26:	e102      	b.n	801b12e <handle_wifi+0x292>
	case 3: if(data == 0x01) { wifi_emergoff = 1; 	state = 0; break; }
 801af28:	79fb      	ldrb	r3, [r7, #7]
 801af2a:	2b01      	cmp	r3, #1
 801af2c:	d106      	bne.n	801af3c <handle_wifi+0xa0>
 801af2e:	4b74      	ldr	r3, [pc, #464]	; (801b100 <handle_wifi+0x264>)
 801af30:	2201      	movs	r2, #1
 801af32:	601a      	str	r2, [r3, #0]
 801af34:	4b71      	ldr	r3, [pc, #452]	; (801b0fc <handle_wifi+0x260>)
 801af36:	2200      	movs	r2, #0
 801af38:	601a      	str	r2, [r3, #0]
 801af3a:	e0f8      	b.n	801b12e <handle_wifi+0x292>
			if(data == 0x02) { wifi_on = 1; 		state = 0; break; }
 801af3c:	79fb      	ldrb	r3, [r7, #7]
 801af3e:	2b02      	cmp	r3, #2
 801af40:	d106      	bne.n	801af50 <handle_wifi+0xb4>
 801af42:	4b70      	ldr	r3, [pc, #448]	; (801b104 <handle_wifi+0x268>)
 801af44:	2201      	movs	r2, #1
 801af46:	601a      	str	r2, [r3, #0]
 801af48:	4b6c      	ldr	r3, [pc, #432]	; (801b0fc <handle_wifi+0x260>)
 801af4a:	2200      	movs	r2, #0
 801af4c:	601a      	str	r2, [r3, #0]
 801af4e:	e0ee      	b.n	801b12e <handle_wifi+0x292>
			if(data == 0x03) { wifi_standby = 1; 	state = 0; break; }
 801af50:	79fb      	ldrb	r3, [r7, #7]
 801af52:	2b03      	cmp	r3, #3
 801af54:	d106      	bne.n	801af64 <handle_wifi+0xc8>
 801af56:	4b6c      	ldr	r3, [pc, #432]	; (801b108 <handle_wifi+0x26c>)
 801af58:	2201      	movs	r2, #1
 801af5a:	601a      	str	r2, [r3, #0]
 801af5c:	4b67      	ldr	r3, [pc, #412]	; (801b0fc <handle_wifi+0x260>)
 801af5e:	2200      	movs	r2, #0
 801af60:	601a      	str	r2, [r3, #0]
 801af62:	e0e4      	b.n	801b12e <handle_wifi+0x292>
			if(data == 0x04) { wifi_active = 1; 	state = 0; break; }
 801af64:	79fb      	ldrb	r3, [r7, #7]
 801af66:	2b04      	cmp	r3, #4
 801af68:	d106      	bne.n	801af78 <handle_wifi+0xdc>
 801af6a:	4b68      	ldr	r3, [pc, #416]	; (801b10c <handle_wifi+0x270>)
 801af6c:	2201      	movs	r2, #1
 801af6e:	601a      	str	r2, [r3, #0]
 801af70:	4b62      	ldr	r3, [pc, #392]	; (801b0fc <handle_wifi+0x260>)
 801af72:	2200      	movs	r2, #0
 801af74:	601a      	str	r2, [r3, #0]
 801af76:	e0da      	b.n	801b12e <handle_wifi+0x292>
			if(data == 0x05)
 801af78:	79fb      	ldrb	r3, [r7, #7]
 801af7a:	2b05      	cmp	r3, #5
 801af7c:	d12e      	bne.n	801afdc <handle_wifi+0x140>
				if(rxcfg_ready == 1)
 801af7e:	4b64      	ldr	r3, [pc, #400]	; (801b110 <handle_wifi+0x274>)
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	2b01      	cmp	r3, #1
 801af84:	d103      	bne.n	801af8e <handle_wifi+0xf2>
					state = 0;
 801af86:	4b5d      	ldr	r3, [pc, #372]	; (801b0fc <handle_wifi+0x260>)
 801af88:	2200      	movs	r2, #0
 801af8a:	601a      	str	r2, [r3, #0]
					break;
 801af8c:	e0cf      	b.n	801b12e <handle_wifi+0x292>
				idx = 0;
 801af8e:	4b61      	ldr	r3, [pc, #388]	; (801b114 <handle_wifi+0x278>)
 801af90:	2200      	movs	r2, #0
 801af92:	601a      	str	r2, [r3, #0]
				rxcfg[idx++] = 1;
 801af94:	4b5f      	ldr	r3, [pc, #380]	; (801b114 <handle_wifi+0x278>)
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	1c5a      	adds	r2, r3, #1
 801af9a:	495e      	ldr	r1, [pc, #376]	; (801b114 <handle_wifi+0x278>)
 801af9c:	600a      	str	r2, [r1, #0]
 801af9e:	4a5e      	ldr	r2, [pc, #376]	; (801b118 <handle_wifi+0x27c>)
 801afa0:	2101      	movs	r1, #1
 801afa2:	54d1      	strb	r1, [r2, r3]
				rxcfg[idx++] = 2;
 801afa4:	4b5b      	ldr	r3, [pc, #364]	; (801b114 <handle_wifi+0x278>)
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	1c5a      	adds	r2, r3, #1
 801afaa:	495a      	ldr	r1, [pc, #360]	; (801b114 <handle_wifi+0x278>)
 801afac:	600a      	str	r2, [r1, #0]
 801afae:	4a5a      	ldr	r2, [pc, #360]	; (801b118 <handle_wifi+0x27c>)
 801afb0:	2102      	movs	r1, #2
 801afb2:	54d1      	strb	r1, [r2, r3]
				rxcfg[idx++] = 3;
 801afb4:	4b57      	ldr	r3, [pc, #348]	; (801b114 <handle_wifi+0x278>)
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	1c5a      	adds	r2, r3, #1
 801afba:	4956      	ldr	r1, [pc, #344]	; (801b114 <handle_wifi+0x278>)
 801afbc:	600a      	str	r2, [r1, #0]
 801afbe:	4a56      	ldr	r2, [pc, #344]	; (801b118 <handle_wifi+0x27c>)
 801afc0:	2103      	movs	r1, #3
 801afc2:	54d1      	strb	r1, [r2, r3]
				rxcfg[idx++] = 5;
 801afc4:	4b53      	ldr	r3, [pc, #332]	; (801b114 <handle_wifi+0x278>)
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	1c5a      	adds	r2, r3, #1
 801afca:	4952      	ldr	r1, [pc, #328]	; (801b114 <handle_wifi+0x278>)
 801afcc:	600a      	str	r2, [r1, #0]
 801afce:	4a52      	ldr	r2, [pc, #328]	; (801b118 <handle_wifi+0x27c>)
 801afd0:	2105      	movs	r1, #5
 801afd2:	54d1      	strb	r1, [r2, r3]
				state = 100;
 801afd4:	4b49      	ldr	r3, [pc, #292]	; (801b0fc <handle_wifi+0x260>)
 801afd6:	2264      	movs	r2, #100	; 0x64
 801afd8:	601a      	str	r2, [r3, #0]
				break;
 801afda:	e0a8      	b.n	801b12e <handle_wifi+0x292>
			if(data == 6)
 801afdc:	79fb      	ldrb	r3, [r7, #7]
 801afde:	2b06      	cmp	r3, #6
 801afe0:	d106      	bne.n	801aff0 <handle_wifi+0x154>
				idx = 0;
 801afe2:	4b4c      	ldr	r3, [pc, #304]	; (801b114 <handle_wifi+0x278>)
 801afe4:	2200      	movs	r2, #0
 801afe6:	601a      	str	r2, [r3, #0]
				state = 200;
 801afe8:	4b44      	ldr	r3, [pc, #272]	; (801b0fc <handle_wifi+0x260>)
 801afea:	22c8      	movs	r2, #200	; 0xc8
 801afec:	601a      	str	r2, [r3, #0]
				break;
 801afee:	e09e      	b.n	801b12e <handle_wifi+0x292>
			if(data == 7)
 801aff0:	79fb      	ldrb	r3, [r7, #7]
 801aff2:	2b07      	cmp	r3, #7
 801aff4:	d106      	bne.n	801b004 <handle_wifi+0x168>
				send_config = 1;
 801aff6:	4b49      	ldr	r3, [pc, #292]	; (801b11c <handle_wifi+0x280>)
 801aff8:	2201      	movs	r2, #1
 801affa:	601a      	str	r2, [r3, #0]
				state = 0;
 801affc:	4b3f      	ldr	r3, [pc, #252]	; (801b0fc <handle_wifi+0x260>)
 801affe:	2200      	movs	r2, #0
 801b000:	601a      	str	r2, [r3, #0]
				break;
 801b002:	e094      	b.n	801b12e <handle_wifi+0x292>
			state = 0; break;
 801b004:	4b3d      	ldr	r3, [pc, #244]	; (801b0fc <handle_wifi+0x260>)
 801b006:	2200      	movs	r2, #0
 801b008:	601a      	str	r2, [r3, #0]
 801b00a:	e090      	b.n	801b12e <handle_wifi+0x292>
			rxcfg[idx++] = data;
 801b00c:	4b41      	ldr	r3, [pc, #260]	; (801b114 <handle_wifi+0x278>)
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	1c5a      	adds	r2, r3, #1
 801b012:	4940      	ldr	r1, [pc, #256]	; (801b114 <handle_wifi+0x278>)
 801b014:	600a      	str	r2, [r1, #0]
 801b016:	4940      	ldr	r1, [pc, #256]	; (801b118 <handle_wifi+0x27c>)
 801b018:	79fa      	ldrb	r2, [r7, #7]
 801b01a:	54ca      	strb	r2, [r1, r3]
			rxcfglen = data;
 801b01c:	79fb      	ldrb	r3, [r7, #7]
 801b01e:	4a40      	ldr	r2, [pc, #256]	; (801b120 <handle_wifi+0x284>)
 801b020:	6013      	str	r3, [r2, #0]
			rxcfglen <<= 8;
 801b022:	4b3f      	ldr	r3, [pc, #252]	; (801b120 <handle_wifi+0x284>)
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	021b      	lsls	r3, r3, #8
 801b028:	4a3d      	ldr	r2, [pc, #244]	; (801b120 <handle_wifi+0x284>)
 801b02a:	6013      	str	r3, [r2, #0]
			state++;
 801b02c:	4b33      	ldr	r3, [pc, #204]	; (801b0fc <handle_wifi+0x260>)
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	3301      	adds	r3, #1
 801b032:	4a32      	ldr	r2, [pc, #200]	; (801b0fc <handle_wifi+0x260>)
 801b034:	6013      	str	r3, [r2, #0]
			break;
 801b036:	e07a      	b.n	801b12e <handle_wifi+0x292>
			rxcfg[idx++] = data;
 801b038:	4b36      	ldr	r3, [pc, #216]	; (801b114 <handle_wifi+0x278>)
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	1c5a      	adds	r2, r3, #1
 801b03e:	4935      	ldr	r1, [pc, #212]	; (801b114 <handle_wifi+0x278>)
 801b040:	600a      	str	r2, [r1, #0]
 801b042:	4935      	ldr	r1, [pc, #212]	; (801b118 <handle_wifi+0x27c>)
 801b044:	79fa      	ldrb	r2, [r7, #7]
 801b046:	54ca      	strb	r2, [r1, r3]
			rxcfglen |= data;
 801b048:	79fa      	ldrb	r2, [r7, #7]
 801b04a:	4b35      	ldr	r3, [pc, #212]	; (801b120 <handle_wifi+0x284>)
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	4313      	orrs	r3, r2
 801b050:	4a33      	ldr	r2, [pc, #204]	; (801b120 <handle_wifi+0x284>)
 801b052:	6013      	str	r3, [r2, #0]
			rxcfglen -= 6;	// abzgl Header und Länge
 801b054:	4b32      	ldr	r3, [pc, #200]	; (801b120 <handle_wifi+0x284>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	3b06      	subs	r3, #6
 801b05a:	4a31      	ldr	r2, [pc, #196]	; (801b120 <handle_wifi+0x284>)
 801b05c:	6013      	str	r3, [r2, #0]
			rxcfglen += 2;	// zuzgl. CRC16
 801b05e:	4b30      	ldr	r3, [pc, #192]	; (801b120 <handle_wifi+0x284>)
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	3302      	adds	r3, #2
 801b064:	4a2e      	ldr	r2, [pc, #184]	; (801b120 <handle_wifi+0x284>)
 801b066:	6013      	str	r3, [r2, #0]
			state++;
 801b068:	4b24      	ldr	r3, [pc, #144]	; (801b0fc <handle_wifi+0x260>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	3301      	adds	r3, #1
 801b06e:	4a23      	ldr	r2, [pc, #140]	; (801b0fc <handle_wifi+0x260>)
 801b070:	6013      	str	r3, [r2, #0]
			break;
 801b072:	e05c      	b.n	801b12e <handle_wifi+0x292>
			rxcfg[idx++] = data;
 801b074:	4b27      	ldr	r3, [pc, #156]	; (801b114 <handle_wifi+0x278>)
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	1c5a      	adds	r2, r3, #1
 801b07a:	4926      	ldr	r1, [pc, #152]	; (801b114 <handle_wifi+0x278>)
 801b07c:	600a      	str	r2, [r1, #0]
 801b07e:	4926      	ldr	r1, [pc, #152]	; (801b118 <handle_wifi+0x27c>)
 801b080:	79fa      	ldrb	r2, [r7, #7]
 801b082:	54ca      	strb	r2, [r1, r3]
			rxcfglen--;
 801b084:	4b26      	ldr	r3, [pc, #152]	; (801b120 <handle_wifi+0x284>)
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	3b01      	subs	r3, #1
 801b08a:	4a25      	ldr	r2, [pc, #148]	; (801b120 <handle_wifi+0x284>)
 801b08c:	6013      	str	r3, [r2, #0]
			if(rxcfglen == 0)
 801b08e:	4b24      	ldr	r3, [pc, #144]	; (801b120 <handle_wifi+0x284>)
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d130      	bne.n	801b0f8 <handle_wifi+0x25c>
				rxcfglen = idx-2;
 801b096:	4b1f      	ldr	r3, [pc, #124]	; (801b114 <handle_wifi+0x278>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	3b02      	subs	r3, #2
 801b09c:	4a20      	ldr	r2, [pc, #128]	; (801b120 <handle_wifi+0x284>)
 801b09e:	6013      	str	r3, [r2, #0]
				rxcfg_ready = 1;
 801b0a0:	4b1b      	ldr	r3, [pc, #108]	; (801b110 <handle_wifi+0x274>)
 801b0a2:	2201      	movs	r2, #1
 801b0a4:	601a      	str	r2, [r3, #0]
				state = 0;
 801b0a6:	4b15      	ldr	r3, [pc, #84]	; (801b0fc <handle_wifi+0x260>)
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	601a      	str	r2, [r3, #0]
			break;
 801b0ac:	e024      	b.n	801b0f8 <handle_wifi+0x25c>
			if(idx < 20) ipadr[idx++] = data;
 801b0ae:	4b19      	ldr	r3, [pc, #100]	; (801b114 <handle_wifi+0x278>)
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	2b13      	cmp	r3, #19
 801b0b4:	dc07      	bgt.n	801b0c6 <handle_wifi+0x22a>
 801b0b6:	4b17      	ldr	r3, [pc, #92]	; (801b114 <handle_wifi+0x278>)
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	1c5a      	adds	r2, r3, #1
 801b0bc:	4915      	ldr	r1, [pc, #84]	; (801b114 <handle_wifi+0x278>)
 801b0be:	600a      	str	r2, [r1, #0]
 801b0c0:	4918      	ldr	r1, [pc, #96]	; (801b124 <handle_wifi+0x288>)
 801b0c2:	79fa      	ldrb	r2, [r7, #7]
 801b0c4:	54ca      	strb	r2, [r1, r3]
			if(idx == 20)
 801b0c6:	4b13      	ldr	r3, [pc, #76]	; (801b114 <handle_wifi+0x278>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	2b14      	cmp	r3, #20
 801b0cc:	d12e      	bne.n	801b12c <handle_wifi+0x290>
				ipadr[idx] = 0;
 801b0ce:	4b11      	ldr	r3, [pc, #68]	; (801b114 <handle_wifi+0x278>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	4a14      	ldr	r2, [pc, #80]	; (801b124 <handle_wifi+0x288>)
 801b0d4:	2100      	movs	r1, #0
 801b0d6:	54d1      	strb	r1, [r2, r3]
				if(wifi_connected == 0)
 801b0d8:	4b13      	ldr	r3, [pc, #76]	; (801b128 <handle_wifi+0x28c>)
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d105      	bne.n	801b0ec <handle_wifi+0x250>
					wifi_connected = 1;
 801b0e0:	4b11      	ldr	r3, [pc, #68]	; (801b128 <handle_wifi+0x28c>)
 801b0e2:	2201      	movs	r2, #1
 801b0e4:	601a      	str	r2, [r3, #0]
					send_config = 1;	// send config to wifi, nachdem die IP erstmals bekannt wurde, danach bei jeder Änderung der Config
 801b0e6:	4b0d      	ldr	r3, [pc, #52]	; (801b11c <handle_wifi+0x280>)
 801b0e8:	2201      	movs	r2, #1
 801b0ea:	601a      	str	r2, [r3, #0]
				state = 0;
 801b0ec:	4b03      	ldr	r3, [pc, #12]	; (801b0fc <handle_wifi+0x260>)
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	601a      	str	r2, [r3, #0]
			break;
 801b0f2:	e01b      	b.n	801b12c <handle_wifi+0x290>
	case 0: if(data == 0x01) state++; break;
 801b0f4:	bf00      	nop
 801b0f6:	e01a      	b.n	801b12e <handle_wifi+0x292>
			break;
 801b0f8:	bf00      	nop
 801b0fa:	e018      	b.n	801b12e <handle_wifi+0x292>
 801b0fc:	200027f0 	.word	0x200027f0
 801b100:	200027d4 	.word	0x200027d4
 801b104:	200027d8 	.word	0x200027d8
 801b108:	200027e0 	.word	0x200027e0
 801b10c:	200027dc 	.word	0x200027dc
 801b110:	200027ec 	.word	0x200027ec
 801b114:	200027f4 	.word	0x200027f4
 801b118:	20008738 	.word	0x20008738
 801b11c:	200027d0 	.word	0x200027d0
 801b120:	200027e8 	.word	0x200027e8
 801b124:	20001b4c 	.word	0x20001b4c
 801b128:	200027e4 	.word	0x200027e4
			break;
 801b12c:	bf00      	nop
}
 801b12e:	bf00      	nop
 801b130:	370c      	adds	r7, #12
 801b132:	46bd      	mov	sp, r7
 801b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b138:	4770      	bx	lr
 801b13a:	bf00      	nop

0801b13c <install_new_cfg>:

void install_new_cfg()
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b086      	sub	sp, #24
 801b140:	af00      	add	r7, sp, #0
	if(rxcfg_ready == 0) return;
 801b142:	4b2b      	ldr	r3, [pc, #172]	; (801b1f0 <install_new_cfg+0xb4>)
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d04e      	beq.n	801b1e8 <install_new_cfg+0xac>

	// der cfg vom WiFi wurde im usart irq eingelesen
	// prüfe die CRC16
	uint16_t crc16 = crc16_messagecalc(rxcfg, rxcfglen);
 801b14a:	4b2a      	ldr	r3, [pc, #168]	; (801b1f4 <install_new_cfg+0xb8>)
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	4619      	mov	r1, r3
 801b150:	4829      	ldr	r0, [pc, #164]	; (801b1f8 <install_new_cfg+0xbc>)
 801b152:	f7f4 f88f 	bl	800f274 <crc16_messagecalc>
 801b156:	4603      	mov	r3, r0
 801b158:	817b      	strh	r3, [r7, #10]
	uint16_t rxcrc16 = rxcfg[214];
 801b15a:	4b27      	ldr	r3, [pc, #156]	; (801b1f8 <install_new_cfg+0xbc>)
 801b15c:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 801b160:	813b      	strh	r3, [r7, #8]
	rxcrc16 <<= 8;
 801b162:	893b      	ldrh	r3, [r7, #8]
 801b164:	021b      	lsls	r3, r3, #8
 801b166:	813b      	strh	r3, [r7, #8]
	rxcrc16 |= rxcfg[215];
 801b168:	4b23      	ldr	r3, [pc, #140]	; (801b1f8 <install_new_cfg+0xbc>)
 801b16a:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 801b16e:	b29a      	uxth	r2, r3
 801b170:	893b      	ldrh	r3, [r7, #8]
 801b172:	4313      	orrs	r3, r2
 801b174:	813b      	strh	r3, [r7, #8]

	if(crc16 == rxcrc16)
 801b176:	897a      	ldrh	r2, [r7, #10]
 801b178:	893b      	ldrh	r3, [r7, #8]
 801b17a:	429a      	cmp	r2, r3
 801b17c:	d130      	bne.n	801b1e0 <install_new_cfg+0xa4>
	{
		// die neue Config ist OK
		// sie beginnt bei rxcfg[6] und hat die Länge rxcfglen-6 (abzgl. header, len)
		int len = sizeof(flashdata[0]);
 801b17e:	23d0      	movs	r3, #208	; 0xd0
 801b180:	607b      	str	r3, [r7, #4]
		uint8_t *pcfgstruct = (uint8_t *)pcfgdata;
 801b182:	4b1e      	ldr	r3, [pc, #120]	; (801b1fc <install_new_cfg+0xc0>)
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	617b      	str	r3, [r7, #20]
		uint8_t *pnewcfg = (uint8_t *)rxcfg + 6;
 801b188:	4b1d      	ldr	r3, [pc, #116]	; (801b200 <install_new_cfg+0xc4>)
 801b18a:	613b      	str	r3, [r7, #16]

		if(len == (rxcfglen-6))
 801b18c:	4b19      	ldr	r3, [pc, #100]	; (801b1f4 <install_new_cfg+0xb8>)
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	3b06      	subs	r3, #6
 801b192:	687a      	ldr	r2, [r7, #4]
 801b194:	429a      	cmp	r2, r3
 801b196:	d123      	bne.n	801b1e0 <install_new_cfg+0xa4>
		{
			// die Länge stimmt auch
			// kopiere sie in die Config
			for(int i=0; i<len; i++)
 801b198:	2300      	movs	r3, #0
 801b19a:	60fb      	str	r3, [r7, #12]
 801b19c:	e00a      	b.n	801b1b4 <install_new_cfg+0x78>
			{
				*pcfgstruct++ = *pnewcfg++;
 801b19e:	693a      	ldr	r2, [r7, #16]
 801b1a0:	1c53      	adds	r3, r2, #1
 801b1a2:	613b      	str	r3, [r7, #16]
 801b1a4:	697b      	ldr	r3, [r7, #20]
 801b1a6:	1c59      	adds	r1, r3, #1
 801b1a8:	6179      	str	r1, [r7, #20]
 801b1aa:	7812      	ldrb	r2, [r2, #0]
 801b1ac:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<len; i++)
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	3301      	adds	r3, #1
 801b1b2:	60fb      	str	r3, [r7, #12]
 801b1b4:	68fa      	ldr	r2, [r7, #12]
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	429a      	cmp	r2, r3
 801b1ba:	dbf0      	blt.n	801b19e <install_new_cfg+0x62>
			}
			copy_ram_to_flash();
 801b1bc:	f7f3 fefc 	bl	800efb8 <copy_ram_to_flash>
			messagebox(getLang(NEWCFG),1000);
 801b1c0:	2051      	movs	r0, #81	; 0x51
 801b1c2:	f7f5 fe0f 	bl	8010de4 <getLang>
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f7fa f8ed 	bl	80153ac <messagebox>
			messagebox("Rebooting",1000);
 801b1d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b1d6:	480b      	ldr	r0, [pc, #44]	; (801b204 <install_new_cfg+0xc8>)
 801b1d8:	f7fa f8e8 	bl	80153ac <messagebox>
			NVIC_SystemReset();
 801b1dc:	f7ff fc82 	bl	801aae4 <NVIC_SystemReset>
		}
	}
	rxcfg_ready = 0;	// fertig
 801b1e0:	4b03      	ldr	r3, [pc, #12]	; (801b1f0 <install_new_cfg+0xb4>)
 801b1e2:	2200      	movs	r2, #0
 801b1e4:	601a      	str	r2, [r3, #0]
 801b1e6:	e000      	b.n	801b1ea <install_new_cfg+0xae>
	if(rxcfg_ready == 0) return;
 801b1e8:	bf00      	nop
}
 801b1ea:	3718      	adds	r7, #24
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bd80      	pop	{r7, pc}
 801b1f0:	200027ec 	.word	0x200027ec
 801b1f4:	200027e8 	.word	0x200027e8
 801b1f8:	20008738 	.word	0x20008738
 801b1fc:	20000bf0 	.word	0x20000bf0
 801b200:	2000873e 	.word	0x2000873e
 801b204:	08026d5c 	.word	0x08026d5c

0801b208 <check_wifi_commands>:

void check_wifi_commands()
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	af00      	add	r7, sp, #0
	if(wifi_emergoff == 1)
 801b20c:	4b12      	ldr	r3, [pc, #72]	; (801b258 <check_wifi_commands+0x50>)
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	2b01      	cmp	r3, #1
 801b212:	d104      	bne.n	801b21e <check_wifi_commands+0x16>
	{
		wifi_emergoff = 0;
 801b214:	4b10      	ldr	r3, [pc, #64]	; (801b258 <check_wifi_commands+0x50>)
 801b216:	2200      	movs	r2, #0
 801b218:	601a      	str	r2, [r3, #0]
		switchto_emergencymode();
 801b21a:	f7f5 ff69 	bl	80110f0 <switchto_emergencymode>
	}

	if(wifi_on == 1)
 801b21e:	4b0f      	ldr	r3, [pc, #60]	; (801b25c <check_wifi_commands+0x54>)
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	2b01      	cmp	r3, #1
 801b224:	d104      	bne.n	801b230 <check_wifi_commands+0x28>
	{
		wifi_on = 0;
 801b226:	4b0d      	ldr	r3, [pc, #52]	; (801b25c <check_wifi_commands+0x54>)
 801b228:	2200      	movs	r2, #0
 801b22a:	601a      	str	r2, [r3, #0]
		switchto_ON();
 801b22c:	f7f5 ff90 	bl	8011150 <switchto_ON>
	}

	if(wifi_active == 1)
 801b230:	4b0b      	ldr	r3, [pc, #44]	; (801b260 <check_wifi_commands+0x58>)
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	2b01      	cmp	r3, #1
 801b236:	d104      	bne.n	801b242 <check_wifi_commands+0x3a>
	{
		wifi_active = 0;
 801b238:	4b09      	ldr	r3, [pc, #36]	; (801b260 <check_wifi_commands+0x58>)
 801b23a:	2200      	movs	r2, #0
 801b23c:	601a      	str	r2, [r3, #0]
		switchto_active();
 801b23e:	f7f5 ffc5 	bl	80111cc <switchto_active>
	}

	if(wifi_standby == 1)
 801b242:	4b08      	ldr	r3, [pc, #32]	; (801b264 <check_wifi_commands+0x5c>)
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	2b01      	cmp	r3, #1
 801b248:	d104      	bne.n	801b254 <check_wifi_commands+0x4c>
	{
		wifi_standby = 0;
 801b24a:	4b06      	ldr	r3, [pc, #24]	; (801b264 <check_wifi_commands+0x5c>)
 801b24c:	2200      	movs	r2, #0
 801b24e:	601a      	str	r2, [r3, #0]
		switchto_standby();
 801b250:	f7f6 f80c 	bl	801126c <switchto_standby>
	}
}
 801b254:	bf00      	nop
 801b256:	bd80      	pop	{r7, pc}
 801b258:	200027d4 	.word	0x200027d4
 801b25c:	200027d8 	.word	0x200027d8
 801b260:	200027dc 	.word	0x200027dc
 801b264:	200027e0 	.word	0x200027e0

0801b268 <disk_initialize>:
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber (0..) */
)
{
 801b268:	b580      	push	{r7, lr}
 801b26a:	b082      	sub	sp, #8
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	4603      	mov	r3, r0
 801b270:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_initialize) {
 801b272:	79fa      	ldrb	r2, [r7, #7]
 801b274:	490c      	ldr	r1, [pc, #48]	; (801b2a8 <disk_initialize+0x40>)
 801b276:	4613      	mov	r3, r2
 801b278:	009b      	lsls	r3, r3, #2
 801b27a:	4413      	add	r3, r2
 801b27c:	009b      	lsls	r3, r3, #2
 801b27e:	440b      	add	r3, r1
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d00a      	beq.n	801b29c <disk_initialize+0x34>
		return FATFS_LowLevelDrivers[pdrv].disk_initialize();
 801b286:	79fa      	ldrb	r2, [r7, #7]
 801b288:	4907      	ldr	r1, [pc, #28]	; (801b2a8 <disk_initialize+0x40>)
 801b28a:	4613      	mov	r3, r2
 801b28c:	009b      	lsls	r3, r3, #2
 801b28e:	4413      	add	r3, r2
 801b290:	009b      	lsls	r3, r3, #2
 801b292:	440b      	add	r3, r1
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	4798      	blx	r3
 801b298:	4603      	mov	r3, r0
 801b29a:	e000      	b.n	801b29e <disk_initialize+0x36>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 801b29c:	2304      	movs	r3, #4
}
 801b29e:	4618      	mov	r0, r3
 801b2a0:	3708      	adds	r7, #8
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	bd80      	pop	{r7, pc}
 801b2a6:	bf00      	nop
 801b2a8:	20001b64 	.word	0x20001b64

0801b2ac <disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0..) */
)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b082      	sub	sp, #8
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	4603      	mov	r3, r0
 801b2b4:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_status) {
 801b2b6:	79fa      	ldrb	r2, [r7, #7]
 801b2b8:	490d      	ldr	r1, [pc, #52]	; (801b2f0 <disk_status+0x44>)
 801b2ba:	4613      	mov	r3, r2
 801b2bc:	009b      	lsls	r3, r3, #2
 801b2be:	4413      	add	r3, r2
 801b2c0:	009b      	lsls	r3, r3, #2
 801b2c2:	440b      	add	r3, r1
 801b2c4:	3304      	adds	r3, #4
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d00b      	beq.n	801b2e4 <disk_status+0x38>
		return FATFS_LowLevelDrivers[pdrv].disk_status();
 801b2cc:	79fa      	ldrb	r2, [r7, #7]
 801b2ce:	4908      	ldr	r1, [pc, #32]	; (801b2f0 <disk_status+0x44>)
 801b2d0:	4613      	mov	r3, r2
 801b2d2:	009b      	lsls	r3, r3, #2
 801b2d4:	4413      	add	r3, r2
 801b2d6:	009b      	lsls	r3, r3, #2
 801b2d8:	440b      	add	r3, r1
 801b2da:	3304      	adds	r3, #4
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	4798      	blx	r3
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	e000      	b.n	801b2e6 <disk_status+0x3a>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 801b2e4:	2304      	movs	r3, #4
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	3708      	adds	r7, #8
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	bd80      	pop	{r7, pc}
 801b2ee:	bf00      	nop
 801b2f0:	20001b64 	.word	0x20001b64

0801b2f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b084      	sub	sp, #16
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	60b9      	str	r1, [r7, #8]
 801b2fc:	607a      	str	r2, [r7, #4]
 801b2fe:	603b      	str	r3, [r7, #0]
 801b300:	4603      	mov	r3, r0
 801b302:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 801b304:	683b      	ldr	r3, [r7, #0]
 801b306:	2b00      	cmp	r3, #0
 801b308:	d101      	bne.n	801b30e <disk_read+0x1a>
		return RES_PARERR;
 801b30a:	2304      	movs	r3, #4
 801b30c:	e01a      	b.n	801b344 <disk_read+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_read) {
 801b30e:	7bfa      	ldrb	r2, [r7, #15]
 801b310:	490e      	ldr	r1, [pc, #56]	; (801b34c <disk_read+0x58>)
 801b312:	4613      	mov	r3, r2
 801b314:	009b      	lsls	r3, r3, #2
 801b316:	4413      	add	r3, r2
 801b318:	009b      	lsls	r3, r3, #2
 801b31a:	440b      	add	r3, r1
 801b31c:	3310      	adds	r3, #16
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d00e      	beq.n	801b342 <disk_read+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_read(buff, sector, count);
 801b324:	7bfa      	ldrb	r2, [r7, #15]
 801b326:	4909      	ldr	r1, [pc, #36]	; (801b34c <disk_read+0x58>)
 801b328:	4613      	mov	r3, r2
 801b32a:	009b      	lsls	r3, r3, #2
 801b32c:	4413      	add	r3, r2
 801b32e:	009b      	lsls	r3, r3, #2
 801b330:	440b      	add	r3, r1
 801b332:	3310      	adds	r3, #16
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	683a      	ldr	r2, [r7, #0]
 801b338:	6879      	ldr	r1, [r7, #4]
 801b33a:	68b8      	ldr	r0, [r7, #8]
 801b33c:	4798      	blx	r3
 801b33e:	4603      	mov	r3, r0
 801b340:	e000      	b.n	801b344 <disk_read+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 801b342:	2304      	movs	r3, #4
}
 801b344:	4618      	mov	r0, r3
 801b346:	3710      	adds	r7, #16
 801b348:	46bd      	mov	sp, r7
 801b34a:	bd80      	pop	{r7, pc}
 801b34c:	20001b64 	.word	0x20001b64

0801b350 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b084      	sub	sp, #16
 801b354:	af00      	add	r7, sp, #0
 801b356:	60b9      	str	r1, [r7, #8]
 801b358:	607a      	str	r2, [r7, #4]
 801b35a:	603b      	str	r3, [r7, #0]
 801b35c:	4603      	mov	r3, r0
 801b35e:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 801b360:	683b      	ldr	r3, [r7, #0]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d101      	bne.n	801b36a <disk_write+0x1a>
		return RES_PARERR;
 801b366:	2304      	movs	r3, #4
 801b368:	e01a      	b.n	801b3a0 <disk_write+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_write) {
 801b36a:	7bfa      	ldrb	r2, [r7, #15]
 801b36c:	490e      	ldr	r1, [pc, #56]	; (801b3a8 <disk_write+0x58>)
 801b36e:	4613      	mov	r3, r2
 801b370:	009b      	lsls	r3, r3, #2
 801b372:	4413      	add	r3, r2
 801b374:	009b      	lsls	r3, r3, #2
 801b376:	440b      	add	r3, r1
 801b378:	330c      	adds	r3, #12
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d00e      	beq.n	801b39e <disk_write+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_write(buff, sector, count);
 801b380:	7bfa      	ldrb	r2, [r7, #15]
 801b382:	4909      	ldr	r1, [pc, #36]	; (801b3a8 <disk_write+0x58>)
 801b384:	4613      	mov	r3, r2
 801b386:	009b      	lsls	r3, r3, #2
 801b388:	4413      	add	r3, r2
 801b38a:	009b      	lsls	r3, r3, #2
 801b38c:	440b      	add	r3, r1
 801b38e:	330c      	adds	r3, #12
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	683a      	ldr	r2, [r7, #0]
 801b394:	6879      	ldr	r1, [r7, #4]
 801b396:	68b8      	ldr	r0, [r7, #8]
 801b398:	4798      	blx	r3
 801b39a:	4603      	mov	r3, r0
 801b39c:	e000      	b.n	801b3a0 <disk_write+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 801b39e:	2304      	movs	r3, #4
}
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	3710      	adds	r7, #16
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	bd80      	pop	{r7, pc}
 801b3a8:	20001b64 	.word	0x20001b64

0801b3ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801b3ac:	b580      	push	{r7, lr}
 801b3ae:	b082      	sub	sp, #8
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	4603      	mov	r3, r0
 801b3b4:	603a      	str	r2, [r7, #0]
 801b3b6:	71fb      	strb	r3, [r7, #7]
 801b3b8:	460b      	mov	r3, r1
 801b3ba:	71bb      	strb	r3, [r7, #6]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_ioctl) {
 801b3bc:	79fa      	ldrb	r2, [r7, #7]
 801b3be:	490f      	ldr	r1, [pc, #60]	; (801b3fc <disk_ioctl+0x50>)
 801b3c0:	4613      	mov	r3, r2
 801b3c2:	009b      	lsls	r3, r3, #2
 801b3c4:	4413      	add	r3, r2
 801b3c6:	009b      	lsls	r3, r3, #2
 801b3c8:	440b      	add	r3, r1
 801b3ca:	3308      	adds	r3, #8
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d00e      	beq.n	801b3f0 <disk_ioctl+0x44>
		return FATFS_LowLevelDrivers[pdrv].disk_ioctl(cmd, buff);
 801b3d2:	79fa      	ldrb	r2, [r7, #7]
 801b3d4:	4909      	ldr	r1, [pc, #36]	; (801b3fc <disk_ioctl+0x50>)
 801b3d6:	4613      	mov	r3, r2
 801b3d8:	009b      	lsls	r3, r3, #2
 801b3da:	4413      	add	r3, r2
 801b3dc:	009b      	lsls	r3, r3, #2
 801b3de:	440b      	add	r3, r1
 801b3e0:	3308      	adds	r3, #8
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	79ba      	ldrb	r2, [r7, #6]
 801b3e6:	6839      	ldr	r1, [r7, #0]
 801b3e8:	4610      	mov	r0, r2
 801b3ea:	4798      	blx	r3
 801b3ec:	4603      	mov	r3, r0
 801b3ee:	e000      	b.n	801b3f2 <disk_ioctl+0x46>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 801b3f0:	2304      	movs	r3, #4
}
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	3708      	adds	r7, #8
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	bd80      	pop	{r7, pc}
 801b3fa:	bf00      	nop
 801b3fc:	20001b64 	.word	0x20001b64

0801b400 <get_fattime>:
#endif

/*-----------------------------------------------------------------------*/
/* Get time for fatfs for files                                          */
/*-----------------------------------------------------------------------*/
__weak DWORD get_fattime(void) {
 801b400:	b480      	push	{r7}
 801b402:	af00      	add	r7, sp, #0
	/* Returns current time packed into a DWORD variable */
	return	  ((DWORD)(2013 - 1980) << 25)	/* Year 2013 */
 801b404:	4b02      	ldr	r3, [pc, #8]	; (801b410 <get_fattime+0x10>)
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
 801b406:	4618      	mov	r0, r3
 801b408:	46bd      	mov	sp, r7
 801b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b40e:	4770      	bx	lr
 801b410:	42fc0000 	.word	0x42fc0000

0801b414 <TM_FATFS_USB_disk_initialize>:

/* Function declarations to prevent link errors if functions are not found */
__weak DSTATUS TM_FATFS_SD_SDIO_disk_initialize(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_initialize(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_USB_disk_initialize(void) {return RES_ERROR;}
 801b414:	b480      	push	{r7}
 801b416:	af00      	add	r7, sp, #0
 801b418:	2301      	movs	r3, #1
 801b41a:	4618      	mov	r0, r3
 801b41c:	46bd      	mov	sp, r7
 801b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b422:	4770      	bx	lr

0801b424 <TM_FATFS_SDRAM_disk_initialize>:
__weak DSTATUS TM_FATFS_SDRAM_disk_initialize(void) {return RES_ERROR;}
 801b424:	b480      	push	{r7}
 801b426:	af00      	add	r7, sp, #0
 801b428:	2301      	movs	r3, #1
 801b42a:	4618      	mov	r0, r3
 801b42c:	46bd      	mov	sp, r7
 801b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b432:	4770      	bx	lr

0801b434 <TM_FATFS_SPI_FLASH_disk_initialize>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_initialize(void) {return RES_ERROR;}
 801b434:	b480      	push	{r7}
 801b436:	af00      	add	r7, sp, #0
 801b438:	2301      	movs	r3, #1
 801b43a:	4618      	mov	r0, r3
 801b43c:	46bd      	mov	sp, r7
 801b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b442:	4770      	bx	lr

0801b444 <TM_FATFS_USB_disk_status>:

__weak DSTATUS TM_FATFS_SD_SDIO_disk_status(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_status(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_USB_disk_status(void) {return RES_ERROR;}
 801b444:	b480      	push	{r7}
 801b446:	af00      	add	r7, sp, #0
 801b448:	2301      	movs	r3, #1
 801b44a:	4618      	mov	r0, r3
 801b44c:	46bd      	mov	sp, r7
 801b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b452:	4770      	bx	lr

0801b454 <TM_FATFS_SDRAM_disk_status>:
__weak DSTATUS TM_FATFS_SDRAM_disk_status(void) {return RES_ERROR;}
 801b454:	b480      	push	{r7}
 801b456:	af00      	add	r7, sp, #0
 801b458:	2301      	movs	r3, #1
 801b45a:	4618      	mov	r0, r3
 801b45c:	46bd      	mov	sp, r7
 801b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b462:	4770      	bx	lr

0801b464 <TM_FATFS_SPI_FLASH_disk_status>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_status(void) {return RES_ERROR;}
 801b464:	b480      	push	{r7}
 801b466:	af00      	add	r7, sp, #0
 801b468:	2301      	movs	r3, #1
 801b46a:	4618      	mov	r0, r3
 801b46c:	46bd      	mov	sp, r7
 801b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b472:	4770      	bx	lr

0801b474 <TM_FATFS_USB_disk_ioctl>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 801b474:	b480      	push	{r7}
 801b476:	b083      	sub	sp, #12
 801b478:	af00      	add	r7, sp, #0
 801b47a:	4603      	mov	r3, r0
 801b47c:	6039      	str	r1, [r7, #0]
 801b47e:	71fb      	strb	r3, [r7, #7]
 801b480:	2301      	movs	r3, #1
 801b482:	4618      	mov	r0, r3
 801b484:	370c      	adds	r7, #12
 801b486:	46bd      	mov	sp, r7
 801b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b48c:	4770      	bx	lr

0801b48e <TM_FATFS_SDRAM_disk_ioctl>:
__weak DRESULT TM_FATFS_SDRAM_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 801b48e:	b480      	push	{r7}
 801b490:	b083      	sub	sp, #12
 801b492:	af00      	add	r7, sp, #0
 801b494:	4603      	mov	r3, r0
 801b496:	6039      	str	r1, [r7, #0]
 801b498:	71fb      	strb	r3, [r7, #7]
 801b49a:	2301      	movs	r3, #1
 801b49c:	4618      	mov	r0, r3
 801b49e:	370c      	adds	r7, #12
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4a6:	4770      	bx	lr

0801b4a8 <TM_FATFS_SPI_FLASH_disk_ioctl>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 801b4a8:	b480      	push	{r7}
 801b4aa:	b083      	sub	sp, #12
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	4603      	mov	r3, r0
 801b4b0:	6039      	str	r1, [r7, #0]
 801b4b2:	71fb      	strb	r3, [r7, #7]
 801b4b4:	2301      	movs	r3, #1
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	370c      	adds	r7, #12
 801b4ba:	46bd      	mov	sp, r7
 801b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4c0:	4770      	bx	lr

0801b4c2 <TM_FATFS_USB_disk_read>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 801b4c2:	b480      	push	{r7}
 801b4c4:	b085      	sub	sp, #20
 801b4c6:	af00      	add	r7, sp, #0
 801b4c8:	60f8      	str	r0, [r7, #12]
 801b4ca:	60b9      	str	r1, [r7, #8]
 801b4cc:	607a      	str	r2, [r7, #4]
 801b4ce:	2301      	movs	r3, #1
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	3714      	adds	r7, #20
 801b4d4:	46bd      	mov	sp, r7
 801b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4da:	4770      	bx	lr

0801b4dc <TM_FATFS_SDRAM_disk_read>:
__weak DRESULT TM_FATFS_SDRAM_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 801b4dc:	b480      	push	{r7}
 801b4de:	b085      	sub	sp, #20
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	60f8      	str	r0, [r7, #12]
 801b4e4:	60b9      	str	r1, [r7, #8]
 801b4e6:	607a      	str	r2, [r7, #4]
 801b4e8:	2301      	movs	r3, #1
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	3714      	adds	r7, #20
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f4:	4770      	bx	lr

0801b4f6 <TM_FATFS_SPI_FLASH_disk_read>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 801b4f6:	b480      	push	{r7}
 801b4f8:	b085      	sub	sp, #20
 801b4fa:	af00      	add	r7, sp, #0
 801b4fc:	60f8      	str	r0, [r7, #12]
 801b4fe:	60b9      	str	r1, [r7, #8]
 801b500:	607a      	str	r2, [r7, #4]
 801b502:	2301      	movs	r3, #1
 801b504:	4618      	mov	r0, r3
 801b506:	3714      	adds	r7, #20
 801b508:	46bd      	mov	sp, r7
 801b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b50e:	4770      	bx	lr

0801b510 <TM_FATFS_USB_disk_write>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_USB_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 801b510:	b480      	push	{r7}
 801b512:	b085      	sub	sp, #20
 801b514:	af00      	add	r7, sp, #0
 801b516:	60f8      	str	r0, [r7, #12]
 801b518:	60b9      	str	r1, [r7, #8]
 801b51a:	607a      	str	r2, [r7, #4]
 801b51c:	2301      	movs	r3, #1
 801b51e:	4618      	mov	r0, r3
 801b520:	3714      	adds	r7, #20
 801b522:	46bd      	mov	sp, r7
 801b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b528:	4770      	bx	lr

0801b52a <TM_FATFS_SDRAM_disk_write>:
__weak DRESULT TM_FATFS_SDRAM_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 801b52a:	b480      	push	{r7}
 801b52c:	b085      	sub	sp, #20
 801b52e:	af00      	add	r7, sp, #0
 801b530:	60f8      	str	r0, [r7, #12]
 801b532:	60b9      	str	r1, [r7, #8]
 801b534:	607a      	str	r2, [r7, #4]
 801b536:	2301      	movs	r3, #1
 801b538:	4618      	mov	r0, r3
 801b53a:	3714      	adds	r7, #20
 801b53c:	46bd      	mov	sp, r7
 801b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b542:	4770      	bx	lr

0801b544 <TM_FATFS_SPI_FLASH_disk_write>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 801b544:	b480      	push	{r7}
 801b546:	b085      	sub	sp, #20
 801b548:	af00      	add	r7, sp, #0
 801b54a:	60f8      	str	r0, [r7, #12]
 801b54c:	60b9      	str	r1, [r7, #8]
 801b54e:	607a      	str	r2, [r7, #4]
 801b550:	2301      	movs	r3, #1
 801b552:	4618      	mov	r0, r3
 801b554:	3714      	adds	r7, #20
 801b556:	46bd      	mov	sp, r7
 801b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b55c:	4770      	bx	lr

0801b55e <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 801b55e:	b480      	push	{r7}
 801b560:	b083      	sub	sp, #12
 801b562:	af00      	add	r7, sp, #0
 801b564:	6078      	str	r0, [r7, #4]
 801b566:	460b      	mov	r3, r1
 801b568:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	881b      	ldrh	r3, [r3, #0]
 801b56e:	b29b      	uxth	r3, r3
 801b570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b574:	2b00      	cmp	r3, #0
 801b576:	d101      	bne.n	801b57c <TM_SPI_Send+0x1e>
 801b578:	2300      	movs	r3, #0
 801b57a:	e025      	b.n	801b5c8 <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 801b57c:	bf00      	nop
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	891b      	ldrh	r3, [r3, #8]
 801b582:	b29b      	uxth	r3, r3
 801b584:	f003 0303 	and.w	r3, r3, #3
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d0f8      	beq.n	801b57e <TM_SPI_Send+0x20>
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	891b      	ldrh	r3, [r3, #8]
 801b590:	b29b      	uxth	r3, r3
 801b592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b596:	2b00      	cmp	r3, #0
 801b598:	d1f1      	bne.n	801b57e <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 801b59a:	78fb      	ldrb	r3, [r7, #3]
 801b59c:	b29a      	uxth	r2, r3
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 801b5a2:	bf00      	nop
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	891b      	ldrh	r3, [r3, #8]
 801b5a8:	b29b      	uxth	r3, r3
 801b5aa:	f003 0303 	and.w	r3, r3, #3
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d0f8      	beq.n	801b5a4 <TM_SPI_Send+0x46>
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	891b      	ldrh	r3, [r3, #8]
 801b5b6:	b29b      	uxth	r3, r3
 801b5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d1f1      	bne.n	801b5a4 <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	899b      	ldrh	r3, [r3, #12]
 801b5c4:	b29b      	uxth	r3, r3
 801b5c6:	b2db      	uxtb	r3, r3
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	370c      	adds	r7, #12
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5d2:	4770      	bx	lr

0801b5d4 <init_spi>:

static BYTE TM_FATFS_SD_CardType;			/* Card type flags */

/* Initialize MMC interface */
static void init_spi (void)
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	af00      	add	r7, sp, #0
	/* Init SPI */
	TM_SPI_Init(FATFS_SPI, FATFS_SPI_PINSPACK);
 801b5d8:	2101      	movs	r1, #1
 801b5da:	4805      	ldr	r0, [pc, #20]	; (801b5f0 <init_spi+0x1c>)
 801b5dc:	f002 ffe0 	bl	801e5a0 <TM_SPI_Init>
	
	/* Set CS high */
	FATFS_CS_HIGH;
 801b5e0:	4b04      	ldr	r3, [pc, #16]	; (801b5f4 <init_spi+0x20>)
 801b5e2:	2208      	movs	r2, #8
 801b5e4:	831a      	strh	r2, [r3, #24]
	
	/* Wait for stable */
	delay_1ms(10);
 801b5e6:	200a      	movs	r0, #10
 801b5e8:	f7fd fb72 	bl	8018cd0 <delay_1ms>
}
 801b5ec:	bf00      	nop
 801b5ee:	bd80      	pop	{r7, pc}
 801b5f0:	40003800 	.word	0x40003800
 801b5f4:	40020c00 	.word	0x40020c00

0801b5f8 <rcvr_spi_multi>:
/* Receive multiple byte */
static void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b082      	sub	sp, #8
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
 801b600:	6039      	str	r1, [r7, #0]
	/* Read multiple bytes, send 0xFF as dummy */
	TM_SPI_ReadMulti(FATFS_SPI, buff, 0xFF, btr);
 801b602:	683b      	ldr	r3, [r7, #0]
 801b604:	22ff      	movs	r2, #255	; 0xff
 801b606:	6879      	ldr	r1, [r7, #4]
 801b608:	4803      	ldr	r0, [pc, #12]	; (801b618 <rcvr_spi_multi+0x20>)
 801b60a:	f003 f84c 	bl	801e6a6 <TM_SPI_ReadMulti>
}
 801b60e:	bf00      	nop
 801b610:	3708      	adds	r7, #8
 801b612:	46bd      	mov	sp, r7
 801b614:	bd80      	pop	{r7, pc}
 801b616:	bf00      	nop
 801b618:	40003800 	.word	0x40003800

0801b61c <xmit_spi_multi>:
/* Send multiple byte */
static void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b082      	sub	sp, #8
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
 801b624:	6039      	str	r1, [r7, #0]
	/* Write multiple bytes */
	TM_SPI_WriteMulti(FATFS_SPI, (uint8_t *)buff, btx);
 801b626:	683a      	ldr	r2, [r7, #0]
 801b628:	6879      	ldr	r1, [r7, #4]
 801b62a:	4803      	ldr	r0, [pc, #12]	; (801b638 <xmit_spi_multi+0x1c>)
 801b62c:	f002 fff6 	bl	801e61c <TM_SPI_WriteMulti>
}
 801b630:	bf00      	nop
 801b632:	3708      	adds	r7, #8
 801b634:	46bd      	mov	sp, r7
 801b636:	bd80      	pop	{r7, pc}
 801b638:	40003800 	.word	0x40003800

0801b63c <wait_ready>:
/*-----------------------------------------------------------------------*/

static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 801b63c:	b580      	push	{r7, lr}
 801b63e:	b084      	sub	sp, #16
 801b640:	af00      	add	r7, sp, #0
 801b642:	6078      	str	r0, [r7, #4]
	BYTE d;

	/* Set down counter */
	set_Downcounter(wt);
 801b644:	6878      	ldr	r0, [r7, #4]
 801b646:	f7fd fb5d 	bl	8018d04 <set_Downcounter>
	
	do {
		d = TM_SPI_Send(FATFS_SPI, 0xFF);
 801b64a:	21ff      	movs	r1, #255	; 0xff
 801b64c:	480b      	ldr	r0, [pc, #44]	; (801b67c <wait_ready+0x40>)
 801b64e:	f7ff ff86 	bl	801b55e <TM_SPI_Send>
 801b652:	4603      	mov	r3, r0
 801b654:	73fb      	strb	r3, [r7, #15]
	} while(d != 0xFF && check_Downcounter());	/* Wait for card goes ready or timeout */
 801b656:	7bfb      	ldrb	r3, [r7, #15]
 801b658:	2bff      	cmp	r3, #255	; 0xff
 801b65a:	d004      	beq.n	801b666 <wait_ready+0x2a>
 801b65c:	f7fd fb62 	bl	8018d24 <check_Downcounter>
 801b660:	4603      	mov	r3, r0
 801b662:	2b00      	cmp	r3, #0
 801b664:	d1f1      	bne.n	801b64a <wait_ready+0xe>
	if (d == 0xFF) {
		FATFS_DEBUG_SEND_USART("wait_ready: OK");
	} else {
		FATFS_DEBUG_SEND_USART("wait_ready: timeout");
	}
	return (d == 0xFF) ? 1 : 0;
 801b666:	7bfb      	ldrb	r3, [r7, #15]
 801b668:	2bff      	cmp	r3, #255	; 0xff
 801b66a:	bf0c      	ite	eq
 801b66c:	2301      	moveq	r3, #1
 801b66e:	2300      	movne	r3, #0
 801b670:	b2db      	uxtb	r3, r3
}
 801b672:	4618      	mov	r0, r3
 801b674:	3710      	adds	r7, #16
 801b676:	46bd      	mov	sp, r7
 801b678:	bd80      	pop	{r7, pc}
 801b67a:	bf00      	nop
 801b67c:	40003800 	.word	0x40003800

0801b680 <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void deselect (void)
{
 801b680:	b580      	push	{r7, lr}
 801b682:	af00      	add	r7, sp, #0
	FATFS_CS_HIGH;			/* CS = H */
 801b684:	4b04      	ldr	r3, [pc, #16]	; (801b698 <deselect+0x18>)
 801b686:	2208      	movs	r2, #8
 801b688:	831a      	strh	r2, [r3, #24]
	TM_SPI_Send(FATFS_SPI, 0xFF);			/* Dummy clock (force DO hi-z for multiple slave SPI) */
 801b68a:	21ff      	movs	r1, #255	; 0xff
 801b68c:	4803      	ldr	r0, [pc, #12]	; (801b69c <deselect+0x1c>)
 801b68e:	f7ff ff66 	bl	801b55e <TM_SPI_Send>
	FATFS_DEBUG_SEND_USART("deselect: ok");
}
 801b692:	bf00      	nop
 801b694:	bd80      	pop	{r7, pc}
 801b696:	bf00      	nop
 801b698:	40020c00 	.word	0x40020c00
 801b69c:	40003800 	.word	0x40003800

0801b6a0 <select_km>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int select_km (void)	/* 1:OK, 0:Timeout */
{
 801b6a0:	b580      	push	{r7, lr}
 801b6a2:	af00      	add	r7, sp, #0
	FATFS_CS_LOW;
 801b6a4:	4b0a      	ldr	r3, [pc, #40]	; (801b6d0 <select_km+0x30>)
 801b6a6:	2208      	movs	r2, #8
 801b6a8:	835a      	strh	r2, [r3, #26]
	TM_SPI_Send(FATFS_SPI, 0xFF);	/* Dummy clock (force DO enabled) */
 801b6aa:	21ff      	movs	r1, #255	; 0xff
 801b6ac:	4809      	ldr	r0, [pc, #36]	; (801b6d4 <select_km+0x34>)
 801b6ae:	f7ff ff56 	bl	801b55e <TM_SPI_Send>

	if (wait_ready(500)) {
 801b6b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801b6b6:	f7ff ffc1 	bl	801b63c <wait_ready>
 801b6ba:	4603      	mov	r3, r0
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d001      	beq.n	801b6c4 <select_km+0x24>
		FATFS_DEBUG_SEND_USART("select: OK");
		return 1;	/* OK */
 801b6c0:	2301      	movs	r3, #1
 801b6c2:	e002      	b.n	801b6ca <select_km+0x2a>
	}
	FATFS_DEBUG_SEND_USART("select: no");
	deselect();
 801b6c4:	f7ff ffdc 	bl	801b680 <deselect>
	return 0;	/* Timeout */
 801b6c8:	2300      	movs	r3, #0
}
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	bd80      	pop	{r7, pc}
 801b6ce:	bf00      	nop
 801b6d0:	40020c00 	.word	0x40020c00
 801b6d4:	40003800 	.word	0x40003800

0801b6d8 <rcvr_datablock>:

static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 801b6d8:	b580      	push	{r7, lr}
 801b6da:	b084      	sub	sp, #16
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	6078      	str	r0, [r7, #4]
 801b6e0:	6039      	str	r1, [r7, #0]
	BYTE token;
	
	//Timer1 = 200;
	
	set_Downcounter(200);
 801b6e2:	20c8      	movs	r0, #200	; 0xc8
 801b6e4:	f7fd fb0e 	bl	8018d04 <set_Downcounter>
	do {							// Wait for DataStart token in timeout of 200ms 
		token = TM_SPI_Send(FATFS_SPI, 0xFF);
 801b6e8:	21ff      	movs	r1, #255	; 0xff
 801b6ea:	4811      	ldr	r0, [pc, #68]	; (801b730 <rcvr_datablock+0x58>)
 801b6ec:	f7ff ff37 	bl	801b55e <TM_SPI_Send>
 801b6f0:	4603      	mov	r3, r0
 801b6f2:	73fb      	strb	r3, [r7, #15]
		// This loop will take a time. Insert rot_rdq() here for multitask envilonment. 
	} while ((token == 0xFF) && check_Downcounter());
 801b6f4:	7bfb      	ldrb	r3, [r7, #15]
 801b6f6:	2bff      	cmp	r3, #255	; 0xff
 801b6f8:	d104      	bne.n	801b704 <rcvr_datablock+0x2c>
 801b6fa:	f7fd fb13 	bl	8018d24 <check_Downcounter>
 801b6fe:	4603      	mov	r3, r0
 801b700:	2b00      	cmp	r3, #0
 801b702:	d1f1      	bne.n	801b6e8 <rcvr_datablock+0x10>
	if (token != 0xFE) {
 801b704:	7bfb      	ldrb	r3, [r7, #15]
 801b706:	2bfe      	cmp	r3, #254	; 0xfe
 801b708:	d001      	beq.n	801b70e <rcvr_datablock+0x36>
		FATFS_DEBUG_SEND_USART("rcvr_datablock: token != 0xFE");
		return 0;		// Function fails if invalid DataStart token or timeout 
 801b70a:	2300      	movs	r3, #0
 801b70c:	e00c      	b.n	801b728 <rcvr_datablock+0x50>
	}

	rcvr_spi_multi(buff, btr);		// Store trailing data to the buffer 
 801b70e:	6839      	ldr	r1, [r7, #0]
 801b710:	6878      	ldr	r0, [r7, #4]
 801b712:	f7ff ff71 	bl	801b5f8 <rcvr_spi_multi>
	TM_SPI_Send(FATFS_SPI, 0xFF); TM_SPI_Send(FATFS_SPI, 0xFF);			// Discard CRC 
 801b716:	21ff      	movs	r1, #255	; 0xff
 801b718:	4805      	ldr	r0, [pc, #20]	; (801b730 <rcvr_datablock+0x58>)
 801b71a:	f7ff ff20 	bl	801b55e <TM_SPI_Send>
 801b71e:	21ff      	movs	r1, #255	; 0xff
 801b720:	4803      	ldr	r0, [pc, #12]	; (801b730 <rcvr_datablock+0x58>)
 801b722:	f7ff ff1c 	bl	801b55e <TM_SPI_Send>
	return 1;						// Function succeeded 
 801b726:	2301      	movs	r3, #1
}
 801b728:	4618      	mov	r0, r3
 801b72a:	3710      	adds	r7, #16
 801b72c:	46bd      	mov	sp, r7
 801b72e:	bd80      	pop	{r7, pc}
 801b730:	40003800 	.word	0x40003800

0801b734 <xmit_datablock>:
#if _USE_WRITE
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 801b734:	b580      	push	{r7, lr}
 801b736:	b084      	sub	sp, #16
 801b738:	af00      	add	r7, sp, #0
 801b73a:	6078      	str	r0, [r7, #4]
 801b73c:	460b      	mov	r3, r1
 801b73e:	70fb      	strb	r3, [r7, #3]
	BYTE resp;
	
	FATFS_DEBUG_SEND_USART("xmit_datablock: inside");

	if (!wait_ready(500)) {
 801b740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801b744:	f7ff ff7a 	bl	801b63c <wait_ready>
 801b748:	4603      	mov	r3, r0
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d101      	bne.n	801b752 <xmit_datablock+0x1e>
		FATFS_DEBUG_SEND_USART("xmit_datablock: not ready");
		return 0;		/* Wait for card ready */
 801b74e:	2300      	movs	r3, #0
 801b750:	e022      	b.n	801b798 <xmit_datablock+0x64>
	}
	FATFS_DEBUG_SEND_USART("xmit_datablock: ready");

	TM_SPI_Send(FATFS_SPI, token);					/* Send token */
 801b752:	78fb      	ldrb	r3, [r7, #3]
 801b754:	4619      	mov	r1, r3
 801b756:	4812      	ldr	r0, [pc, #72]	; (801b7a0 <xmit_datablock+0x6c>)
 801b758:	f7ff ff01 	bl	801b55e <TM_SPI_Send>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 801b75c:	78fb      	ldrb	r3, [r7, #3]
 801b75e:	2bfd      	cmp	r3, #253	; 0xfd
 801b760:	d019      	beq.n	801b796 <xmit_datablock+0x62>
		xmit_spi_multi(buff, 512);		/* Data */
 801b762:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b766:	6878      	ldr	r0, [r7, #4]
 801b768:	f7ff ff58 	bl	801b61c <xmit_spi_multi>
		TM_SPI_Send(FATFS_SPI, 0xFF); TM_SPI_Send(FATFS_SPI, 0xFF);	/* Dummy CRC */
 801b76c:	21ff      	movs	r1, #255	; 0xff
 801b76e:	480c      	ldr	r0, [pc, #48]	; (801b7a0 <xmit_datablock+0x6c>)
 801b770:	f7ff fef5 	bl	801b55e <TM_SPI_Send>
 801b774:	21ff      	movs	r1, #255	; 0xff
 801b776:	480a      	ldr	r0, [pc, #40]	; (801b7a0 <xmit_datablock+0x6c>)
 801b778:	f7ff fef1 	bl	801b55e <TM_SPI_Send>

		resp = TM_SPI_Send(FATFS_SPI, 0xFF);				/* Receive data resp */
 801b77c:	21ff      	movs	r1, #255	; 0xff
 801b77e:	4808      	ldr	r0, [pc, #32]	; (801b7a0 <xmit_datablock+0x6c>)
 801b780:	f7ff feed 	bl	801b55e <TM_SPI_Send>
 801b784:	4603      	mov	r3, r0
 801b786:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05)		/* Function fails if the data packet was not accepted */
 801b788:	7bfb      	ldrb	r3, [r7, #15]
 801b78a:	f003 031f 	and.w	r3, r3, #31
 801b78e:	2b05      	cmp	r3, #5
 801b790:	d001      	beq.n	801b796 <xmit_datablock+0x62>
			return 0;
 801b792:	2300      	movs	r3, #0
 801b794:	e000      	b.n	801b798 <xmit_datablock+0x64>
	}
	return 1;
 801b796:	2301      	movs	r3, #1
}
 801b798:	4618      	mov	r0, r3
 801b79a:	3710      	adds	r7, #16
 801b79c:	46bd      	mov	sp, r7
 801b79e:	bd80      	pop	{r7, pc}
 801b7a0:	40003800 	.word	0x40003800

0801b7a4 <send_cmd>:

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	b084      	sub	sp, #16
 801b7a8:	af00      	add	r7, sp, #0
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	6039      	str	r1, [r7, #0]
 801b7ae:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;
	
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 801b7b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	da0e      	bge.n	801b7d6 <send_cmd+0x32>
		cmd &= 0x7F;
 801b7b8:	79fb      	ldrb	r3, [r7, #7]
 801b7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b7be:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 801b7c0:	2100      	movs	r1, #0
 801b7c2:	2037      	movs	r0, #55	; 0x37
 801b7c4:	f7ff ffee 	bl	801b7a4 <send_cmd>
 801b7c8:	4603      	mov	r3, r0
 801b7ca:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 801b7cc:	7bbb      	ldrb	r3, [r7, #14]
 801b7ce:	2b01      	cmp	r3, #1
 801b7d0:	d901      	bls.n	801b7d6 <send_cmd+0x32>
 801b7d2:	7bbb      	ldrb	r3, [r7, #14]
 801b7d4:	e059      	b.n	801b88a <send_cmd+0xe6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 801b7d6:	79fb      	ldrb	r3, [r7, #7]
 801b7d8:	2b0c      	cmp	r3, #12
 801b7da:	d008      	beq.n	801b7ee <send_cmd+0x4a>
		deselect();
 801b7dc:	f7ff ff50 	bl	801b680 <deselect>
		if (!select_km()) return 0xFF;
 801b7e0:	f7ff ff5e 	bl	801b6a0 <select_km>
 801b7e4:	4603      	mov	r3, r0
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d101      	bne.n	801b7ee <send_cmd+0x4a>
 801b7ea:	23ff      	movs	r3, #255	; 0xff
 801b7ec:	e04d      	b.n	801b88a <send_cmd+0xe6>
	}

	/* Send command packet */
	TM_SPI_Send(FATFS_SPI, 0x40 | cmd);				/* Start + command index */
 801b7ee:	79fb      	ldrb	r3, [r7, #7]
 801b7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b7f4:	b2db      	uxtb	r3, r3
 801b7f6:	4619      	mov	r1, r3
 801b7f8:	4826      	ldr	r0, [pc, #152]	; (801b894 <send_cmd+0xf0>)
 801b7fa:	f7ff feb0 	bl	801b55e <TM_SPI_Send>
	TM_SPI_Send(FATFS_SPI, (BYTE)(arg >> 24));		/* Argument[31..24] */
 801b7fe:	683b      	ldr	r3, [r7, #0]
 801b800:	0e1b      	lsrs	r3, r3, #24
 801b802:	b2db      	uxtb	r3, r3
 801b804:	4619      	mov	r1, r3
 801b806:	4823      	ldr	r0, [pc, #140]	; (801b894 <send_cmd+0xf0>)
 801b808:	f7ff fea9 	bl	801b55e <TM_SPI_Send>
	TM_SPI_Send(FATFS_SPI, (BYTE)(arg >> 16));		/* Argument[23..16] */
 801b80c:	683b      	ldr	r3, [r7, #0]
 801b80e:	0c1b      	lsrs	r3, r3, #16
 801b810:	b2db      	uxtb	r3, r3
 801b812:	4619      	mov	r1, r3
 801b814:	481f      	ldr	r0, [pc, #124]	; (801b894 <send_cmd+0xf0>)
 801b816:	f7ff fea2 	bl	801b55e <TM_SPI_Send>
	TM_SPI_Send(FATFS_SPI, (BYTE)(arg >> 8));		/* Argument[15..8] */
 801b81a:	683b      	ldr	r3, [r7, #0]
 801b81c:	0a1b      	lsrs	r3, r3, #8
 801b81e:	b2db      	uxtb	r3, r3
 801b820:	4619      	mov	r1, r3
 801b822:	481c      	ldr	r0, [pc, #112]	; (801b894 <send_cmd+0xf0>)
 801b824:	f7ff fe9b 	bl	801b55e <TM_SPI_Send>
	TM_SPI_Send(FATFS_SPI, (BYTE)arg);				/* Argument[7..0] */
 801b828:	683b      	ldr	r3, [r7, #0]
 801b82a:	b2db      	uxtb	r3, r3
 801b82c:	4619      	mov	r1, r3
 801b82e:	4819      	ldr	r0, [pc, #100]	; (801b894 <send_cmd+0xf0>)
 801b830:	f7ff fe95 	bl	801b55e <TM_SPI_Send>
	n = 0x01;										/* Dummy CRC + Stop */
 801b834:	2301      	movs	r3, #1
 801b836:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;						/* Valid CRC for CMD0(0) */
 801b838:	79fb      	ldrb	r3, [r7, #7]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d101      	bne.n	801b842 <send_cmd+0x9e>
 801b83e:	2395      	movs	r3, #149	; 0x95
 801b840:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;						/* Valid CRC for CMD8(0x1AA) */
 801b842:	79fb      	ldrb	r3, [r7, #7]
 801b844:	2b08      	cmp	r3, #8
 801b846:	d101      	bne.n	801b84c <send_cmd+0xa8>
 801b848:	2387      	movs	r3, #135	; 0x87
 801b84a:	73fb      	strb	r3, [r7, #15]
	TM_SPI_Send(FATFS_SPI, n);
 801b84c:	7bfb      	ldrb	r3, [r7, #15]
 801b84e:	4619      	mov	r1, r3
 801b850:	4810      	ldr	r0, [pc, #64]	; (801b894 <send_cmd+0xf0>)
 801b852:	f7ff fe84 	bl	801b55e <TM_SPI_Send>

	/* Receive command resp */
	if (cmd == CMD12) {
 801b856:	79fb      	ldrb	r3, [r7, #7]
 801b858:	2b0c      	cmp	r3, #12
 801b85a:	d103      	bne.n	801b864 <send_cmd+0xc0>
		TM_SPI_Send(FATFS_SPI, 0xFF);					/* Diacard following one byte when CMD12 */
 801b85c:	21ff      	movs	r1, #255	; 0xff
 801b85e:	480d      	ldr	r0, [pc, #52]	; (801b894 <send_cmd+0xf0>)
 801b860:	f7ff fe7d 	bl	801b55e <TM_SPI_Send>
	}
	
	n = 10;								/* Wait for response (10 bytes max) */
 801b864:	230a      	movs	r3, #10
 801b866:	73fb      	strb	r3, [r7, #15]
	do {
		res = TM_SPI_Send(FATFS_SPI, 0xFF);
 801b868:	21ff      	movs	r1, #255	; 0xff
 801b86a:	480a      	ldr	r0, [pc, #40]	; (801b894 <send_cmd+0xf0>)
 801b86c:	f7ff fe77 	bl	801b55e <TM_SPI_Send>
 801b870:	4603      	mov	r3, r0
 801b872:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 801b874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	da05      	bge.n	801b888 <send_cmd+0xe4>
 801b87c:	7bfb      	ldrb	r3, [r7, #15]
 801b87e:	3b01      	subs	r3, #1
 801b880:	73fb      	strb	r3, [r7, #15]
 801b882:	7bfb      	ldrb	r3, [r7, #15]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d1ef      	bne.n	801b868 <send_cmd+0xc4>

	return res;							/* Return received response */
 801b888:	7bbb      	ldrb	r3, [r7, #14]
}
 801b88a:	4618      	mov	r0, r3
 801b88c:	3710      	adds	r7, #16
 801b88e:	46bd      	mov	sp, r7
 801b890:	bd80      	pop	{r7, pc}
 801b892:	bf00      	nop
 801b894:	40003800 	.word	0x40003800

0801b898 <TM_FATFS_InitPins>:

void TM_FATFS_InitPins(void) {
 801b898:	b580      	push	{r7, lr}
 801b89a:	b082      	sub	sp, #8
 801b89c:	af02      	add	r7, sp, #8
	/* CS pin */
	TM_GPIO_Init(FATFS_CS_PORT, FATFS_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
 801b89e:	2300      	movs	r3, #0
 801b8a0:	9301      	str	r3, [sp, #4]
 801b8a2:	2301      	movs	r3, #1
 801b8a4:	9300      	str	r3, [sp, #0]
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	2201      	movs	r2, #1
 801b8aa:	2108      	movs	r1, #8
 801b8ac:	4802      	ldr	r0, [pc, #8]	; (801b8b8 <TM_FATFS_InitPins+0x20>)
 801b8ae:	f002 fd50 	bl	801e352 <TM_GPIO_Init>

	/* Write protect pin */
#if FATFS_USE_WRITEPROTECT_PIN > 0
	TM_GPIO_Init(FATFS_USE_WRITEPROTECT_PIN_PORT, FATFS_USE_WRITEPROTECT_PIN_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
#endif
}
 801b8b2:	bf00      	nop
 801b8b4:	46bd      	mov	sp, r7
 801b8b6:	bd80      	pop	{r7, pc}
 801b8b8:	40020c00 	.word	0x40020c00

0801b8bc <TM_FATFS_Detect>:

uint8_t TM_FATFS_Detect(void) {
 801b8bc:	b480      	push	{r7}
 801b8be:	af00      	add	r7, sp, #0
#if FATFS_USE_DETECT_PIN > 0
	return !TM_GPIO_GetInputPinValue(FATFS_USE_DETECT_PIN_PORT, FATFS_USE_DETECT_PIN_PIN);
#else
	return 1;
 801b8c0:	2301      	movs	r3, #1
#endif
}
 801b8c2:	4618      	mov	r0, r3
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ca:	4770      	bx	lr

0801b8cc <TM_FATFS_WriteEnabled>:

uint8_t TM_FATFS_WriteEnabled(void) {
 801b8cc:	b480      	push	{r7}
 801b8ce:	af00      	add	r7, sp, #0
#if FATFS_USE_WRITEPROTECT_PIN > 0
	return !TM_GPIO_GetInputPinValue(FATFS_USE_WRITEPROTECT_PIN_PORT, FATFS_USE_WRITEPROTECT_PIN_PIN);
#else
	return 1;
 801b8d0:	2301      	movs	r3, #1
#endif	
}
 801b8d2:	4618      	mov	r0, r3
 801b8d4:	46bd      	mov	sp, r7
 801b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8da:	4770      	bx	lr

0801b8dc <TM_FATFS_SD_disk_initialize>:

DSTATUS TM_FATFS_SD_disk_initialize (void) {
 801b8dc:	b590      	push	{r4, r7, lr}
 801b8de:	b083      	sub	sp, #12
 801b8e0:	af00      	add	r7, sp, #0
	BYTE n, cmd, ty, ocr[4];
	
	//Initialize CS pin
	TM_FATFS_InitPins();
 801b8e2:	f7ff ffd9 	bl	801b898 <TM_FATFS_InitPins>
	init_spi();
 801b8e6:	f7ff fe75 	bl	801b5d4 <init_spi>
	
	if (!TM_FATFS_Detect()) {
 801b8ea:	f7ff ffe7 	bl	801b8bc <TM_FATFS_Detect>
 801b8ee:	4603      	mov	r3, r0
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d101      	bne.n	801b8f8 <TM_FATFS_SD_disk_initialize+0x1c>
		return STA_NODISK;
 801b8f4:	2302      	movs	r3, #2
 801b8f6:	e0d0      	b.n	801ba9a <TM_FATFS_SD_disk_initialize+0x1be>
	}
	for (n = 10; n; n--) {
 801b8f8:	230a      	movs	r3, #10
 801b8fa:	71fb      	strb	r3, [r7, #7]
 801b8fc:	e006      	b.n	801b90c <TM_FATFS_SD_disk_initialize+0x30>
		TM_SPI_Send(FATFS_SPI, 0xFF);
 801b8fe:	21ff      	movs	r1, #255	; 0xff
 801b900:	4868      	ldr	r0, [pc, #416]	; (801baa4 <TM_FATFS_SD_disk_initialize+0x1c8>)
 801b902:	f7ff fe2c 	bl	801b55e <TM_SPI_Send>
	for (n = 10; n; n--) {
 801b906:	79fb      	ldrb	r3, [r7, #7]
 801b908:	3b01      	subs	r3, #1
 801b90a:	71fb      	strb	r3, [r7, #7]
 801b90c:	79fb      	ldrb	r3, [r7, #7]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d1f5      	bne.n	801b8fe <TM_FATFS_SD_disk_initialize+0x22>
	}
	ty = 0;
 801b912:	2300      	movs	r3, #0
 801b914:	717b      	strb	r3, [r7, #5]
	if (send_cmd(CMD0, 0) == 1) {				/* Put the card SPI/Idle state */
 801b916:	2100      	movs	r1, #0
 801b918:	2000      	movs	r0, #0
 801b91a:	f7ff ff43 	bl	801b7a4 <send_cmd>
 801b91e:	4603      	mov	r3, r0
 801b920:	2b01      	cmp	r3, #1
 801b922:	f040 808d 	bne.w	801ba40 <TM_FATFS_SD_disk_initialize+0x164>
		set_Downcounter(1000);				/* Initialization timeout = 1 sec */
 801b926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b92a:	f7fd f9eb 	bl	8018d04 <set_Downcounter>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 801b92e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b932:	2008      	movs	r0, #8
 801b934:	f7ff ff36 	bl	801b7a4 <send_cmd>
 801b938:	4603      	mov	r3, r0
 801b93a:	2b01      	cmp	r3, #1
 801b93c:	d153      	bne.n	801b9e6 <TM_FATFS_SD_disk_initialize+0x10a>
			for (n = 0; n < 4; n++) {
 801b93e:	2300      	movs	r3, #0
 801b940:	71fb      	strb	r3, [r7, #7]
 801b942:	e00e      	b.n	801b962 <TM_FATFS_SD_disk_initialize+0x86>
				ocr[n] = TM_SPI_Send(FATFS_SPI, 0xFF);	/* Get 32 bit return value of R7 resp */
 801b944:	79fc      	ldrb	r4, [r7, #7]
 801b946:	21ff      	movs	r1, #255	; 0xff
 801b948:	4856      	ldr	r0, [pc, #344]	; (801baa4 <TM_FATFS_SD_disk_initialize+0x1c8>)
 801b94a:	f7ff fe08 	bl	801b55e <TM_SPI_Send>
 801b94e:	4603      	mov	r3, r0
 801b950:	461a      	mov	r2, r3
 801b952:	f107 0308 	add.w	r3, r7, #8
 801b956:	4423      	add	r3, r4
 801b958:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++) {
 801b95c:	79fb      	ldrb	r3, [r7, #7]
 801b95e:	3301      	adds	r3, #1
 801b960:	71fb      	strb	r3, [r7, #7]
 801b962:	79fb      	ldrb	r3, [r7, #7]
 801b964:	2b03      	cmp	r3, #3
 801b966:	d9ed      	bls.n	801b944 <TM_FATFS_SD_disk_initialize+0x68>
			}
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 801b968:	78bb      	ldrb	r3, [r7, #2]
 801b96a:	2b01      	cmp	r3, #1
 801b96c:	d168      	bne.n	801ba40 <TM_FATFS_SD_disk_initialize+0x164>
 801b96e:	78fb      	ldrb	r3, [r7, #3]
 801b970:	2baa      	cmp	r3, #170	; 0xaa
 801b972:	d165      	bne.n	801ba40 <TM_FATFS_SD_disk_initialize+0x164>
				while (check_Downcounter() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 801b974:	bf00      	nop
 801b976:	f7fd f9d5 	bl	8018d24 <check_Downcounter>
 801b97a:	4603      	mov	r3, r0
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d007      	beq.n	801b990 <TM_FATFS_SD_disk_initialize+0xb4>
 801b980:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801b984:	20a9      	movs	r0, #169	; 0xa9
 801b986:	f7ff ff0d 	bl	801b7a4 <send_cmd>
 801b98a:	4603      	mov	r3, r0
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d1f2      	bne.n	801b976 <TM_FATFS_SD_disk_initialize+0x9a>
				if (check_Downcounter() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 801b990:	f7fd f9c8 	bl	8018d24 <check_Downcounter>
 801b994:	4603      	mov	r3, r0
 801b996:	2b00      	cmp	r3, #0
 801b998:	d052      	beq.n	801ba40 <TM_FATFS_SD_disk_initialize+0x164>
 801b99a:	2100      	movs	r1, #0
 801b99c:	203a      	movs	r0, #58	; 0x3a
 801b99e:	f7ff ff01 	bl	801b7a4 <send_cmd>
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d14b      	bne.n	801ba40 <TM_FATFS_SD_disk_initialize+0x164>
					for (n = 0; n < 4; n++) {
 801b9a8:	2300      	movs	r3, #0
 801b9aa:	71fb      	strb	r3, [r7, #7]
 801b9ac:	e00e      	b.n	801b9cc <TM_FATFS_SD_disk_initialize+0xf0>
						ocr[n] = TM_SPI_Send(FATFS_SPI, 0xFF);
 801b9ae:	79fc      	ldrb	r4, [r7, #7]
 801b9b0:	21ff      	movs	r1, #255	; 0xff
 801b9b2:	483c      	ldr	r0, [pc, #240]	; (801baa4 <TM_FATFS_SD_disk_initialize+0x1c8>)
 801b9b4:	f7ff fdd3 	bl	801b55e <TM_SPI_Send>
 801b9b8:	4603      	mov	r3, r0
 801b9ba:	461a      	mov	r2, r3
 801b9bc:	f107 0308 	add.w	r3, r7, #8
 801b9c0:	4423      	add	r3, r4
 801b9c2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++) {
 801b9c6:	79fb      	ldrb	r3, [r7, #7]
 801b9c8:	3301      	adds	r3, #1
 801b9ca:	71fb      	strb	r3, [r7, #7]
 801b9cc:	79fb      	ldrb	r3, [r7, #7]
 801b9ce:	2b03      	cmp	r3, #3
 801b9d0:	d9ed      	bls.n	801b9ae <TM_FATFS_SD_disk_initialize+0xd2>
					}
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 801b9d2:	783b      	ldrb	r3, [r7, #0]
 801b9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d001      	beq.n	801b9e0 <TM_FATFS_SD_disk_initialize+0x104>
 801b9dc:	230c      	movs	r3, #12
 801b9de:	e000      	b.n	801b9e2 <TM_FATFS_SD_disk_initialize+0x106>
 801b9e0:	2304      	movs	r3, #4
 801b9e2:	717b      	strb	r3, [r7, #5]
 801b9e4:	e02c      	b.n	801ba40 <TM_FATFS_SD_disk_initialize+0x164>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 801b9e6:	2100      	movs	r1, #0
 801b9e8:	20a9      	movs	r0, #169	; 0xa9
 801b9ea:	f7ff fedb 	bl	801b7a4 <send_cmd>
 801b9ee:	4603      	mov	r3, r0
 801b9f0:	2b01      	cmp	r3, #1
 801b9f2:	d804      	bhi.n	801b9fe <TM_FATFS_SD_disk_initialize+0x122>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 801b9f4:	2302      	movs	r3, #2
 801b9f6:	717b      	strb	r3, [r7, #5]
 801b9f8:	23a9      	movs	r3, #169	; 0xa9
 801b9fa:	71bb      	strb	r3, [r7, #6]
 801b9fc:	e003      	b.n	801ba06 <TM_FATFS_SD_disk_initialize+0x12a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 801b9fe:	2301      	movs	r3, #1
 801ba00:	717b      	strb	r3, [r7, #5]
 801ba02:	2301      	movs	r3, #1
 801ba04:	71bb      	strb	r3, [r7, #6]
			}
			while (check_Downcounter() && send_cmd(cmd, 0));			/* Wait for end of initialization */
 801ba06:	bf00      	nop
 801ba08:	f7fd f98c 	bl	8018d24 <check_Downcounter>
 801ba0c:	4603      	mov	r3, r0
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d007      	beq.n	801ba22 <TM_FATFS_SD_disk_initialize+0x146>
 801ba12:	79bb      	ldrb	r3, [r7, #6]
 801ba14:	2100      	movs	r1, #0
 801ba16:	4618      	mov	r0, r3
 801ba18:	f7ff fec4 	bl	801b7a4 <send_cmd>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d1f2      	bne.n	801ba08 <TM_FATFS_SD_disk_initialize+0x12c>
			if (check_Downcounter() || send_cmd(CMD16, 512) != 0) {	/* Set block length: 512 */
 801ba22:	f7fd f97f 	bl	8018d24 <check_Downcounter>
 801ba26:	4603      	mov	r3, r0
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d107      	bne.n	801ba3c <TM_FATFS_SD_disk_initialize+0x160>
 801ba2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ba30:	2010      	movs	r0, #16
 801ba32:	f7ff feb7 	bl	801b7a4 <send_cmd>
 801ba36:	4603      	mov	r3, r0
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d001      	beq.n	801ba40 <TM_FATFS_SD_disk_initialize+0x164>
				ty = 0;
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	717b      	strb	r3, [r7, #5]
			}
		}
	}
	TM_FATFS_SD_CardType = ty;	/* Card type */
 801ba40:	4a19      	ldr	r2, [pc, #100]	; (801baa8 <TM_FATFS_SD_disk_initialize+0x1cc>)
 801ba42:	797b      	ldrb	r3, [r7, #5]
 801ba44:	7013      	strb	r3, [r2, #0]
	deselect();
 801ba46:	f7ff fe1b 	bl	801b680 <deselect>

	if (ty) {			/* OK */
 801ba4a:	797b      	ldrb	r3, [r7, #5]
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d008      	beq.n	801ba62 <TM_FATFS_SD_disk_initialize+0x186>
		TM_FATFS_SD_Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 801ba50:	4b16      	ldr	r3, [pc, #88]	; (801baac <TM_FATFS_SD_disk_initialize+0x1d0>)
 801ba52:	781b      	ldrb	r3, [r3, #0]
 801ba54:	b2db      	uxtb	r3, r3
 801ba56:	f023 0301 	bic.w	r3, r3, #1
 801ba5a:	b2da      	uxtb	r2, r3
 801ba5c:	4b13      	ldr	r3, [pc, #76]	; (801baac <TM_FATFS_SD_disk_initialize+0x1d0>)
 801ba5e:	701a      	strb	r2, [r3, #0]
 801ba60:	e002      	b.n	801ba68 <TM_FATFS_SD_disk_initialize+0x18c>
	} else {			/* Failed */
		TM_FATFS_SD_Stat = STA_NOINIT;
 801ba62:	4b12      	ldr	r3, [pc, #72]	; (801baac <TM_FATFS_SD_disk_initialize+0x1d0>)
 801ba64:	2201      	movs	r2, #1
 801ba66:	701a      	strb	r2, [r3, #0]
	}

	if (!TM_FATFS_WriteEnabled()) {
 801ba68:	f7ff ff30 	bl	801b8cc <TM_FATFS_WriteEnabled>
 801ba6c:	4603      	mov	r3, r0
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d108      	bne.n	801ba84 <TM_FATFS_SD_disk_initialize+0x1a8>
		TM_FATFS_SD_Stat |= STA_PROTECT;
 801ba72:	4b0e      	ldr	r3, [pc, #56]	; (801baac <TM_FATFS_SD_disk_initialize+0x1d0>)
 801ba74:	781b      	ldrb	r3, [r3, #0]
 801ba76:	b2db      	uxtb	r3, r3
 801ba78:	f043 0304 	orr.w	r3, r3, #4
 801ba7c:	b2da      	uxtb	r2, r3
 801ba7e:	4b0b      	ldr	r3, [pc, #44]	; (801baac <TM_FATFS_SD_disk_initialize+0x1d0>)
 801ba80:	701a      	strb	r2, [r3, #0]
 801ba82:	e007      	b.n	801ba94 <TM_FATFS_SD_disk_initialize+0x1b8>
	} else {
		TM_FATFS_SD_Stat &= ~STA_PROTECT;
 801ba84:	4b09      	ldr	r3, [pc, #36]	; (801baac <TM_FATFS_SD_disk_initialize+0x1d0>)
 801ba86:	781b      	ldrb	r3, [r3, #0]
 801ba88:	b2db      	uxtb	r3, r3
 801ba8a:	f023 0304 	bic.w	r3, r3, #4
 801ba8e:	b2da      	uxtb	r2, r3
 801ba90:	4b06      	ldr	r3, [pc, #24]	; (801baac <TM_FATFS_SD_disk_initialize+0x1d0>)
 801ba92:	701a      	strb	r2, [r3, #0]
	}
	
	return TM_FATFS_SD_Stat;
 801ba94:	4b05      	ldr	r3, [pc, #20]	; (801baac <TM_FATFS_SD_disk_initialize+0x1d0>)
 801ba96:	781b      	ldrb	r3, [r3, #0]
 801ba98:	b2db      	uxtb	r3, r3
}
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	370c      	adds	r7, #12
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	bd90      	pop	{r4, r7, pc}
 801baa2:	bf00      	nop
 801baa4:	40003800 	.word	0x40003800
 801baa8:	200027f8 	.word	0x200027f8
 801baac:	20001c18 	.word	0x20001c18

0801bab0 <TM_FATFS_SD_disk_status>:

/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS TM_FATFS_SD_disk_status (void) {
 801bab0:	b580      	push	{r7, lr}
 801bab2:	af00      	add	r7, sp, #0
	
	/* Check card detect pin if enabled */
	if (!TM_FATFS_Detect()) {
 801bab4:	f7ff ff02 	bl	801b8bc <TM_FATFS_Detect>
 801bab8:	4603      	mov	r3, r0
 801baba:	2b00      	cmp	r3, #0
 801babc:	d101      	bne.n	801bac2 <TM_FATFS_SD_disk_status+0x12>
		return STA_NOINIT;
 801babe:	2301      	movs	r3, #1
 801bac0:	e018      	b.n	801baf4 <TM_FATFS_SD_disk_status+0x44>
	}
	
	/* Check if write is enabled */
	if (!TM_FATFS_WriteEnabled()) {
 801bac2:	f7ff ff03 	bl	801b8cc <TM_FATFS_WriteEnabled>
 801bac6:	4603      	mov	r3, r0
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d108      	bne.n	801bade <TM_FATFS_SD_disk_status+0x2e>
		TM_FATFS_SD_Stat |= STA_PROTECT;
 801bacc:	4b0a      	ldr	r3, [pc, #40]	; (801baf8 <TM_FATFS_SD_disk_status+0x48>)
 801bace:	781b      	ldrb	r3, [r3, #0]
 801bad0:	b2db      	uxtb	r3, r3
 801bad2:	f043 0304 	orr.w	r3, r3, #4
 801bad6:	b2da      	uxtb	r2, r3
 801bad8:	4b07      	ldr	r3, [pc, #28]	; (801baf8 <TM_FATFS_SD_disk_status+0x48>)
 801bada:	701a      	strb	r2, [r3, #0]
 801badc:	e007      	b.n	801baee <TM_FATFS_SD_disk_status+0x3e>
	} else {
		TM_FATFS_SD_Stat &= ~STA_PROTECT;
 801bade:	4b06      	ldr	r3, [pc, #24]	; (801baf8 <TM_FATFS_SD_disk_status+0x48>)
 801bae0:	781b      	ldrb	r3, [r3, #0]
 801bae2:	b2db      	uxtb	r3, r3
 801bae4:	f023 0304 	bic.w	r3, r3, #4
 801bae8:	b2da      	uxtb	r2, r3
 801baea:	4b03      	ldr	r3, [pc, #12]	; (801baf8 <TM_FATFS_SD_disk_status+0x48>)
 801baec:	701a      	strb	r2, [r3, #0]
	}
	
	return TM_FATFS_SD_Stat;	/* Return disk status */
 801baee:	4b02      	ldr	r3, [pc, #8]	; (801baf8 <TM_FATFS_SD_disk_status+0x48>)
 801baf0:	781b      	ldrb	r3, [r3, #0]
 801baf2:	b2db      	uxtb	r3, r3
}
 801baf4:	4618      	mov	r0, r3
 801baf6:	bd80      	pop	{r7, pc}
 801baf8:	20001c18 	.word	0x20001c18

0801bafc <TM_FATFS_SD_disk_read>:
DRESULT TM_FATFS_SD_disk_read (
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 801bafc:	b580      	push	{r7, lr}
 801bafe:	b084      	sub	sp, #16
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	60f8      	str	r0, [r7, #12]
 801bb04:	60b9      	str	r1, [r7, #8]
 801bb06:	607a      	str	r2, [r7, #4]
	FATFS_DEBUG_SEND_USART("disk_read: inside");
	if (!TM_FATFS_Detect() || (TM_FATFS_SD_Stat & STA_NOINIT)) {
 801bb08:	f7ff fed8 	bl	801b8bc <TM_FATFS_Detect>
 801bb0c:	4603      	mov	r3, r0
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d006      	beq.n	801bb20 <TM_FATFS_SD_disk_read+0x24>
 801bb12:	4b29      	ldr	r3, [pc, #164]	; (801bbb8 <TM_FATFS_SD_disk_read+0xbc>)
 801bb14:	781b      	ldrb	r3, [r3, #0]
 801bb16:	b2db      	uxtb	r3, r3
 801bb18:	f003 0301 	and.w	r3, r3, #1
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d001      	beq.n	801bb24 <TM_FATFS_SD_disk_read+0x28>
		return RES_NOTRDY;
 801bb20:	2303      	movs	r3, #3
 801bb22:	e044      	b.n	801bbae <TM_FATFS_SD_disk_read+0xb2>
	}

	if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 801bb24:	4b25      	ldr	r3, [pc, #148]	; (801bbbc <TM_FATFS_SD_disk_read+0xc0>)
 801bb26:	781b      	ldrb	r3, [r3, #0]
 801bb28:	f003 0308 	and.w	r3, r3, #8
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d102      	bne.n	801bb36 <TM_FATFS_SD_disk_read+0x3a>
		sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 801bb30:	68bb      	ldr	r3, [r7, #8]
 801bb32:	025b      	lsls	r3, r3, #9
 801bb34:	60bb      	str	r3, [r7, #8]
	}

	if (count == 1) {	/* Single sector read */
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	2b01      	cmp	r3, #1
 801bb3a:	d111      	bne.n	801bb60 <TM_FATFS_SD_disk_read+0x64>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 801bb3c:	68b9      	ldr	r1, [r7, #8]
 801bb3e:	2011      	movs	r0, #17
 801bb40:	f7ff fe30 	bl	801b7a4 <send_cmd>
 801bb44:	4603      	mov	r3, r0
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d129      	bne.n	801bb9e <TM_FATFS_SD_disk_read+0xa2>
			&& rcvr_datablock(buff, 512))
 801bb4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801bb4e:	68f8      	ldr	r0, [r7, #12]
 801bb50:	f7ff fdc2 	bl	801b6d8 <rcvr_datablock>
 801bb54:	4603      	mov	r3, r0
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d021      	beq.n	801bb9e <TM_FATFS_SD_disk_read+0xa2>
			count = 0;
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	607b      	str	r3, [r7, #4]
 801bb5e:	e01e      	b.n	801bb9e <TM_FATFS_SD_disk_read+0xa2>
	} else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 801bb60:	68b9      	ldr	r1, [r7, #8]
 801bb62:	2012      	movs	r0, #18
 801bb64:	f7ff fe1e 	bl	801b7a4 <send_cmd>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d117      	bne.n	801bb9e <TM_FATFS_SD_disk_read+0xa2>
			do {
				if (!rcvr_datablock(buff, 512)) {
 801bb6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801bb72:	68f8      	ldr	r0, [r7, #12]
 801bb74:	f7ff fdb0 	bl	801b6d8 <rcvr_datablock>
 801bb78:	4603      	mov	r3, r0
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d00a      	beq.n	801bb94 <TM_FATFS_SD_disk_read+0x98>
					break;
				}
				buff += 512;
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801bb84:	60fb      	str	r3, [r7, #12]
			} while (--count);
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	3b01      	subs	r3, #1
 801bb8a:	607b      	str	r3, [r7, #4]
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d1ed      	bne.n	801bb6e <TM_FATFS_SD_disk_read+0x72>
 801bb92:	e000      	b.n	801bb96 <TM_FATFS_SD_disk_read+0x9a>
					break;
 801bb94:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 801bb96:	2100      	movs	r1, #0
 801bb98:	200c      	movs	r0, #12
 801bb9a:	f7ff fe03 	bl	801b7a4 <send_cmd>
		}
	}
	deselect();
 801bb9e:	f7ff fd6f 	bl	801b680 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	bf14      	ite	ne
 801bba8:	2301      	movne	r3, #1
 801bbaa:	2300      	moveq	r3, #0
 801bbac:	b2db      	uxtb	r3, r3
}
 801bbae:	4618      	mov	r0, r3
 801bbb0:	3710      	adds	r7, #16
 801bbb2:	46bd      	mov	sp, r7
 801bbb4:	bd80      	pop	{r7, pc}
 801bbb6:	bf00      	nop
 801bbb8:	20001c18 	.word	0x20001c18
 801bbbc:	200027f8 	.word	0x200027f8

0801bbc0 <TM_FATFS_SD_disk_write>:
DRESULT TM_FATFS_SD_disk_write (
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	b084      	sub	sp, #16
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	60f8      	str	r0, [r7, #12]
 801bbc8:	60b9      	str	r1, [r7, #8]
 801bbca:	607a      	str	r2, [r7, #4]
	FATFS_DEBUG_SEND_USART("disk_write: inside");
	if (!TM_FATFS_Detect()) {
 801bbcc:	f7ff fe76 	bl	801b8bc <TM_FATFS_Detect>
 801bbd0:	4603      	mov	r3, r0
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d101      	bne.n	801bbda <TM_FATFS_SD_disk_write+0x1a>
		return RES_ERROR;
 801bbd6:	2301      	movs	r3, #1
 801bbd8:	e06a      	b.n	801bcb0 <TM_FATFS_SD_disk_write+0xf0>
	}
	if (!TM_FATFS_WriteEnabled()) {
 801bbda:	f7ff fe77 	bl	801b8cc <TM_FATFS_WriteEnabled>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d101      	bne.n	801bbe8 <TM_FATFS_SD_disk_write+0x28>
		FATFS_DEBUG_SEND_USART("disk_write: Write protected!!! \n---------------------------------------------");
		return RES_WRPRT;
 801bbe4:	2302      	movs	r3, #2
 801bbe6:	e063      	b.n	801bcb0 <TM_FATFS_SD_disk_write+0xf0>
	}
	if (TM_FATFS_SD_Stat & STA_NOINIT) {
 801bbe8:	4b33      	ldr	r3, [pc, #204]	; (801bcb8 <TM_FATFS_SD_disk_write+0xf8>)
 801bbea:	781b      	ldrb	r3, [r3, #0]
 801bbec:	b2db      	uxtb	r3, r3
 801bbee:	f003 0301 	and.w	r3, r3, #1
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d001      	beq.n	801bbfa <TM_FATFS_SD_disk_write+0x3a>
		return RES_NOTRDY;	/* Check drive status */
 801bbf6:	2303      	movs	r3, #3
 801bbf8:	e05a      	b.n	801bcb0 <TM_FATFS_SD_disk_write+0xf0>
	}
	if (TM_FATFS_SD_Stat & STA_PROTECT) {
 801bbfa:	4b2f      	ldr	r3, [pc, #188]	; (801bcb8 <TM_FATFS_SD_disk_write+0xf8>)
 801bbfc:	781b      	ldrb	r3, [r3, #0]
 801bbfe:	b2db      	uxtb	r3, r3
 801bc00:	f003 0304 	and.w	r3, r3, #4
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d001      	beq.n	801bc0c <TM_FATFS_SD_disk_write+0x4c>
		return RES_WRPRT;	/* Check write protect */
 801bc08:	2302      	movs	r3, #2
 801bc0a:	e051      	b.n	801bcb0 <TM_FATFS_SD_disk_write+0xf0>
	}

	if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 801bc0c:	4b2b      	ldr	r3, [pc, #172]	; (801bcbc <TM_FATFS_SD_disk_write+0xfc>)
 801bc0e:	781b      	ldrb	r3, [r3, #0]
 801bc10:	f003 0308 	and.w	r3, r3, #8
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d102      	bne.n	801bc1e <TM_FATFS_SD_disk_write+0x5e>
		sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 801bc18:	68bb      	ldr	r3, [r7, #8]
 801bc1a:	025b      	lsls	r3, r3, #9
 801bc1c:	60bb      	str	r3, [r7, #8]
	}

	if (count == 1) {	/* Single sector write */
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	2b01      	cmp	r3, #1
 801bc22:	d110      	bne.n	801bc46 <TM_FATFS_SD_disk_write+0x86>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 801bc24:	68b9      	ldr	r1, [r7, #8]
 801bc26:	2018      	movs	r0, #24
 801bc28:	f7ff fdbc 	bl	801b7a4 <send_cmd>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d136      	bne.n	801bca0 <TM_FATFS_SD_disk_write+0xe0>
			&& xmit_datablock(buff, 0xFE))
 801bc32:	21fe      	movs	r1, #254	; 0xfe
 801bc34:	68f8      	ldr	r0, [r7, #12]
 801bc36:	f7ff fd7d 	bl	801b734 <xmit_datablock>
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d02f      	beq.n	801bca0 <TM_FATFS_SD_disk_write+0xe0>
			count = 0;
 801bc40:	2300      	movs	r3, #0
 801bc42:	607b      	str	r3, [r7, #4]
 801bc44:	e02c      	b.n	801bca0 <TM_FATFS_SD_disk_write+0xe0>
	} else {				/* Multiple sector write */
		if (TM_FATFS_SD_CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 801bc46:	4b1d      	ldr	r3, [pc, #116]	; (801bcbc <TM_FATFS_SD_disk_write+0xfc>)
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	f003 0306 	and.w	r3, r3, #6
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d003      	beq.n	801bc5a <TM_FATFS_SD_disk_write+0x9a>
 801bc52:	6879      	ldr	r1, [r7, #4]
 801bc54:	2097      	movs	r0, #151	; 0x97
 801bc56:	f7ff fda5 	bl	801b7a4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 801bc5a:	68b9      	ldr	r1, [r7, #8]
 801bc5c:	2019      	movs	r0, #25
 801bc5e:	f7ff fda1 	bl	801b7a4 <send_cmd>
 801bc62:	4603      	mov	r3, r0
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d11b      	bne.n	801bca0 <TM_FATFS_SD_disk_write+0xe0>
			do {
				if (!xmit_datablock(buff, 0xFC)) {
 801bc68:	21fc      	movs	r1, #252	; 0xfc
 801bc6a:	68f8      	ldr	r0, [r7, #12]
 801bc6c:	f7ff fd62 	bl	801b734 <xmit_datablock>
 801bc70:	4603      	mov	r3, r0
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d00a      	beq.n	801bc8c <TM_FATFS_SD_disk_write+0xcc>
					break;
				}
				buff += 512;
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801bc7c:	60fb      	str	r3, [r7, #12]
			} while (--count);
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	3b01      	subs	r3, #1
 801bc82:	607b      	str	r3, [r7, #4]
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d1ee      	bne.n	801bc68 <TM_FATFS_SD_disk_write+0xa8>
 801bc8a:	e000      	b.n	801bc8e <TM_FATFS_SD_disk_write+0xce>
					break;
 801bc8c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) {	/* STOP_TRAN token */
 801bc8e:	21fd      	movs	r1, #253	; 0xfd
 801bc90:	2000      	movs	r0, #0
 801bc92:	f7ff fd4f 	bl	801b734 <xmit_datablock>
 801bc96:	4603      	mov	r3, r0
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d101      	bne.n	801bca0 <TM_FATFS_SD_disk_write+0xe0>
				count = 1;
 801bc9c:	2301      	movs	r3, #1
 801bc9e:	607b      	str	r3, [r7, #4]
			}
		}
	}
	deselect();
 801bca0:	f7ff fcee 	bl	801b680 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	bf14      	ite	ne
 801bcaa:	2301      	movne	r3, #1
 801bcac:	2300      	moveq	r3, #0
 801bcae:	b2db      	uxtb	r3, r3
}
 801bcb0:	4618      	mov	r0, r3
 801bcb2:	3710      	adds	r7, #16
 801bcb4:	46bd      	mov	sp, r7
 801bcb6:	bd80      	pop	{r7, pc}
 801bcb8:	20001c18 	.word	0x20001c18
 801bcbc:	200027f8 	.word	0x200027f8

0801bcc0 <TM_FATFS_SD_disk_ioctl>:
#if _USE_IOCTL
DRESULT TM_FATFS_SD_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801bcc0:	b580      	push	{r7, lr}
 801bcc2:	b08c      	sub	sp, #48	; 0x30
 801bcc4:	af00      	add	r7, sp, #0
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	6039      	str	r1, [r7, #0]
 801bcca:	71fb      	strb	r3, [r7, #7]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (TM_FATFS_SD_Stat & STA_NOINIT) {
 801bccc:	4bb3      	ldr	r3, [pc, #716]	; (801bf9c <TM_FATFS_SD_disk_ioctl+0x2dc>)
 801bcce:	781b      	ldrb	r3, [r3, #0]
 801bcd0:	b2db      	uxtb	r3, r3
 801bcd2:	f003 0301 	and.w	r3, r3, #1
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d001      	beq.n	801bcde <TM_FATFS_SD_disk_ioctl+0x1e>
		return RES_NOTRDY;	/* Check if drive is ready */
 801bcda:	2303      	movs	r3, #3
 801bcdc:	e159      	b.n	801bf92 <TM_FATFS_SD_disk_ioctl+0x2d2>
	}
	if (!TM_FATFS_Detect()) {
 801bcde:	f7ff fded 	bl	801b8bc <TM_FATFS_Detect>
 801bce2:	4603      	mov	r3, r0
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d101      	bne.n	801bcec <TM_FATFS_SD_disk_ioctl+0x2c>
		return RES_NOTRDY;
 801bce8:	2303      	movs	r3, #3
 801bcea:	e152      	b.n	801bf92 <TM_FATFS_SD_disk_ioctl+0x2d2>
	}

	res = RES_ERROR;
 801bcec:	2301      	movs	r3, #1
 801bcee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 801bcf2:	79fb      	ldrb	r3, [r7, #7]
 801bcf4:	2b04      	cmp	r3, #4
 801bcf6:	f200 8137 	bhi.w	801bf68 <TM_FATFS_SD_disk_ioctl+0x2a8>
 801bcfa:	a201      	add	r2, pc, #4	; (adr r2, 801bd00 <TM_FATFS_SD_disk_ioctl+0x40>)
 801bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd00:	0801bd15 	.word	0x0801bd15
 801bd04:	0801bd29 	.word	0x0801bd29
 801bd08:	0801bf69 	.word	0x0801bf69
 801bd0c:	0801bdd5 	.word	0x0801bdd5
 801bd10:	0801becf 	.word	0x0801becf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (select_km()) res = RES_OK;
 801bd14:	f7ff fcc4 	bl	801b6a0 <select_km>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	f000 8128 	beq.w	801bf70 <TM_FATFS_SD_disk_ioctl+0x2b0>
 801bd20:	2300      	movs	r3, #0
 801bd22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 801bd26:	e123      	b.n	801bf70 <TM_FATFS_SD_disk_ioctl+0x2b0>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 801bd28:	2100      	movs	r1, #0
 801bd2a:	2009      	movs	r0, #9
 801bd2c:	f7ff fd3a 	bl	801b7a4 <send_cmd>
 801bd30:	4603      	mov	r3, r0
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	f040 811e 	bne.w	801bf74 <TM_FATFS_SD_disk_ioctl+0x2b4>
 801bd38:	f107 030c 	add.w	r3, r7, #12
 801bd3c:	2110      	movs	r1, #16
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f7ff fcca 	bl	801b6d8 <rcvr_datablock>
 801bd44:	4603      	mov	r3, r0
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	f000 8114 	beq.w	801bf74 <TM_FATFS_SD_disk_ioctl+0x2b4>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 801bd4c:	7b3b      	ldrb	r3, [r7, #12]
 801bd4e:	099b      	lsrs	r3, r3, #6
 801bd50:	b2db      	uxtb	r3, r3
 801bd52:	2b01      	cmp	r3, #1
 801bd54:	d111      	bne.n	801bd7a <TM_FATFS_SD_disk_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 801bd56:	7d7b      	ldrb	r3, [r7, #21]
 801bd58:	461a      	mov	r2, r3
 801bd5a:	7d3b      	ldrb	r3, [r7, #20]
 801bd5c:	021b      	lsls	r3, r3, #8
 801bd5e:	4413      	add	r3, r2
 801bd60:	461a      	mov	r2, r3
 801bd62:	7cfb      	ldrb	r3, [r7, #19]
 801bd64:	041b      	lsls	r3, r3, #16
 801bd66:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801bd6a:	4413      	add	r3, r2
 801bd6c:	3301      	adds	r3, #1
 801bd6e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 801bd70:	69fb      	ldr	r3, [r7, #28]
 801bd72:	029a      	lsls	r2, r3, #10
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	601a      	str	r2, [r3, #0]
 801bd78:	e028      	b.n	801bdcc <TM_FATFS_SD_disk_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801bd7a:	7c7b      	ldrb	r3, [r7, #17]
 801bd7c:	f003 030f 	and.w	r3, r3, #15
 801bd80:	b2da      	uxtb	r2, r3
 801bd82:	7dbb      	ldrb	r3, [r7, #22]
 801bd84:	09db      	lsrs	r3, r3, #7
 801bd86:	b2db      	uxtb	r3, r3
 801bd88:	4413      	add	r3, r2
 801bd8a:	b2da      	uxtb	r2, r3
 801bd8c:	7d7b      	ldrb	r3, [r7, #21]
 801bd8e:	005b      	lsls	r3, r3, #1
 801bd90:	b2db      	uxtb	r3, r3
 801bd92:	f003 0306 	and.w	r3, r3, #6
 801bd96:	b2db      	uxtb	r3, r3
 801bd98:	4413      	add	r3, r2
 801bd9a:	b2db      	uxtb	r3, r3
 801bd9c:	3302      	adds	r3, #2
 801bd9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 801bda2:	7d3b      	ldrb	r3, [r7, #20]
 801bda4:	099b      	lsrs	r3, r3, #6
 801bda6:	b2db      	uxtb	r3, r3
 801bda8:	461a      	mov	r2, r3
 801bdaa:	7cfb      	ldrb	r3, [r7, #19]
 801bdac:	009b      	lsls	r3, r3, #2
 801bdae:	441a      	add	r2, r3
 801bdb0:	7cbb      	ldrb	r3, [r7, #18]
 801bdb2:	029b      	lsls	r3, r3, #10
 801bdb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801bdb8:	4413      	add	r3, r2
 801bdba:	3301      	adds	r3, #1
 801bdbc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 801bdbe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801bdc2:	3b09      	subs	r3, #9
 801bdc4:	69fa      	ldr	r2, [r7, #28]
 801bdc6:	409a      	lsls	r2, r3
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 801bdcc:	2300      	movs	r3, #0
 801bdce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 801bdd2:	e0cf      	b.n	801bf74 <TM_FATFS_SD_disk_ioctl+0x2b4>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (TM_FATFS_SD_CardType & CT_SD2) {	/* SDC ver 2.00 */
 801bdd4:	4b72      	ldr	r3, [pc, #456]	; (801bfa0 <TM_FATFS_SD_disk_ioctl+0x2e0>)
 801bdd6:	781b      	ldrb	r3, [r3, #0]
 801bdd8:	f003 0304 	and.w	r3, r3, #4
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d033      	beq.n	801be48 <TM_FATFS_SD_disk_ioctl+0x188>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 801bde0:	2100      	movs	r1, #0
 801bde2:	208d      	movs	r0, #141	; 0x8d
 801bde4:	f7ff fcde 	bl	801b7a4 <send_cmd>
 801bde8:	4603      	mov	r3, r0
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	f040 80c4 	bne.w	801bf78 <TM_FATFS_SD_disk_ioctl+0x2b8>
				TM_SPI_Send(FATFS_SPI, 0xFF);
 801bdf0:	21ff      	movs	r1, #255	; 0xff
 801bdf2:	486c      	ldr	r0, [pc, #432]	; (801bfa4 <TM_FATFS_SD_disk_ioctl+0x2e4>)
 801bdf4:	f7ff fbb3 	bl	801b55e <TM_SPI_Send>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 801bdf8:	f107 030c 	add.w	r3, r7, #12
 801bdfc:	2110      	movs	r1, #16
 801bdfe:	4618      	mov	r0, r3
 801be00:	f7ff fc6a 	bl	801b6d8 <rcvr_datablock>
 801be04:	4603      	mov	r3, r0
 801be06:	2b00      	cmp	r3, #0
 801be08:	f000 80b6 	beq.w	801bf78 <TM_FATFS_SD_disk_ioctl+0x2b8>
					for (n = 64 - 16; n; n--) TM_SPI_Send(FATFS_SPI, 0xFF);	/* Purge trailing data */
 801be0c:	2330      	movs	r3, #48	; 0x30
 801be0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801be12:	e008      	b.n	801be26 <TM_FATFS_SD_disk_ioctl+0x166>
 801be14:	21ff      	movs	r1, #255	; 0xff
 801be16:	4863      	ldr	r0, [pc, #396]	; (801bfa4 <TM_FATFS_SD_disk_ioctl+0x2e4>)
 801be18:	f7ff fba1 	bl	801b55e <TM_SPI_Send>
 801be1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801be20:	3b01      	subs	r3, #1
 801be22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801be26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d1f2      	bne.n	801be14 <TM_FATFS_SD_disk_ioctl+0x154>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 801be2e:	7dbb      	ldrb	r3, [r7, #22]
 801be30:	091b      	lsrs	r3, r3, #4
 801be32:	b2db      	uxtb	r3, r3
 801be34:	461a      	mov	r2, r3
 801be36:	2310      	movs	r3, #16
 801be38:	fa03 f202 	lsl.w	r2, r3, r2
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 801be40:	2300      	movs	r3, #0
 801be42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 801be46:	e097      	b.n	801bf78 <TM_FATFS_SD_disk_ioctl+0x2b8>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 801be48:	2100      	movs	r1, #0
 801be4a:	2009      	movs	r0, #9
 801be4c:	f7ff fcaa 	bl	801b7a4 <send_cmd>
 801be50:	4603      	mov	r3, r0
 801be52:	2b00      	cmp	r3, #0
 801be54:	f040 8090 	bne.w	801bf78 <TM_FATFS_SD_disk_ioctl+0x2b8>
 801be58:	f107 030c 	add.w	r3, r7, #12
 801be5c:	2110      	movs	r1, #16
 801be5e:	4618      	mov	r0, r3
 801be60:	f7ff fc3a 	bl	801b6d8 <rcvr_datablock>
 801be64:	4603      	mov	r3, r0
 801be66:	2b00      	cmp	r3, #0
 801be68:	f000 8086 	beq.w	801bf78 <TM_FATFS_SD_disk_ioctl+0x2b8>
				if (TM_FATFS_SD_CardType & CT_SD1) {	/* SDC ver 1.XX */
 801be6c:	4b4c      	ldr	r3, [pc, #304]	; (801bfa0 <TM_FATFS_SD_disk_ioctl+0x2e0>)
 801be6e:	781b      	ldrb	r3, [r3, #0]
 801be70:	f003 0302 	and.w	r3, r3, #2
 801be74:	2b00      	cmp	r3, #0
 801be76:	d012      	beq.n	801be9e <TM_FATFS_SD_disk_ioctl+0x1de>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 801be78:	7dbb      	ldrb	r3, [r7, #22]
 801be7a:	005b      	lsls	r3, r3, #1
 801be7c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 801be80:	7dfa      	ldrb	r2, [r7, #23]
 801be82:	09d2      	lsrs	r2, r2, #7
 801be84:	b2d2      	uxtb	r2, r2
 801be86:	4413      	add	r3, r2
 801be88:	1c5a      	adds	r2, r3, #1
 801be8a:	7e7b      	ldrb	r3, [r7, #25]
 801be8c:	099b      	lsrs	r3, r3, #6
 801be8e:	b2db      	uxtb	r3, r3
 801be90:	3b01      	subs	r3, #1
 801be92:	fa02 f303 	lsl.w	r3, r2, r3
 801be96:	461a      	mov	r2, r3
 801be98:	683b      	ldr	r3, [r7, #0]
 801be9a:	601a      	str	r2, [r3, #0]
 801be9c:	e013      	b.n	801bec6 <TM_FATFS_SD_disk_ioctl+0x206>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 801be9e:	7dbb      	ldrb	r3, [r7, #22]
 801bea0:	109b      	asrs	r3, r3, #2
 801bea2:	b29b      	uxth	r3, r3
 801bea4:	f003 031f 	and.w	r3, r3, #31
 801bea8:	3301      	adds	r3, #1
 801beaa:	7dfa      	ldrb	r2, [r7, #23]
 801beac:	00d2      	lsls	r2, r2, #3
 801beae:	f002 0218 	and.w	r2, r2, #24
 801beb2:	7df9      	ldrb	r1, [r7, #23]
 801beb4:	0949      	lsrs	r1, r1, #5
 801beb6:	b2c9      	uxtb	r1, r1
 801beb8:	440a      	add	r2, r1
 801beba:	3201      	adds	r2, #1
 801bebc:	fb02 f303 	mul.w	r3, r2, r3
 801bec0:	461a      	mov	r2, r3
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 801bec6:	2300      	movs	r3, #0
 801bec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 801becc:	e054      	b.n	801bf78 <TM_FATFS_SD_disk_ioctl+0x2b8>

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(TM_FATFS_SD_CardType & CT_SDC)) break;				/* Check if the card is SDC */
 801bece:	4b34      	ldr	r3, [pc, #208]	; (801bfa0 <TM_FATFS_SD_disk_ioctl+0x2e0>)
 801bed0:	781b      	ldrb	r3, [r3, #0]
 801bed2:	f003 0306 	and.w	r3, r3, #6
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d050      	beq.n	801bf7c <TM_FATFS_SD_disk_ioctl+0x2bc>
		if (TM_FATFS_SD_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
 801beda:	f107 030c 	add.w	r3, r7, #12
 801bede:	4619      	mov	r1, r3
 801bee0:	200b      	movs	r0, #11
 801bee2:	f7ff feed 	bl	801bcc0 <TM_FATFS_SD_disk_ioctl>
 801bee6:	4603      	mov	r3, r0
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d149      	bne.n	801bf80 <TM_FATFS_SD_disk_ioctl+0x2c0>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801beec:	7b3b      	ldrb	r3, [r7, #12]
 801beee:	099b      	lsrs	r3, r3, #6
 801bef0:	b2db      	uxtb	r3, r3
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d104      	bne.n	801bf00 <TM_FATFS_SD_disk_ioctl+0x240>
 801bef6:	7dbb      	ldrb	r3, [r7, #22]
 801bef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801befc:	2b00      	cmp	r3, #0
 801befe:	d041      	beq.n	801bf84 <TM_FATFS_SD_disk_ioctl+0x2c4>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 801bf00:	683b      	ldr	r3, [r7, #0]
 801bf02:	623b      	str	r3, [r7, #32]
 801bf04:	6a3b      	ldr	r3, [r7, #32]
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	62bb      	str	r3, [r7, #40]	; 0x28
 801bf0a:	6a3b      	ldr	r3, [r7, #32]
 801bf0c:	685b      	ldr	r3, [r3, #4]
 801bf0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 801bf10:	4b23      	ldr	r3, [pc, #140]	; (801bfa0 <TM_FATFS_SD_disk_ioctl+0x2e0>)
 801bf12:	781b      	ldrb	r3, [r3, #0]
 801bf14:	f003 0308 	and.w	r3, r3, #8
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d105      	bne.n	801bf28 <TM_FATFS_SD_disk_ioctl+0x268>
			st *= 512; ed *= 512;
 801bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf1e:	025b      	lsls	r3, r3, #9
 801bf20:	62bb      	str	r3, [r7, #40]	; 0x28
 801bf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf24:	025b      	lsls	r3, r3, #9
 801bf26:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
 801bf28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bf2a:	2020      	movs	r0, #32
 801bf2c:	f7ff fc3a 	bl	801b7a4 <send_cmd>
 801bf30:	4603      	mov	r3, r0
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d128      	bne.n	801bf88 <TM_FATFS_SD_disk_ioctl+0x2c8>
 801bf36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bf38:	2021      	movs	r0, #33	; 0x21
 801bf3a:	f7ff fc33 	bl	801b7a4 <send_cmd>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d121      	bne.n	801bf88 <TM_FATFS_SD_disk_ioctl+0x2c8>
 801bf44:	2100      	movs	r1, #0
 801bf46:	2026      	movs	r0, #38	; 0x26
 801bf48:	f7ff fc2c 	bl	801b7a4 <send_cmd>
 801bf4c:	4603      	mov	r3, r0
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d11a      	bne.n	801bf88 <TM_FATFS_SD_disk_ioctl+0x2c8>
 801bf52:	f247 5030 	movw	r0, #30000	; 0x7530
 801bf56:	f7ff fb71 	bl	801b63c <wait_ready>
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d013      	beq.n	801bf88 <TM_FATFS_SD_disk_ioctl+0x2c8>
			res = RES_OK;	/* FatFs does not check result of this command */
 801bf60:	2300      	movs	r3, #0
 801bf62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 801bf66:	e00f      	b.n	801bf88 <TM_FATFS_SD_disk_ioctl+0x2c8>

	default:
		res = RES_PARERR;
 801bf68:	2304      	movs	r3, #4
 801bf6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801bf6e:	e00c      	b.n	801bf8a <TM_FATFS_SD_disk_ioctl+0x2ca>
		break;
 801bf70:	bf00      	nop
 801bf72:	e00a      	b.n	801bf8a <TM_FATFS_SD_disk_ioctl+0x2ca>
		break;
 801bf74:	bf00      	nop
 801bf76:	e008      	b.n	801bf8a <TM_FATFS_SD_disk_ioctl+0x2ca>
		break;
 801bf78:	bf00      	nop
 801bf7a:	e006      	b.n	801bf8a <TM_FATFS_SD_disk_ioctl+0x2ca>
		if (!(TM_FATFS_SD_CardType & CT_SDC)) break;				/* Check if the card is SDC */
 801bf7c:	bf00      	nop
 801bf7e:	e004      	b.n	801bf8a <TM_FATFS_SD_disk_ioctl+0x2ca>
		if (TM_FATFS_SD_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
 801bf80:	bf00      	nop
 801bf82:	e002      	b.n	801bf8a <TM_FATFS_SD_disk_ioctl+0x2ca>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801bf84:	bf00      	nop
 801bf86:	e000      	b.n	801bf8a <TM_FATFS_SD_disk_ioctl+0x2ca>
		break;
 801bf88:	bf00      	nop
	}

	deselect();
 801bf8a:	f7ff fb79 	bl	801b680 <deselect>

	return res;
 801bf8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801bf92:	4618      	mov	r0, r3
 801bf94:	3730      	adds	r7, #48	; 0x30
 801bf96:	46bd      	mov	sp, r7
 801bf98:	bd80      	pop	{r7, pc}
 801bf9a:	bf00      	nop
 801bf9c:	20001c18 	.word	0x20001c18
 801bfa0:	200027f8 	.word	0x200027f8
 801bfa4:	40003800 	.word	0x40003800

0801bfa8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801bfa8:	b480      	push	{r7}
 801bfaa:	b087      	sub	sp, #28
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	60f8      	str	r0, [r7, #12]
 801bfb0:	60b9      	str	r1, [r7, #8]
 801bfb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801bfb8:	68bb      	ldr	r3, [r7, #8]
 801bfba:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 801bfbc:	e007      	b.n	801bfce <mem_cpy+0x26>
		*d++ = *s++;
 801bfbe:	693a      	ldr	r2, [r7, #16]
 801bfc0:	1c53      	adds	r3, r2, #1
 801bfc2:	613b      	str	r3, [r7, #16]
 801bfc4:	697b      	ldr	r3, [r7, #20]
 801bfc6:	1c59      	adds	r1, r3, #1
 801bfc8:	6179      	str	r1, [r7, #20]
 801bfca:	7812      	ldrb	r2, [r2, #0]
 801bfcc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	1e5a      	subs	r2, r3, #1
 801bfd2:	607a      	str	r2, [r7, #4]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d1f2      	bne.n	801bfbe <mem_cpy+0x16>
}
 801bfd8:	bf00      	nop
 801bfda:	371c      	adds	r7, #28
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe2:	4770      	bx	lr

0801bfe4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 801bfe4:	b480      	push	{r7}
 801bfe6:	b087      	sub	sp, #28
 801bfe8:	af00      	add	r7, sp, #0
 801bfea:	60f8      	str	r0, [r7, #12]
 801bfec:	60b9      	str	r1, [r7, #8]
 801bfee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	617b      	str	r3, [r7, #20]

	while (cnt--)
 801bff4:	e005      	b.n	801c002 <mem_set+0x1e>
		*d++ = (BYTE)val;
 801bff6:	697b      	ldr	r3, [r7, #20]
 801bff8:	1c5a      	adds	r2, r3, #1
 801bffa:	617a      	str	r2, [r7, #20]
 801bffc:	68ba      	ldr	r2, [r7, #8]
 801bffe:	b2d2      	uxtb	r2, r2
 801c000:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	1e5a      	subs	r2, r3, #1
 801c006:	607a      	str	r2, [r7, #4]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d1f4      	bne.n	801bff6 <mem_set+0x12>
}
 801c00c:	bf00      	nop
 801c00e:	371c      	adds	r7, #28
 801c010:	46bd      	mov	sp, r7
 801c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c016:	4770      	bx	lr

0801c018 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 801c018:	b480      	push	{r7}
 801c01a:	b089      	sub	sp, #36	; 0x24
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	60f8      	str	r0, [r7, #12]
 801c020:	60b9      	str	r1, [r7, #8]
 801c022:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	61fb      	str	r3, [r7, #28]
 801c028:	68bb      	ldr	r3, [r7, #8]
 801c02a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801c02c:	2300      	movs	r3, #0
 801c02e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 801c030:	bf00      	nop
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	1e5a      	subs	r2, r3, #1
 801c036:	607a      	str	r2, [r7, #4]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d00d      	beq.n	801c058 <mem_cmp+0x40>
 801c03c:	69fb      	ldr	r3, [r7, #28]
 801c03e:	1c5a      	adds	r2, r3, #1
 801c040:	61fa      	str	r2, [r7, #28]
 801c042:	781b      	ldrb	r3, [r3, #0]
 801c044:	4619      	mov	r1, r3
 801c046:	69bb      	ldr	r3, [r7, #24]
 801c048:	1c5a      	adds	r2, r3, #1
 801c04a:	61ba      	str	r2, [r7, #24]
 801c04c:	781b      	ldrb	r3, [r3, #0]
 801c04e:	1acb      	subs	r3, r1, r3
 801c050:	617b      	str	r3, [r7, #20]
 801c052:	697b      	ldr	r3, [r7, #20]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d0ec      	beq.n	801c032 <mem_cmp+0x1a>
	return r;
 801c058:	697b      	ldr	r3, [r7, #20]
}
 801c05a:	4618      	mov	r0, r3
 801c05c:	3724      	adds	r7, #36	; 0x24
 801c05e:	46bd      	mov	sp, r7
 801c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c064:	4770      	bx	lr

0801c066 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 801c066:	b480      	push	{r7}
 801c068:	b083      	sub	sp, #12
 801c06a:	af00      	add	r7, sp, #0
 801c06c:	6078      	str	r0, [r7, #4]
 801c06e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801c070:	e002      	b.n	801c078 <chk_chr+0x12>
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	3301      	adds	r3, #1
 801c076:	607b      	str	r3, [r7, #4]
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	781b      	ldrb	r3, [r3, #0]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d005      	beq.n	801c08c <chk_chr+0x26>
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	781b      	ldrb	r3, [r3, #0]
 801c084:	461a      	mov	r2, r3
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	4293      	cmp	r3, r2
 801c08a:	d1f2      	bne.n	801c072 <chk_chr+0xc>
	return *str;
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	781b      	ldrb	r3, [r3, #0]
}
 801c090:	4618      	mov	r0, r3
 801c092:	370c      	adds	r7, #12
 801c094:	46bd      	mov	sp, r7
 801c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09a:	4770      	bx	lr

0801c09c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b086      	sub	sp, #24
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	791b      	ldrb	r3, [r3, #4]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d034      	beq.n	801c11a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	7858      	ldrb	r0, [r3, #1]
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801c0c0:	2301      	movs	r3, #1
 801c0c2:	697a      	ldr	r2, [r7, #20]
 801c0c4:	f7ff f944 	bl	801b350 <disk_write>
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d002      	beq.n	801c0d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 801c0ce:	2301      	movs	r3, #1
 801c0d0:	73fb      	strb	r3, [r7, #15]
 801c0d2:	e022      	b.n	801c11a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0de:	697a      	ldr	r2, [r7, #20]
 801c0e0:	1ad2      	subs	r2, r2, r3
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	69db      	ldr	r3, [r3, #28]
 801c0e6:	429a      	cmp	r2, r3
 801c0e8:	d217      	bcs.n	801c11a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	78db      	ldrb	r3, [r3, #3]
 801c0ee:	613b      	str	r3, [r7, #16]
 801c0f0:	e010      	b.n	801c114 <sync_window+0x78>
					wsect += fs->fsize;
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	69db      	ldr	r3, [r3, #28]
 801c0f6:	697a      	ldr	r2, [r7, #20]
 801c0f8:	4413      	add	r3, r2
 801c0fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	7858      	ldrb	r0, [r3, #1]
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801c106:	2301      	movs	r3, #1
 801c108:	697a      	ldr	r2, [r7, #20]
 801c10a:	f7ff f921 	bl	801b350 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801c10e:	693b      	ldr	r3, [r7, #16]
 801c110:	3b01      	subs	r3, #1
 801c112:	613b      	str	r3, [r7, #16]
 801c114:	693b      	ldr	r3, [r7, #16]
 801c116:	2b01      	cmp	r3, #1
 801c118:	d8eb      	bhi.n	801c0f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801c11a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c11c:	4618      	mov	r0, r3
 801c11e:	3718      	adds	r7, #24
 801c120:	46bd      	mov	sp, r7
 801c122:	bd80      	pop	{r7, pc}

0801c124 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 801c124:	b580      	push	{r7, lr}
 801c126:	b084      	sub	sp, #16
 801c128:	af00      	add	r7, sp, #0
 801c12a:	6078      	str	r0, [r7, #4]
 801c12c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801c12e:	2300      	movs	r3, #0
 801c130:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c136:	683a      	ldr	r2, [r7, #0]
 801c138:	429a      	cmp	r2, r3
 801c13a:	d01b      	beq.n	801c174 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801c13c:	6878      	ldr	r0, [r7, #4]
 801c13e:	f7ff ffad 	bl	801c09c <sync_window>
 801c142:	4603      	mov	r3, r0
 801c144:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801c146:	7bfb      	ldrb	r3, [r7, #15]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d113      	bne.n	801c174 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	7858      	ldrb	r0, [r3, #1]
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801c156:	2301      	movs	r3, #1
 801c158:	683a      	ldr	r2, [r7, #0]
 801c15a:	f7ff f8cb 	bl	801b2f4 <disk_read>
 801c15e:	4603      	mov	r3, r0
 801c160:	2b00      	cmp	r3, #0
 801c162:	d004      	beq.n	801c16e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801c164:	f04f 33ff 	mov.w	r3, #4294967295
 801c168:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801c16a:	2301      	movs	r3, #1
 801c16c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	683a      	ldr	r2, [r7, #0]
 801c172:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801c174:	7bfb      	ldrb	r3, [r7, #15]
}
 801c176:	4618      	mov	r0, r3
 801c178:	3710      	adds	r7, #16
 801c17a:	46bd      	mov	sp, r7
 801c17c:	bd80      	pop	{r7, pc}

0801c17e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 801c17e:	b580      	push	{r7, lr}
 801c180:	b084      	sub	sp, #16
 801c182:	af00      	add	r7, sp, #0
 801c184:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801c186:	6878      	ldr	r0, [r7, #4]
 801c188:	f7ff ff88 	bl	801c09c <sync_window>
 801c18c:	4603      	mov	r3, r0
 801c18e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801c190:	7bfb      	ldrb	r3, [r7, #15]
 801c192:	2b00      	cmp	r3, #0
 801c194:	f040 8090 	bne.w	801c2b8 <sync_fs+0x13a>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	781b      	ldrb	r3, [r3, #0]
 801c19c:	2b03      	cmp	r3, #3
 801c19e:	d17f      	bne.n	801c2a0 <sync_fs+0x122>
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	795b      	ldrb	r3, [r3, #5]
 801c1a4:	2b01      	cmp	r3, #1
 801c1a6:	d17b      	bne.n	801c2a0 <sync_fs+0x122>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	3334      	adds	r3, #52	; 0x34
 801c1ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c1b0:	2100      	movs	r1, #0
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	f7ff ff16 	bl	801bfe4 <mem_set>
			ST_WORD(fs->win + BS_55AA, 0xAA55);
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	2255      	movs	r2, #85	; 0x55
 801c1bc:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	22aa      	movs	r2, #170	; 0xaa
 801c1c4:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	2252      	movs	r2, #82	; 0x52
 801c1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	2252      	movs	r2, #82	; 0x52
 801c1d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	2261      	movs	r2, #97	; 0x61
 801c1dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	2241      	movs	r2, #65	; 0x41
 801c1e4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	2272      	movs	r2, #114	; 0x72
 801c1ec:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	2272      	movs	r2, #114	; 0x72
 801c1f4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	2241      	movs	r2, #65	; 0x41
 801c1fc:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	2261      	movs	r2, #97	; 0x61
 801c204:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	691b      	ldr	r3, [r3, #16]
 801c20c:	b2da      	uxtb	r2, r3
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	691b      	ldr	r3, [r3, #16]
 801c218:	b29b      	uxth	r3, r3
 801c21a:	0a1b      	lsrs	r3, r3, #8
 801c21c:	b29b      	uxth	r3, r3
 801c21e:	b2da      	uxtb	r2, r3
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	691b      	ldr	r3, [r3, #16]
 801c22a:	0c1b      	lsrs	r3, r3, #16
 801c22c:	b2da      	uxtb	r2, r3
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	691b      	ldr	r3, [r3, #16]
 801c238:	0e1b      	lsrs	r3, r3, #24
 801c23a:	b2da      	uxtb	r2, r3
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	68db      	ldr	r3, [r3, #12]
 801c246:	b2da      	uxtb	r2, r3
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	68db      	ldr	r3, [r3, #12]
 801c252:	b29b      	uxth	r3, r3
 801c254:	0a1b      	lsrs	r3, r3, #8
 801c256:	b29b      	uxth	r3, r3
 801c258:	b2da      	uxtb	r2, r3
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	68db      	ldr	r3, [r3, #12]
 801c264:	0c1b      	lsrs	r3, r3, #16
 801c266:	b2da      	uxtb	r2, r3
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	68db      	ldr	r3, [r3, #12]
 801c272:	0e1b      	lsrs	r3, r3, #24
 801c274:	b2da      	uxtb	r2, r3
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	6a1b      	ldr	r3, [r3, #32]
 801c280:	1c5a      	adds	r2, r3, #1
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	7858      	ldrb	r0, [r3, #1]
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c294:	2301      	movs	r3, #1
 801c296:	f7ff f85b 	bl	801b350 <disk_write>
			fs->fsi_flag = 0;
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	2200      	movs	r2, #0
 801c29e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	785b      	ldrb	r3, [r3, #1]
 801c2a4:	2200      	movs	r2, #0
 801c2a6:	2100      	movs	r1, #0
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	f7ff f87f 	bl	801b3ac <disk_ioctl>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d001      	beq.n	801c2b8 <sync_fs+0x13a>
			res = FR_DISK_ERR;
 801c2b4:	2301      	movs	r3, #1
 801c2b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801c2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	3710      	adds	r7, #16
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	bd80      	pop	{r7, pc}

0801c2c2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801c2c2:	b480      	push	{r7}
 801c2c4:	b083      	sub	sp, #12
 801c2c6:	af00      	add	r7, sp, #0
 801c2c8:	6078      	str	r0, [r7, #4]
 801c2ca:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801c2cc:	683b      	ldr	r3, [r7, #0]
 801c2ce:	3b02      	subs	r3, #2
 801c2d0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	699b      	ldr	r3, [r3, #24]
 801c2d6:	3b02      	subs	r3, #2
 801c2d8:	683a      	ldr	r2, [r7, #0]
 801c2da:	429a      	cmp	r2, r3
 801c2dc:	d301      	bcc.n	801c2e2 <clust2sect+0x20>
 801c2de:	2300      	movs	r3, #0
 801c2e0:	e008      	b.n	801c2f4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	789b      	ldrb	r3, [r3, #2]
 801c2e6:	461a      	mov	r2, r3
 801c2e8:	683b      	ldr	r3, [r7, #0]
 801c2ea:	fb03 f202 	mul.w	r2, r3, r2
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2f2:	4413      	add	r3, r2
}
 801c2f4:	4618      	mov	r0, r3
 801c2f6:	370c      	adds	r7, #12
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2fe:	4770      	bx	lr

0801c300 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b086      	sub	sp, #24
 801c304:	af00      	add	r7, sp, #0
 801c306:	6078      	str	r0, [r7, #4]
 801c308:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	2b01      	cmp	r3, #1
 801c30e:	d904      	bls.n	801c31a <get_fat+0x1a>
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	699b      	ldr	r3, [r3, #24]
 801c314:	683a      	ldr	r2, [r7, #0]
 801c316:	429a      	cmp	r2, r3
 801c318:	d302      	bcc.n	801c320 <get_fat+0x20>
		val = 1;	/* Internal error */
 801c31a:	2301      	movs	r3, #1
 801c31c:	617b      	str	r3, [r7, #20]
 801c31e:	e0a3      	b.n	801c468 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801c320:	f04f 33ff 	mov.w	r3, #4294967295
 801c324:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	781b      	ldrb	r3, [r3, #0]
 801c32a:	2b02      	cmp	r3, #2
 801c32c:	d046      	beq.n	801c3bc <get_fat+0xbc>
 801c32e:	2b03      	cmp	r3, #3
 801c330:	d066      	beq.n	801c400 <get_fat+0x100>
 801c332:	2b01      	cmp	r3, #1
 801c334:	f040 808e 	bne.w	801c454 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	60fb      	str	r3, [r7, #12]
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	085b      	lsrs	r3, r3, #1
 801c340:	68fa      	ldr	r2, [r7, #12]
 801c342:	4413      	add	r3, r2
 801c344:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	0a5b      	lsrs	r3, r3, #9
 801c34e:	4413      	add	r3, r2
 801c350:	4619      	mov	r1, r3
 801c352:	6878      	ldr	r0, [r7, #4]
 801c354:	f7ff fee6 	bl	801c124 <move_window>
 801c358:	4603      	mov	r3, r0
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d17d      	bne.n	801c45a <get_fat+0x15a>
			wc = fs->win[bc++ % SS(fs)];
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	1c5a      	adds	r2, r3, #1
 801c362:	60fa      	str	r2, [r7, #12]
 801c364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c368:	687a      	ldr	r2, [r7, #4]
 801c36a:	4413      	add	r3, r2
 801c36c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c370:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	0a5b      	lsrs	r3, r3, #9
 801c37a:	4413      	add	r3, r2
 801c37c:	4619      	mov	r1, r3
 801c37e:	6878      	ldr	r0, [r7, #4]
 801c380:	f7ff fed0 	bl	801c124 <move_window>
 801c384:	4603      	mov	r3, r0
 801c386:	2b00      	cmp	r3, #0
 801c388:	d169      	bne.n	801c45e <get_fat+0x15e>
			wc |= fs->win[bc % SS(fs)] << 8;
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c390:	687a      	ldr	r2, [r7, #4]
 801c392:	4413      	add	r3, r2
 801c394:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c398:	021b      	lsls	r3, r3, #8
 801c39a:	461a      	mov	r2, r3
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	4313      	orrs	r3, r2
 801c3a0:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	f003 0301 	and.w	r3, r3, #1
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d002      	beq.n	801c3b2 <get_fat+0xb2>
 801c3ac:	68bb      	ldr	r3, [r7, #8]
 801c3ae:	091b      	lsrs	r3, r3, #4
 801c3b0:	e002      	b.n	801c3b8 <get_fat+0xb8>
 801c3b2:	68bb      	ldr	r3, [r7, #8]
 801c3b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c3b8:	617b      	str	r3, [r7, #20]
			break;
 801c3ba:	e055      	b.n	801c468 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c3c0:	683b      	ldr	r3, [r7, #0]
 801c3c2:	0a1b      	lsrs	r3, r3, #8
 801c3c4:	4413      	add	r3, r2
 801c3c6:	4619      	mov	r1, r3
 801c3c8:	6878      	ldr	r0, [r7, #4]
 801c3ca:	f7ff feab 	bl	801c124 <move_window>
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d146      	bne.n	801c462 <get_fat+0x162>
			p = &fs->win[clst * 2 % SS(fs)];
 801c3d4:	683b      	ldr	r3, [r7, #0]
 801c3d6:	005b      	lsls	r3, r3, #1
 801c3d8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801c3dc:	3330      	adds	r3, #48	; 0x30
 801c3de:	687a      	ldr	r2, [r7, #4]
 801c3e0:	4413      	add	r3, r2
 801c3e2:	3304      	adds	r3, #4
 801c3e4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	3301      	adds	r3, #1
 801c3ea:	781b      	ldrb	r3, [r3, #0]
 801c3ec:	021b      	lsls	r3, r3, #8
 801c3ee:	b21a      	sxth	r2, r3
 801c3f0:	693b      	ldr	r3, [r7, #16]
 801c3f2:	781b      	ldrb	r3, [r3, #0]
 801c3f4:	b21b      	sxth	r3, r3
 801c3f6:	4313      	orrs	r3, r2
 801c3f8:	b21b      	sxth	r3, r3
 801c3fa:	b29b      	uxth	r3, r3
 801c3fc:	617b      	str	r3, [r7, #20]
			break;
 801c3fe:	e033      	b.n	801c468 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c404:	683b      	ldr	r3, [r7, #0]
 801c406:	09db      	lsrs	r3, r3, #7
 801c408:	4413      	add	r3, r2
 801c40a:	4619      	mov	r1, r3
 801c40c:	6878      	ldr	r0, [r7, #4]
 801c40e:	f7ff fe89 	bl	801c124 <move_window>
 801c412:	4603      	mov	r3, r0
 801c414:	2b00      	cmp	r3, #0
 801c416:	d126      	bne.n	801c466 <get_fat+0x166>
			p = &fs->win[clst * 4 % SS(fs)];
 801c418:	683b      	ldr	r3, [r7, #0]
 801c41a:	009b      	lsls	r3, r3, #2
 801c41c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801c420:	3330      	adds	r3, #48	; 0x30
 801c422:	687a      	ldr	r2, [r7, #4]
 801c424:	4413      	add	r3, r2
 801c426:	3304      	adds	r3, #4
 801c428:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 801c42a:	693b      	ldr	r3, [r7, #16]
 801c42c:	3303      	adds	r3, #3
 801c42e:	781b      	ldrb	r3, [r3, #0]
 801c430:	061a      	lsls	r2, r3, #24
 801c432:	693b      	ldr	r3, [r7, #16]
 801c434:	3302      	adds	r3, #2
 801c436:	781b      	ldrb	r3, [r3, #0]
 801c438:	041b      	lsls	r3, r3, #16
 801c43a:	4313      	orrs	r3, r2
 801c43c:	693a      	ldr	r2, [r7, #16]
 801c43e:	3201      	adds	r2, #1
 801c440:	7812      	ldrb	r2, [r2, #0]
 801c442:	0212      	lsls	r2, r2, #8
 801c444:	4313      	orrs	r3, r2
 801c446:	693a      	ldr	r2, [r7, #16]
 801c448:	7812      	ldrb	r2, [r2, #0]
 801c44a:	4313      	orrs	r3, r2
 801c44c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801c450:	617b      	str	r3, [r7, #20]
			break;
 801c452:	e009      	b.n	801c468 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 801c454:	2301      	movs	r3, #1
 801c456:	617b      	str	r3, [r7, #20]
 801c458:	e006      	b.n	801c468 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801c45a:	bf00      	nop
 801c45c:	e004      	b.n	801c468 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801c45e:	bf00      	nop
 801c460:	e002      	b.n	801c468 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801c462:	bf00      	nop
 801c464:	e000      	b.n	801c468 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801c466:	bf00      	nop
		}
	}

	return val;
 801c468:	697b      	ldr	r3, [r7, #20]
}
 801c46a:	4618      	mov	r0, r3
 801c46c:	3718      	adds	r7, #24
 801c46e:	46bd      	mov	sp, r7
 801c470:	bd80      	pop	{r7, pc}

0801c472 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 801c472:	b580      	push	{r7, lr}
 801c474:	b088      	sub	sp, #32
 801c476:	af00      	add	r7, sp, #0
 801c478:	60f8      	str	r0, [r7, #12]
 801c47a:	60b9      	str	r1, [r7, #8]
 801c47c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801c47e:	68bb      	ldr	r3, [r7, #8]
 801c480:	2b01      	cmp	r3, #1
 801c482:	d904      	bls.n	801c48e <put_fat+0x1c>
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	699b      	ldr	r3, [r3, #24]
 801c488:	68ba      	ldr	r2, [r7, #8]
 801c48a:	429a      	cmp	r2, r3
 801c48c:	d302      	bcc.n	801c494 <put_fat+0x22>
		res = FR_INT_ERR;
 801c48e:	2302      	movs	r3, #2
 801c490:	77fb      	strb	r3, [r7, #31]
 801c492:	e0f2      	b.n	801c67a <put_fat+0x208>

	} else {
		switch (fs->fs_type) {
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	781b      	ldrb	r3, [r3, #0]
 801c498:	2b02      	cmp	r3, #2
 801c49a:	d074      	beq.n	801c586 <put_fat+0x114>
 801c49c:	2b03      	cmp	r3, #3
 801c49e:	f000 8099 	beq.w	801c5d4 <put_fat+0x162>
 801c4a2:	2b01      	cmp	r3, #1
 801c4a4:	f040 80df 	bne.w	801c666 <put_fat+0x1f4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801c4a8:	68bb      	ldr	r3, [r7, #8]
 801c4aa:	617b      	str	r3, [r7, #20]
 801c4ac:	697b      	ldr	r3, [r7, #20]
 801c4ae:	085b      	lsrs	r3, r3, #1
 801c4b0:	697a      	ldr	r2, [r7, #20]
 801c4b2:	4413      	add	r3, r2
 801c4b4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c4ba:	697b      	ldr	r3, [r7, #20]
 801c4bc:	0a5b      	lsrs	r3, r3, #9
 801c4be:	4413      	add	r3, r2
 801c4c0:	4619      	mov	r1, r3
 801c4c2:	68f8      	ldr	r0, [r7, #12]
 801c4c4:	f7ff fe2e 	bl	801c124 <move_window>
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c4cc:	7ffb      	ldrb	r3, [r7, #31]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	f040 80cc 	bne.w	801c66c <put_fat+0x1fa>
			p = &fs->win[bc++ % SS(fs)];
 801c4d4:	697b      	ldr	r3, [r7, #20]
 801c4d6:	1c5a      	adds	r2, r3, #1
 801c4d8:	617a      	str	r2, [r7, #20]
 801c4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c4de:	3330      	adds	r3, #48	; 0x30
 801c4e0:	68fa      	ldr	r2, [r7, #12]
 801c4e2:	4413      	add	r3, r2
 801c4e4:	3304      	adds	r3, #4
 801c4e6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801c4e8:	68bb      	ldr	r3, [r7, #8]
 801c4ea:	f003 0301 	and.w	r3, r3, #1
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d00d      	beq.n	801c50e <put_fat+0x9c>
 801c4f2:	69bb      	ldr	r3, [r7, #24]
 801c4f4:	781b      	ldrb	r3, [r3, #0]
 801c4f6:	b25b      	sxtb	r3, r3
 801c4f8:	f003 030f 	and.w	r3, r3, #15
 801c4fc:	b25a      	sxtb	r2, r3
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	b2db      	uxtb	r3, r3
 801c502:	011b      	lsls	r3, r3, #4
 801c504:	b25b      	sxtb	r3, r3
 801c506:	4313      	orrs	r3, r2
 801c508:	b25b      	sxtb	r3, r3
 801c50a:	b2db      	uxtb	r3, r3
 801c50c:	e001      	b.n	801c512 <put_fat+0xa0>
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	b2db      	uxtb	r3, r3
 801c512:	69ba      	ldr	r2, [r7, #24]
 801c514:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	2201      	movs	r2, #1
 801c51a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c520:	697b      	ldr	r3, [r7, #20]
 801c522:	0a5b      	lsrs	r3, r3, #9
 801c524:	4413      	add	r3, r2
 801c526:	4619      	mov	r1, r3
 801c528:	68f8      	ldr	r0, [r7, #12]
 801c52a:	f7ff fdfb 	bl	801c124 <move_window>
 801c52e:	4603      	mov	r3, r0
 801c530:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c532:	7ffb      	ldrb	r3, [r7, #31]
 801c534:	2b00      	cmp	r3, #0
 801c536:	f040 809b 	bne.w	801c670 <put_fat+0x1fe>
			p = &fs->win[bc % SS(fs)];
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c540:	3330      	adds	r3, #48	; 0x30
 801c542:	68fa      	ldr	r2, [r7, #12]
 801c544:	4413      	add	r3, r2
 801c546:	3304      	adds	r3, #4
 801c548:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801c54a:	68bb      	ldr	r3, [r7, #8]
 801c54c:	f003 0301 	and.w	r3, r3, #1
 801c550:	2b00      	cmp	r3, #0
 801c552:	d003      	beq.n	801c55c <put_fat+0xea>
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	091b      	lsrs	r3, r3, #4
 801c558:	b2db      	uxtb	r3, r3
 801c55a:	e00e      	b.n	801c57a <put_fat+0x108>
 801c55c:	69bb      	ldr	r3, [r7, #24]
 801c55e:	781b      	ldrb	r3, [r3, #0]
 801c560:	b25b      	sxtb	r3, r3
 801c562:	f023 030f 	bic.w	r3, r3, #15
 801c566:	b25a      	sxtb	r2, r3
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	0a1b      	lsrs	r3, r3, #8
 801c56c:	b25b      	sxtb	r3, r3
 801c56e:	f003 030f 	and.w	r3, r3, #15
 801c572:	b25b      	sxtb	r3, r3
 801c574:	4313      	orrs	r3, r2
 801c576:	b25b      	sxtb	r3, r3
 801c578:	b2db      	uxtb	r3, r3
 801c57a:	69ba      	ldr	r2, [r7, #24]
 801c57c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	2201      	movs	r2, #1
 801c582:	711a      	strb	r2, [r3, #4]
			break;
 801c584:	e079      	b.n	801c67a <put_fat+0x208>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c58a:	68bb      	ldr	r3, [r7, #8]
 801c58c:	0a1b      	lsrs	r3, r3, #8
 801c58e:	4413      	add	r3, r2
 801c590:	4619      	mov	r1, r3
 801c592:	68f8      	ldr	r0, [r7, #12]
 801c594:	f7ff fdc6 	bl	801c124 <move_window>
 801c598:	4603      	mov	r3, r0
 801c59a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c59c:	7ffb      	ldrb	r3, [r7, #31]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d168      	bne.n	801c674 <put_fat+0x202>
			p = &fs->win[clst * 2 % SS(fs)];
 801c5a2:	68bb      	ldr	r3, [r7, #8]
 801c5a4:	005b      	lsls	r3, r3, #1
 801c5a6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801c5aa:	3330      	adds	r3, #48	; 0x30
 801c5ac:	68fa      	ldr	r2, [r7, #12]
 801c5ae:	4413      	add	r3, r2
 801c5b0:	3304      	adds	r3, #4
 801c5b2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	b2da      	uxtb	r2, r3
 801c5b8:	69bb      	ldr	r3, [r7, #24]
 801c5ba:	701a      	strb	r2, [r3, #0]
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	b29b      	uxth	r3, r3
 801c5c0:	0a1b      	lsrs	r3, r3, #8
 801c5c2:	b29a      	uxth	r2, r3
 801c5c4:	69bb      	ldr	r3, [r7, #24]
 801c5c6:	3301      	adds	r3, #1
 801c5c8:	b2d2      	uxtb	r2, r2
 801c5ca:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	2201      	movs	r2, #1
 801c5d0:	711a      	strb	r2, [r3, #4]
			break;
 801c5d2:	e052      	b.n	801c67a <put_fat+0x208>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c5d8:	68bb      	ldr	r3, [r7, #8]
 801c5da:	09db      	lsrs	r3, r3, #7
 801c5dc:	4413      	add	r3, r2
 801c5de:	4619      	mov	r1, r3
 801c5e0:	68f8      	ldr	r0, [r7, #12]
 801c5e2:	f7ff fd9f 	bl	801c124 <move_window>
 801c5e6:	4603      	mov	r3, r0
 801c5e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c5ea:	7ffb      	ldrb	r3, [r7, #31]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d143      	bne.n	801c678 <put_fat+0x206>
			p = &fs->win[clst * 4 % SS(fs)];
 801c5f0:	68bb      	ldr	r3, [r7, #8]
 801c5f2:	009b      	lsls	r3, r3, #2
 801c5f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801c5f8:	3330      	adds	r3, #48	; 0x30
 801c5fa:	68fa      	ldr	r2, [r7, #12]
 801c5fc:	4413      	add	r3, r2
 801c5fe:	3304      	adds	r3, #4
 801c600:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 801c602:	69bb      	ldr	r3, [r7, #24]
 801c604:	3303      	adds	r3, #3
 801c606:	781b      	ldrb	r3, [r3, #0]
 801c608:	061a      	lsls	r2, r3, #24
 801c60a:	69bb      	ldr	r3, [r7, #24]
 801c60c:	3302      	adds	r3, #2
 801c60e:	781b      	ldrb	r3, [r3, #0]
 801c610:	041b      	lsls	r3, r3, #16
 801c612:	4313      	orrs	r3, r2
 801c614:	69ba      	ldr	r2, [r7, #24]
 801c616:	3201      	adds	r2, #1
 801c618:	7812      	ldrb	r2, [r2, #0]
 801c61a:	0212      	lsls	r2, r2, #8
 801c61c:	4313      	orrs	r3, r2
 801c61e:	69ba      	ldr	r2, [r7, #24]
 801c620:	7812      	ldrb	r2, [r2, #0]
 801c622:	4313      	orrs	r3, r2
 801c624:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c628:	687a      	ldr	r2, [r7, #4]
 801c62a:	4313      	orrs	r3, r2
 801c62c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	b2da      	uxtb	r2, r3
 801c632:	69bb      	ldr	r3, [r7, #24]
 801c634:	701a      	strb	r2, [r3, #0]
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	b29b      	uxth	r3, r3
 801c63a:	0a1b      	lsrs	r3, r3, #8
 801c63c:	b29a      	uxth	r2, r3
 801c63e:	69bb      	ldr	r3, [r7, #24]
 801c640:	3301      	adds	r3, #1
 801c642:	b2d2      	uxtb	r2, r2
 801c644:	701a      	strb	r2, [r3, #0]
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	0c1a      	lsrs	r2, r3, #16
 801c64a:	69bb      	ldr	r3, [r7, #24]
 801c64c:	3302      	adds	r3, #2
 801c64e:	b2d2      	uxtb	r2, r2
 801c650:	701a      	strb	r2, [r3, #0]
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	0e1a      	lsrs	r2, r3, #24
 801c656:	69bb      	ldr	r3, [r7, #24]
 801c658:	3303      	adds	r3, #3
 801c65a:	b2d2      	uxtb	r2, r2
 801c65c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	2201      	movs	r2, #1
 801c662:	711a      	strb	r2, [r3, #4]
			break;
 801c664:	e009      	b.n	801c67a <put_fat+0x208>

		default :
			res = FR_INT_ERR;
 801c666:	2302      	movs	r3, #2
 801c668:	77fb      	strb	r3, [r7, #31]
 801c66a:	e006      	b.n	801c67a <put_fat+0x208>
			if (res != FR_OK) break;
 801c66c:	bf00      	nop
 801c66e:	e004      	b.n	801c67a <put_fat+0x208>
			if (res != FR_OK) break;
 801c670:	bf00      	nop
 801c672:	e002      	b.n	801c67a <put_fat+0x208>
			if (res != FR_OK) break;
 801c674:	bf00      	nop
 801c676:	e000      	b.n	801c67a <put_fat+0x208>
			if (res != FR_OK) break;
 801c678:	bf00      	nop
		}
	}

	return res;
 801c67a:	7ffb      	ldrb	r3, [r7, #31]
}
 801c67c:	4618      	mov	r0, r3
 801c67e:	3720      	adds	r7, #32
 801c680:	46bd      	mov	sp, r7
 801c682:	bd80      	pop	{r7, pc}

0801c684 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801c684:	b580      	push	{r7, lr}
 801c686:	b084      	sub	sp, #16
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
 801c68c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801c68e:	683b      	ldr	r3, [r7, #0]
 801c690:	2b01      	cmp	r3, #1
 801c692:	d904      	bls.n	801c69e <remove_chain+0x1a>
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	699b      	ldr	r3, [r3, #24]
 801c698:	683a      	ldr	r2, [r7, #0]
 801c69a:	429a      	cmp	r2, r3
 801c69c:	d302      	bcc.n	801c6a4 <remove_chain+0x20>
		res = FR_INT_ERR;
 801c69e:	2302      	movs	r3, #2
 801c6a0:	73fb      	strb	r3, [r7, #15]
 801c6a2:	e03d      	b.n	801c720 <remove_chain+0x9c>

	} else {
		res = FR_OK;
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 801c6a8:	e031      	b.n	801c70e <remove_chain+0x8a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 801c6aa:	6839      	ldr	r1, [r7, #0]
 801c6ac:	6878      	ldr	r0, [r7, #4]
 801c6ae:	f7ff fe27 	bl	801c300 <get_fat>
 801c6b2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 801c6b4:	68bb      	ldr	r3, [r7, #8]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d02f      	beq.n	801c71a <remove_chain+0x96>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 801c6ba:	68bb      	ldr	r3, [r7, #8]
 801c6bc:	2b01      	cmp	r3, #1
 801c6be:	d102      	bne.n	801c6c6 <remove_chain+0x42>
 801c6c0:	2302      	movs	r3, #2
 801c6c2:	73fb      	strb	r3, [r7, #15]
 801c6c4:	e02c      	b.n	801c720 <remove_chain+0x9c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 801c6c6:	68bb      	ldr	r3, [r7, #8]
 801c6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6cc:	d102      	bne.n	801c6d4 <remove_chain+0x50>
 801c6ce:	2301      	movs	r3, #1
 801c6d0:	73fb      	strb	r3, [r7, #15]
 801c6d2:	e025      	b.n	801c720 <remove_chain+0x9c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 801c6d4:	2200      	movs	r2, #0
 801c6d6:	6839      	ldr	r1, [r7, #0]
 801c6d8:	6878      	ldr	r0, [r7, #4]
 801c6da:	f7ff feca 	bl	801c472 <put_fat>
 801c6de:	4603      	mov	r3, r0
 801c6e0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801c6e2:	7bfb      	ldrb	r3, [r7, #15]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d11a      	bne.n	801c71e <remove_chain+0x9a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	691b      	ldr	r3, [r3, #16]
 801c6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6f0:	d00b      	beq.n	801c70a <remove_chain+0x86>
				fs->free_clust++;
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	691b      	ldr	r3, [r3, #16]
 801c6f6:	1c5a      	adds	r2, r3, #1
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	611a      	str	r2, [r3, #16]
				fs->fsi_flag |= 1;
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	795b      	ldrb	r3, [r3, #5]
 801c700:	f043 0301 	orr.w	r3, r3, #1
 801c704:	b2da      	uxtb	r2, r3
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 801c70a:	68bb      	ldr	r3, [r7, #8]
 801c70c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	699b      	ldr	r3, [r3, #24]
 801c712:	683a      	ldr	r2, [r7, #0]
 801c714:	429a      	cmp	r2, r3
 801c716:	d3c8      	bcc.n	801c6aa <remove_chain+0x26>
 801c718:	e002      	b.n	801c720 <remove_chain+0x9c>
			if (nxt == 0) break;				/* Empty cluster? */
 801c71a:	bf00      	nop
 801c71c:	e000      	b.n	801c720 <remove_chain+0x9c>
			if (res != FR_OK) break;
 801c71e:	bf00      	nop
		}
	}

	return res;
 801c720:	7bfb      	ldrb	r3, [r7, #15]
}
 801c722:	4618      	mov	r0, r3
 801c724:	3710      	adds	r7, #16
 801c726:	46bd      	mov	sp, r7
 801c728:	bd80      	pop	{r7, pc}

0801c72a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 801c72a:	b580      	push	{r7, lr}
 801c72c:	b086      	sub	sp, #24
 801c72e:	af00      	add	r7, sp, #0
 801c730:	6078      	str	r0, [r7, #4]
 801c732:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 801c734:	683b      	ldr	r3, [r7, #0]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d10d      	bne.n	801c756 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	68db      	ldr	r3, [r3, #12]
 801c73e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 801c740:	693b      	ldr	r3, [r7, #16]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d004      	beq.n	801c750 <create_chain+0x26>
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	699b      	ldr	r3, [r3, #24]
 801c74a:	693a      	ldr	r2, [r7, #16]
 801c74c:	429a      	cmp	r2, r3
 801c74e:	d31b      	bcc.n	801c788 <create_chain+0x5e>
 801c750:	2301      	movs	r3, #1
 801c752:	613b      	str	r3, [r7, #16]
 801c754:	e018      	b.n	801c788 <create_chain+0x5e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 801c756:	6839      	ldr	r1, [r7, #0]
 801c758:	6878      	ldr	r0, [r7, #4]
 801c75a:	f7ff fdd1 	bl	801c300 <get_fat>
 801c75e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 801c760:	68bb      	ldr	r3, [r7, #8]
 801c762:	2b01      	cmp	r3, #1
 801c764:	d801      	bhi.n	801c76a <create_chain+0x40>
 801c766:	2301      	movs	r3, #1
 801c768:	e06e      	b.n	801c848 <create_chain+0x11e>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801c76a:	68bb      	ldr	r3, [r7, #8]
 801c76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c770:	d101      	bne.n	801c776 <create_chain+0x4c>
 801c772:	68bb      	ldr	r3, [r7, #8]
 801c774:	e068      	b.n	801c848 <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	699b      	ldr	r3, [r3, #24]
 801c77a:	68ba      	ldr	r2, [r7, #8]
 801c77c:	429a      	cmp	r2, r3
 801c77e:	d201      	bcs.n	801c784 <create_chain+0x5a>
 801c780:	68bb      	ldr	r3, [r7, #8]
 801c782:	e061      	b.n	801c848 <create_chain+0x11e>
		scl = clst;
 801c784:	683b      	ldr	r3, [r7, #0]
 801c786:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 801c788:	693b      	ldr	r3, [r7, #16]
 801c78a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 801c78c:	697b      	ldr	r3, [r7, #20]
 801c78e:	3301      	adds	r3, #1
 801c790:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	699b      	ldr	r3, [r3, #24]
 801c796:	697a      	ldr	r2, [r7, #20]
 801c798:	429a      	cmp	r2, r3
 801c79a:	d307      	bcc.n	801c7ac <create_chain+0x82>
			ncl = 2;
 801c79c:	2302      	movs	r3, #2
 801c79e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 801c7a0:	697a      	ldr	r2, [r7, #20]
 801c7a2:	693b      	ldr	r3, [r7, #16]
 801c7a4:	429a      	cmp	r2, r3
 801c7a6:	d901      	bls.n	801c7ac <create_chain+0x82>
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	e04d      	b.n	801c848 <create_chain+0x11e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 801c7ac:	6979      	ldr	r1, [r7, #20]
 801c7ae:	6878      	ldr	r0, [r7, #4]
 801c7b0:	f7ff fda6 	bl	801c300 <get_fat>
 801c7b4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 801c7b6:	68bb      	ldr	r3, [r7, #8]
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d00e      	beq.n	801c7da <create_chain+0xb0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 801c7bc:	68bb      	ldr	r3, [r7, #8]
 801c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7c2:	d002      	beq.n	801c7ca <create_chain+0xa0>
 801c7c4:	68bb      	ldr	r3, [r7, #8]
 801c7c6:	2b01      	cmp	r3, #1
 801c7c8:	d101      	bne.n	801c7ce <create_chain+0xa4>
			return cs;
 801c7ca:	68bb      	ldr	r3, [r7, #8]
 801c7cc:	e03c      	b.n	801c848 <create_chain+0x11e>
		if (ncl == scl) return 0;		/* No free cluster */
 801c7ce:	697a      	ldr	r2, [r7, #20]
 801c7d0:	693b      	ldr	r3, [r7, #16]
 801c7d2:	429a      	cmp	r2, r3
 801c7d4:	d1da      	bne.n	801c78c <create_chain+0x62>
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	e036      	b.n	801c848 <create_chain+0x11e>
		if (cs == 0) break;				/* Found a free cluster */
 801c7da:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 801c7dc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801c7e0:	6979      	ldr	r1, [r7, #20]
 801c7e2:	6878      	ldr	r0, [r7, #4]
 801c7e4:	f7ff fe45 	bl	801c472 <put_fat>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 801c7ec:	7bfb      	ldrb	r3, [r7, #15]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d109      	bne.n	801c806 <create_chain+0xdc>
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d006      	beq.n	801c806 <create_chain+0xdc>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 801c7f8:	697a      	ldr	r2, [r7, #20]
 801c7fa:	6839      	ldr	r1, [r7, #0]
 801c7fc:	6878      	ldr	r0, [r7, #4]
 801c7fe:	f7ff fe38 	bl	801c472 <put_fat>
 801c802:	4603      	mov	r3, r0
 801c804:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 801c806:	7bfb      	ldrb	r3, [r7, #15]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d114      	bne.n	801c836 <create_chain+0x10c>
		fs->last_clust = ncl;			/* Update FSINFO */
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	697a      	ldr	r2, [r7, #20]
 801c810:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	691b      	ldr	r3, [r3, #16]
 801c816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c81a:	d014      	beq.n	801c846 <create_chain+0x11c>
			fs->free_clust--;
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	691b      	ldr	r3, [r3, #16]
 801c820:	1e5a      	subs	r2, r3, #1
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	795b      	ldrb	r3, [r3, #5]
 801c82a:	f043 0301 	orr.w	r3, r3, #1
 801c82e:	b2da      	uxtb	r2, r3
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	715a      	strb	r2, [r3, #5]
 801c834:	e007      	b.n	801c846 <create_chain+0x11c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 801c836:	7bfb      	ldrb	r3, [r7, #15]
 801c838:	2b01      	cmp	r3, #1
 801c83a:	d102      	bne.n	801c842 <create_chain+0x118>
 801c83c:	f04f 33ff 	mov.w	r3, #4294967295
 801c840:	e000      	b.n	801c844 <create_chain+0x11a>
 801c842:	2301      	movs	r3, #1
 801c844:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 801c846:	697b      	ldr	r3, [r7, #20]
}
 801c848:	4618      	mov	r0, r3
 801c84a:	3718      	adds	r7, #24
 801c84c:	46bd      	mov	sp, r7
 801c84e:	bd80      	pop	{r7, pc}

0801c850 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b086      	sub	sp, #24
 801c854:	af00      	add	r7, sp, #0
 801c856:	6078      	str	r0, [r7, #4]
 801c858:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 801c85a:	683b      	ldr	r3, [r7, #0]
 801c85c:	b29a      	uxth	r2, r3
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	689b      	ldr	r3, [r3, #8]
 801c866:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 801c868:	697b      	ldr	r3, [r7, #20]
 801c86a:	2b01      	cmp	r3, #1
 801c86c:	d005      	beq.n	801c87a <dir_sdi+0x2a>
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	699b      	ldr	r3, [r3, #24]
 801c874:	697a      	ldr	r2, [r7, #20]
 801c876:	429a      	cmp	r2, r3
 801c878:	d301      	bcc.n	801c87e <dir_sdi+0x2e>
		return FR_INT_ERR;
 801c87a:	2302      	movs	r3, #2
 801c87c:	e063      	b.n	801c946 <dir_sdi+0xf6>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801c87e:	697b      	ldr	r3, [r7, #20]
 801c880:	2b00      	cmp	r3, #0
 801c882:	d108      	bne.n	801c896 <dir_sdi+0x46>
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	781b      	ldrb	r3, [r3, #0]
 801c88a:	2b03      	cmp	r3, #3
 801c88c:	d103      	bne.n	801c896 <dir_sdi+0x46>
		clst = dp->fs->dirbase;
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c894:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801c896:	697b      	ldr	r3, [r7, #20]
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d10d      	bne.n	801c8b8 <dir_sdi+0x68>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	891b      	ldrh	r3, [r3, #8]
 801c8a2:	461a      	mov	r2, r3
 801c8a4:	683b      	ldr	r3, [r7, #0]
 801c8a6:	4293      	cmp	r3, r2
 801c8a8:	d301      	bcc.n	801c8ae <dir_sdi+0x5e>
			return FR_INT_ERR;
 801c8aa:	2302      	movs	r3, #2
 801c8ac:	e04b      	b.n	801c946 <dir_sdi+0xf6>
		sect = dp->fs->dirbase;
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8b4:	613b      	str	r3, [r7, #16]
 801c8b6:	e02c      	b.n	801c912 <dir_sdi+0xc2>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	789b      	ldrb	r3, [r3, #2]
 801c8be:	011b      	lsls	r3, r3, #4
 801c8c0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 801c8c2:	e01b      	b.n	801c8fc <dir_sdi+0xac>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	6979      	ldr	r1, [r7, #20]
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	f7ff fd18 	bl	801c300 <get_fat>
 801c8d0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c8d2:	697b      	ldr	r3, [r7, #20]
 801c8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8d8:	d101      	bne.n	801c8de <dir_sdi+0x8e>
 801c8da:	2301      	movs	r3, #1
 801c8dc:	e033      	b.n	801c946 <dir_sdi+0xf6>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 801c8de:	697b      	ldr	r3, [r7, #20]
 801c8e0:	2b01      	cmp	r3, #1
 801c8e2:	d905      	bls.n	801c8f0 <dir_sdi+0xa0>
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	699b      	ldr	r3, [r3, #24]
 801c8ea:	697a      	ldr	r2, [r7, #20]
 801c8ec:	429a      	cmp	r2, r3
 801c8ee:	d301      	bcc.n	801c8f4 <dir_sdi+0xa4>
				return FR_INT_ERR;
 801c8f0:	2302      	movs	r3, #2
 801c8f2:	e028      	b.n	801c946 <dir_sdi+0xf6>
			idx -= ic;
 801c8f4:	683a      	ldr	r2, [r7, #0]
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	1ad3      	subs	r3, r2, r3
 801c8fa:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 801c8fc:	683a      	ldr	r2, [r7, #0]
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	429a      	cmp	r2, r3
 801c902:	d2df      	bcs.n	801c8c4 <dir_sdi+0x74>
		}
		sect = clust2sect(dp->fs, clst);
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	6979      	ldr	r1, [r7, #20]
 801c90a:	4618      	mov	r0, r3
 801c90c:	f7ff fcd9 	bl	801c2c2 <clust2sect>
 801c910:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	697a      	ldr	r2, [r7, #20]
 801c916:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 801c918:	693b      	ldr	r3, [r7, #16]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d101      	bne.n	801c922 <dir_sdi+0xd2>
 801c91e:	2302      	movs	r3, #2
 801c920:	e011      	b.n	801c946 <dir_sdi+0xf6>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 801c922:	683b      	ldr	r3, [r7, #0]
 801c924:	091a      	lsrs	r2, r3, #4
 801c926:	693b      	ldr	r3, [r7, #16]
 801c928:	441a      	add	r2, r3
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	f003 030f 	and.w	r3, r3, #15
 801c93c:	015b      	lsls	r3, r3, #5
 801c93e:	441a      	add	r2, r3
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	615a      	str	r2, [r3, #20]

	return FR_OK;
 801c944:	2300      	movs	r3, #0
}
 801c946:	4618      	mov	r0, r3
 801c948:	3718      	adds	r7, #24
 801c94a:	46bd      	mov	sp, r7
 801c94c:	bd80      	pop	{r7, pc}

0801c94e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801c94e:	b590      	push	{r4, r7, lr}
 801c950:	b087      	sub	sp, #28
 801c952:	af00      	add	r7, sp, #0
 801c954:	6078      	str	r0, [r7, #4]
 801c956:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	88db      	ldrh	r3, [r3, #6]
 801c95c:	3301      	adds	r3, #1
 801c95e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	b29b      	uxth	r3, r3
 801c964:	2b00      	cmp	r3, #0
 801c966:	d003      	beq.n	801c970 <dir_next+0x22>
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	691b      	ldr	r3, [r3, #16]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d101      	bne.n	801c974 <dir_next+0x26>
		return FR_NO_FILE;
 801c970:	2304      	movs	r3, #4
 801c972:	e0bb      	b.n	801caec <dir_next+0x19e>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	f003 030f 	and.w	r3, r3, #15
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	f040 80a6 	bne.w	801cacc <dir_next+0x17e>
		dp->sect++;					/* Next sector */
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	691b      	ldr	r3, [r3, #16]
 801c984:	1c5a      	adds	r2, r3, #1
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	68db      	ldr	r3, [r3, #12]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d109      	bne.n	801c9a6 <dir_next+0x58>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	891b      	ldrh	r3, [r3, #8]
 801c998:	461a      	mov	r2, r3
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	4293      	cmp	r3, r2
 801c99e:	f0c0 8095 	bcc.w	801cacc <dir_next+0x17e>
				return FR_NO_FILE;
 801c9a2:	2304      	movs	r3, #4
 801c9a4:	e0a2      	b.n	801caec <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	091b      	lsrs	r3, r3, #4
 801c9aa:	687a      	ldr	r2, [r7, #4]
 801c9ac:	6812      	ldr	r2, [r2, #0]
 801c9ae:	7892      	ldrb	r2, [r2, #2]
 801c9b0:	3a01      	subs	r2, #1
 801c9b2:	4013      	ands	r3, r2
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	f040 8089 	bne.w	801cacc <dir_next+0x17e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	681a      	ldr	r2, [r3, #0]
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	68db      	ldr	r3, [r3, #12]
 801c9c2:	4619      	mov	r1, r3
 801c9c4:	4610      	mov	r0, r2
 801c9c6:	f7ff fc9b 	bl	801c300 <get_fat>
 801c9ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 801c9cc:	697b      	ldr	r3, [r7, #20]
 801c9ce:	2b01      	cmp	r3, #1
 801c9d0:	d801      	bhi.n	801c9d6 <dir_next+0x88>
 801c9d2:	2302      	movs	r3, #2
 801c9d4:	e08a      	b.n	801caec <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801c9d6:	697b      	ldr	r3, [r7, #20]
 801c9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9dc:	d101      	bne.n	801c9e2 <dir_next+0x94>
 801c9de:	2301      	movs	r3, #1
 801c9e0:	e084      	b.n	801caec <dir_next+0x19e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	699b      	ldr	r3, [r3, #24]
 801c9e8:	697a      	ldr	r2, [r7, #20]
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	d362      	bcc.n	801cab4 <dir_next+0x166>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 801c9ee:	683b      	ldr	r3, [r7, #0]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d101      	bne.n	801c9f8 <dir_next+0xaa>
 801c9f4:	2304      	movs	r3, #4
 801c9f6:	e079      	b.n	801caec <dir_next+0x19e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	681a      	ldr	r2, [r3, #0]
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	68db      	ldr	r3, [r3, #12]
 801ca00:	4619      	mov	r1, r3
 801ca02:	4610      	mov	r0, r2
 801ca04:	f7ff fe91 	bl	801c72a <create_chain>
 801ca08:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801ca0a:	697b      	ldr	r3, [r7, #20]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d101      	bne.n	801ca14 <dir_next+0xc6>
 801ca10:	2307      	movs	r3, #7
 801ca12:	e06b      	b.n	801caec <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
 801ca14:	697b      	ldr	r3, [r7, #20]
 801ca16:	2b01      	cmp	r3, #1
 801ca18:	d101      	bne.n	801ca1e <dir_next+0xd0>
 801ca1a:	2302      	movs	r3, #2
 801ca1c:	e066      	b.n	801caec <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca24:	d101      	bne.n	801ca2a <dir_next+0xdc>
 801ca26:	2301      	movs	r3, #1
 801ca28:	e060      	b.n	801caec <dir_next+0x19e>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	4618      	mov	r0, r3
 801ca30:	f7ff fb34 	bl	801c09c <sync_window>
 801ca34:	4603      	mov	r3, r0
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d001      	beq.n	801ca3e <dir_next+0xf0>
 801ca3a:	2301      	movs	r3, #1
 801ca3c:	e056      	b.n	801caec <dir_next+0x19e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	3334      	adds	r3, #52	; 0x34
 801ca44:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ca48:	2100      	movs	r1, #0
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	f7ff faca 	bl	801bfe4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681a      	ldr	r2, [r3, #0]
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681c      	ldr	r4, [r3, #0]
 801ca58:	6979      	ldr	r1, [r7, #20]
 801ca5a:	4610      	mov	r0, r2
 801ca5c:	f7ff fc31 	bl	801c2c2 <clust2sect>
 801ca60:	4603      	mov	r3, r0
 801ca62:	6323      	str	r3, [r4, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801ca64:	2300      	movs	r3, #0
 801ca66:	613b      	str	r3, [r7, #16]
 801ca68:	e015      	b.n	801ca96 <dir_next+0x148>
						dp->fs->wflag = 1;
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	2201      	movs	r2, #1
 801ca70:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	4618      	mov	r0, r3
 801ca78:	f7ff fb10 	bl	801c09c <sync_window>
 801ca7c:	4603      	mov	r3, r0
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d001      	beq.n	801ca86 <dir_next+0x138>
 801ca82:	2301      	movs	r3, #1
 801ca84:	e032      	b.n	801caec <dir_next+0x19e>
						dp->fs->winsect++;
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ca8c:	3201      	adds	r2, #1
 801ca8e:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801ca90:	693b      	ldr	r3, [r7, #16]
 801ca92:	3301      	adds	r3, #1
 801ca94:	613b      	str	r3, [r7, #16]
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	789b      	ldrb	r3, [r3, #2]
 801ca9c:	461a      	mov	r2, r3
 801ca9e:	693b      	ldr	r3, [r7, #16]
 801caa0:	4293      	cmp	r3, r2
 801caa2:	d3e2      	bcc.n	801ca6a <dir_next+0x11c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	693a      	ldr	r2, [r7, #16]
 801cab0:	1a8a      	subs	r2, r1, r2
 801cab2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	697a      	ldr	r2, [r7, #20]
 801cab8:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	6979      	ldr	r1, [r7, #20]
 801cac0:	4618      	mov	r0, r3
 801cac2:	f7ff fbfe 	bl	801c2c2 <clust2sect>
 801cac6:	4602      	mov	r2, r0
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	b29a      	uxth	r2, r3
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	f003 030f 	and.w	r3, r3, #15
 801cae2:	015b      	lsls	r3, r3, #5
 801cae4:	441a      	add	r2, r3
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	615a      	str	r2, [r3, #20]

	return FR_OK;
 801caea:	2300      	movs	r3, #0
}
 801caec:	4618      	mov	r0, r3
 801caee:	371c      	adds	r7, #28
 801caf0:	46bd      	mov	sp, r7
 801caf2:	bd90      	pop	{r4, r7, pc}

0801caf4 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 801caf4:	b580      	push	{r7, lr}
 801caf6:	b084      	sub	sp, #16
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
 801cafc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 801cafe:	2100      	movs	r1, #0
 801cb00:	6878      	ldr	r0, [r7, #4]
 801cb02:	f7ff fea5 	bl	801c850 <dir_sdi>
 801cb06:	4603      	mov	r3, r0
 801cb08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801cb0a:	7bfb      	ldrb	r3, [r7, #15]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d12d      	bne.n	801cb6c <dir_alloc+0x78>
		n = 0;
 801cb10:	2300      	movs	r3, #0
 801cb12:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681a      	ldr	r2, [r3, #0]
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	691b      	ldr	r3, [r3, #16]
 801cb1c:	4619      	mov	r1, r3
 801cb1e:	4610      	mov	r0, r2
 801cb20:	f7ff fb00 	bl	801c124 <move_window>
 801cb24:	4603      	mov	r3, r0
 801cb26:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801cb28:	7bfb      	ldrb	r3, [r7, #15]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d11d      	bne.n	801cb6a <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	695b      	ldr	r3, [r3, #20]
 801cb32:	781b      	ldrb	r3, [r3, #0]
 801cb34:	2be5      	cmp	r3, #229	; 0xe5
 801cb36:	d004      	beq.n	801cb42 <dir_alloc+0x4e>
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	695b      	ldr	r3, [r3, #20]
 801cb3c:	781b      	ldrb	r3, [r3, #0]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d107      	bne.n	801cb52 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801cb42:	68bb      	ldr	r3, [r7, #8]
 801cb44:	3301      	adds	r3, #1
 801cb46:	60bb      	str	r3, [r7, #8]
 801cb48:	68ba      	ldr	r2, [r7, #8]
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	429a      	cmp	r2, r3
 801cb4e:	d102      	bne.n	801cb56 <dir_alloc+0x62>
 801cb50:	e00c      	b.n	801cb6c <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801cb52:	2300      	movs	r3, #0
 801cb54:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 801cb56:	2101      	movs	r1, #1
 801cb58:	6878      	ldr	r0, [r7, #4]
 801cb5a:	f7ff fef8 	bl	801c94e <dir_next>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 801cb62:	7bfb      	ldrb	r3, [r7, #15]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d0d5      	beq.n	801cb14 <dir_alloc+0x20>
 801cb68:	e000      	b.n	801cb6c <dir_alloc+0x78>
			if (res != FR_OK) break;
 801cb6a:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801cb6c:	7bfb      	ldrb	r3, [r7, #15]
 801cb6e:	2b04      	cmp	r3, #4
 801cb70:	d101      	bne.n	801cb76 <dir_alloc+0x82>
 801cb72:	2307      	movs	r3, #7
 801cb74:	73fb      	strb	r3, [r7, #15]
	return res;
 801cb76:	7bfb      	ldrb	r3, [r7, #15]
}
 801cb78:	4618      	mov	r0, r3
 801cb7a:	3710      	adds	r7, #16
 801cb7c:	46bd      	mov	sp, r7
 801cb7e:	bd80      	pop	{r7, pc}

0801cb80 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 801cb80:	b480      	push	{r7}
 801cb82:	b085      	sub	sp, #20
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	6078      	str	r0, [r7, #4]
 801cb88:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 801cb8a:	683b      	ldr	r3, [r7, #0]
 801cb8c:	331b      	adds	r3, #27
 801cb8e:	781b      	ldrb	r3, [r3, #0]
 801cb90:	021b      	lsls	r3, r3, #8
 801cb92:	b21a      	sxth	r2, r3
 801cb94:	683b      	ldr	r3, [r7, #0]
 801cb96:	331a      	adds	r3, #26
 801cb98:	781b      	ldrb	r3, [r3, #0]
 801cb9a:	b21b      	sxth	r3, r3
 801cb9c:	4313      	orrs	r3, r2
 801cb9e:	b21b      	sxth	r3, r3
 801cba0:	b29b      	uxth	r3, r3
 801cba2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	781b      	ldrb	r3, [r3, #0]
 801cba8:	2b03      	cmp	r3, #3
 801cbaa:	d10f      	bne.n	801cbcc <ld_clust+0x4c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 801cbac:	683b      	ldr	r3, [r7, #0]
 801cbae:	3315      	adds	r3, #21
 801cbb0:	781b      	ldrb	r3, [r3, #0]
 801cbb2:	021b      	lsls	r3, r3, #8
 801cbb4:	b21a      	sxth	r2, r3
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	3314      	adds	r3, #20
 801cbba:	781b      	ldrb	r3, [r3, #0]
 801cbbc:	b21b      	sxth	r3, r3
 801cbbe:	4313      	orrs	r3, r2
 801cbc0:	b21b      	sxth	r3, r3
 801cbc2:	b29b      	uxth	r3, r3
 801cbc4:	041b      	lsls	r3, r3, #16
 801cbc6:	68fa      	ldr	r2, [r7, #12]
 801cbc8:	4313      	orrs	r3, r2
 801cbca:	60fb      	str	r3, [r7, #12]

	return cl;
 801cbcc:	68fb      	ldr	r3, [r7, #12]
}
 801cbce:	4618      	mov	r0, r3
 801cbd0:	3714      	adds	r7, #20
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbd8:	4770      	bx	lr

0801cbda <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 801cbda:	b480      	push	{r7}
 801cbdc:	b083      	sub	sp, #12
 801cbde:	af00      	add	r7, sp, #0
 801cbe0:	6078      	str	r0, [r7, #4]
 801cbe2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	331a      	adds	r3, #26
 801cbe8:	683a      	ldr	r2, [r7, #0]
 801cbea:	b2d2      	uxtb	r2, r2
 801cbec:	701a      	strb	r2, [r3, #0]
 801cbee:	683b      	ldr	r3, [r7, #0]
 801cbf0:	b29b      	uxth	r3, r3
 801cbf2:	0a1b      	lsrs	r3, r3, #8
 801cbf4:	b29a      	uxth	r2, r3
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	331b      	adds	r3, #27
 801cbfa:	b2d2      	uxtb	r2, r2
 801cbfc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 801cbfe:	683b      	ldr	r3, [r7, #0]
 801cc00:	0c1a      	lsrs	r2, r3, #16
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	3314      	adds	r3, #20
 801cc06:	b2d2      	uxtb	r2, r2
 801cc08:	701a      	strb	r2, [r3, #0]
 801cc0a:	683b      	ldr	r3, [r7, #0]
 801cc0c:	0c1b      	lsrs	r3, r3, #16
 801cc0e:	b29b      	uxth	r3, r3
 801cc10:	0a1b      	lsrs	r3, r3, #8
 801cc12:	b29a      	uxth	r2, r3
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	3315      	adds	r3, #21
 801cc18:	b2d2      	uxtb	r2, r2
 801cc1a:	701a      	strb	r2, [r3, #0]
}
 801cc1c:	bf00      	nop
 801cc1e:	370c      	adds	r7, #12
 801cc20:	46bd      	mov	sp, r7
 801cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc26:	4770      	bx	lr

0801cc28 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b086      	sub	sp, #24
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801cc30:	2100      	movs	r1, #0
 801cc32:	6878      	ldr	r0, [r7, #4]
 801cc34:	f7ff fe0c 	bl	801c850 <dir_sdi>
 801cc38:	4603      	mov	r3, r0
 801cc3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801cc3c:	7dfb      	ldrb	r3, [r7, #23]
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d001      	beq.n	801cc46 <dir_find+0x1e>
 801cc42:	7dfb      	ldrb	r3, [r7, #23]
 801cc44:	e037      	b.n	801ccb6 <dir_find+0x8e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	681a      	ldr	r2, [r3, #0]
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	691b      	ldr	r3, [r3, #16]
 801cc4e:	4619      	mov	r1, r3
 801cc50:	4610      	mov	r0, r2
 801cc52:	f7ff fa67 	bl	801c124 <move_window>
 801cc56:	4603      	mov	r3, r0
 801cc58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801cc5a:	7dfb      	ldrb	r3, [r7, #23]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d126      	bne.n	801ccae <dir_find+0x86>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	695b      	ldr	r3, [r3, #20]
 801cc64:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 801cc66:	693b      	ldr	r3, [r7, #16]
 801cc68:	781b      	ldrb	r3, [r3, #0]
 801cc6a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801cc6c:	7bfb      	ldrb	r3, [r7, #15]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d102      	bne.n	801cc78 <dir_find+0x50>
 801cc72:	2304      	movs	r3, #4
 801cc74:	75fb      	strb	r3, [r7, #23]
 801cc76:	e01d      	b.n	801ccb4 <dir_find+0x8c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 801cc78:	693b      	ldr	r3, [r7, #16]
 801cc7a:	330b      	adds	r3, #11
 801cc7c:	781b      	ldrb	r3, [r3, #0]
 801cc7e:	f003 0308 	and.w	r3, r3, #8
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d109      	bne.n	801cc9a <dir_find+0x72>
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	699b      	ldr	r3, [r3, #24]
 801cc8a:	220b      	movs	r2, #11
 801cc8c:	4619      	mov	r1, r3
 801cc8e:	6938      	ldr	r0, [r7, #16]
 801cc90:	f7ff f9c2 	bl	801c018 <mem_cmp>
 801cc94:	4603      	mov	r3, r0
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d00b      	beq.n	801ccb2 <dir_find+0x8a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 801cc9a:	2100      	movs	r1, #0
 801cc9c:	6878      	ldr	r0, [r7, #4]
 801cc9e:	f7ff fe56 	bl	801c94e <dir_next>
 801cca2:	4603      	mov	r3, r0
 801cca4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801cca6:	7dfb      	ldrb	r3, [r7, #23]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d0cc      	beq.n	801cc46 <dir_find+0x1e>
 801ccac:	e002      	b.n	801ccb4 <dir_find+0x8c>
		if (res != FR_OK) break;
 801ccae:	bf00      	nop
 801ccb0:	e000      	b.n	801ccb4 <dir_find+0x8c>
			break;
 801ccb2:	bf00      	nop

	return res;
 801ccb4:	7dfb      	ldrb	r3, [r7, #23]
}
 801ccb6:	4618      	mov	r0, r3
 801ccb8:	3718      	adds	r7, #24
 801ccba:	46bd      	mov	sp, r7
 801ccbc:	bd80      	pop	{r7, pc}

0801ccbe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801ccbe:	b580      	push	{r7, lr}
 801ccc0:	b086      	sub	sp, #24
 801ccc2:	af00      	add	r7, sp, #0
 801ccc4:	6078      	str	r0, [r7, #4]
 801ccc6:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 801ccc8:	2304      	movs	r3, #4
 801ccca:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 801cccc:	e039      	b.n	801cd42 <dir_read+0x84>
		res = move_window(dp->fs, dp->sect);
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	681a      	ldr	r2, [r3, #0]
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	691b      	ldr	r3, [r3, #16]
 801ccd6:	4619      	mov	r1, r3
 801ccd8:	4610      	mov	r0, r2
 801ccda:	f7ff fa23 	bl	801c124 <move_window>
 801ccde:	4603      	mov	r3, r0
 801cce0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801cce2:	7dfb      	ldrb	r3, [r7, #23]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d131      	bne.n	801cd4c <dir_read+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	695b      	ldr	r3, [r3, #20]
 801ccec:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 801ccee:	693b      	ldr	r3, [r7, #16]
 801ccf0:	781b      	ldrb	r3, [r3, #0]
 801ccf2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801ccf4:	7bfb      	ldrb	r3, [r7, #15]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d102      	bne.n	801cd00 <dir_read+0x42>
 801ccfa:	2304      	movs	r3, #4
 801ccfc:	75fb      	strb	r3, [r7, #23]
 801ccfe:	e02a      	b.n	801cd56 <dir_read+0x98>
		a = dir[DIR_Attr] & AM_MASK;
 801cd00:	693b      	ldr	r3, [r7, #16]
 801cd02:	330b      	adds	r3, #11
 801cd04:	781b      	ldrb	r3, [r3, #0]
 801cd06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cd0a:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 801cd0c:	7bfb      	ldrb	r3, [r7, #15]
 801cd0e:	2be5      	cmp	r3, #229	; 0xe5
 801cd10:	d00e      	beq.n	801cd30 <dir_read+0x72>
 801cd12:	7bbb      	ldrb	r3, [r7, #14]
 801cd14:	2b0f      	cmp	r3, #15
 801cd16:	d00b      	beq.n	801cd30 <dir_read+0x72>
 801cd18:	7bbb      	ldrb	r3, [r7, #14]
 801cd1a:	f023 0320 	bic.w	r3, r3, #32
 801cd1e:	2b08      	cmp	r3, #8
 801cd20:	bf0c      	ite	eq
 801cd22:	2301      	moveq	r3, #1
 801cd24:	2300      	movne	r3, #0
 801cd26:	b2db      	uxtb	r3, r3
 801cd28:	461a      	mov	r2, r3
 801cd2a:	683b      	ldr	r3, [r7, #0]
 801cd2c:	4293      	cmp	r3, r2
 801cd2e:	d00f      	beq.n	801cd50 <dir_read+0x92>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 801cd30:	2100      	movs	r1, #0
 801cd32:	6878      	ldr	r0, [r7, #4]
 801cd34:	f7ff fe0b 	bl	801c94e <dir_next>
 801cd38:	4603      	mov	r3, r0
 801cd3a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801cd3c:	7dfb      	ldrb	r3, [r7, #23]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d108      	bne.n	801cd54 <dir_read+0x96>
	while (dp->sect) {
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	691b      	ldr	r3, [r3, #16]
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d1c1      	bne.n	801ccce <dir_read+0x10>
 801cd4a:	e004      	b.n	801cd56 <dir_read+0x98>
		if (res != FR_OK) break;
 801cd4c:	bf00      	nop
 801cd4e:	e002      	b.n	801cd56 <dir_read+0x98>
			break;
 801cd50:	bf00      	nop
 801cd52:	e000      	b.n	801cd56 <dir_read+0x98>
		if (res != FR_OK) break;
 801cd54:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 801cd56:	7dfb      	ldrb	r3, [r7, #23]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d002      	beq.n	801cd62 <dir_read+0xa4>
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	2200      	movs	r2, #0
 801cd60:	611a      	str	r2, [r3, #16]

	return res;
 801cd62:	7dfb      	ldrb	r3, [r7, #23]
}
 801cd64:	4618      	mov	r0, r3
 801cd66:	3718      	adds	r7, #24
 801cd68:	46bd      	mov	sp, r7
 801cd6a:	bd80      	pop	{r7, pc}

0801cd6c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801cd6c:	b580      	push	{r7, lr}
 801cd6e:	b084      	sub	sp, #16
 801cd70:	af00      	add	r7, sp, #0
 801cd72:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801cd74:	2101      	movs	r1, #1
 801cd76:	6878      	ldr	r0, [r7, #4]
 801cd78:	f7ff febc 	bl	801caf4 <dir_alloc>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 801cd80:	7bfb      	ldrb	r3, [r7, #15]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d11f      	bne.n	801cdc6 <dir_register+0x5a>
		res = move_window(dp->fs, dp->sect);
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	681a      	ldr	r2, [r3, #0]
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	691b      	ldr	r3, [r3, #16]
 801cd8e:	4619      	mov	r1, r3
 801cd90:	4610      	mov	r0, r2
 801cd92:	f7ff f9c7 	bl	801c124 <move_window>
 801cd96:	4603      	mov	r3, r0
 801cd98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801cd9a:	7bfb      	ldrb	r3, [r7, #15]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d112      	bne.n	801cdc6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	695b      	ldr	r3, [r3, #20]
 801cda4:	2220      	movs	r2, #32
 801cda6:	2100      	movs	r1, #0
 801cda8:	4618      	mov	r0, r3
 801cdaa:	f7ff f91b 	bl	801bfe4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	6958      	ldr	r0, [r3, #20]
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	699b      	ldr	r3, [r3, #24]
 801cdb6:	220b      	movs	r2, #11
 801cdb8:	4619      	mov	r1, r3
 801cdba:	f7ff f8f5 	bl	801bfa8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	2201      	movs	r2, #1
 801cdc4:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 801cdc6:	7bfb      	ldrb	r3, [r7, #15]
}
 801cdc8:	4618      	mov	r0, r3
 801cdca:	3710      	adds	r7, #16
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}

0801cdd0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801cdd0:	b480      	push	{r7}
 801cdd2:	b087      	sub	sp, #28
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
 801cdd8:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	3309      	adds	r3, #9
 801cdde:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	691b      	ldr	r3, [r3, #16]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d059      	beq.n	801ce9c <get_fileinfo+0xcc>
		dir = dp->dir;
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	695b      	ldr	r3, [r3, #20]
 801cdec:	60bb      	str	r3, [r7, #8]
		i = 0;
 801cdee:	2300      	movs	r3, #0
 801cdf0:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 801cdf2:	e01c      	b.n	801ce2e <get_fileinfo+0x5e>
			c = (TCHAR)dir[i++];
 801cdf4:	697b      	ldr	r3, [r7, #20]
 801cdf6:	1c5a      	adds	r2, r3, #1
 801cdf8:	617a      	str	r2, [r7, #20]
 801cdfa:	68ba      	ldr	r2, [r7, #8]
 801cdfc:	4413      	add	r3, r2
 801cdfe:	781b      	ldrb	r3, [r3, #0]
 801ce00:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 801ce02:	7bfb      	ldrb	r3, [r7, #15]
 801ce04:	2b20      	cmp	r3, #32
 801ce06:	d100      	bne.n	801ce0a <get_fileinfo+0x3a>
 801ce08:	e011      	b.n	801ce2e <get_fileinfo+0x5e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801ce0a:	7bfb      	ldrb	r3, [r7, #15]
 801ce0c:	2b05      	cmp	r3, #5
 801ce0e:	d101      	bne.n	801ce14 <get_fileinfo+0x44>
 801ce10:	23e5      	movs	r3, #229	; 0xe5
 801ce12:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 801ce14:	697b      	ldr	r3, [r7, #20]
 801ce16:	2b09      	cmp	r3, #9
 801ce18:	d104      	bne.n	801ce24 <get_fileinfo+0x54>
 801ce1a:	693b      	ldr	r3, [r7, #16]
 801ce1c:	1c5a      	adds	r2, r3, #1
 801ce1e:	613a      	str	r2, [r7, #16]
 801ce20:	222e      	movs	r2, #46	; 0x2e
 801ce22:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 801ce24:	693b      	ldr	r3, [r7, #16]
 801ce26:	1c5a      	adds	r2, r3, #1
 801ce28:	613a      	str	r2, [r7, #16]
 801ce2a:	7bfa      	ldrb	r2, [r7, #15]
 801ce2c:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 801ce2e:	697b      	ldr	r3, [r7, #20]
 801ce30:	2b0a      	cmp	r3, #10
 801ce32:	d9df      	bls.n	801cdf4 <get_fileinfo+0x24>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 801ce34:	68bb      	ldr	r3, [r7, #8]
 801ce36:	7ada      	ldrb	r2, [r3, #11]
 801ce38:	683b      	ldr	r3, [r7, #0]
 801ce3a:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 801ce3c:	68bb      	ldr	r3, [r7, #8]
 801ce3e:	331f      	adds	r3, #31
 801ce40:	781b      	ldrb	r3, [r3, #0]
 801ce42:	061a      	lsls	r2, r3, #24
 801ce44:	68bb      	ldr	r3, [r7, #8]
 801ce46:	331e      	adds	r3, #30
 801ce48:	781b      	ldrb	r3, [r3, #0]
 801ce4a:	041b      	lsls	r3, r3, #16
 801ce4c:	4313      	orrs	r3, r2
 801ce4e:	68ba      	ldr	r2, [r7, #8]
 801ce50:	321d      	adds	r2, #29
 801ce52:	7812      	ldrb	r2, [r2, #0]
 801ce54:	0212      	lsls	r2, r2, #8
 801ce56:	4313      	orrs	r3, r2
 801ce58:	68ba      	ldr	r2, [r7, #8]
 801ce5a:	321c      	adds	r2, #28
 801ce5c:	7812      	ldrb	r2, [r2, #0]
 801ce5e:	431a      	orrs	r2, r3
 801ce60:	683b      	ldr	r3, [r7, #0]
 801ce62:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 801ce64:	68bb      	ldr	r3, [r7, #8]
 801ce66:	3319      	adds	r3, #25
 801ce68:	781b      	ldrb	r3, [r3, #0]
 801ce6a:	021b      	lsls	r3, r3, #8
 801ce6c:	b21a      	sxth	r2, r3
 801ce6e:	68bb      	ldr	r3, [r7, #8]
 801ce70:	3318      	adds	r3, #24
 801ce72:	781b      	ldrb	r3, [r3, #0]
 801ce74:	b21b      	sxth	r3, r3
 801ce76:	4313      	orrs	r3, r2
 801ce78:	b21b      	sxth	r3, r3
 801ce7a:	b29a      	uxth	r2, r3
 801ce7c:	683b      	ldr	r3, [r7, #0]
 801ce7e:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 801ce80:	68bb      	ldr	r3, [r7, #8]
 801ce82:	3317      	adds	r3, #23
 801ce84:	781b      	ldrb	r3, [r3, #0]
 801ce86:	021b      	lsls	r3, r3, #8
 801ce88:	b21a      	sxth	r2, r3
 801ce8a:	68bb      	ldr	r3, [r7, #8]
 801ce8c:	3316      	adds	r3, #22
 801ce8e:	781b      	ldrb	r3, [r3, #0]
 801ce90:	b21b      	sxth	r3, r3
 801ce92:	4313      	orrs	r3, r2
 801ce94:	b21b      	sxth	r3, r3
 801ce96:	b29a      	uxth	r2, r3
 801ce98:	683b      	ldr	r3, [r7, #0]
 801ce9a:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 801ce9c:	693b      	ldr	r3, [r7, #16]
 801ce9e:	2200      	movs	r2, #0
 801cea0:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 801cea2:	bf00      	nop
 801cea4:	371c      	adds	r7, #28
 801cea6:	46bd      	mov	sp, r7
 801cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceac:	4770      	bx	lr
	...

0801ceb0 <get_achar>:
#if _USE_FIND && _FS_MINIMIZE <= 1
static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 801ceb0:	b480      	push	{r7}
 801ceb2:	b085      	sub	sp, #20
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
	WCHAR chr;

#if !_LFN_UNICODE
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	1c59      	adds	r1, r3, #1
 801cebe:	687a      	ldr	r2, [r7, #4]
 801cec0:	6011      	str	r1, [r2, #0]
 801cec2:	781b      	ldrb	r3, [r3, #0]
 801cec4:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801cec6:	89fb      	ldrh	r3, [r7, #14]
 801cec8:	2b60      	cmp	r3, #96	; 0x60
 801ceca:	d905      	bls.n	801ced8 <get_achar+0x28>
 801cecc:	89fb      	ldrh	r3, [r7, #14]
 801cece:	2b7a      	cmp	r3, #122	; 0x7a
 801ced0:	d802      	bhi.n	801ced8 <get_achar+0x28>
 801ced2:	89fb      	ldrh	r3, [r7, #14]
 801ced4:	3b20      	subs	r3, #32
 801ced6:	81fb      	strh	r3, [r7, #14]
	if (IsDBCS1(chr) && IsDBCS2(**ptr))		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801ced8:	89fb      	ldrh	r3, [r7, #14]
 801ceda:	2b7f      	cmp	r3, #127	; 0x7f
 801cedc:	d904      	bls.n	801cee8 <get_achar+0x38>
 801cede:	89fb      	ldrh	r3, [r7, #14]
 801cee0:	3b80      	subs	r3, #128	; 0x80
 801cee2:	4a05      	ldr	r2, [pc, #20]	; (801cef8 <get_achar+0x48>)
 801cee4:	5cd3      	ldrb	r3, [r2, r3]
 801cee6:	81fb      	strh	r3, [r7, #14]
#endif
#else
	chr = ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
	return chr;
 801cee8:	89fb      	ldrh	r3, [r7, #14]
}
 801ceea:	4618      	mov	r0, r3
 801ceec:	3714      	adds	r7, #20
 801ceee:	46bd      	mov	sp, r7
 801cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef4:	4770      	bx	lr
 801cef6:	bf00      	nop
 801cef8:	08026d68 	.word	0x08026d68

0801cefc <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b08a      	sub	sp, #40	; 0x28
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	60f8      	str	r0, [r7, #12]
 801cf04:	60b9      	str	r1, [r7, #8]
 801cf06:	607a      	str	r2, [r7, #4]
 801cf08:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801cf0a:	e009      	b.n	801cf20 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 801cf0c:	f107 0308 	add.w	r3, r7, #8
 801cf10:	4618      	mov	r0, r3
 801cf12:	f7ff ffcd 	bl	801ceb0 <get_achar>
 801cf16:	4603      	mov	r3, r0
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d101      	bne.n	801cf20 <pattern_matching+0x24>
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	e064      	b.n	801cfea <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	1e5a      	subs	r2, r3, #1
 801cf24:	607a      	str	r2, [r7, #4]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d1f0      	bne.n	801cf0c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	781b      	ldrb	r3, [r3, #0]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d104      	bne.n	801cf3c <pattern_matching+0x40>
 801cf32:	683b      	ldr	r3, [r7, #0]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d001      	beq.n	801cf3c <pattern_matching+0x40>
 801cf38:	2301      	movs	r3, #1
 801cf3a:	e056      	b.n	801cfea <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	617b      	str	r3, [r7, #20]
 801cf40:	68bb      	ldr	r3, [r7, #8]
 801cf42:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801cf44:	697b      	ldr	r3, [r7, #20]
 801cf46:	781b      	ldrb	r3, [r3, #0]
 801cf48:	2b3f      	cmp	r3, #63	; 0x3f
 801cf4a:	d003      	beq.n	801cf54 <pattern_matching+0x58>
 801cf4c:	697b      	ldr	r3, [r7, #20]
 801cf4e:	781b      	ldrb	r3, [r3, #0]
 801cf50:	2b2a      	cmp	r3, #42	; 0x2a
 801cf52:	d126      	bne.n	801cfa2 <pattern_matching+0xa6>
				nm = nx = 0;
 801cf54:	2300      	movs	r3, #0
 801cf56:	61fb      	str	r3, [r7, #28]
 801cf58:	69fb      	ldr	r3, [r7, #28]
 801cf5a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 801cf5c:	697b      	ldr	r3, [r7, #20]
 801cf5e:	1c5a      	adds	r2, r3, #1
 801cf60:	617a      	str	r2, [r7, #20]
 801cf62:	781b      	ldrb	r3, [r3, #0]
 801cf64:	2b3f      	cmp	r3, #63	; 0x3f
 801cf66:	d103      	bne.n	801cf70 <pattern_matching+0x74>
 801cf68:	6a3b      	ldr	r3, [r7, #32]
 801cf6a:	3301      	adds	r3, #1
 801cf6c:	623b      	str	r3, [r7, #32]
 801cf6e:	e001      	b.n	801cf74 <pattern_matching+0x78>
 801cf70:	2301      	movs	r3, #1
 801cf72:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 801cf74:	697b      	ldr	r3, [r7, #20]
 801cf76:	781b      	ldrb	r3, [r3, #0]
 801cf78:	2b3f      	cmp	r3, #63	; 0x3f
 801cf7a:	d0ef      	beq.n	801cf5c <pattern_matching+0x60>
 801cf7c:	697b      	ldr	r3, [r7, #20]
 801cf7e:	781b      	ldrb	r3, [r3, #0]
 801cf80:	2b2a      	cmp	r3, #42	; 0x2a
 801cf82:	d0eb      	beq.n	801cf5c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 801cf84:	6978      	ldr	r0, [r7, #20]
 801cf86:	6939      	ldr	r1, [r7, #16]
 801cf88:	69fb      	ldr	r3, [r7, #28]
 801cf8a:	6a3a      	ldr	r2, [r7, #32]
 801cf8c:	f7ff ffb6 	bl	801cefc <pattern_matching>
 801cf90:	4603      	mov	r3, r0
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d001      	beq.n	801cf9a <pattern_matching+0x9e>
 801cf96:	2301      	movs	r3, #1
 801cf98:	e027      	b.n	801cfea <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 801cf9a:	693b      	ldr	r3, [r7, #16]
 801cf9c:	781b      	ldrb	r3, [r3, #0]
 801cf9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cfa0:	e017      	b.n	801cfd2 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801cfa2:	f107 0314 	add.w	r3, r7, #20
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	f7ff ff82 	bl	801ceb0 <get_achar>
 801cfac:	4603      	mov	r3, r0
 801cfae:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 801cfb0:	f107 0310 	add.w	r3, r7, #16
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	f7ff ff7b 	bl	801ceb0 <get_achar>
 801cfba:	4603      	mov	r3, r0
 801cfbc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 801cfbe:	8b7a      	ldrh	r2, [r7, #26]
 801cfc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801cfc2:	429a      	cmp	r2, r3
 801cfc4:	d104      	bne.n	801cfd0 <pattern_matching+0xd4>
			if (!pc) return 1;		/* Branch matched? (matched at end of both strings) */
 801cfc6:	8b7b      	ldrh	r3, [r7, #26]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d1bb      	bne.n	801cf44 <pattern_matching+0x48>
 801cfcc:	2301      	movs	r3, #1
 801cfce:	e00c      	b.n	801cfea <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 801cfd0:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801cfd2:	f107 0308 	add.w	r3, r7, #8
 801cfd6:	4618      	mov	r0, r3
 801cfd8:	f7ff ff6a 	bl	801ceb0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 801cfdc:	683b      	ldr	r3, [r7, #0]
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d002      	beq.n	801cfe8 <pattern_matching+0xec>
 801cfe2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d1a9      	bne.n	801cf3c <pattern_matching+0x40>

	return 0;
 801cfe8:	2300      	movs	r3, #0
}
 801cfea:	4618      	mov	r0, r3
 801cfec:	3728      	adds	r7, #40	; 0x28
 801cfee:	46bd      	mov	sp, r7
 801cff0:	bd80      	pop	{r7, pc}
	...

0801cff4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b088      	sub	sp, #32
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
 801cffc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 801cffe:	683b      	ldr	r3, [r7, #0]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	60fb      	str	r3, [r7, #12]
 801d004:	e002      	b.n	801d00c <create_name+0x18>
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	3301      	adds	r3, #1
 801d00a:	60fb      	str	r3, [r7, #12]
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	781b      	ldrb	r3, [r3, #0]
 801d010:	2b2f      	cmp	r3, #47	; 0x2f
 801d012:	d0f8      	beq.n	801d006 <create_name+0x12>
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	781b      	ldrb	r3, [r3, #0]
 801d018:	2b5c      	cmp	r3, #92	; 0x5c
 801d01a:	d0f4      	beq.n	801d006 <create_name+0x12>
	sfn = dp->fn;
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	699b      	ldr	r3, [r3, #24]
 801d020:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801d022:	220b      	movs	r2, #11
 801d024:	2120      	movs	r1, #32
 801d026:	68b8      	ldr	r0, [r7, #8]
 801d028:	f7fe ffdc 	bl	801bfe4 <mem_set>
	si = i = b = 0; ni = 8;
 801d02c:	2300      	movs	r3, #0
 801d02e:	77fb      	strb	r3, [r7, #31]
 801d030:	2300      	movs	r3, #0
 801d032:	613b      	str	r3, [r7, #16]
 801d034:	693b      	ldr	r3, [r7, #16]
 801d036:	617b      	str	r3, [r7, #20]
 801d038:	2308      	movs	r3, #8
 801d03a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 801d03c:	68fa      	ldr	r2, [r7, #12]
 801d03e:	697b      	ldr	r3, [r7, #20]
 801d040:	4413      	add	r3, r2
 801d042:	781b      	ldrb	r3, [r3, #0]
 801d044:	2b2e      	cmp	r3, #46	; 0x2e
 801d046:	d12f      	bne.n	801d0a8 <create_name+0xb4>
		for (;;) {
			c = (BYTE)p[si++];
 801d048:	697b      	ldr	r3, [r7, #20]
 801d04a:	1c5a      	adds	r2, r3, #1
 801d04c:	617a      	str	r2, [r7, #20]
 801d04e:	68fa      	ldr	r2, [r7, #12]
 801d050:	4413      	add	r3, r2
 801d052:	781b      	ldrb	r3, [r3, #0]
 801d054:	77bb      	strb	r3, [r7, #30]
			if (c != '.' || si >= 3) break;
 801d056:	7fbb      	ldrb	r3, [r7, #30]
 801d058:	2b2e      	cmp	r3, #46	; 0x2e
 801d05a:	d10a      	bne.n	801d072 <create_name+0x7e>
 801d05c:	697b      	ldr	r3, [r7, #20]
 801d05e:	2b02      	cmp	r3, #2
 801d060:	d807      	bhi.n	801d072 <create_name+0x7e>
			sfn[i++] = c;
 801d062:	693b      	ldr	r3, [r7, #16]
 801d064:	1c5a      	adds	r2, r3, #1
 801d066:	613a      	str	r2, [r7, #16]
 801d068:	68ba      	ldr	r2, [r7, #8]
 801d06a:	4413      	add	r3, r2
 801d06c:	7fba      	ldrb	r2, [r7, #30]
 801d06e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 801d070:	e7ea      	b.n	801d048 <create_name+0x54>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801d072:	7fbb      	ldrb	r3, [r7, #30]
 801d074:	2b2f      	cmp	r3, #47	; 0x2f
 801d076:	d007      	beq.n	801d088 <create_name+0x94>
 801d078:	7fbb      	ldrb	r3, [r7, #30]
 801d07a:	2b5c      	cmp	r3, #92	; 0x5c
 801d07c:	d004      	beq.n	801d088 <create_name+0x94>
 801d07e:	7fbb      	ldrb	r3, [r7, #30]
 801d080:	2b20      	cmp	r3, #32
 801d082:	d901      	bls.n	801d088 <create_name+0x94>
 801d084:	2306      	movs	r3, #6
 801d086:	e0a2      	b.n	801d1ce <create_name+0x1da>
		*path = &p[si];									/* Return pointer to the next segment */
 801d088:	68fa      	ldr	r2, [r7, #12]
 801d08a:	697b      	ldr	r3, [r7, #20]
 801d08c:	441a      	add	r2, r3
 801d08e:	683b      	ldr	r3, [r7, #0]
 801d090:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 801d092:	7fbb      	ldrb	r3, [r7, #30]
 801d094:	2b20      	cmp	r3, #32
 801d096:	d801      	bhi.n	801d09c <create_name+0xa8>
 801d098:	2224      	movs	r2, #36	; 0x24
 801d09a:	e000      	b.n	801d09e <create_name+0xaa>
 801d09c:	2220      	movs	r2, #32
 801d09e:	68bb      	ldr	r3, [r7, #8]
 801d0a0:	330b      	adds	r3, #11
 801d0a2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	e092      	b.n	801d1ce <create_name+0x1da>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801d0a8:	697b      	ldr	r3, [r7, #20]
 801d0aa:	1c5a      	adds	r2, r3, #1
 801d0ac:	617a      	str	r2, [r7, #20]
 801d0ae:	68fa      	ldr	r2, [r7, #12]
 801d0b0:	4413      	add	r3, r2
 801d0b2:	781b      	ldrb	r3, [r3, #0]
 801d0b4:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 801d0b6:	7fbb      	ldrb	r3, [r7, #30]
 801d0b8:	2b20      	cmp	r3, #32
 801d0ba:	d953      	bls.n	801d164 <create_name+0x170>
 801d0bc:	7fbb      	ldrb	r3, [r7, #30]
 801d0be:	2b2f      	cmp	r3, #47	; 0x2f
 801d0c0:	d050      	beq.n	801d164 <create_name+0x170>
 801d0c2:	7fbb      	ldrb	r3, [r7, #30]
 801d0c4:	2b5c      	cmp	r3, #92	; 0x5c
 801d0c6:	d04d      	beq.n	801d164 <create_name+0x170>
		if (c == '.' || i >= ni) {
 801d0c8:	7fbb      	ldrb	r3, [r7, #30]
 801d0ca:	2b2e      	cmp	r3, #46	; 0x2e
 801d0cc:	d003      	beq.n	801d0d6 <create_name+0xe2>
 801d0ce:	693a      	ldr	r2, [r7, #16]
 801d0d0:	69bb      	ldr	r3, [r7, #24]
 801d0d2:	429a      	cmp	r2, r3
 801d0d4:	d30f      	bcc.n	801d0f6 <create_name+0x102>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 801d0d6:	69bb      	ldr	r3, [r7, #24]
 801d0d8:	2b08      	cmp	r3, #8
 801d0da:	d102      	bne.n	801d0e2 <create_name+0xee>
 801d0dc:	7fbb      	ldrb	r3, [r7, #30]
 801d0de:	2b2e      	cmp	r3, #46	; 0x2e
 801d0e0:	d001      	beq.n	801d0e6 <create_name+0xf2>
 801d0e2:	2306      	movs	r3, #6
 801d0e4:	e073      	b.n	801d1ce <create_name+0x1da>
			i = 8; ni = 11;
 801d0e6:	2308      	movs	r3, #8
 801d0e8:	613b      	str	r3, [r7, #16]
 801d0ea:	230b      	movs	r3, #11
 801d0ec:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 801d0ee:	7ffb      	ldrb	r3, [r7, #31]
 801d0f0:	009b      	lsls	r3, r3, #2
 801d0f2:	77fb      	strb	r3, [r7, #31]
 801d0f4:	e035      	b.n	801d162 <create_name+0x16e>
		}
		if (c >= 0x80) {				/* Extended character? */
 801d0f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	da08      	bge.n	801d110 <create_name+0x11c>
			b |= 3;						/* Eliminate NT flag */
 801d0fe:	7ffb      	ldrb	r3, [r7, #31]
 801d100:	f043 0303 	orr.w	r3, r3, #3
 801d104:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801d106:	7fbb      	ldrb	r3, [r7, #30]
 801d108:	3b80      	subs	r3, #128	; 0x80
 801d10a:	4a33      	ldr	r2, [pc, #204]	; (801d1d8 <create_name+0x1e4>)
 801d10c:	5cd3      	ldrb	r3, [r2, r3]
 801d10e:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 801d110:	7fbb      	ldrb	r3, [r7, #30]
 801d112:	4619      	mov	r1, r3
 801d114:	4831      	ldr	r0, [pc, #196]	; (801d1dc <create_name+0x1e8>)
 801d116:	f7fe ffa6 	bl	801c066 <chk_chr>
 801d11a:	4603      	mov	r3, r0
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d001      	beq.n	801d124 <create_name+0x130>
				return FR_INVALID_NAME;
 801d120:	2306      	movs	r3, #6
 801d122:	e054      	b.n	801d1ce <create_name+0x1da>
			if (IsUpper(c)) {			/* ASCII large capital? */
 801d124:	7fbb      	ldrb	r3, [r7, #30]
 801d126:	2b40      	cmp	r3, #64	; 0x40
 801d128:	d907      	bls.n	801d13a <create_name+0x146>
 801d12a:	7fbb      	ldrb	r3, [r7, #30]
 801d12c:	2b5a      	cmp	r3, #90	; 0x5a
 801d12e:	d804      	bhi.n	801d13a <create_name+0x146>
				b |= 2;
 801d130:	7ffb      	ldrb	r3, [r7, #31]
 801d132:	f043 0302 	orr.w	r3, r3, #2
 801d136:	77fb      	strb	r3, [r7, #31]
 801d138:	e00c      	b.n	801d154 <create_name+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 801d13a:	7fbb      	ldrb	r3, [r7, #30]
 801d13c:	2b60      	cmp	r3, #96	; 0x60
 801d13e:	d909      	bls.n	801d154 <create_name+0x160>
 801d140:	7fbb      	ldrb	r3, [r7, #30]
 801d142:	2b7a      	cmp	r3, #122	; 0x7a
 801d144:	d806      	bhi.n	801d154 <create_name+0x160>
					b |= 1; c -= 0x20;
 801d146:	7ffb      	ldrb	r3, [r7, #31]
 801d148:	f043 0301 	orr.w	r3, r3, #1
 801d14c:	77fb      	strb	r3, [r7, #31]
 801d14e:	7fbb      	ldrb	r3, [r7, #30]
 801d150:	3b20      	subs	r3, #32
 801d152:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 801d154:	693b      	ldr	r3, [r7, #16]
 801d156:	1c5a      	adds	r2, r3, #1
 801d158:	613a      	str	r2, [r7, #16]
 801d15a:	68ba      	ldr	r2, [r7, #8]
 801d15c:	4413      	add	r3, r2
 801d15e:	7fba      	ldrb	r2, [r7, #30]
 801d160:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801d162:	e7a1      	b.n	801d0a8 <create_name+0xb4>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801d164:	68fa      	ldr	r2, [r7, #12]
 801d166:	697b      	ldr	r3, [r7, #20]
 801d168:	441a      	add	r2, r3
 801d16a:	683b      	ldr	r3, [r7, #0]
 801d16c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801d16e:	7fbb      	ldrb	r3, [r7, #30]
 801d170:	2b20      	cmp	r3, #32
 801d172:	d801      	bhi.n	801d178 <create_name+0x184>
 801d174:	2304      	movs	r3, #4
 801d176:	e000      	b.n	801d17a <create_name+0x186>
 801d178:	2300      	movs	r3, #0
 801d17a:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 801d17c:	693b      	ldr	r3, [r7, #16]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d101      	bne.n	801d186 <create_name+0x192>
 801d182:	2306      	movs	r3, #6
 801d184:	e023      	b.n	801d1ce <create_name+0x1da>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 801d186:	68bb      	ldr	r3, [r7, #8]
 801d188:	781b      	ldrb	r3, [r3, #0]
 801d18a:	2be5      	cmp	r3, #229	; 0xe5
 801d18c:	d102      	bne.n	801d194 <create_name+0x1a0>
 801d18e:	68bb      	ldr	r3, [r7, #8]
 801d190:	2205      	movs	r2, #5
 801d192:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 801d194:	69bb      	ldr	r3, [r7, #24]
 801d196:	2b08      	cmp	r3, #8
 801d198:	d102      	bne.n	801d1a0 <create_name+0x1ac>
 801d19a:	7ffb      	ldrb	r3, [r7, #31]
 801d19c:	009b      	lsls	r3, r3, #2
 801d19e:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 801d1a0:	7ffb      	ldrb	r3, [r7, #31]
 801d1a2:	f003 0303 	and.w	r3, r3, #3
 801d1a6:	2b01      	cmp	r3, #1
 801d1a8:	d103      	bne.n	801d1b2 <create_name+0x1be>
 801d1aa:	7fbb      	ldrb	r3, [r7, #30]
 801d1ac:	f043 0310 	orr.w	r3, r3, #16
 801d1b0:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 801d1b2:	7ffb      	ldrb	r3, [r7, #31]
 801d1b4:	f003 030c 	and.w	r3, r3, #12
 801d1b8:	2b04      	cmp	r3, #4
 801d1ba:	d103      	bne.n	801d1c4 <create_name+0x1d0>
 801d1bc:	7fbb      	ldrb	r3, [r7, #30]
 801d1be:	f043 0308 	orr.w	r3, r3, #8
 801d1c2:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 801d1c4:	68bb      	ldr	r3, [r7, #8]
 801d1c6:	330b      	adds	r3, #11
 801d1c8:	7fba      	ldrb	r2, [r7, #30]
 801d1ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801d1cc:	2300      	movs	r3, #0
#endif
}
 801d1ce:	4618      	mov	r0, r3
 801d1d0:	3720      	adds	r7, #32
 801d1d2:	46bd      	mov	sp, r7
 801d1d4:	bd80      	pop	{r7, pc}
 801d1d6:	bf00      	nop
 801d1d8:	08026d68 	.word	0x08026d68
 801d1dc:	08026de8 	.word	0x08026de8

0801d1e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	b084      	sub	sp, #16
 801d1e4:	af00      	add	r7, sp, #0
 801d1e6:	6078      	str	r0, [r7, #4]
 801d1e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 801d1ea:	683b      	ldr	r3, [r7, #0]
 801d1ec:	781b      	ldrb	r3, [r3, #0]
 801d1ee:	2b2f      	cmp	r3, #47	; 0x2f
 801d1f0:	d003      	beq.n	801d1fa <follow_path+0x1a>
 801d1f2:	683b      	ldr	r3, [r7, #0]
 801d1f4:	781b      	ldrb	r3, [r3, #0]
 801d1f6:	2b5c      	cmp	r3, #92	; 0x5c
 801d1f8:	d106      	bne.n	801d208 <follow_path+0x28>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 801d1fa:	683b      	ldr	r3, [r7, #0]
 801d1fc:	3301      	adds	r3, #1
 801d1fe:	603b      	str	r3, [r7, #0]
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	2200      	movs	r2, #0
 801d204:	609a      	str	r2, [r3, #8]
 801d206:	e004      	b.n	801d212 <follow_path+0x32>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	695a      	ldr	r2, [r3, #20]
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801d212:	683b      	ldr	r3, [r7, #0]
 801d214:	781b      	ldrb	r3, [r3, #0]
 801d216:	2b1f      	cmp	r3, #31
 801d218:	d809      	bhi.n	801d22e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 801d21a:	2100      	movs	r1, #0
 801d21c:	6878      	ldr	r0, [r7, #4]
 801d21e:	f7ff fb17 	bl	801c850 <dir_sdi>
 801d222:	4603      	mov	r3, r0
 801d224:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	2200      	movs	r2, #0
 801d22a:	615a      	str	r2, [r3, #20]
 801d22c:	e056      	b.n	801d2dc <follow_path+0xfc>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801d22e:	463b      	mov	r3, r7
 801d230:	4619      	mov	r1, r3
 801d232:	6878      	ldr	r0, [r7, #4]
 801d234:	f7ff fede 	bl	801cff4 <create_name>
 801d238:	4603      	mov	r3, r0
 801d23a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801d23c:	7bfb      	ldrb	r3, [r7, #15]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d147      	bne.n	801d2d2 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the sagment name */
 801d242:	6878      	ldr	r0, [r7, #4]
 801d244:	f7ff fcf0 	bl	801cc28 <dir_find>
 801d248:	4603      	mov	r3, r0
 801d24a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	699b      	ldr	r3, [r3, #24]
 801d250:	7adb      	ldrb	r3, [r3, #11]
 801d252:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 801d254:	7bfb      	ldrb	r3, [r7, #15]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d01d      	beq.n	801d296 <follow_path+0xb6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801d25a:	7bfb      	ldrb	r3, [r7, #15]
 801d25c:	2b04      	cmp	r3, #4
 801d25e:	d13a      	bne.n	801d2d6 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 801d260:	7bbb      	ldrb	r3, [r7, #14]
 801d262:	f003 0320 	and.w	r3, r3, #32
 801d266:	2b00      	cmp	r3, #0
 801d268:	d00d      	beq.n	801d286 <follow_path+0xa6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	2200      	movs	r2, #0
 801d26e:	609a      	str	r2, [r3, #8]
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	2200      	movs	r2, #0
 801d274:	615a      	str	r2, [r3, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801d276:	7bbb      	ldrb	r3, [r7, #14]
 801d278:	f003 0304 	and.w	r3, r3, #4
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d026      	beq.n	801d2ce <follow_path+0xee>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 801d280:	2300      	movs	r3, #0
 801d282:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801d284:	e027      	b.n	801d2d6 <follow_path+0xf6>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801d286:	7bbb      	ldrb	r3, [r7, #14]
 801d288:	f003 0304 	and.w	r3, r3, #4
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	d122      	bne.n	801d2d6 <follow_path+0xf6>
 801d290:	2305      	movs	r3, #5
 801d292:	73fb      	strb	r3, [r7, #15]
				break;
 801d294:	e01f      	b.n	801d2d6 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801d296:	7bbb      	ldrb	r3, [r7, #14]
 801d298:	f003 0304 	and.w	r3, r3, #4
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	d11c      	bne.n	801d2da <follow_path+0xfa>
			dir = dp->dir;						/* Follow the sub-directory */
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	695b      	ldr	r3, [r3, #20]
 801d2a4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 801d2a6:	68bb      	ldr	r3, [r7, #8]
 801d2a8:	330b      	adds	r3, #11
 801d2aa:	781b      	ldrb	r3, [r3, #0]
 801d2ac:	f003 0310 	and.w	r3, r3, #16
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d102      	bne.n	801d2ba <follow_path+0xda>
				res = FR_NO_PATH; break;
 801d2b4:	2305      	movs	r3, #5
 801d2b6:	73fb      	strb	r3, [r7, #15]
 801d2b8:	e010      	b.n	801d2dc <follow_path+0xfc>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	68b9      	ldr	r1, [r7, #8]
 801d2c0:	4618      	mov	r0, r3
 801d2c2:	f7ff fc5d 	bl	801cb80 <ld_clust>
 801d2c6:	4602      	mov	r2, r0
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	609a      	str	r2, [r3, #8]
 801d2cc:	e7af      	b.n	801d22e <follow_path+0x4e>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801d2ce:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801d2d0:	e7ad      	b.n	801d22e <follow_path+0x4e>
			if (res != FR_OK) break;
 801d2d2:	bf00      	nop
 801d2d4:	e002      	b.n	801d2dc <follow_path+0xfc>
				break;
 801d2d6:	bf00      	nop
 801d2d8:	e000      	b.n	801d2dc <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801d2da:	bf00      	nop
		}
	}

	return res;
 801d2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2de:	4618      	mov	r0, r3
 801d2e0:	3710      	adds	r7, #16
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	bd80      	pop	{r7, pc}
	...

0801d2e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801d2e8:	b480      	push	{r7}
 801d2ea:	b089      	sub	sp, #36	; 0x24
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801d2f0:	f04f 33ff 	mov.w	r3, #4294967295
 801d2f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d06f      	beq.n	801d3de <get_ldnumber+0xf6>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	61bb      	str	r3, [r7, #24]
 801d304:	e002      	b.n	801d30c <get_ldnumber+0x24>
 801d306:	69bb      	ldr	r3, [r7, #24]
 801d308:	3301      	adds	r3, #1
 801d30a:	61bb      	str	r3, [r7, #24]
 801d30c:	69bb      	ldr	r3, [r7, #24]
 801d30e:	781b      	ldrb	r3, [r3, #0]
 801d310:	2b20      	cmp	r3, #32
 801d312:	d903      	bls.n	801d31c <get_ldnumber+0x34>
 801d314:	69bb      	ldr	r3, [r7, #24]
 801d316:	781b      	ldrb	r3, [r3, #0]
 801d318:	2b3a      	cmp	r3, #58	; 0x3a
 801d31a:	d1f4      	bne.n	801d306 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801d31c:	69bb      	ldr	r3, [r7, #24]
 801d31e:	781b      	ldrb	r3, [r3, #0]
 801d320:	2b3a      	cmp	r3, #58	; 0x3a
 801d322:	d159      	bne.n	801d3d8 <get_ldnumber+0xf0>
			tp = *path;
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	681b      	ldr	r3, [r3, #0]
 801d328:	61fb      	str	r3, [r7, #28]
			i = *tp++ - '0'; 
 801d32a:	69fb      	ldr	r3, [r7, #28]
 801d32c:	1c5a      	adds	r2, r3, #1
 801d32e:	61fa      	str	r2, [r7, #28]
 801d330:	781b      	ldrb	r3, [r3, #0]
 801d332:	3b30      	subs	r3, #48	; 0x30
 801d334:	617b      	str	r3, [r7, #20]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801d336:	697b      	ldr	r3, [r7, #20]
 801d338:	2b09      	cmp	r3, #9
 801d33a:	d80f      	bhi.n	801d35c <get_ldnumber+0x74>
 801d33c:	69fa      	ldr	r2, [r7, #28]
 801d33e:	69bb      	ldr	r3, [r7, #24]
 801d340:	429a      	cmp	r2, r3
 801d342:	d10b      	bne.n	801d35c <get_ldnumber+0x74>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801d344:	697b      	ldr	r3, [r7, #20]
 801d346:	2b08      	cmp	r3, #8
 801d348:	d844      	bhi.n	801d3d4 <get_ldnumber+0xec>
					vol = (int)i;
 801d34a:	697b      	ldr	r3, [r7, #20]
 801d34c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801d34e:	69bb      	ldr	r3, [r7, #24]
 801d350:	3301      	adds	r3, #1
 801d352:	61bb      	str	r3, [r7, #24]
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	69ba      	ldr	r2, [r7, #24]
 801d358:	601a      	str	r2, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801d35a:	e03b      	b.n	801d3d4 <get_ldnumber+0xec>
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
 801d35c:	2300      	movs	r3, #0
 801d35e:	617b      	str	r3, [r7, #20]
 801d360:	69bb      	ldr	r3, [r7, #24]
 801d362:	3301      	adds	r3, #1
 801d364:	61bb      	str	r3, [r7, #24]
				do {
					sp = str[i]; tp = *path;
 801d366:	4a21      	ldr	r2, [pc, #132]	; (801d3ec <get_ldnumber+0x104>)
 801d368:	697b      	ldr	r3, [r7, #20]
 801d36a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d36e:	60fb      	str	r3, [r7, #12]
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	61fb      	str	r3, [r7, #28]
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
 801d376:	68fb      	ldr	r3, [r7, #12]
 801d378:	1c5a      	adds	r2, r3, #1
 801d37a:	60fa      	str	r2, [r7, #12]
 801d37c:	781b      	ldrb	r3, [r3, #0]
 801d37e:	72bb      	strb	r3, [r7, #10]
 801d380:	69fb      	ldr	r3, [r7, #28]
 801d382:	1c5a      	adds	r2, r3, #1
 801d384:	61fa      	str	r2, [r7, #28]
 801d386:	781b      	ldrb	r3, [r3, #0]
 801d388:	72fb      	strb	r3, [r7, #11]
						if (IsLower(tc)) tc -= 0x20;
 801d38a:	7afb      	ldrb	r3, [r7, #11]
 801d38c:	2b60      	cmp	r3, #96	; 0x60
 801d38e:	d905      	bls.n	801d39c <get_ldnumber+0xb4>
 801d390:	7afb      	ldrb	r3, [r7, #11]
 801d392:	2b7a      	cmp	r3, #122	; 0x7a
 801d394:	d802      	bhi.n	801d39c <get_ldnumber+0xb4>
 801d396:	7afb      	ldrb	r3, [r7, #11]
 801d398:	3b20      	subs	r3, #32
 801d39a:	72fb      	strb	r3, [r7, #11]
					} while (c && (TCHAR)c == tc);
 801d39c:	7abb      	ldrb	r3, [r7, #10]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d003      	beq.n	801d3aa <get_ldnumber+0xc2>
 801d3a2:	7aba      	ldrb	r2, [r7, #10]
 801d3a4:	7afb      	ldrb	r3, [r7, #11]
 801d3a6:	429a      	cmp	r2, r3
 801d3a8:	d0e5      	beq.n	801d376 <get_ldnumber+0x8e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 801d3aa:	7abb      	ldrb	r3, [r7, #10]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d103      	bne.n	801d3b8 <get_ldnumber+0xd0>
 801d3b0:	69fa      	ldr	r2, [r7, #28]
 801d3b2:	69bb      	ldr	r3, [r7, #24]
 801d3b4:	429a      	cmp	r2, r3
 801d3b6:	d005      	beq.n	801d3c4 <get_ldnumber+0xdc>
 801d3b8:	697b      	ldr	r3, [r7, #20]
 801d3ba:	3301      	adds	r3, #1
 801d3bc:	617b      	str	r3, [r7, #20]
 801d3be:	697b      	ldr	r3, [r7, #20]
 801d3c0:	2b08      	cmp	r3, #8
 801d3c2:	d9d0      	bls.n	801d366 <get_ldnumber+0x7e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801d3c4:	697b      	ldr	r3, [r7, #20]
 801d3c6:	2b08      	cmp	r3, #8
 801d3c8:	d804      	bhi.n	801d3d4 <get_ldnumber+0xec>
					vol = (int)i;
 801d3ca:	697b      	ldr	r3, [r7, #20]
 801d3cc:	613b      	str	r3, [r7, #16]
					*path = tt;
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	69ba      	ldr	r2, [r7, #24]
 801d3d2:	601a      	str	r2, [r3, #0]
				}
			}
#endif
			return vol;
 801d3d4:	693b      	ldr	r3, [r7, #16]
 801d3d6:	e003      	b.n	801d3e0 <get_ldnumber+0xf8>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
 801d3d8:	4b05      	ldr	r3, [pc, #20]	; (801d3f0 <get_ldnumber+0x108>)
 801d3da:	781b      	ldrb	r3, [r3, #0]
 801d3dc:	613b      	str	r3, [r7, #16]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
 801d3de:	693b      	ldr	r3, [r7, #16]
}
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	3724      	adds	r7, #36	; 0x24
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ea:	4770      	bx	lr
 801d3ec:	08026e80 	.word	0x08026e80
 801d3f0:	20002822 	.word	0x20002822

0801d3f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 801d3f4:	b580      	push	{r7, lr}
 801d3f6:	b082      	sub	sp, #8
 801d3f8:	af00      	add	r7, sp, #0
 801d3fa:	6078      	str	r0, [r7, #4]
 801d3fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	2200      	movs	r2, #0
 801d402:	711a      	strb	r2, [r3, #4]
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	f04f 32ff 	mov.w	r2, #4294967295
 801d40a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 801d40c:	6839      	ldr	r1, [r7, #0]
 801d40e:	6878      	ldr	r0, [r7, #4]
 801d410:	f7fe fe88 	bl	801c124 <move_window>
 801d414:	4603      	mov	r3, r0
 801d416:	2b00      	cmp	r3, #0
 801d418:	d001      	beq.n	801d41e <check_fs+0x2a>
		return 3;
 801d41a:	2303      	movs	r3, #3
 801d41c:	e04a      	b.n	801d4b4 <check_fs+0xc0>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	f203 2332 	addw	r3, r3, #562	; 0x232
 801d424:	3301      	adds	r3, #1
 801d426:	781b      	ldrb	r3, [r3, #0]
 801d428:	021b      	lsls	r3, r3, #8
 801d42a:	b21a      	sxth	r2, r3
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 801d432:	b21b      	sxth	r3, r3
 801d434:	4313      	orrs	r3, r2
 801d436:	b21b      	sxth	r3, r3
 801d438:	4a20      	ldr	r2, [pc, #128]	; (801d4bc <check_fs+0xc8>)
 801d43a:	4293      	cmp	r3, r2
 801d43c:	d001      	beq.n	801d442 <check_fs+0x4e>
		return 2;
 801d43e:	2302      	movs	r3, #2
 801d440:	e038      	b.n	801d4b4 <check_fs+0xc0>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	336a      	adds	r3, #106	; 0x6a
 801d446:	3303      	adds	r3, #3
 801d448:	781b      	ldrb	r3, [r3, #0]
 801d44a:	061a      	lsls	r2, r3, #24
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	336a      	adds	r3, #106	; 0x6a
 801d450:	3302      	adds	r3, #2
 801d452:	781b      	ldrb	r3, [r3, #0]
 801d454:	041b      	lsls	r3, r3, #16
 801d456:	4313      	orrs	r3, r2
 801d458:	687a      	ldr	r2, [r7, #4]
 801d45a:	326a      	adds	r2, #106	; 0x6a
 801d45c:	3201      	adds	r2, #1
 801d45e:	7812      	ldrb	r2, [r2, #0]
 801d460:	0212      	lsls	r2, r2, #8
 801d462:	4313      	orrs	r3, r2
 801d464:	687a      	ldr	r2, [r7, #4]
 801d466:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 801d46a:	4313      	orrs	r3, r2
 801d46c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801d470:	4a13      	ldr	r2, [pc, #76]	; (801d4c0 <check_fs+0xcc>)
 801d472:	4293      	cmp	r3, r2
 801d474:	d101      	bne.n	801d47a <check_fs+0x86>
		return 0;
 801d476:	2300      	movs	r3, #0
 801d478:	e01c      	b.n	801d4b4 <check_fs+0xc0>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	3386      	adds	r3, #134	; 0x86
 801d47e:	3303      	adds	r3, #3
 801d480:	781b      	ldrb	r3, [r3, #0]
 801d482:	061a      	lsls	r2, r3, #24
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	3386      	adds	r3, #134	; 0x86
 801d488:	3302      	adds	r3, #2
 801d48a:	781b      	ldrb	r3, [r3, #0]
 801d48c:	041b      	lsls	r3, r3, #16
 801d48e:	4313      	orrs	r3, r2
 801d490:	687a      	ldr	r2, [r7, #4]
 801d492:	3286      	adds	r2, #134	; 0x86
 801d494:	3201      	adds	r2, #1
 801d496:	7812      	ldrb	r2, [r2, #0]
 801d498:	0212      	lsls	r2, r2, #8
 801d49a:	4313      	orrs	r3, r2
 801d49c:	687a      	ldr	r2, [r7, #4]
 801d49e:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
 801d4a2:	4313      	orrs	r3, r2
 801d4a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801d4a8:	4a05      	ldr	r2, [pc, #20]	; (801d4c0 <check_fs+0xcc>)
 801d4aa:	4293      	cmp	r3, r2
 801d4ac:	d101      	bne.n	801d4b2 <check_fs+0xbe>
		return 0;
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	e000      	b.n	801d4b4 <check_fs+0xc0>

	return 1;
 801d4b2:	2301      	movs	r3, #1
}
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	3708      	adds	r7, #8
 801d4b8:	46bd      	mov	sp, r7
 801d4ba:	bd80      	pop	{r7, pc}
 801d4bc:	ffffaa55 	.word	0xffffaa55
 801d4c0:	00544146 	.word	0x00544146

0801d4c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b096      	sub	sp, #88	; 0x58
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	60f8      	str	r0, [r7, #12]
 801d4cc:	60b9      	str	r1, [r7, #8]
 801d4ce:	4613      	mov	r3, r2
 801d4d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	2200      	movs	r2, #0
 801d4d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801d4d8:	68b8      	ldr	r0, [r7, #8]
 801d4da:	f7ff ff05 	bl	801d2e8 <get_ldnumber>
 801d4de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801d4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	da01      	bge.n	801d4ea <find_volume+0x26>
 801d4e6:	230b      	movs	r3, #11
 801d4e8:	e293      	b.n	801da12 <find_volume+0x54e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801d4ea:	4a9b      	ldr	r2, [pc, #620]	; (801d758 <find_volume+0x294>)
 801d4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d4f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d101      	bne.n	801d4fe <find_volume+0x3a>
 801d4fa:	230c      	movs	r3, #12
 801d4fc:	e289      	b.n	801da12 <find_volume+0x54e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d502:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 801d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d506:	781b      	ldrb	r3, [r3, #0]
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d01a      	beq.n	801d542 <find_volume+0x7e>
		stat = disk_status(fs->drv);
 801d50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d50e:	785b      	ldrb	r3, [r3, #1]
 801d510:	4618      	mov	r0, r3
 801d512:	f7fd fecb 	bl	801b2ac <disk_status>
 801d516:	4603      	mov	r3, r0
 801d518:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801d51c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d520:	f003 0301 	and.w	r3, r3, #1
 801d524:	2b00      	cmp	r3, #0
 801d526:	d10c      	bne.n	801d542 <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 801d528:	79fb      	ldrb	r3, [r7, #7]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d007      	beq.n	801d53e <find_volume+0x7a>
 801d52e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d532:	f003 0304 	and.w	r3, r3, #4
 801d536:	2b00      	cmp	r3, #0
 801d538:	d001      	beq.n	801d53e <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 801d53a:	230a      	movs	r3, #10
 801d53c:	e269      	b.n	801da12 <find_volume+0x54e>
			return FR_OK;				/* The file system object is valid */
 801d53e:	2300      	movs	r3, #0
 801d540:	e267      	b.n	801da12 <find_volume+0x54e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d544:	2200      	movs	r2, #0
 801d546:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801d548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d54a:	b2da      	uxtb	r2, r3
 801d54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d54e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d552:	785b      	ldrb	r3, [r3, #1]
 801d554:	4618      	mov	r0, r3
 801d556:	f7fd fe87 	bl	801b268 <disk_initialize>
 801d55a:	4603      	mov	r3, r0
 801d55c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 801d560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d564:	f003 0301 	and.w	r3, r3, #1
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d001      	beq.n	801d570 <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801d56c:	2303      	movs	r3, #3
 801d56e:	e250      	b.n	801da12 <find_volume+0x54e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801d570:	79fb      	ldrb	r3, [r7, #7]
 801d572:	2b00      	cmp	r3, #0
 801d574:	d007      	beq.n	801d586 <find_volume+0xc2>
 801d576:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d57a:	f003 0304 	and.w	r3, r3, #4
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d001      	beq.n	801d586 <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 801d582:	230a      	movs	r3, #10
 801d584:	e245      	b.n	801da12 <find_volume+0x54e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 801d586:	2300      	movs	r3, #0
 801d588:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 801d58a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801d58c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d58e:	f7ff ff31 	bl	801d3f4 <check_fs>
 801d592:	4603      	mov	r3, r0
 801d594:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 801d598:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d59c:	2b01      	cmp	r3, #1
 801d59e:	d157      	bne.n	801d650 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801d5a0:	2300      	movs	r3, #0
 801d5a2:	643b      	str	r3, [r7, #64]	; 0x40
 801d5a4:	e02b      	b.n	801d5fe <find_volume+0x13a>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 801d5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801d5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d5ae:	011b      	lsls	r3, r3, #4
 801d5b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801d5b4:	4413      	add	r3, r2
 801d5b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ba:	3304      	adds	r3, #4
 801d5bc:	781b      	ldrb	r3, [r3, #0]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d012      	beq.n	801d5e8 <find_volume+0x124>
 801d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5c4:	330b      	adds	r3, #11
 801d5c6:	781b      	ldrb	r3, [r3, #0]
 801d5c8:	061a      	lsls	r2, r3, #24
 801d5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5cc:	330a      	adds	r3, #10
 801d5ce:	781b      	ldrb	r3, [r3, #0]
 801d5d0:	041b      	lsls	r3, r3, #16
 801d5d2:	4313      	orrs	r3, r2
 801d5d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d5d6:	3209      	adds	r2, #9
 801d5d8:	7812      	ldrb	r2, [r2, #0]
 801d5da:	0212      	lsls	r2, r2, #8
 801d5dc:	4313      	orrs	r3, r2
 801d5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d5e0:	3208      	adds	r2, #8
 801d5e2:	7812      	ldrb	r2, [r2, #0]
 801d5e4:	431a      	orrs	r2, r3
 801d5e6:	e000      	b.n	801d5ea <find_volume+0x126>
 801d5e8:	2200      	movs	r2, #0
 801d5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d5ec:	009b      	lsls	r3, r3, #2
 801d5ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d5f2:	440b      	add	r3, r1
 801d5f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801d5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d5fa:	3301      	adds	r3, #1
 801d5fc:	643b      	str	r3, [r7, #64]	; 0x40
 801d5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d600:	2b03      	cmp	r3, #3
 801d602:	d9d0      	bls.n	801d5a6 <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 801d604:	2300      	movs	r3, #0
 801d606:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801d608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d002      	beq.n	801d614 <find_volume+0x150>
 801d60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d610:	3b01      	subs	r3, #1
 801d612:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 801d614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d616:	009b      	lsls	r3, r3, #2
 801d618:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801d61c:	4413      	add	r3, r2
 801d61e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d622:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 801d624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d626:	2b00      	cmp	r3, #0
 801d628:	d005      	beq.n	801d636 <find_volume+0x172>
 801d62a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801d62c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d62e:	f7ff fee1 	bl	801d3f4 <check_fs>
 801d632:	4603      	mov	r3, r0
 801d634:	e000      	b.n	801d638 <find_volume+0x174>
 801d636:	2302      	movs	r3, #2
 801d638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 801d63c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d640:	2b00      	cmp	r3, #0
 801d642:	d005      	beq.n	801d650 <find_volume+0x18c>
 801d644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d646:	3301      	adds	r3, #1
 801d648:	643b      	str	r3, [r7, #64]	; 0x40
 801d64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d64c:	2b03      	cmp	r3, #3
 801d64e:	d9e1      	bls.n	801d614 <find_volume+0x150>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d654:	2b03      	cmp	r3, #3
 801d656:	d101      	bne.n	801d65c <find_volume+0x198>
 801d658:	2301      	movs	r3, #1
 801d65a:	e1da      	b.n	801da12 <find_volume+0x54e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 801d65c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d660:	2b00      	cmp	r3, #0
 801d662:	d001      	beq.n	801d668 <find_volume+0x1a4>
 801d664:	230d      	movs	r3, #13
 801d666:	e1d4      	b.n	801da12 <find_volume+0x54e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d66a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801d66e:	021b      	lsls	r3, r3, #8
 801d670:	b21a      	sxth	r2, r3
 801d672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d674:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801d678:	b21b      	sxth	r3, r3
 801d67a:	4313      	orrs	r3, r2
 801d67c:	b21b      	sxth	r3, r3
 801d67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d682:	d001      	beq.n	801d688 <find_volume+0x1c4>
		return FR_NO_FILESYSTEM;
 801d684:	230d      	movs	r3, #13
 801d686:	e1c4      	b.n	801da12 <find_volume+0x54e>

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 801d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d68a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801d68e:	021b      	lsls	r3, r3, #8
 801d690:	b21a      	sxth	r2, r3
 801d692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d694:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801d698:	b21b      	sxth	r3, r3
 801d69a:	4313      	orrs	r3, r2
 801d69c:	b21b      	sxth	r3, r3
 801d69e:	b29b      	uxth	r3, r3
 801d6a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 801d6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d112      	bne.n	801d6ce <find_volume+0x20a>
 801d6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6aa:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 801d6ae:	061a      	lsls	r2, r3, #24
 801d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6b2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 801d6b6:	041b      	lsls	r3, r3, #16
 801d6b8:	4313      	orrs	r3, r2
 801d6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d6bc:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 801d6c0:	0212      	lsls	r2, r2, #8
 801d6c2:	4313      	orrs	r3, r2
 801d6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d6c6:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 801d6ca:	4313      	orrs	r3, r2
 801d6cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 801d6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d6d2:	61da      	str	r2, [r3, #28]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 801d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801d6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6dc:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 801d6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6e0:	78db      	ldrb	r3, [r3, #3]
 801d6e2:	2b01      	cmp	r3, #1
 801d6e4:	d005      	beq.n	801d6f2 <find_volume+0x22e>
 801d6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6e8:	78db      	ldrb	r3, [r3, #3]
 801d6ea:	2b02      	cmp	r3, #2
 801d6ec:	d001      	beq.n	801d6f2 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 801d6ee:	230d      	movs	r3, #13
 801d6f0:	e18f      	b.n	801da12 <find_volume+0x54e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 801d6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6f4:	78db      	ldrb	r3, [r3, #3]
 801d6f6:	461a      	mov	r2, r3
 801d6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d6fa:	fb02 f303 	mul.w	r3, r2, r3
 801d6fe:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 801d700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d702:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 801d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d708:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 801d70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d70c:	789b      	ldrb	r3, [r3, #2]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d008      	beq.n	801d724 <find_volume+0x260>
 801d712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d714:	789b      	ldrb	r3, [r3, #2]
 801d716:	461a      	mov	r2, r3
 801d718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d71a:	789b      	ldrb	r3, [r3, #2]
 801d71c:	3b01      	subs	r3, #1
 801d71e:	4013      	ands	r3, r2
 801d720:	2b00      	cmp	r3, #0
 801d722:	d001      	beq.n	801d728 <find_volume+0x264>
		return FR_NO_FILESYSTEM;
 801d724:	230d      	movs	r3, #13
 801d726:	e174      	b.n	801da12 <find_volume+0x54e>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d72a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801d72e:	021b      	lsls	r3, r3, #8
 801d730:	b21a      	sxth	r2, r3
 801d732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d738:	b21b      	sxth	r3, r3
 801d73a:	4313      	orrs	r3, r2
 801d73c:	b21b      	sxth	r3, r3
 801d73e:	b29a      	uxth	r2, r3
 801d740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d742:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 801d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d746:	891b      	ldrh	r3, [r3, #8]
 801d748:	f003 030f 	and.w	r3, r3, #15
 801d74c:	b29b      	uxth	r3, r3
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d004      	beq.n	801d75c <find_volume+0x298>
		return FR_NO_FILESYSTEM;
 801d752:	230d      	movs	r3, #13
 801d754:	e15d      	b.n	801da12 <find_volume+0x54e>
 801d756:	bf00      	nop
 801d758:	200027fc 	.word	0x200027fc

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 801d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d75e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801d762:	021b      	lsls	r3, r3, #8
 801d764:	b21a      	sxth	r2, r3
 801d766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d768:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801d76c:	b21b      	sxth	r3, r3
 801d76e:	4313      	orrs	r3, r2
 801d770:	b21b      	sxth	r3, r3
 801d772:	b29b      	uxth	r3, r3
 801d774:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 801d776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d112      	bne.n	801d7a2 <find_volume+0x2de>
 801d77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d77e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 801d782:	061a      	lsls	r2, r3, #24
 801d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d786:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d78a:	041b      	lsls	r3, r3, #16
 801d78c:	4313      	orrs	r3, r2
 801d78e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d790:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801d794:	0212      	lsls	r2, r2, #8
 801d796:	4313      	orrs	r3, r2
 801d798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d79a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801d79e:	4313      	orrs	r3, r2
 801d7a0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 801d7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801d7a8:	021b      	lsls	r3, r3, #8
 801d7aa:	b21a      	sxth	r2, r3
 801d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d7b2:	b21b      	sxth	r3, r3
 801d7b4:	4313      	orrs	r3, r2
 801d7b6:	b21b      	sxth	r3, r3
 801d7b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 801d7ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d101      	bne.n	801d7c4 <find_volume+0x300>
 801d7c0:	230d      	movs	r3, #13
 801d7c2:	e126      	b.n	801da12 <find_volume+0x54e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 801d7c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d7c8:	4413      	add	r3, r2
 801d7ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d7cc:	8912      	ldrh	r2, [r2, #8]
 801d7ce:	0912      	lsrs	r2, r2, #4
 801d7d0:	b292      	uxth	r2, r2
 801d7d2:	4413      	add	r3, r2
 801d7d4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d7d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7da:	429a      	cmp	r2, r3
 801d7dc:	d201      	bcs.n	801d7e2 <find_volume+0x31e>
 801d7de:	230d      	movs	r3, #13
 801d7e0:	e117      	b.n	801da12 <find_volume+0x54e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 801d7e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7e6:	1ad3      	subs	r3, r2, r3
 801d7e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d7ea:	7892      	ldrb	r2, [r2, #2]
 801d7ec:	fbb3 f3f2 	udiv	r3, r3, r2
 801d7f0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 801d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d101      	bne.n	801d7fc <find_volume+0x338>
 801d7f8:	230d      	movs	r3, #13
 801d7fa:	e10a      	b.n	801da12 <find_volume+0x54e>
	fmt = FS_FAT12;
 801d7fc:	2301      	movs	r3, #1
 801d7fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 801d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d804:	f640 72f5 	movw	r2, #4085	; 0xff5
 801d808:	4293      	cmp	r3, r2
 801d80a:	d902      	bls.n	801d812 <find_volume+0x34e>
 801d80c:	2302      	movs	r3, #2
 801d80e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 801d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d814:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801d818:	4293      	cmp	r3, r2
 801d81a:	d902      	bls.n	801d822 <find_volume+0x35e>
 801d81c:	2303      	movs	r3, #3
 801d81e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 801d822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d824:	1c9a      	adds	r2, r3, #2
 801d826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d828:	619a      	str	r2, [r3, #24]
	fs->volbase = bsect;								/* Volume start sector */
 801d82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d82c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d82e:	621a      	str	r2, [r3, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 801d830:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d834:	441a      	add	r2, r3
 801d836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d838:	625a      	str	r2, [r3, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 801d83a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d83e:	441a      	add	r2, r3
 801d840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d842:	62da      	str	r2, [r3, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 801d844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d848:	2b03      	cmp	r3, #3
 801d84a:	d11e      	bne.n	801d88a <find_volume+0x3c6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 801d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d84e:	891b      	ldrh	r3, [r3, #8]
 801d850:	2b00      	cmp	r3, #0
 801d852:	d001      	beq.n	801d858 <find_volume+0x394>
 801d854:	230d      	movs	r3, #13
 801d856:	e0dc      	b.n	801da12 <find_volume+0x54e>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 801d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d85a:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 801d85e:	061a      	lsls	r2, r3, #24
 801d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d862:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d866:	041b      	lsls	r3, r3, #16
 801d868:	4313      	orrs	r3, r2
 801d86a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d86c:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 801d870:	0212      	lsls	r2, r2, #8
 801d872:	4313      	orrs	r3, r2
 801d874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d876:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 801d87a:	431a      	orrs	r2, r3
 801d87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d87e:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 801d880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d882:	699b      	ldr	r3, [r3, #24]
 801d884:	009b      	lsls	r3, r3, #2
 801d886:	647b      	str	r3, [r7, #68]	; 0x44
 801d888:	e01f      	b.n	801d8ca <find_volume+0x406>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 801d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d88c:	891b      	ldrh	r3, [r3, #8]
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d101      	bne.n	801d896 <find_volume+0x3d2>
 801d892:	230d      	movs	r3, #13
 801d894:	e0bd      	b.n	801da12 <find_volume+0x54e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 801d896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d89c:	441a      	add	r2, r3
 801d89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8a0:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d8a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d8a6:	2b02      	cmp	r3, #2
 801d8a8:	d103      	bne.n	801d8b2 <find_volume+0x3ee>
 801d8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8ac:	699b      	ldr	r3, [r3, #24]
 801d8ae:	005b      	lsls	r3, r3, #1
 801d8b0:	e00a      	b.n	801d8c8 <find_volume+0x404>
 801d8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8b4:	699a      	ldr	r2, [r3, #24]
 801d8b6:	4613      	mov	r3, r2
 801d8b8:	005b      	lsls	r3, r3, #1
 801d8ba:	4413      	add	r3, r2
 801d8bc:	085a      	lsrs	r2, r3, #1
 801d8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8c0:	699b      	ldr	r3, [r3, #24]
 801d8c2:	f003 0301 	and.w	r3, r3, #1
 801d8c6:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 801d8c8:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 801d8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8cc:	69da      	ldr	r2, [r3, #28]
 801d8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d8d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801d8d4:	0a5b      	lsrs	r3, r3, #9
 801d8d6:	429a      	cmp	r2, r3
 801d8d8:	d201      	bcs.n	801d8de <find_volume+0x41a>
		return FR_NO_FILESYSTEM;
 801d8da:	230d      	movs	r3, #13
 801d8dc:	e099      	b.n	801da12 <find_volume+0x54e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 801d8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8e0:	f04f 32ff 	mov.w	r2, #4294967295
 801d8e4:	611a      	str	r2, [r3, #16]
 801d8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8e8:	691a      	ldr	r2, [r3, #16]
 801d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8ec:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 801d8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8f0:	2280      	movs	r2, #128	; 0x80
 801d8f2:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 801d8f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d8f8:	2b03      	cmp	r3, #3
 801d8fa:	d178      	bne.n	801d9ee <find_volume+0x52a>
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 801d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8fe:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801d902:	021b      	lsls	r3, r3, #8
 801d904:	b21a      	sxth	r2, r3
 801d906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d908:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801d90c:	b21b      	sxth	r3, r3
 801d90e:	4313      	orrs	r3, r2
 801d910:	b21b      	sxth	r3, r3
 801d912:	2b01      	cmp	r3, #1
 801d914:	d16b      	bne.n	801d9ee <find_volume+0x52a>
		&& move_window(fs, bsect + 1) == FR_OK)
 801d916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d918:	3301      	adds	r3, #1
 801d91a:	4619      	mov	r1, r3
 801d91c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d91e:	f7fe fc01 	bl	801c124 <move_window>
 801d922:	4603      	mov	r3, r0
 801d924:	2b00      	cmp	r3, #0
 801d926:	d162      	bne.n	801d9ee <find_volume+0x52a>
	{
		fs->fsi_flag = 0;
 801d928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d92a:	2200      	movs	r2, #0
 801d92c:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d930:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 801d934:	021b      	lsls	r3, r3, #8
 801d936:	b21a      	sxth	r2, r3
 801d938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d93a:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 801d93e:	b21b      	sxth	r3, r3
 801d940:	4313      	orrs	r3, r2
 801d942:	b21b      	sxth	r3, r3
 801d944:	4a35      	ldr	r2, [pc, #212]	; (801da1c <find_volume+0x558>)
 801d946:	4293      	cmp	r3, r2
 801d948:	d151      	bne.n	801d9ee <find_volume+0x52a>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
 801d94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d94c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801d950:	061a      	lsls	r2, r3, #24
 801d952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d954:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801d958:	041b      	lsls	r3, r3, #16
 801d95a:	4313      	orrs	r3, r2
 801d95c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d95e:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 801d962:	0212      	lsls	r2, r2, #8
 801d964:	4313      	orrs	r3, r2
 801d966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d968:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 801d96c:	4313      	orrs	r3, r2
 801d96e:	4a2c      	ldr	r2, [pc, #176]	; (801da20 <find_volume+0x55c>)
 801d970:	4293      	cmp	r3, r2
 801d972:	d13c      	bne.n	801d9ee <find_volume+0x52a>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
 801d974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d976:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 801d97a:	061a      	lsls	r2, r3, #24
 801d97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d97e:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 801d982:	041b      	lsls	r3, r3, #16
 801d984:	4313      	orrs	r3, r2
 801d986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d988:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 801d98c:	0212      	lsls	r2, r2, #8
 801d98e:	4313      	orrs	r3, r2
 801d990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d992:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 801d996:	4313      	orrs	r3, r2
 801d998:	4a22      	ldr	r2, [pc, #136]	; (801da24 <find_volume+0x560>)
 801d99a:	4293      	cmp	r3, r2
 801d99c:	d127      	bne.n	801d9ee <find_volume+0x52a>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
 801d99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9a0:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 801d9a4:	061a      	lsls	r2, r3, #24
 801d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9a8:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801d9ac:	041b      	lsls	r3, r3, #16
 801d9ae:	4313      	orrs	r3, r2
 801d9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d9b2:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 801d9b6:	0212      	lsls	r2, r2, #8
 801d9b8:	4313      	orrs	r3, r2
 801d9ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d9bc:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 801d9c0:	431a      	orrs	r2, r3
 801d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9c4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
 801d9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9c8:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 801d9cc:	061a      	lsls	r2, r3, #24
 801d9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9d0:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 801d9d4:	041b      	lsls	r3, r3, #16
 801d9d6:	4313      	orrs	r3, r2
 801d9d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d9da:	f892 2221 	ldrb.w	r2, [r2, #545]	; 0x221
 801d9de:	0212      	lsls	r2, r2, #8
 801d9e0:	4313      	orrs	r3, r2
 801d9e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d9e4:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 801d9e8:	431a      	orrs	r2, r3
 801d9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9ec:	60da      	str	r2, [r3, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 801d9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801d9f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 801d9f6:	4b0c      	ldr	r3, [pc, #48]	; (801da28 <find_volume+0x564>)
 801d9f8:	881b      	ldrh	r3, [r3, #0]
 801d9fa:	3301      	adds	r3, #1
 801d9fc:	b29a      	uxth	r2, r3
 801d9fe:	4b0a      	ldr	r3, [pc, #40]	; (801da28 <find_volume+0x564>)
 801da00:	801a      	strh	r2, [r3, #0]
 801da02:	4b09      	ldr	r3, [pc, #36]	; (801da28 <find_volume+0x564>)
 801da04:	881a      	ldrh	r2, [r3, #0]
 801da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da08:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 801da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da0c:	2200      	movs	r2, #0
 801da0e:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 801da10:	2300      	movs	r3, #0
}
 801da12:	4618      	mov	r0, r3
 801da14:	3758      	adds	r7, #88	; 0x58
 801da16:	46bd      	mov	sp, r7
 801da18:	bd80      	pop	{r7, pc}
 801da1a:	bf00      	nop
 801da1c:	ffffaa55 	.word	0xffffaa55
 801da20:	41615252 	.word	0x41615252
 801da24:	61417272 	.word	0x61417272
 801da28:	20002820 	.word	0x20002820

0801da2c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b084      	sub	sp, #16
 801da30:	af00      	add	r7, sp, #0
 801da32:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 801da38:	68fb      	ldr	r3, [r7, #12]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d00f      	beq.n	801da5e <validate+0x32>
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	681b      	ldr	r3, [r3, #0]
 801da42:	2b00      	cmp	r3, #0
 801da44:	d00b      	beq.n	801da5e <validate+0x32>
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	781b      	ldrb	r3, [r3, #0]
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d006      	beq.n	801da5e <validate+0x32>
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	88da      	ldrh	r2, [r3, #6]
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	889b      	ldrh	r3, [r3, #4]
 801da5a:	429a      	cmp	r2, r3
 801da5c:	d001      	beq.n	801da62 <validate+0x36>
		return FR_INVALID_OBJECT;
 801da5e:	2309      	movs	r3, #9
 801da60:	e00d      	b.n	801da7e <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	785b      	ldrb	r3, [r3, #1]
 801da68:	4618      	mov	r0, r3
 801da6a:	f7fd fc1f 	bl	801b2ac <disk_status>
 801da6e:	4603      	mov	r3, r0
 801da70:	f003 0301 	and.w	r3, r3, #1
 801da74:	2b00      	cmp	r3, #0
 801da76:	d001      	beq.n	801da7c <validate+0x50>
		return FR_NOT_READY;
 801da78:	2303      	movs	r3, #3
 801da7a:	e000      	b.n	801da7e <validate+0x52>

	return FR_OK;
 801da7c:	2300      	movs	r3, #0
}
 801da7e:	4618      	mov	r0, r3
 801da80:	3710      	adds	r7, #16
 801da82:	46bd      	mov	sp, r7
 801da84:	bd80      	pop	{r7, pc}
	...

0801da88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b088      	sub	sp, #32
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	60f8      	str	r0, [r7, #12]
 801da90:	60b9      	str	r1, [r7, #8]
 801da92:	4613      	mov	r3, r2
 801da94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801da96:	68bb      	ldr	r3, [r7, #8]
 801da98:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 801da9a:	f107 0310 	add.w	r3, r7, #16
 801da9e:	4618      	mov	r0, r3
 801daa0:	f7ff fc22 	bl	801d2e8 <get_ldnumber>
 801daa4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801daa6:	69fb      	ldr	r3, [r7, #28]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	da01      	bge.n	801dab0 <f_mount+0x28>
 801daac:	230b      	movs	r3, #11
 801daae:	e028      	b.n	801db02 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801dab0:	4a16      	ldr	r2, [pc, #88]	; (801db0c <f_mount+0x84>)
 801dab2:	69fb      	ldr	r3, [r7, #28]
 801dab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dab8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801daba:	69bb      	ldr	r3, [r7, #24]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	d002      	beq.n	801dac6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801dac0:	69bb      	ldr	r3, [r7, #24]
 801dac2:	2200      	movs	r2, #0
 801dac4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d002      	beq.n	801dad2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	2200      	movs	r2, #0
 801dad0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801dad2:	68fa      	ldr	r2, [r7, #12]
 801dad4:	490d      	ldr	r1, [pc, #52]	; (801db0c <f_mount+0x84>)
 801dad6:	69fb      	ldr	r3, [r7, #28]
 801dad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801dadc:	68fb      	ldr	r3, [r7, #12]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	d002      	beq.n	801dae8 <f_mount+0x60>
 801dae2:	79fb      	ldrb	r3, [r7, #7]
 801dae4:	2b01      	cmp	r3, #1
 801dae6:	d001      	beq.n	801daec <f_mount+0x64>
 801dae8:	2300      	movs	r3, #0
 801daea:	e00a      	b.n	801db02 <f_mount+0x7a>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 801daec:	f107 0108 	add.w	r1, r7, #8
 801daf0:	f107 030c 	add.w	r3, r7, #12
 801daf4:	2200      	movs	r2, #0
 801daf6:	4618      	mov	r0, r3
 801daf8:	f7ff fce4 	bl	801d4c4 <find_volume>
 801dafc:	4603      	mov	r3, r0
 801dafe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801db00:	7dfb      	ldrb	r3, [r7, #23]
}
 801db02:	4618      	mov	r0, r3
 801db04:	3720      	adds	r7, #32
 801db06:	46bd      	mov	sp, r7
 801db08:	bd80      	pop	{r7, pc}
 801db0a:	bf00      	nop
 801db0c:	200027fc 	.word	0x200027fc

0801db10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801db10:	b580      	push	{r7, lr}
 801db12:	b094      	sub	sp, #80	; 0x50
 801db14:	af00      	add	r7, sp, #0
 801db16:	60f8      	str	r0, [r7, #12]
 801db18:	60b9      	str	r1, [r7, #8]
 801db1a:	4613      	mov	r3, r2
 801db1c:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	2b00      	cmp	r3, #0
 801db22:	d101      	bne.n	801db28 <f_open+0x18>
 801db24:	2309      	movs	r3, #9
 801db26:	e12f      	b.n	801dd88 <f_open+0x278>
	fp->fs = 0;			/* Clear file object */
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	2200      	movs	r2, #0
 801db2c:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 801db2e:	79fb      	ldrb	r3, [r7, #7]
 801db30:	f003 031f 	and.w	r3, r3, #31
 801db34:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 801db36:	79fb      	ldrb	r3, [r7, #7]
 801db38:	f023 0301 	bic.w	r3, r3, #1
 801db3c:	b2da      	uxtb	r2, r3
 801db3e:	f107 0108 	add.w	r1, r7, #8
 801db42:	f107 0320 	add.w	r3, r7, #32
 801db46:	4618      	mov	r0, r3
 801db48:	f7ff fcbc 	bl	801d4c4 <find_volume>
 801db4c:	4603      	mov	r3, r0
 801db4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 801db52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801db56:	2b00      	cmp	r3, #0
 801db58:	f040 8114 	bne.w	801dd84 <f_open+0x274>
		INIT_BUF(dj);
 801db5c:	f107 0314 	add.w	r3, r7, #20
 801db60:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 801db62:	68ba      	ldr	r2, [r7, #8]
 801db64:	f107 0320 	add.w	r3, r7, #32
 801db68:	4611      	mov	r1, r2
 801db6a:	4618      	mov	r0, r3
 801db6c:	f7ff fb38 	bl	801d1e0 <follow_path>
 801db70:	4603      	mov	r3, r0
 801db72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 801db76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db78:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801db7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d105      	bne.n	801db8e <f_open+0x7e>
			if (!dir)	/* Default directory itself */
 801db82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db84:	2b00      	cmp	r3, #0
 801db86:	d102      	bne.n	801db8e <f_open+0x7e>
				res = FR_INVALID_NAME;
 801db88:	2306      	movs	r3, #6
 801db8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801db8e:	79fb      	ldrb	r3, [r7, #7]
 801db90:	f003 031c 	and.w	r3, r3, #28
 801db94:	2b00      	cmp	r3, #0
 801db96:	f000 808f 	beq.w	801dcb8 <f_open+0x1a8>
			if (res != FR_OK) {					/* No file, create new */
 801db9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d012      	beq.n	801dbc8 <f_open+0xb8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 801dba2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801dba6:	2b04      	cmp	r3, #4
 801dba8:	d107      	bne.n	801dbba <f_open+0xaa>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 801dbaa:	f107 0320 	add.w	r3, r7, #32
 801dbae:	4618      	mov	r0, r3
 801dbb0:	f7ff f8dc 	bl	801cd6c <dir_register>
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801dbba:	79fb      	ldrb	r3, [r7, #7]
 801dbbc:	f043 0308 	orr.w	r3, r3, #8
 801dbc0:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 801dbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbc4:	64bb      	str	r3, [r7, #72]	; 0x48
 801dbc6:	e012      	b.n	801dbee <f_open+0xde>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801dbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dbca:	330b      	adds	r3, #11
 801dbcc:	781b      	ldrb	r3, [r3, #0]
 801dbce:	f003 0311 	and.w	r3, r3, #17
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d003      	beq.n	801dbde <f_open+0xce>
					res = FR_DENIED;
 801dbd6:	2307      	movs	r3, #7
 801dbd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801dbdc:	e007      	b.n	801dbee <f_open+0xde>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 801dbde:	79fb      	ldrb	r3, [r7, #7]
 801dbe0:	f003 0304 	and.w	r3, r3, #4
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d002      	beq.n	801dbee <f_open+0xde>
						res = FR_EXIST;
 801dbe8:	2308      	movs	r3, #8
 801dbea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801dbee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d17e      	bne.n	801dcf4 <f_open+0x1e4>
 801dbf6:	79fb      	ldrb	r3, [r7, #7]
 801dbf8:	f003 0308 	and.w	r3, r3, #8
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d079      	beq.n	801dcf4 <f_open+0x1e4>
				dw = GET_FATTIME();				/* Created time */
 801dc00:	f7fd fbfe 	bl	801b400 <get_fattime>
 801dc04:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir + DIR_CrtTime, dw);
 801dc06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc08:	330e      	adds	r3, #14
 801dc0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dc0c:	b2d2      	uxtb	r2, r2
 801dc0e:	701a      	strb	r2, [r3, #0]
 801dc10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc12:	b29b      	uxth	r3, r3
 801dc14:	0a1b      	lsrs	r3, r3, #8
 801dc16:	b29a      	uxth	r2, r3
 801dc18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc1a:	330f      	adds	r3, #15
 801dc1c:	b2d2      	uxtb	r2, r2
 801dc1e:	701a      	strb	r2, [r3, #0]
 801dc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc22:	0c1a      	lsrs	r2, r3, #16
 801dc24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc26:	3310      	adds	r3, #16
 801dc28:	b2d2      	uxtb	r2, r2
 801dc2a:	701a      	strb	r2, [r3, #0]
 801dc2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc2e:	0e1a      	lsrs	r2, r3, #24
 801dc30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc32:	3311      	adds	r3, #17
 801dc34:	b2d2      	uxtb	r2, r2
 801dc36:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 801dc38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc3a:	330b      	adds	r3, #11
 801dc3c:	2200      	movs	r2, #0
 801dc3e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 801dc40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc42:	331c      	adds	r3, #28
 801dc44:	2200      	movs	r2, #0
 801dc46:	701a      	strb	r2, [r3, #0]
 801dc48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc4a:	331d      	adds	r3, #29
 801dc4c:	2200      	movs	r2, #0
 801dc4e:	701a      	strb	r2, [r3, #0]
 801dc50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc52:	331e      	adds	r3, #30
 801dc54:	2200      	movs	r2, #0
 801dc56:	701a      	strb	r2, [r3, #0]
 801dc58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc5a:	331f      	adds	r3, #31
 801dc5c:	2200      	movs	r2, #0
 801dc5e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 801dc60:	6a3b      	ldr	r3, [r7, #32]
 801dc62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801dc64:	4618      	mov	r0, r3
 801dc66:	f7fe ff8b 	bl	801cb80 <ld_clust>
 801dc6a:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);				/* cluster = 0 */
 801dc6c:	2100      	movs	r1, #0
 801dc6e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dc70:	f7fe ffb3 	bl	801cbda <st_clust>
				dj.fs->wflag = 1;
 801dc74:	6a3b      	ldr	r3, [r7, #32]
 801dc76:	2201      	movs	r2, #1
 801dc78:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 801dc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	d039      	beq.n	801dcf4 <f_open+0x1e4>
					dw = dj.fs->winsect;
 801dc80:	6a3b      	ldr	r3, [r7, #32]
 801dc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc84:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 801dc86:	6a3b      	ldr	r3, [r7, #32]
 801dc88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	f7fe fcfa 	bl	801c684 <remove_chain>
 801dc90:	4603      	mov	r3, r0
 801dc92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 801dc96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d12a      	bne.n	801dcf4 <f_open+0x1e4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801dc9e:	6a3b      	ldr	r3, [r7, #32]
 801dca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dca2:	3a01      	subs	r2, #1
 801dca4:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 801dca6:	6a3b      	ldr	r3, [r7, #32]
 801dca8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801dcaa:	4618      	mov	r0, r3
 801dcac:	f7fe fa3a 	bl	801c124 <move_window>
 801dcb0:	4603      	mov	r3, r0
 801dcb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801dcb6:	e01d      	b.n	801dcf4 <f_open+0x1e4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 801dcb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d119      	bne.n	801dcf4 <f_open+0x1e4>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 801dcc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dcc2:	330b      	adds	r3, #11
 801dcc4:	781b      	ldrb	r3, [r3, #0]
 801dcc6:	f003 0310 	and.w	r3, r3, #16
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d003      	beq.n	801dcd6 <f_open+0x1c6>
					res = FR_NO_FILE;
 801dcce:	2304      	movs	r3, #4
 801dcd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801dcd4:	e00e      	b.n	801dcf4 <f_open+0x1e4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801dcd6:	79fb      	ldrb	r3, [r7, #7]
 801dcd8:	f003 0302 	and.w	r3, r3, #2
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d009      	beq.n	801dcf4 <f_open+0x1e4>
 801dce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dce2:	330b      	adds	r3, #11
 801dce4:	781b      	ldrb	r3, [r3, #0]
 801dce6:	f003 0301 	and.w	r3, r3, #1
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d002      	beq.n	801dcf4 <f_open+0x1e4>
						res = FR_DENIED;
 801dcee:	2307      	movs	r3, #7
 801dcf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 801dcf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d10f      	bne.n	801dd1c <f_open+0x20c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801dcfc:	79fb      	ldrb	r3, [r7, #7]
 801dcfe:	f003 0308 	and.w	r3, r3, #8
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d003      	beq.n	801dd0e <f_open+0x1fe>
				mode |= FA__WRITTEN;
 801dd06:	79fb      	ldrb	r3, [r7, #7]
 801dd08:	f043 0320 	orr.w	r3, r3, #32
 801dd0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801dd0e:	6a3b      	ldr	r3, [r7, #32]
 801dd10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dd1a:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 801dd1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d12f      	bne.n	801dd84 <f_open+0x274>
			fp->flag = mode;					/* File access mode */
 801dd24:	68fb      	ldr	r3, [r7, #12]
 801dd26:	79fa      	ldrb	r2, [r7, #7]
 801dd28:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 801dd2a:	68fb      	ldr	r3, [r7, #12]
 801dd2c:	2200      	movs	r2, #0
 801dd2e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 801dd30:	6a3b      	ldr	r3, [r7, #32]
 801dd32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801dd34:	4618      	mov	r0, r3
 801dd36:	f7fe ff23 	bl	801cb80 <ld_clust>
 801dd3a:	4602      	mov	r2, r0
 801dd3c:	68fb      	ldr	r3, [r7, #12]
 801dd3e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 801dd40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dd42:	331f      	adds	r3, #31
 801dd44:	781b      	ldrb	r3, [r3, #0]
 801dd46:	061a      	lsls	r2, r3, #24
 801dd48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dd4a:	331e      	adds	r3, #30
 801dd4c:	781b      	ldrb	r3, [r3, #0]
 801dd4e:	041b      	lsls	r3, r3, #16
 801dd50:	4313      	orrs	r3, r2
 801dd52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dd54:	321d      	adds	r2, #29
 801dd56:	7812      	ldrb	r2, [r2, #0]
 801dd58:	0212      	lsls	r2, r2, #8
 801dd5a:	4313      	orrs	r3, r2
 801dd5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dd5e:	321c      	adds	r2, #28
 801dd60:	7812      	ldrb	r2, [r2, #0]
 801dd62:	431a      	orrs	r2, r3
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 801dd6e:	68fb      	ldr	r3, [r7, #12]
 801dd70:	2200      	movs	r2, #0
 801dd72:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 801dd74:	6a3a      	ldr	r2, [r7, #32]
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 801dd7a:	68fb      	ldr	r3, [r7, #12]
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	88da      	ldrh	r2, [r3, #6]
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 801dd84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 801dd88:	4618      	mov	r0, r3
 801dd8a:	3750      	adds	r7, #80	; 0x50
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd80      	pop	{r7, pc}

0801dd90 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 801dd90:	b580      	push	{r7, lr}
 801dd92:	b08c      	sub	sp, #48	; 0x30
 801dd94:	af00      	add	r7, sp, #0
 801dd96:	60f8      	str	r0, [r7, #12]
 801dd98:	60b9      	str	r1, [r7, #8]
 801dd9a:	607a      	str	r2, [r7, #4]
 801dd9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 801dd9e:	68bb      	ldr	r3, [r7, #8]
 801dda0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 801dda2:	683b      	ldr	r3, [r7, #0]
 801dda4:	2200      	movs	r2, #0
 801dda6:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 801dda8:	68f8      	ldr	r0, [r7, #12]
 801ddaa:	f7ff fe3f 	bl	801da2c <validate>
 801ddae:	4603      	mov	r3, r0
 801ddb0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801ddb2:	7ffb      	ldrb	r3, [r7, #31]
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	d001      	beq.n	801ddbc <f_read+0x2c>
 801ddb8:	7ffb      	ldrb	r3, [r7, #31]
 801ddba:	e11c      	b.n	801dff6 <f_read+0x266>
	if (fp->err)								/* Check error */
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	79db      	ldrb	r3, [r3, #7]
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d002      	beq.n	801ddca <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	79db      	ldrb	r3, [r3, #7]
 801ddc8:	e115      	b.n	801dff6 <f_read+0x266>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	799b      	ldrb	r3, [r3, #6]
 801ddce:	f003 0301 	and.w	r3, r3, #1
 801ddd2:	2b00      	cmp	r3, #0
 801ddd4:	d101      	bne.n	801ddda <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 801ddd6:	2307      	movs	r3, #7
 801ddd8:	e10d      	b.n	801dff6 <f_read+0x266>
	remain = fp->fsize - fp->fptr;
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	68da      	ldr	r2, [r3, #12]
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	689b      	ldr	r3, [r3, #8]
 801dde2:	1ad3      	subs	r3, r2, r3
 801dde4:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801dde6:	687a      	ldr	r2, [r7, #4]
 801dde8:	69bb      	ldr	r3, [r7, #24]
 801ddea:	429a      	cmp	r2, r3
 801ddec:	f240 80fe 	bls.w	801dfec <f_read+0x25c>
 801ddf0:	69bb      	ldr	r3, [r7, #24]
 801ddf2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801ddf4:	e0fa      	b.n	801dfec <f_read+0x25c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 801ddf6:	68fb      	ldr	r3, [r7, #12]
 801ddf8:	689b      	ldr	r3, [r3, #8]
 801ddfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	f040 80c6 	bne.w	801df90 <f_read+0x200>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	689b      	ldr	r3, [r3, #8]
 801de08:	0a5b      	lsrs	r3, r3, #9
 801de0a:	b2da      	uxtb	r2, r3
 801de0c:	68fb      	ldr	r3, [r7, #12]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	789b      	ldrb	r3, [r3, #2]
 801de12:	3b01      	subs	r3, #1
 801de14:	b2db      	uxtb	r3, r3
 801de16:	4013      	ands	r3, r2
 801de18:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 801de1a:	7dfb      	ldrb	r3, [r7, #23]
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d124      	bne.n	801de6a <f_read+0xda>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	689b      	ldr	r3, [r3, #8]
 801de24:	2b00      	cmp	r3, #0
 801de26:	d103      	bne.n	801de30 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	691b      	ldr	r3, [r3, #16]
 801de2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801de2e:	e008      	b.n	801de42 <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	681a      	ldr	r2, [r3, #0]
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	695b      	ldr	r3, [r3, #20]
 801de38:	4619      	mov	r1, r3
 801de3a:	4610      	mov	r0, r2
 801de3c:	f7fe fa60 	bl	801c300 <get_fat>
 801de40:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 801de42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de44:	2b01      	cmp	r3, #1
 801de46:	d804      	bhi.n	801de52 <f_read+0xc2>
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	2202      	movs	r2, #2
 801de4c:	71da      	strb	r2, [r3, #7]
 801de4e:	2302      	movs	r3, #2
 801de50:	e0d1      	b.n	801dff6 <f_read+0x266>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de54:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de58:	d104      	bne.n	801de64 <f_read+0xd4>
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	2201      	movs	r2, #1
 801de5e:	71da      	strb	r2, [r3, #7]
 801de60:	2301      	movs	r3, #1
 801de62:	e0c8      	b.n	801dff6 <f_read+0x266>
				fp->clust = clst;				/* Update current cluster */
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801de68:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 801de6a:	68fb      	ldr	r3, [r7, #12]
 801de6c:	681a      	ldr	r2, [r3, #0]
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	695b      	ldr	r3, [r3, #20]
 801de72:	4619      	mov	r1, r3
 801de74:	4610      	mov	r0, r2
 801de76:	f7fe fa24 	bl	801c2c2 <clust2sect>
 801de7a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801de7c:	693b      	ldr	r3, [r7, #16]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d104      	bne.n	801de8c <f_read+0xfc>
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	2202      	movs	r2, #2
 801de86:	71da      	strb	r2, [r3, #7]
 801de88:	2302      	movs	r3, #2
 801de8a:	e0b4      	b.n	801dff6 <f_read+0x266>
			sect += csect;
 801de8c:	7dfb      	ldrb	r3, [r7, #23]
 801de8e:	693a      	ldr	r2, [r7, #16]
 801de90:	4413      	add	r3, r2
 801de92:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	0a5b      	lsrs	r3, r3, #9
 801de98:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 801de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d03d      	beq.n	801df1c <f_read+0x18c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801dea0:	7dfa      	ldrb	r2, [r7, #23]
 801dea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dea4:	4413      	add	r3, r2
 801dea6:	68fa      	ldr	r2, [r7, #12]
 801dea8:	6812      	ldr	r2, [r2, #0]
 801deaa:	7892      	ldrb	r2, [r2, #2]
 801deac:	4293      	cmp	r3, r2
 801deae:	d906      	bls.n	801debe <f_read+0x12e>
					cc = fp->fs->csize - csect;
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	789b      	ldrb	r3, [r3, #2]
 801deb6:	461a      	mov	r2, r3
 801deb8:	7dfb      	ldrb	r3, [r7, #23]
 801deba:	1ad3      	subs	r3, r2, r3
 801debc:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	7858      	ldrb	r0, [r3, #1]
 801dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dec6:	693a      	ldr	r2, [r7, #16]
 801dec8:	6a39      	ldr	r1, [r7, #32]
 801deca:	f7fd fa13 	bl	801b2f4 <disk_read>
 801dece:	4603      	mov	r3, r0
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d004      	beq.n	801dede <f_read+0x14e>
					ABORT(fp->fs, FR_DISK_ERR);
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	2201      	movs	r2, #1
 801ded8:	71da      	strb	r2, [r3, #7]
 801deda:	2301      	movs	r3, #1
 801dedc:	e08b      	b.n	801dff6 <f_read+0x266>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	799b      	ldrb	r3, [r3, #6]
 801dee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	d014      	beq.n	801df14 <f_read+0x184>
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	699a      	ldr	r2, [r3, #24]
 801deee:	693b      	ldr	r3, [r7, #16]
 801def0:	1ad3      	subs	r3, r2, r3
 801def2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801def4:	429a      	cmp	r2, r3
 801def6:	d90d      	bls.n	801df14 <f_read+0x184>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	699a      	ldr	r2, [r3, #24]
 801defc:	693b      	ldr	r3, [r7, #16]
 801defe:	1ad3      	subs	r3, r2, r3
 801df00:	025b      	lsls	r3, r3, #9
 801df02:	6a3a      	ldr	r2, [r7, #32]
 801df04:	18d0      	adds	r0, r2, r3
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	3324      	adds	r3, #36	; 0x24
 801df0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801df0e:	4619      	mov	r1, r3
 801df10:	f7fe f84a 	bl	801bfa8 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 801df14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df16:	025b      	lsls	r3, r3, #9
 801df18:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 801df1a:	e053      	b.n	801dfc4 <f_read+0x234>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	699b      	ldr	r3, [r3, #24]
 801df20:	693a      	ldr	r2, [r7, #16]
 801df22:	429a      	cmp	r2, r3
 801df24:	d031      	beq.n	801df8a <f_read+0x1fa>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	799b      	ldrb	r3, [r3, #6]
 801df2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801df2e:	2b00      	cmp	r3, #0
 801df30:	d019      	beq.n	801df66 <f_read+0x1d6>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 801df32:	68fb      	ldr	r3, [r7, #12]
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	7858      	ldrb	r0, [r3, #1]
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801df3e:	68fb      	ldr	r3, [r7, #12]
 801df40:	699a      	ldr	r2, [r3, #24]
 801df42:	2301      	movs	r3, #1
 801df44:	f7fd fa04 	bl	801b350 <disk_write>
 801df48:	4603      	mov	r3, r0
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	d004      	beq.n	801df58 <f_read+0x1c8>
						ABORT(fp->fs, FR_DISK_ERR);
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	2201      	movs	r2, #1
 801df52:	71da      	strb	r2, [r3, #7]
 801df54:	2301      	movs	r3, #1
 801df56:	e04e      	b.n	801dff6 <f_read+0x266>
					fp->flag &= ~FA__DIRTY;
 801df58:	68fb      	ldr	r3, [r7, #12]
 801df5a:	799b      	ldrb	r3, [r3, #6]
 801df5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801df60:	b2da      	uxtb	r2, r3
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	7858      	ldrb	r0, [r3, #1]
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801df72:	2301      	movs	r3, #1
 801df74:	693a      	ldr	r2, [r7, #16]
 801df76:	f7fd f9bd 	bl	801b2f4 <disk_read>
 801df7a:	4603      	mov	r3, r0
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d004      	beq.n	801df8a <f_read+0x1fa>
					ABORT(fp->fs, FR_DISK_ERR);
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	2201      	movs	r2, #1
 801df84:	71da      	strb	r2, [r3, #7]
 801df86:	2301      	movs	r3, #1
 801df88:	e035      	b.n	801dff6 <f_read+0x266>
			}
#endif
			fp->dsect = sect;
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	693a      	ldr	r2, [r7, #16]
 801df8e:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 801df90:	68fb      	ldr	r3, [r7, #12]
 801df92:	689b      	ldr	r3, [r3, #8]
 801df94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801df9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 801df9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	429a      	cmp	r2, r3
 801dfa4:	d901      	bls.n	801dfaa <f_read+0x21a>
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	689b      	ldr	r3, [r3, #8]
 801dfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dfb2:	3320      	adds	r3, #32
 801dfb4:	68fa      	ldr	r2, [r7, #12]
 801dfb6:	4413      	add	r3, r2
 801dfb8:	3304      	adds	r3, #4
 801dfba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dfbc:	4619      	mov	r1, r3
 801dfbe:	6a38      	ldr	r0, [r7, #32]
 801dfc0:	f7fd fff2 	bl	801bfa8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801dfc4:	6a3a      	ldr	r2, [r7, #32]
 801dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfc8:	4413      	add	r3, r2
 801dfca:	623b      	str	r3, [r7, #32]
 801dfcc:	68fb      	ldr	r3, [r7, #12]
 801dfce:	689a      	ldr	r2, [r3, #8]
 801dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfd2:	441a      	add	r2, r3
 801dfd4:	68fb      	ldr	r3, [r7, #12]
 801dfd6:	609a      	str	r2, [r3, #8]
 801dfd8:	683b      	ldr	r3, [r7, #0]
 801dfda:	681a      	ldr	r2, [r3, #0]
 801dfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfde:	441a      	add	r2, r3
 801dfe0:	683b      	ldr	r3, [r7, #0]
 801dfe2:	601a      	str	r2, [r3, #0]
 801dfe4:	687a      	ldr	r2, [r7, #4]
 801dfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfe8:	1ad3      	subs	r3, r2, r3
 801dfea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	f47f af01 	bne.w	801ddf6 <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 801dff4:	2300      	movs	r3, #0
}
 801dff6:	4618      	mov	r0, r3
 801dff8:	3730      	adds	r7, #48	; 0x30
 801dffa:	46bd      	mov	sp, r7
 801dffc:	bd80      	pop	{r7, pc}

0801dffe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dffe:	b580      	push	{r7, lr}
 801e000:	b086      	sub	sp, #24
 801e002:	af00      	add	r7, sp, #0
 801e004:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 801e006:	6878      	ldr	r0, [r7, #4]
 801e008:	f7ff fd10 	bl	801da2c <validate>
 801e00c:	4603      	mov	r3, r0
 801e00e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801e010:	7dfb      	ldrb	r3, [r7, #23]
 801e012:	2b00      	cmp	r3, #0
 801e014:	f040 8096 	bne.w	801e144 <f_sync+0x146>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	799b      	ldrb	r3, [r3, #6]
 801e01c:	f003 0320 	and.w	r3, r3, #32
 801e020:	2b00      	cmp	r3, #0
 801e022:	f000 808f 	beq.w	801e144 <f_sync+0x146>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	799b      	ldrb	r3, [r3, #6]
 801e02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d016      	beq.n	801e060 <f_sync+0x62>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	7858      	ldrb	r0, [r3, #1]
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	699a      	ldr	r2, [r3, #24]
 801e042:	2301      	movs	r3, #1
 801e044:	f7fd f984 	bl	801b350 <disk_write>
 801e048:	4603      	mov	r3, r0
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	d001      	beq.n	801e052 <f_sync+0x54>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801e04e:	2301      	movs	r3, #1
 801e050:	e079      	b.n	801e146 <f_sync+0x148>
				fp->flag &= ~FA__DIRTY;
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	799b      	ldrb	r3, [r3, #6]
 801e056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e05a:	b2da      	uxtb	r2, r3
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	681a      	ldr	r2, [r3, #0]
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	69db      	ldr	r3, [r3, #28]
 801e068:	4619      	mov	r1, r3
 801e06a:	4610      	mov	r0, r2
 801e06c:	f7fe f85a 	bl	801c124 <move_window>
 801e070:	4603      	mov	r3, r0
 801e072:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 801e074:	7dfb      	ldrb	r3, [r7, #23]
 801e076:	2b00      	cmp	r3, #0
 801e078:	d164      	bne.n	801e144 <f_sync+0x146>
				dir = fp->dir_ptr;
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	6a1b      	ldr	r3, [r3, #32]
 801e07e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 801e080:	693b      	ldr	r3, [r7, #16]
 801e082:	330b      	adds	r3, #11
 801e084:	781a      	ldrb	r2, [r3, #0]
 801e086:	693b      	ldr	r3, [r7, #16]
 801e088:	330b      	adds	r3, #11
 801e08a:	f042 0220 	orr.w	r2, r2, #32
 801e08e:	b2d2      	uxtb	r2, r2
 801e090:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	68da      	ldr	r2, [r3, #12]
 801e096:	693b      	ldr	r3, [r7, #16]
 801e098:	331c      	adds	r3, #28
 801e09a:	b2d2      	uxtb	r2, r2
 801e09c:	701a      	strb	r2, [r3, #0]
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	68db      	ldr	r3, [r3, #12]
 801e0a2:	b29b      	uxth	r3, r3
 801e0a4:	0a1b      	lsrs	r3, r3, #8
 801e0a6:	b29a      	uxth	r2, r3
 801e0a8:	693b      	ldr	r3, [r7, #16]
 801e0aa:	331d      	adds	r3, #29
 801e0ac:	b2d2      	uxtb	r2, r2
 801e0ae:	701a      	strb	r2, [r3, #0]
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	68db      	ldr	r3, [r3, #12]
 801e0b4:	0c1a      	lsrs	r2, r3, #16
 801e0b6:	693b      	ldr	r3, [r7, #16]
 801e0b8:	331e      	adds	r3, #30
 801e0ba:	b2d2      	uxtb	r2, r2
 801e0bc:	701a      	strb	r2, [r3, #0]
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	68db      	ldr	r3, [r3, #12]
 801e0c2:	0e1a      	lsrs	r2, r3, #24
 801e0c4:	693b      	ldr	r3, [r7, #16]
 801e0c6:	331f      	adds	r3, #31
 801e0c8:	b2d2      	uxtb	r2, r2
 801e0ca:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	691b      	ldr	r3, [r3, #16]
 801e0d0:	4619      	mov	r1, r3
 801e0d2:	6938      	ldr	r0, [r7, #16]
 801e0d4:	f7fe fd81 	bl	801cbda <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 801e0d8:	f7fd f992 	bl	801b400 <get_fattime>
 801e0dc:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 801e0de:	693b      	ldr	r3, [r7, #16]
 801e0e0:	3316      	adds	r3, #22
 801e0e2:	68fa      	ldr	r2, [r7, #12]
 801e0e4:	b2d2      	uxtb	r2, r2
 801e0e6:	701a      	strb	r2, [r3, #0]
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	b29b      	uxth	r3, r3
 801e0ec:	0a1b      	lsrs	r3, r3, #8
 801e0ee:	b29a      	uxth	r2, r3
 801e0f0:	693b      	ldr	r3, [r7, #16]
 801e0f2:	3317      	adds	r3, #23
 801e0f4:	b2d2      	uxtb	r2, r2
 801e0f6:	701a      	strb	r2, [r3, #0]
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	0c1a      	lsrs	r2, r3, #16
 801e0fc:	693b      	ldr	r3, [r7, #16]
 801e0fe:	3318      	adds	r3, #24
 801e100:	b2d2      	uxtb	r2, r2
 801e102:	701a      	strb	r2, [r3, #0]
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	0e1a      	lsrs	r2, r3, #24
 801e108:	693b      	ldr	r3, [r7, #16]
 801e10a:	3319      	adds	r3, #25
 801e10c:	b2d2      	uxtb	r2, r2
 801e10e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 801e110:	693b      	ldr	r3, [r7, #16]
 801e112:	3312      	adds	r3, #18
 801e114:	2200      	movs	r2, #0
 801e116:	701a      	strb	r2, [r3, #0]
 801e118:	693b      	ldr	r3, [r7, #16]
 801e11a:	3313      	adds	r3, #19
 801e11c:	2200      	movs	r2, #0
 801e11e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	799b      	ldrb	r3, [r3, #6]
 801e124:	f023 0320 	bic.w	r3, r3, #32
 801e128:	b2da      	uxtb	r2, r3
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	2201      	movs	r2, #1
 801e134:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	4618      	mov	r0, r3
 801e13c:	f7fe f81f 	bl	801c17e <sync_fs>
 801e140:	4603      	mov	r3, r0
 801e142:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 801e144:	7dfb      	ldrb	r3, [r7, #23]
}
 801e146:	4618      	mov	r0, r3
 801e148:	3718      	adds	r7, #24
 801e14a:	46bd      	mov	sp, r7
 801e14c:	bd80      	pop	{r7, pc}

0801e14e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801e14e:	b580      	push	{r7, lr}
 801e150:	b084      	sub	sp, #16
 801e152:	af00      	add	r7, sp, #0
 801e154:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801e156:	6878      	ldr	r0, [r7, #4]
 801e158:	f7ff ff51 	bl	801dffe <f_sync>
 801e15c:	4603      	mov	r3, r0
 801e15e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801e160:	7bfb      	ldrb	r3, [r7, #15]
 801e162:	2b00      	cmp	r3, #0
 801e164:	d10a      	bne.n	801e17c <f_close+0x2e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 801e166:	6878      	ldr	r0, [r7, #4]
 801e168:	f7ff fc60 	bl	801da2c <validate>
 801e16c:	4603      	mov	r3, r0
 801e16e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801e170:	7bfb      	ldrb	r3, [r7, #15]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d102      	bne.n	801e17c <f_close+0x2e>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	2200      	movs	r2, #0
 801e17a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801e17c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e17e:	4618      	mov	r0, r3
 801e180:	3710      	adds	r7, #16
 801e182:	46bd      	mov	sp, r7
 801e184:	bd80      	pop	{r7, pc}

0801e186 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801e186:	b580      	push	{r7, lr}
 801e188:	b088      	sub	sp, #32
 801e18a:	af00      	add	r7, sp, #0
 801e18c:	6078      	str	r0, [r7, #4]
 801e18e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	2b00      	cmp	r3, #0
 801e194:	d101      	bne.n	801e19a <f_opendir+0x14>
 801e196:	2309      	movs	r3, #9
 801e198:	e04e      	b.n	801e238 <f_opendir+0xb2>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 801e19a:	4639      	mov	r1, r7
 801e19c:	f107 0318 	add.w	r3, r7, #24
 801e1a0:	2200      	movs	r2, #0
 801e1a2:	4618      	mov	r0, r3
 801e1a4:	f7ff f98e 	bl	801d4c4 <find_volume>
 801e1a8:	4603      	mov	r3, r0
 801e1aa:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 801e1ac:	7ffb      	ldrb	r3, [r7, #31]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d13b      	bne.n	801e22a <f_opendir+0xa4>
		dp->fs = fs;
 801e1b2:	69ba      	ldr	r2, [r7, #24]
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	601a      	str	r2, [r3, #0]
		INIT_BUF(*dp);
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	f107 020c 	add.w	r2, r7, #12
 801e1be:	619a      	str	r2, [r3, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801e1c0:	683b      	ldr	r3, [r7, #0]
 801e1c2:	4619      	mov	r1, r3
 801e1c4:	6878      	ldr	r0, [r7, #4]
 801e1c6:	f7ff f80b 	bl	801d1e0 <follow_path>
 801e1ca:	4603      	mov	r3, r0
 801e1cc:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 801e1ce:	7ffb      	ldrb	r3, [r7, #31]
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	d125      	bne.n	801e220 <f_opendir+0x9a>
			if (dp->dir) {						/* It is not the origin directory itself */
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	695b      	ldr	r3, [r3, #20]
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d014      	beq.n	801e206 <f_opendir+0x80>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	695b      	ldr	r3, [r3, #20]
 801e1e0:	330b      	adds	r3, #11
 801e1e2:	781b      	ldrb	r3, [r3, #0]
 801e1e4:	f003 0310 	and.w	r3, r3, #16
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d00a      	beq.n	801e202 <f_opendir+0x7c>
					dp->sclust = ld_clust(fs, dp->dir);
 801e1ec:	69ba      	ldr	r2, [r7, #24]
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	695b      	ldr	r3, [r3, #20]
 801e1f2:	4619      	mov	r1, r3
 801e1f4:	4610      	mov	r0, r2
 801e1f6:	f7fe fcc3 	bl	801cb80 <ld_clust>
 801e1fa:	4602      	mov	r2, r0
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	609a      	str	r2, [r3, #8]
 801e200:	e001      	b.n	801e206 <f_opendir+0x80>
				else							/* The object is a file */
					res = FR_NO_PATH;
 801e202:	2305      	movs	r3, #5
 801e204:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 801e206:	7ffb      	ldrb	r3, [r7, #31]
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d109      	bne.n	801e220 <f_opendir+0x9a>
				dp->id = fs->id;
 801e20c:	69bb      	ldr	r3, [r7, #24]
 801e20e:	88da      	ldrh	r2, [r3, #6]
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801e214:	2100      	movs	r1, #0
 801e216:	6878      	ldr	r0, [r7, #4]
 801e218:	f7fe fb1a 	bl	801c850 <dir_sdi>
 801e21c:	4603      	mov	r3, r0
 801e21e:	77fb      	strb	r3, [r7, #31]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801e220:	7ffb      	ldrb	r3, [r7, #31]
 801e222:	2b04      	cmp	r3, #4
 801e224:	d101      	bne.n	801e22a <f_opendir+0xa4>
 801e226:	2305      	movs	r3, #5
 801e228:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 801e22a:	7ffb      	ldrb	r3, [r7, #31]
 801e22c:	2b00      	cmp	r3, #0
 801e22e:	d002      	beq.n	801e236 <f_opendir+0xb0>
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	2200      	movs	r2, #0
 801e234:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801e236:	7ffb      	ldrb	r3, [r7, #31]
}
 801e238:	4618      	mov	r0, r3
 801e23a:	3720      	adds	r7, #32
 801e23c:	46bd      	mov	sp, r7
 801e23e:	bd80      	pop	{r7, pc}

0801e240 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801e240:	b580      	push	{r7, lr}
 801e242:	b086      	sub	sp, #24
 801e244:	af00      	add	r7, sp, #0
 801e246:	6078      	str	r0, [r7, #4]
 801e248:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 801e24a:	6878      	ldr	r0, [r7, #4]
 801e24c:	f7ff fbee 	bl	801da2c <validate>
 801e250:	4603      	mov	r3, r0
 801e252:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801e254:	7dfb      	ldrb	r3, [r7, #23]
 801e256:	2b00      	cmp	r3, #0
 801e258:	d130      	bne.n	801e2bc <f_readdir+0x7c>
		if (!fno) {
 801e25a:	683b      	ldr	r3, [r7, #0]
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d106      	bne.n	801e26e <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801e260:	2100      	movs	r1, #0
 801e262:	6878      	ldr	r0, [r7, #4]
 801e264:	f7fe faf4 	bl	801c850 <dir_sdi>
 801e268:	4603      	mov	r3, r0
 801e26a:	75fb      	strb	r3, [r7, #23]
 801e26c:	e026      	b.n	801e2bc <f_readdir+0x7c>
		} else {
			INIT_BUF(*dp);
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	f107 0208 	add.w	r2, r7, #8
 801e274:	619a      	str	r2, [r3, #24]
			res = dir_read(dp, 0);			/* Read an item */
 801e276:	2100      	movs	r1, #0
 801e278:	6878      	ldr	r0, [r7, #4]
 801e27a:	f7fe fd20 	bl	801ccbe <dir_read>
 801e27e:	4603      	mov	r3, r0
 801e280:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 801e282:	7dfb      	ldrb	r3, [r7, #23]
 801e284:	2b04      	cmp	r3, #4
 801e286:	d104      	bne.n	801e292 <f_readdir+0x52>
				dp->sect = 0;
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	2200      	movs	r2, #0
 801e28c:	611a      	str	r2, [r3, #16]
				res = FR_OK;
 801e28e:	2300      	movs	r3, #0
 801e290:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 801e292:	7dfb      	ldrb	r3, [r7, #23]
 801e294:	2b00      	cmp	r3, #0
 801e296:	d111      	bne.n	801e2bc <f_readdir+0x7c>
				get_fileinfo(dp, fno);		/* Get the object information */
 801e298:	6839      	ldr	r1, [r7, #0]
 801e29a:	6878      	ldr	r0, [r7, #4]
 801e29c:	f7fe fd98 	bl	801cdd0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801e2a0:	2100      	movs	r1, #0
 801e2a2:	6878      	ldr	r0, [r7, #4]
 801e2a4:	f7fe fb53 	bl	801c94e <dir_next>
 801e2a8:	4603      	mov	r3, r0
 801e2aa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 801e2ac:	7dfb      	ldrb	r3, [r7, #23]
 801e2ae:	2b04      	cmp	r3, #4
 801e2b0:	d104      	bne.n	801e2bc <f_readdir+0x7c>
					dp->sect = 0;
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	2200      	movs	r2, #0
 801e2b6:	611a      	str	r2, [r3, #16]
					res = FR_OK;
 801e2b8:	2300      	movs	r3, #0
 801e2ba:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 801e2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 801e2be:	4618      	mov	r0, r3
 801e2c0:	3718      	adds	r7, #24
 801e2c2:	46bd      	mov	sp, r7
 801e2c4:	bd80      	pop	{r7, pc}

0801e2c6 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 801e2c6:	b580      	push	{r7, lr}
 801e2c8:	b084      	sub	sp, #16
 801e2ca:	af00      	add	r7, sp, #0
 801e2cc:	6078      	str	r0, [r7, #4]
 801e2ce:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801e2d0:	6839      	ldr	r1, [r7, #0]
 801e2d2:	6878      	ldr	r0, [r7, #4]
 801e2d4:	f7ff ffb4 	bl	801e240 <f_readdir>
 801e2d8:	4603      	mov	r3, r0
 801e2da:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801e2dc:	7bfb      	ldrb	r3, [r7, #15]
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d114      	bne.n	801e30c <f_findnext+0x46>
 801e2e2:	683b      	ldr	r3, [r7, #0]
 801e2e4:	2b00      	cmp	r3, #0
 801e2e6:	d011      	beq.n	801e30c <f_findnext+0x46>
 801e2e8:	683b      	ldr	r3, [r7, #0]
 801e2ea:	7a5b      	ldrb	r3, [r3, #9]
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d00d      	beq.n	801e30c <f_findnext+0x46>
#if _USE_LFN
		if (fno->lfname && pattern_matching(dp->pat, fno->lfname, 0, 0)) break;	/* Test for LFN if exist */
#endif
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	69d8      	ldr	r0, [r3, #28]
 801e2f4:	683b      	ldr	r3, [r7, #0]
 801e2f6:	f103 0109 	add.w	r1, r3, #9
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	2200      	movs	r2, #0
 801e2fe:	f7fe fdfd 	bl	801cefc <pattern_matching>
 801e302:	4603      	mov	r3, r0
 801e304:	2b00      	cmp	r3, #0
 801e306:	d100      	bne.n	801e30a <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801e308:	e7e2      	b.n	801e2d0 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
 801e30a:	bf00      	nop
	}
	return res;
 801e30c:	7bfb      	ldrb	r3, [r7, #15]

}
 801e30e:	4618      	mov	r0, r3
 801e310:	3710      	adds	r7, #16
 801e312:	46bd      	mov	sp, r7
 801e314:	bd80      	pop	{r7, pc}

0801e316 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 801e316:	b580      	push	{r7, lr}
 801e318:	b086      	sub	sp, #24
 801e31a:	af00      	add	r7, sp, #0
 801e31c:	60f8      	str	r0, [r7, #12]
 801e31e:	60b9      	str	r1, [r7, #8]
 801e320:	607a      	str	r2, [r7, #4]
 801e322:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	683a      	ldr	r2, [r7, #0]
 801e328:	61da      	str	r2, [r3, #28]
	res = f_opendir(dp, path);		/* Open the target directory */
 801e32a:	6879      	ldr	r1, [r7, #4]
 801e32c:	68f8      	ldr	r0, [r7, #12]
 801e32e:	f7ff ff2a 	bl	801e186 <f_opendir>
 801e332:	4603      	mov	r3, r0
 801e334:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK)
 801e336:	7dfb      	ldrb	r3, [r7, #23]
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d105      	bne.n	801e348 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801e33c:	68b9      	ldr	r1, [r7, #8]
 801e33e:	68f8      	ldr	r0, [r7, #12]
 801e340:	f7ff ffc1 	bl	801e2c6 <f_findnext>
 801e344:	4603      	mov	r3, r0
 801e346:	75fb      	strb	r3, [r7, #23]
	return res;
 801e348:	7dfb      	ldrb	r3, [r7, #23]
}
 801e34a:	4618      	mov	r0, r3
 801e34c:	3718      	adds	r7, #24
 801e34e:	46bd      	mov	sp, r7
 801e350:	bd80      	pop	{r7, pc}

0801e352 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 801e352:	b580      	push	{r7, lr}
 801e354:	b084      	sub	sp, #16
 801e356:	af02      	add	r7, sp, #8
 801e358:	6078      	str	r0, [r7, #4]
 801e35a:	4608      	mov	r0, r1
 801e35c:	4611      	mov	r1, r2
 801e35e:	461a      	mov	r2, r3
 801e360:	4603      	mov	r3, r0
 801e362:	807b      	strh	r3, [r7, #2]
 801e364:	460b      	mov	r3, r1
 801e366:	707b      	strb	r3, [r7, #1]
 801e368:	4613      	mov	r3, r2
 801e36a:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 801e36c:	887b      	ldrh	r3, [r7, #2]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d00e      	beq.n	801e390 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 801e372:	6878      	ldr	r0, [r7, #4]
 801e374:	f000 f876 	bl	801e464 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 801e378:	7838      	ldrb	r0, [r7, #0]
 801e37a:	787a      	ldrb	r2, [r7, #1]
 801e37c:	8879      	ldrh	r1, [r7, #2]
 801e37e:	7d3b      	ldrb	r3, [r7, #20]
 801e380:	9301      	str	r3, [sp, #4]
 801e382:	7c3b      	ldrb	r3, [r7, #16]
 801e384:	9300      	str	r3, [sp, #0]
 801e386:	4603      	mov	r3, r0
 801e388:	6878      	ldr	r0, [r7, #4]
 801e38a:	f000 f883 	bl	801e494 <TM_GPIO_INT_Init>
 801e38e:	e000      	b.n	801e392 <TM_GPIO_Init+0x40>
		return;
 801e390:	bf00      	nop
}
 801e392:	3708      	adds	r7, #8
 801e394:	46bd      	mov	sp, r7
 801e396:	bd80      	pop	{r7, pc}

0801e398 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 801e398:	b580      	push	{r7, lr}
 801e39a:	b086      	sub	sp, #24
 801e39c:	af02      	add	r7, sp, #8
 801e39e:	6078      	str	r0, [r7, #4]
 801e3a0:	4608      	mov	r0, r1
 801e3a2:	4611      	mov	r1, r2
 801e3a4:	461a      	mov	r2, r3
 801e3a6:	4603      	mov	r3, r0
 801e3a8:	807b      	strh	r3, [r7, #2]
 801e3aa:	460b      	mov	r3, r1
 801e3ac:	707b      	strb	r3, [r7, #1]
 801e3ae:	4613      	mov	r3, r2
 801e3b0:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 801e3b2:	887b      	ldrh	r3, [r7, #2]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d03f      	beq.n	801e438 <TM_GPIO_InitAlternate+0xa0>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 801e3b8:	6878      	ldr	r0, [r7, #4]
 801e3ba:	f000 f853 	bl	801e464 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 801e3be:	2300      	movs	r3, #0
 801e3c0:	60fb      	str	r3, [r7, #12]
 801e3c2:	e02a      	b.n	801e41a <TM_GPIO_InitAlternate+0x82>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 801e3c4:	887a      	ldrh	r2, [r7, #2]
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	fa42 f303 	asr.w	r3, r2, r3
 801e3cc:	f003 0301 	and.w	r3, r3, #1
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d01e      	beq.n	801e412 <TM_GPIO_InitAlternate+0x7a>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 801e3d4:	68fb      	ldr	r3, [r7, #12]
 801e3d6:	08da      	lsrs	r2, r3, #3
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	3208      	adds	r2, #8
 801e3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e3e0:	68fa      	ldr	r2, [r7, #12]
 801e3e2:	f002 0207 	and.w	r2, r2, #7
 801e3e6:	0092      	lsls	r2, r2, #2
 801e3e8:	210f      	movs	r1, #15
 801e3ea:	fa01 f202 	lsl.w	r2, r1, r2
 801e3ee:	43d2      	mvns	r2, r2
 801e3f0:	4013      	ands	r3, r2
 801e3f2:	7f39      	ldrb	r1, [r7, #28]
 801e3f4:	68fa      	ldr	r2, [r7, #12]
 801e3f6:	f002 0207 	and.w	r2, r2, #7
 801e3fa:	0092      	lsls	r2, r2, #2
 801e3fc:	fa01 f202 	lsl.w	r2, r1, r2
 801e400:	4611      	mov	r1, r2
 801e402:	68fa      	ldr	r2, [r7, #12]
 801e404:	08d2      	lsrs	r2, r2, #3
 801e406:	4319      	orrs	r1, r3
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	3208      	adds	r2, #8
 801e40c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801e410:	e000      	b.n	801e414 <TM_GPIO_InitAlternate+0x7c>
			continue;
 801e412:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 801e414:	68fb      	ldr	r3, [r7, #12]
 801e416:	3301      	adds	r3, #1
 801e418:	60fb      	str	r3, [r7, #12]
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	2b0f      	cmp	r3, #15
 801e41e:	d9d1      	bls.n	801e3c4 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 801e420:	787a      	ldrb	r2, [r7, #1]
 801e422:	8879      	ldrh	r1, [r7, #2]
 801e424:	7e3b      	ldrb	r3, [r7, #24]
 801e426:	9301      	str	r3, [sp, #4]
 801e428:	783b      	ldrb	r3, [r7, #0]
 801e42a:	9300      	str	r3, [sp, #0]
 801e42c:	4613      	mov	r3, r2
 801e42e:	2202      	movs	r2, #2
 801e430:	6878      	ldr	r0, [r7, #4]
 801e432:	f000 f82f 	bl	801e494 <TM_GPIO_INT_Init>
 801e436:	e000      	b.n	801e43a <TM_GPIO_InitAlternate+0xa2>
		return;
 801e438:	bf00      	nop
}
 801e43a:	3710      	adds	r7, #16
 801e43c:	46bd      	mov	sp, r7
 801e43e:	bd80      	pop	{r7, pc}

0801e440 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 801e440:	b480      	push	{r7}
 801e442:	b083      	sub	sp, #12
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 801e44e:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 801e452:	0a9b      	lsrs	r3, r3, #10
 801e454:	b29b      	uxth	r3, r3
}
 801e456:	4618      	mov	r0, r3
 801e458:	370c      	adds	r7, #12
 801e45a:	46bd      	mov	sp, r7
 801e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e460:	4770      	bx	lr
	...

0801e464 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 801e464:	b580      	push	{r7, lr}
 801e466:	b082      	sub	sp, #8
 801e468:	af00      	add	r7, sp, #0
 801e46a:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 801e46c:	6878      	ldr	r0, [r7, #4]
 801e46e:	f7ff ffe7 	bl	801e440 <TM_GPIO_GetPortSource>
 801e472:	4603      	mov	r3, r0
 801e474:	461a      	mov	r2, r3
 801e476:	2301      	movs	r3, #1
 801e478:	fa03 f202 	lsl.w	r2, r3, r2
 801e47c:	4b04      	ldr	r3, [pc, #16]	; (801e490 <TM_GPIO_INT_EnableClock+0x2c>)
 801e47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e480:	4611      	mov	r1, r2
 801e482:	4a03      	ldr	r2, [pc, #12]	; (801e490 <TM_GPIO_INT_EnableClock+0x2c>)
 801e484:	430b      	orrs	r3, r1
 801e486:	6313      	str	r3, [r2, #48]	; 0x30
}
 801e488:	bf00      	nop
 801e48a:	3708      	adds	r7, #8
 801e48c:	46bd      	mov	sp, r7
 801e48e:	bd80      	pop	{r7, pc}
 801e490:	40023800 	.word	0x40023800

0801e494 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 801e494:	b580      	push	{r7, lr}
 801e496:	b084      	sub	sp, #16
 801e498:	af00      	add	r7, sp, #0
 801e49a:	6078      	str	r0, [r7, #4]
 801e49c:	4608      	mov	r0, r1
 801e49e:	4611      	mov	r1, r2
 801e4a0:	461a      	mov	r2, r3
 801e4a2:	4603      	mov	r3, r0
 801e4a4:	807b      	strh	r3, [r7, #2]
 801e4a6:	460b      	mov	r3, r1
 801e4a8:	707b      	strb	r3, [r7, #1]
 801e4aa:	4613      	mov	r3, r2
 801e4ac:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 801e4ae:	6878      	ldr	r0, [r7, #4]
 801e4b0:	f7ff ffc6 	bl	801e440 <TM_GPIO_GetPortSource>
 801e4b4:	4603      	mov	r3, r0
 801e4b6:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 801e4b8:	2300      	movs	r3, #0
 801e4ba:	73fb      	strb	r3, [r7, #15]
 801e4bc:	e067      	b.n	801e58e <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 801e4be:	887a      	ldrh	r2, [r7, #2]
 801e4c0:	7bfb      	ldrb	r3, [r7, #15]
 801e4c2:	fa42 f303 	asr.w	r3, r2, r3
 801e4c6:	f003 0301 	and.w	r3, r3, #1
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d05b      	beq.n	801e586 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 801e4ce:	7bbb      	ldrb	r3, [r7, #14]
 801e4d0:	4a32      	ldr	r2, [pc, #200]	; (801e59c <TM_GPIO_INT_Init+0x108>)
 801e4d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e4d6:	b21a      	sxth	r2, r3
 801e4d8:	7bfb      	ldrb	r3, [r7, #15]
 801e4da:	2101      	movs	r1, #1
 801e4dc:	fa01 f303 	lsl.w	r3, r1, r3
 801e4e0:	b21b      	sxth	r3, r3
 801e4e2:	4313      	orrs	r3, r2
 801e4e4:	b21a      	sxth	r2, r3
 801e4e6:	7bbb      	ldrb	r3, [r7, #14]
 801e4e8:	b291      	uxth	r1, r2
 801e4ea:	4a2c      	ldr	r2, [pc, #176]	; (801e59c <TM_GPIO_INT_Init+0x108>)
 801e4ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	68db      	ldr	r3, [r3, #12]
 801e4f4:	7bfa      	ldrb	r2, [r7, #15]
 801e4f6:	0052      	lsls	r2, r2, #1
 801e4f8:	2103      	movs	r1, #3
 801e4fa:	fa01 f202 	lsl.w	r2, r1, r2
 801e4fe:	43d2      	mvns	r2, r2
 801e500:	4013      	ands	r3, r2
 801e502:	7e39      	ldrb	r1, [r7, #24]
 801e504:	7bfa      	ldrb	r2, [r7, #15]
 801e506:	0052      	lsls	r2, r2, #1
 801e508:	fa01 f202 	lsl.w	r2, r1, r2
 801e50c:	431a      	orrs	r2, r3
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	681a      	ldr	r2, [r3, #0]
 801e516:	7bfb      	ldrb	r3, [r7, #15]
 801e518:	005b      	lsls	r3, r3, #1
 801e51a:	2103      	movs	r1, #3
 801e51c:	fa01 f303 	lsl.w	r3, r1, r3
 801e520:	43db      	mvns	r3, r3
 801e522:	4013      	ands	r3, r2
 801e524:	7879      	ldrb	r1, [r7, #1]
 801e526:	7bfa      	ldrb	r2, [r7, #15]
 801e528:	0052      	lsls	r2, r2, #1
 801e52a:	fa01 f202 	lsl.w	r2, r1, r2
 801e52e:	431a      	orrs	r2, r3
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 801e534:	787b      	ldrb	r3, [r7, #1]
 801e536:	2b01      	cmp	r3, #1
 801e538:	d002      	beq.n	801e540 <TM_GPIO_INT_Init+0xac>
 801e53a:	787b      	ldrb	r3, [r7, #1]
 801e53c:	2b02      	cmp	r3, #2
 801e53e:	d123      	bne.n	801e588 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	685b      	ldr	r3, [r3, #4]
 801e544:	7bfa      	ldrb	r2, [r7, #15]
 801e546:	2101      	movs	r1, #1
 801e548:	fa01 f202 	lsl.w	r2, r1, r2
 801e54c:	b292      	uxth	r2, r2
 801e54e:	43d2      	mvns	r2, r2
 801e550:	4013      	ands	r3, r2
 801e552:	7839      	ldrb	r1, [r7, #0]
 801e554:	7bfa      	ldrb	r2, [r7, #15]
 801e556:	fa01 f202 	lsl.w	r2, r1, r2
 801e55a:	b292      	uxth	r2, r2
 801e55c:	431a      	orrs	r2, r3
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	689a      	ldr	r2, [r3, #8]
 801e566:	7bfb      	ldrb	r3, [r7, #15]
 801e568:	005b      	lsls	r3, r3, #1
 801e56a:	2103      	movs	r1, #3
 801e56c:	fa01 f303 	lsl.w	r3, r1, r3
 801e570:	43db      	mvns	r3, r3
 801e572:	4013      	ands	r3, r2
 801e574:	7f39      	ldrb	r1, [r7, #28]
 801e576:	7bfa      	ldrb	r2, [r7, #15]
 801e578:	0052      	lsls	r2, r2, #1
 801e57a:	fa01 f202 	lsl.w	r2, r1, r2
 801e57e:	431a      	orrs	r2, r3
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	609a      	str	r2, [r3, #8]
 801e584:	e000      	b.n	801e588 <TM_GPIO_INT_Init+0xf4>
			continue;
 801e586:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 801e588:	7bfb      	ldrb	r3, [r7, #15]
 801e58a:	3301      	adds	r3, #1
 801e58c:	73fb      	strb	r3, [r7, #15]
 801e58e:	7bfb      	ldrb	r3, [r7, #15]
 801e590:	2b0f      	cmp	r3, #15
 801e592:	d994      	bls.n	801e4be <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 801e594:	bf00      	nop
 801e596:	3710      	adds	r7, #16
 801e598:	46bd      	mov	sp, r7
 801e59a:	bd80      	pop	{r7, pc}
 801e59c:	20002824 	.word	0x20002824

0801e5a0 <TM_SPI_Init>:
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit);
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 801e5a0:	b580      	push	{r7, lr}
 801e5a2:	b084      	sub	sp, #16
 801e5a4:	af02      	add	r7, sp, #8
 801e5a6:	6078      	str	r0, [r7, #4]
 801e5a8:	460b      	mov	r3, r1
 801e5aa:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	4a18      	ldr	r2, [pc, #96]	; (801e610 <TM_SPI_Init+0x70>)
 801e5b0:	4293      	cmp	r3, r2
 801e5b2:	d10a      	bne.n	801e5ca <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 801e5b4:	78f9      	ldrb	r1, [r7, #3]
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	9301      	str	r3, [sp, #4]
 801e5ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 801e5be:	9300      	str	r3, [sp, #0]
 801e5c0:	2320      	movs	r3, #32
 801e5c2:	2200      	movs	r2, #0
 801e5c4:	4812      	ldr	r0, [pc, #72]	; (801e610 <TM_SPI_Init+0x70>)
 801e5c6:	f000 f8c5 	bl	801e754 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	4a11      	ldr	r2, [pc, #68]	; (801e614 <TM_SPI_Init+0x74>)
 801e5ce:	4293      	cmp	r3, r2
 801e5d0:	d10a      	bne.n	801e5e8 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 801e5d2:	78f9      	ldrb	r1, [r7, #3]
 801e5d4:	2300      	movs	r3, #0
 801e5d6:	9301      	str	r3, [sp, #4]
 801e5d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 801e5dc:	9300      	str	r3, [sp, #0]
 801e5de:	2300      	movs	r3, #0
 801e5e0:	2200      	movs	r2, #0
 801e5e2:	480c      	ldr	r0, [pc, #48]	; (801e614 <TM_SPI_Init+0x74>)
 801e5e4:	f000 f8b6 	bl	801e754 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	4a0b      	ldr	r2, [pc, #44]	; (801e618 <TM_SPI_Init+0x78>)
 801e5ec:	4293      	cmp	r3, r2
 801e5ee:	d10a      	bne.n	801e606 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 801e5f0:	78f9      	ldrb	r1, [r7, #3]
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	9301      	str	r3, [sp, #4]
 801e5f6:	f44f 7382 	mov.w	r3, #260	; 0x104
 801e5fa:	9300      	str	r3, [sp, #0]
 801e5fc:	2320      	movs	r3, #32
 801e5fe:	2200      	movs	r2, #0
 801e600:	4805      	ldr	r0, [pc, #20]	; (801e618 <TM_SPI_Init+0x78>)
 801e602:	f000 f8a7 	bl	801e754 <TM_SPIx_Init>
	}
#endif
}
 801e606:	bf00      	nop
 801e608:	3708      	adds	r7, #8
 801e60a:	46bd      	mov	sp, r7
 801e60c:	bd80      	pop	{r7, pc}
 801e60e:	bf00      	nop
 801e610:	40013000 	.word	0x40013000
 801e614:	40003800 	.word	0x40003800
 801e618:	40003c00 	.word	0x40003c00

0801e61c <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 801e61c:	b480      	push	{r7}
 801e61e:	b087      	sub	sp, #28
 801e620:	af00      	add	r7, sp, #0
 801e622:	60f8      	str	r0, [r7, #12]
 801e624:	60b9      	str	r1, [r7, #8]
 801e626:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 801e628:	68fb      	ldr	r3, [r7, #12]
 801e62a:	881b      	ldrh	r3, [r3, #0]
 801e62c:	b29b      	uxth	r3, r3
 801e62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e632:	2b00      	cmp	r3, #0
 801e634:	d031      	beq.n	801e69a <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 801e636:	bf00      	nop
 801e638:	68fb      	ldr	r3, [r7, #12]
 801e63a:	891b      	ldrh	r3, [r3, #8]
 801e63c:	b29b      	uxth	r3, r3
 801e63e:	f003 0303 	and.w	r3, r3, #3
 801e642:	2b00      	cmp	r3, #0
 801e644:	d0f8      	beq.n	801e638 <TM_SPI_WriteMulti+0x1c>
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	891b      	ldrh	r3, [r3, #8]
 801e64a:	b29b      	uxth	r3, r3
 801e64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e650:	2b00      	cmp	r3, #0
 801e652:	d1f1      	bne.n	801e638 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 801e654:	2300      	movs	r3, #0
 801e656:	617b      	str	r3, [r7, #20]
 801e658:	e01a      	b.n	801e690 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 801e65a:	68ba      	ldr	r2, [r7, #8]
 801e65c:	697b      	ldr	r3, [r7, #20]
 801e65e:	4413      	add	r3, r2
 801e660:	781b      	ldrb	r3, [r3, #0]
 801e662:	b29a      	uxth	r2, r3
 801e664:	68fb      	ldr	r3, [r7, #12]
 801e666:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 801e668:	bf00      	nop
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	891b      	ldrh	r3, [r3, #8]
 801e66e:	b29b      	uxth	r3, r3
 801e670:	f003 0303 	and.w	r3, r3, #3
 801e674:	2b00      	cmp	r3, #0
 801e676:	d0f8      	beq.n	801e66a <TM_SPI_WriteMulti+0x4e>
 801e678:	68fb      	ldr	r3, [r7, #12]
 801e67a:	891b      	ldrh	r3, [r3, #8]
 801e67c:	b29b      	uxth	r3, r3
 801e67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e682:	2b00      	cmp	r3, #0
 801e684:	d1f1      	bne.n	801e66a <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 801e686:	68fb      	ldr	r3, [r7, #12]
 801e688:	899b      	ldrh	r3, [r3, #12]
	for (i = 0; i < count; i++) {
 801e68a:	697b      	ldr	r3, [r7, #20]
 801e68c:	3301      	adds	r3, #1
 801e68e:	617b      	str	r3, [r7, #20]
 801e690:	697a      	ldr	r2, [r7, #20]
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	429a      	cmp	r2, r3
 801e696:	d3e0      	bcc.n	801e65a <TM_SPI_WriteMulti+0x3e>
 801e698:	e000      	b.n	801e69c <TM_SPI_WriteMulti+0x80>
	SPI_CHECK_ENABLED(SPIx);
 801e69a:	bf00      	nop
	}
}
 801e69c:	371c      	adds	r7, #28
 801e69e:	46bd      	mov	sp, r7
 801e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6a4:	4770      	bx	lr

0801e6a6 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 801e6a6:	b480      	push	{r7}
 801e6a8:	b087      	sub	sp, #28
 801e6aa:	af00      	add	r7, sp, #0
 801e6ac:	60f8      	str	r0, [r7, #12]
 801e6ae:	60b9      	str	r1, [r7, #8]
 801e6b0:	603b      	str	r3, [r7, #0]
 801e6b2:	4613      	mov	r3, r2
 801e6b4:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 801e6b6:	68fb      	ldr	r3, [r7, #12]
 801e6b8:	881b      	ldrh	r3, [r3, #0]
 801e6ba:	b29b      	uxth	r3, r3
 801e6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d034      	beq.n	801e72e <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 801e6c4:	bf00      	nop
 801e6c6:	68fb      	ldr	r3, [r7, #12]
 801e6c8:	891b      	ldrh	r3, [r3, #8]
 801e6ca:	b29b      	uxth	r3, r3
 801e6cc:	f003 0303 	and.w	r3, r3, #3
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d0f8      	beq.n	801e6c6 <TM_SPI_ReadMulti+0x20>
 801e6d4:	68fb      	ldr	r3, [r7, #12]
 801e6d6:	891b      	ldrh	r3, [r3, #8]
 801e6d8:	b29b      	uxth	r3, r3
 801e6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d1f1      	bne.n	801e6c6 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	617b      	str	r3, [r7, #20]
 801e6e6:	e01d      	b.n	801e724 <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 801e6e8:	79fb      	ldrb	r3, [r7, #7]
 801e6ea:	b29a      	uxth	r2, r3
 801e6ec:	68fb      	ldr	r3, [r7, #12]
 801e6ee:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 801e6f0:	bf00      	nop
 801e6f2:	68fb      	ldr	r3, [r7, #12]
 801e6f4:	891b      	ldrh	r3, [r3, #8]
 801e6f6:	b29b      	uxth	r3, r3
 801e6f8:	f003 0303 	and.w	r3, r3, #3
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d0f8      	beq.n	801e6f2 <TM_SPI_ReadMulti+0x4c>
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	891b      	ldrh	r3, [r3, #8]
 801e704:	b29b      	uxth	r3, r3
 801e706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d1f1      	bne.n	801e6f2 <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 801e70e:	68fb      	ldr	r3, [r7, #12]
 801e710:	899b      	ldrh	r3, [r3, #12]
 801e712:	b299      	uxth	r1, r3
 801e714:	68ba      	ldr	r2, [r7, #8]
 801e716:	697b      	ldr	r3, [r7, #20]
 801e718:	4413      	add	r3, r2
 801e71a:	b2ca      	uxtb	r2, r1
 801e71c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; i++) {
 801e71e:	697b      	ldr	r3, [r7, #20]
 801e720:	3301      	adds	r3, #1
 801e722:	617b      	str	r3, [r7, #20]
 801e724:	697a      	ldr	r2, [r7, #20]
 801e726:	683b      	ldr	r3, [r7, #0]
 801e728:	429a      	cmp	r2, r3
 801e72a:	d3dd      	bcc.n	801e6e8 <TM_SPI_ReadMulti+0x42>
 801e72c:	e000      	b.n	801e730 <TM_SPI_ReadMulti+0x8a>
	SPI_CHECK_ENABLED(SPIx);
 801e72e:	bf00      	nop
	}
}
 801e730:	371c      	adds	r7, #28
 801e732:	46bd      	mov	sp, r7
 801e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e738:	4770      	bx	lr

0801e73a <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 801e73a:	b480      	push	{r7}
 801e73c:	b083      	sub	sp, #12
 801e73e:	af00      	add	r7, sp, #0
 801e740:	6078      	str	r0, [r7, #4]
 801e742:	460b      	mov	r3, r1
 801e744:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 801e746:	bf00      	nop
 801e748:	370c      	adds	r7, #12
 801e74a:	46bd      	mov	sp, r7
 801e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e750:	4770      	bx	lr
	...

0801e754 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 801e754:	b580      	push	{r7, lr}
 801e756:	b088      	sub	sp, #32
 801e758:	af00      	add	r7, sp, #0
 801e75a:	6078      	str	r0, [r7, #4]
 801e75c:	4608      	mov	r0, r1
 801e75e:	4611      	mov	r1, r2
 801e760:	461a      	mov	r2, r3
 801e762:	4603      	mov	r3, r0
 801e764:	70fb      	strb	r3, [r7, #3]
 801e766:	460b      	mov	r3, r1
 801e768:	70bb      	strb	r3, [r7, #2]
 801e76a:	4613      	mov	r3, r2
 801e76c:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 801e76e:	f107 030c 	add.w	r3, r7, #12
 801e772:	4618      	mov	r0, r3
 801e774:	f7eb fb36 	bl	8009de4 <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	4a39      	ldr	r2, [pc, #228]	; (801e860 <TM_SPIx_Init+0x10c>)
 801e77c:	4293      	cmp	r3, r2
 801e77e:	d10b      	bne.n	801e798 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 801e780:	4b38      	ldr	r3, [pc, #224]	; (801e864 <TM_SPIx_Init+0x110>)
 801e782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e784:	4a37      	ldr	r2, [pc, #220]	; (801e864 <TM_SPIx_Init+0x110>)
 801e786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801e78a:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 801e78c:	78fb      	ldrb	r3, [r7, #3]
 801e78e:	4618      	mov	r0, r3
 801e790:	f000 f86e 	bl	801e870 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 801e794:	2300      	movs	r3, #0
 801e796:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	4a33      	ldr	r2, [pc, #204]	; (801e868 <TM_SPIx_Init+0x114>)
 801e79c:	4293      	cmp	r3, r2
 801e79e:	d10b      	bne.n	801e7b8 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 801e7a0:	4b30      	ldr	r3, [pc, #192]	; (801e864 <TM_SPIx_Init+0x110>)
 801e7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e7a4:	4a2f      	ldr	r2, [pc, #188]	; (801e864 <TM_SPIx_Init+0x110>)
 801e7a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801e7aa:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 801e7ac:	78fb      	ldrb	r3, [r7, #3]
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	f000 f88e 	bl	801e8d0 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 801e7b4:	2300      	movs	r3, #0
 801e7b6:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	4a2c      	ldr	r2, [pc, #176]	; (801e86c <TM_SPIx_Init+0x118>)
 801e7bc:	4293      	cmp	r3, r2
 801e7be:	d10b      	bne.n	801e7d8 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 801e7c0:	4b28      	ldr	r3, [pc, #160]	; (801e864 <TM_SPIx_Init+0x110>)
 801e7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e7c4:	4a27      	ldr	r2, [pc, #156]	; (801e864 <TM_SPIx_Init+0x110>)
 801e7c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e7ca:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 801e7cc:	78fb      	ldrb	r3, [r7, #3]
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	f000 f8ca 	bl	801e968 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	823b      	strh	r3, [r7, #16]
	
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 801e7d8:	883b      	ldrh	r3, [r7, #0]
 801e7da:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 801e7dc:	2300      	movs	r3, #0
 801e7de:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 801e7e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e7e2:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 801e7e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801e7e6:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 801e7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e7ec:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 801e7ee:	78bb      	ldrb	r3, [r7, #2]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d104      	bne.n	801e7fe <TM_SPIx_Init+0xaa>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 801e7f4:	2300      	movs	r3, #0
 801e7f6:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	82bb      	strh	r3, [r7, #20]
 801e7fc:	e016      	b.n	801e82c <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 801e7fe:	78bb      	ldrb	r3, [r7, #2]
 801e800:	2b01      	cmp	r3, #1
 801e802:	d104      	bne.n	801e80e <TM_SPIx_Init+0xba>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 801e804:	2300      	movs	r3, #0
 801e806:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 801e808:	2301      	movs	r3, #1
 801e80a:	82bb      	strh	r3, [r7, #20]
 801e80c:	e00e      	b.n	801e82c <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 801e80e:	78bb      	ldrb	r3, [r7, #2]
 801e810:	2b02      	cmp	r3, #2
 801e812:	d104      	bne.n	801e81e <TM_SPIx_Init+0xca>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 801e814:	2302      	movs	r3, #2
 801e816:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 801e818:	2300      	movs	r3, #0
 801e81a:	82bb      	strh	r3, [r7, #20]
 801e81c:	e006      	b.n	801e82c <TM_SPIx_Init+0xd8>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 801e81e:	78bb      	ldrb	r3, [r7, #2]
 801e820:	2b03      	cmp	r3, #3
 801e822:	d103      	bne.n	801e82c <TM_SPIx_Init+0xd8>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 801e824:	2302      	movs	r3, #2
 801e826:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 801e828:	2301      	movs	r3, #1
 801e82a:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	881b      	ldrh	r3, [r3, #0]
 801e830:	b29b      	uxth	r3, r3
 801e832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e836:	b29a      	uxth	r2, r3
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 801e83c:	f107 030c 	add.w	r3, r7, #12
 801e840:	4619      	mov	r1, r3
 801e842:	6878      	ldr	r0, [r7, #4]
 801e844:	f7eb fa8a 	bl	8009d5c <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	881b      	ldrh	r3, [r3, #0]
 801e84c:	b29b      	uxth	r3, r3
 801e84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e852:	b29a      	uxth	r2, r3
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	801a      	strh	r2, [r3, #0]
}
 801e858:	bf00      	nop
 801e85a:	3720      	adds	r7, #32
 801e85c:	46bd      	mov	sp, r7
 801e85e:	bd80      	pop	{r7, pc}
 801e860:	40013000 	.word	0x40013000
 801e864:	40023800 	.word	0x40023800
 801e868:	40003800 	.word	0x40003800
 801e86c:	40003c00 	.word	0x40003c00

0801e870 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 801e870:	b580      	push	{r7, lr}
 801e872:	b084      	sub	sp, #16
 801e874:	af02      	add	r7, sp, #8
 801e876:	4603      	mov	r3, r0
 801e878:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 801e87a:	79fb      	ldrb	r3, [r7, #7]
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d109      	bne.n	801e894 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 801e880:	2305      	movs	r3, #5
 801e882:	9301      	str	r3, [sp, #4]
 801e884:	2303      	movs	r3, #3
 801e886:	9300      	str	r3, [sp, #0]
 801e888:	2300      	movs	r3, #0
 801e88a:	2200      	movs	r2, #0
 801e88c:	21e0      	movs	r1, #224	; 0xe0
 801e88e:	480d      	ldr	r0, [pc, #52]	; (801e8c4 <TM_SPI1_INT_InitPins+0x54>)
 801e890:	f7ff fd82 	bl	801e398 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 801e894:	79fb      	ldrb	r3, [r7, #7]
 801e896:	2b01      	cmp	r3, #1
 801e898:	d109      	bne.n	801e8ae <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 801e89a:	2305      	movs	r3, #5
 801e89c:	9301      	str	r3, [sp, #4]
 801e89e:	2303      	movs	r3, #3
 801e8a0:	9300      	str	r3, [sp, #0]
 801e8a2:	2300      	movs	r3, #0
 801e8a4:	2200      	movs	r2, #0
 801e8a6:	2138      	movs	r1, #56	; 0x38
 801e8a8:	4807      	ldr	r0, [pc, #28]	; (801e8c8 <TM_SPI1_INT_InitPins+0x58>)
 801e8aa:	f7ff fd75 	bl	801e398 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 801e8ae:	79fb      	ldrb	r3, [r7, #7]
 801e8b0:	2b03      	cmp	r3, #3
 801e8b2:	d103      	bne.n	801e8bc <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 801e8b4:	2105      	movs	r1, #5
 801e8b6:	4805      	ldr	r0, [pc, #20]	; (801e8cc <TM_SPI1_INT_InitPins+0x5c>)
 801e8b8:	f7ff ff3f 	bl	801e73a <TM_SPI_InitCustomPinsCallback>
	}
}
 801e8bc:	bf00      	nop
 801e8be:	3708      	adds	r7, #8
 801e8c0:	46bd      	mov	sp, r7
 801e8c2:	bd80      	pop	{r7, pc}
 801e8c4:	40020000 	.word	0x40020000
 801e8c8:	40020400 	.word	0x40020400
 801e8cc:	40013000 	.word	0x40013000

0801e8d0 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 801e8d0:	b580      	push	{r7, lr}
 801e8d2:	b084      	sub	sp, #16
 801e8d4:	af02      	add	r7, sp, #8
 801e8d6:	4603      	mov	r3, r0
 801e8d8:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 801e8da:	79fb      	ldrb	r3, [r7, #7]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d114      	bne.n	801e90a <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 801e8e0:	2305      	movs	r3, #5
 801e8e2:	9301      	str	r3, [sp, #4]
 801e8e4:	2303      	movs	r3, #3
 801e8e6:	9300      	str	r3, [sp, #0]
 801e8e8:	2300      	movs	r3, #0
 801e8ea:	2200      	movs	r2, #0
 801e8ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e8f0:	4819      	ldr	r0, [pc, #100]	; (801e958 <TM_SPI2_INT_InitPins+0x88>)
 801e8f2:	f7ff fd51 	bl	801e398 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 801e8f6:	2305      	movs	r3, #5
 801e8f8:	9301      	str	r3, [sp, #4]
 801e8fa:	2303      	movs	r3, #3
 801e8fc:	9300      	str	r3, [sp, #0]
 801e8fe:	2300      	movs	r3, #0
 801e900:	2200      	movs	r2, #0
 801e902:	210c      	movs	r1, #12
 801e904:	4815      	ldr	r0, [pc, #84]	; (801e95c <TM_SPI2_INT_InitPins+0x8c>)
 801e906:	f7ff fd47 	bl	801e398 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 801e90a:	79fb      	ldrb	r3, [r7, #7]
 801e90c:	2b01      	cmp	r3, #1
 801e90e:	d10a      	bne.n	801e926 <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 801e910:	2305      	movs	r3, #5
 801e912:	9301      	str	r3, [sp, #4]
 801e914:	2303      	movs	r3, #3
 801e916:	9300      	str	r3, [sp, #0]
 801e918:	2300      	movs	r3, #0
 801e91a:	2200      	movs	r2, #0
 801e91c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 801e920:	480d      	ldr	r0, [pc, #52]	; (801e958 <TM_SPI2_INT_InitPins+0x88>)
 801e922:	f7ff fd39 	bl	801e398 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 801e926:	79fb      	ldrb	r3, [r7, #7]
 801e928:	2b02      	cmp	r3, #2
 801e92a:	d109      	bne.n	801e940 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 801e92c:	2305      	movs	r3, #5
 801e92e:	9301      	str	r3, [sp, #4]
 801e930:	2303      	movs	r3, #3
 801e932:	9300      	str	r3, [sp, #0]
 801e934:	2300      	movs	r3, #0
 801e936:	2200      	movs	r2, #0
 801e938:	210d      	movs	r1, #13
 801e93a:	4809      	ldr	r0, [pc, #36]	; (801e960 <TM_SPI2_INT_InitPins+0x90>)
 801e93c:	f7ff fd2c 	bl	801e398 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 801e940:	79fb      	ldrb	r3, [r7, #7]
 801e942:	2b03      	cmp	r3, #3
 801e944:	d103      	bne.n	801e94e <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 801e946:	2105      	movs	r1, #5
 801e948:	4806      	ldr	r0, [pc, #24]	; (801e964 <TM_SPI2_INT_InitPins+0x94>)
 801e94a:	f7ff fef6 	bl	801e73a <TM_SPI_InitCustomPinsCallback>
	}
}
 801e94e:	bf00      	nop
 801e950:	3708      	adds	r7, #8
 801e952:	46bd      	mov	sp, r7
 801e954:	bd80      	pop	{r7, pc}
 801e956:	bf00      	nop
 801e958:	40020400 	.word	0x40020400
 801e95c:	40020800 	.word	0x40020800
 801e960:	40022000 	.word	0x40022000
 801e964:	40003800 	.word	0x40003800

0801e968 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 801e968:	b580      	push	{r7, lr}
 801e96a:	b084      	sub	sp, #16
 801e96c:	af02      	add	r7, sp, #8
 801e96e:	4603      	mov	r3, r0
 801e970:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 801e972:	79fb      	ldrb	r3, [r7, #7]
 801e974:	2b00      	cmp	r3, #0
 801e976:	d109      	bne.n	801e98c <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 801e978:	2306      	movs	r3, #6
 801e97a:	9301      	str	r3, [sp, #4]
 801e97c:	2303      	movs	r3, #3
 801e97e:	9300      	str	r3, [sp, #0]
 801e980:	2300      	movs	r3, #0
 801e982:	2200      	movs	r2, #0
 801e984:	2138      	movs	r1, #56	; 0x38
 801e986:	480e      	ldr	r0, [pc, #56]	; (801e9c0 <TM_SPI3_INT_InitPins+0x58>)
 801e988:	f7ff fd06 	bl	801e398 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 801e98c:	79fb      	ldrb	r3, [r7, #7]
 801e98e:	2b01      	cmp	r3, #1
 801e990:	d10a      	bne.n	801e9a8 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 801e992:	2306      	movs	r3, #6
 801e994:	9301      	str	r3, [sp, #4]
 801e996:	2303      	movs	r3, #3
 801e998:	9300      	str	r3, [sp, #0]
 801e99a:	2300      	movs	r3, #0
 801e99c:	2200      	movs	r2, #0
 801e99e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 801e9a2:	4808      	ldr	r0, [pc, #32]	; (801e9c4 <TM_SPI3_INT_InitPins+0x5c>)
 801e9a4:	f7ff fcf8 	bl	801e398 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 801e9a8:	79fb      	ldrb	r3, [r7, #7]
 801e9aa:	2b03      	cmp	r3, #3
 801e9ac:	d103      	bne.n	801e9b6 <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 801e9ae:	2106      	movs	r1, #6
 801e9b0:	4805      	ldr	r0, [pc, #20]	; (801e9c8 <TM_SPI3_INT_InitPins+0x60>)
 801e9b2:	f7ff fec2 	bl	801e73a <TM_SPI_InitCustomPinsCallback>
	}
}
 801e9b6:	bf00      	nop
 801e9b8:	3708      	adds	r7, #8
 801e9ba:	46bd      	mov	sp, r7
 801e9bc:	bd80      	pop	{r7, pc}
 801e9be:	bf00      	nop
 801e9c0:	40020400 	.word	0x40020400
 801e9c4:	40020800 	.word	0x40020800
 801e9c8:	40003c00 	.word	0x40003c00

0801e9cc <getFont>:
#include <main.h>
// chr ... gesuchter Buchstabe
// returns: pointer auf Bitmap
// *width, *height ... Größe des Buchstabens in Pixel (bits)
unsigned char *getFont(FONT_INFO *pfont, char chr, unsigned char *width, unsigned char *height)
{
 801e9cc:	b480      	push	{r7}
 801e9ce:	b087      	sub	sp, #28
 801e9d0:	af00      	add	r7, sp, #0
 801e9d2:	60f8      	str	r0, [r7, #12]
 801e9d4:	607a      	str	r2, [r7, #4]
 801e9d6:	603b      	str	r3, [r7, #0]
 801e9d8:	460b      	mov	r3, r1
 801e9da:	72fb      	strb	r3, [r7, #11]
	FONT_CHAR_INFO *charinfo = &pfont->descriptor[chr-' '];
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	685a      	ldr	r2, [r3, #4]
 801e9e0:	7afb      	ldrb	r3, [r7, #11]
 801e9e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801e9e6:	3b20      	subs	r3, #32
 801e9e8:	00db      	lsls	r3, r3, #3
 801e9ea:	4413      	add	r3, r2
 801e9ec:	617b      	str	r3, [r7, #20]

	*width = charinfo->width;
 801e9ee:	697b      	ldr	r3, [r7, #20]
 801e9f0:	781a      	ldrb	r2, [r3, #0]
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	701a      	strb	r2, [r3, #0]
	*height = charinfo->height;
 801e9f6:	697b      	ldr	r3, [r7, #20]
 801e9f8:	785a      	ldrb	r2, [r3, #1]
 801e9fa:	683b      	ldr	r3, [r7, #0]
 801e9fc:	701a      	strb	r2, [r3, #0]

	return pfont->bitmap + charinfo->offset;
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	689a      	ldr	r2, [r3, #8]
 801ea02:	697b      	ldr	r3, [r7, #20]
 801ea04:	685b      	ldr	r3, [r3, #4]
 801ea06:	4413      	add	r3, r2
}
 801ea08:	4618      	mov	r0, r3
 801ea0a:	371c      	adds	r7, #28
 801ea0c:	46bd      	mov	sp, r7
 801ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea12:	4770      	bx	lr

0801ea14 <tft_print_restclear>:

void tft_print_restclear(FONT_INFO *pfont, char *text, int xpos, int ypos, int abstand, unsigned int fcol, unsigned int bcol, unsigned int restclear)
 {
 801ea14:	b590      	push	{r4, r7, lr}
 801ea16:	b08d      	sub	sp, #52	; 0x34
 801ea18:	af02      	add	r7, sp, #8
 801ea1a:	60f8      	str	r0, [r7, #12]
 801ea1c:	60b9      	str	r1, [r7, #8]
 801ea1e:	607a      	str	r2, [r7, #4]
 801ea20:	603b      	str	r3, [r7, #0]
	 unsigned char idx;
	 unsigned char x,y;
	 unsigned char width, height=0;
 801ea22:	2300      	movs	r3, #0
 801ea24:	74bb      	strb	r3, [r7, #18]
	 unsigned int bytenum;
	 unsigned int pixcol;
	 unsigned int xright = 0;
 801ea26:	2300      	movs	r3, #0
 801ea28:	61fb      	str	r3, [r7, #28]
	 unsigned char *fdata;

	 for(idx = 0; idx < strlen(text); idx++)
 801ea2a:	2300      	movs	r3, #0
 801ea2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ea30:	e091      	b.n	801eb56 <tft_print_restclear+0x142>
	 {
		 // hole die Bitmap
		 fdata = getFont(pfont, text[idx], &width, &height);
 801ea32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ea36:	68ba      	ldr	r2, [r7, #8]
 801ea38:	4413      	add	r3, r2
 801ea3a:	7819      	ldrb	r1, [r3, #0]
 801ea3c:	f107 0312 	add.w	r3, r7, #18
 801ea40:	f107 0213 	add.w	r2, r7, #19
 801ea44:	68f8      	ldr	r0, [r7, #12]
 801ea46:	f7ff ffc1 	bl	801e9cc <getFont>
 801ea4a:	61b8      	str	r0, [r7, #24]

		 // Definiere den benötigten Zeichenbereich
		 TFT_setRegion(xpos,ypos,xpos+width-1,ypos+height-1);
 801ea4c:	7cfb      	ldrb	r3, [r7, #19]
 801ea4e:	461a      	mov	r2, r3
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	4413      	add	r3, r2
 801ea54:	1e5a      	subs	r2, r3, #1
 801ea56:	7cbb      	ldrb	r3, [r7, #18]
 801ea58:	4619      	mov	r1, r3
 801ea5a:	683b      	ldr	r3, [r7, #0]
 801ea5c:	440b      	add	r3, r1
 801ea5e:	3b01      	subs	r3, #1
 801ea60:	6839      	ldr	r1, [r7, #0]
 801ea62:	6878      	ldr	r0, [r7, #4]
 801ea64:	f7f8 fe92 	bl	801778c <TFT_setRegion>
		 TFT_REG=0x2C;
 801ea68:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 801ea6c:	222c      	movs	r2, #44	; 0x2c
 801ea6e:	801a      	strh	r2, [r3, #0]

		 xright = xpos+width-1;	// merke rechteste Position
 801ea70:	7cfb      	ldrb	r3, [r7, #19]
 801ea72:	461a      	mov	r2, r3
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	4413      	add	r3, r2
 801ea78:	3b01      	subs	r3, #1
 801ea7a:	61fb      	str	r3, [r7, #28]

		 for(y=0; y<height; y++)
 801ea7c:	2300      	movs	r3, #0
 801ea7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ea82:	e03f      	b.n	801eb04 <tft_print_restclear+0xf0>
		 {
			 bytenum = y;                // diese beiden Zeilen getrennt lassen wegen 16 bit Berechnung
 801ea84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ea88:	617b      	str	r3, [r7, #20]
			 bytenum *= (((int)width+7)/8);
 801ea8a:	7cfb      	ldrb	r3, [r7, #19]
 801ea8c:	3307      	adds	r3, #7
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	da00      	bge.n	801ea94 <tft_print_restclear+0x80>
 801ea92:	3307      	adds	r3, #7
 801ea94:	10db      	asrs	r3, r3, #3
 801ea96:	461a      	mov	r2, r3
 801ea98:	697b      	ldr	r3, [r7, #20]
 801ea9a:	fb02 f303 	mul.w	r3, r2, r3
 801ea9e:	617b      	str	r3, [r7, #20]
			 for(x=0; x<width; x++)
 801eaa0:	2300      	movs	r3, #0
 801eaa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801eaa6:	e023      	b.n	801eaf0 <tft_print_restclear+0xdc>
			 {
				 if(fdata[bytenum+x/8] & (1<<(7-(x%8))))
 801eaa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801eaac:	08db      	lsrs	r3, r3, #3
 801eaae:	b2db      	uxtb	r3, r3
 801eab0:	461a      	mov	r2, r3
 801eab2:	697b      	ldr	r3, [r7, #20]
 801eab4:	4413      	add	r3, r2
 801eab6:	69ba      	ldr	r2, [r7, #24]
 801eab8:	4413      	add	r3, r2
 801eaba:	781b      	ldrb	r3, [r3, #0]
 801eabc:	461a      	mov	r2, r3
 801eabe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801eac2:	43db      	mvns	r3, r3
 801eac4:	f003 0307 	and.w	r3, r3, #7
 801eac8:	fa42 f303 	asr.w	r3, r2, r3
 801eacc:	f003 0301 	and.w	r3, r3, #1
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d002      	beq.n	801eada <tft_print_restclear+0xc6>
					 pixcol = fcol;
 801ead4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ead6:	623b      	str	r3, [r7, #32]
 801ead8:	e001      	b.n	801eade <tft_print_restclear+0xca>
				 else
					 pixcol = bcol;
 801eada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eadc:	623b      	str	r3, [r7, #32]

				 TFT_RAM = pixcol;
 801eade:	4b30      	ldr	r3, [pc, #192]	; (801eba0 <tft_print_restclear+0x18c>)
 801eae0:	6a3a      	ldr	r2, [r7, #32]
 801eae2:	b292      	uxth	r2, r2
 801eae4:	801a      	strh	r2, [r3, #0]
			 for(x=0; x<width; x++)
 801eae6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801eaea:	3301      	adds	r3, #1
 801eaec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801eaf0:	7cfb      	ldrb	r3, [r7, #19]
 801eaf2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801eaf6:	429a      	cmp	r2, r3
 801eaf8:	d3d6      	bcc.n	801eaa8 <tft_print_restclear+0x94>
		 for(y=0; y<height; y++)
 801eafa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eafe:	3301      	adds	r3, #1
 801eb00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801eb04:	7cbb      	ldrb	r3, [r7, #18]
 801eb06:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801eb0a:	429a      	cmp	r2, r3
 801eb0c:	d3ba      	bcc.n	801ea84 <tft_print_restclear+0x70>
			 }
		 }
		 // Abstand zwischen den Buchstaben
		 // Fülle diesen mit der Hintergrundfarbe
		 if(abstand)
 801eb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d014      	beq.n	801eb3e <tft_print_restclear+0x12a>
		 {
			 TFT_Fill_Rectangle(xpos+width, ypos, xpos+width+abstand, ypos+height-1, bcol);
 801eb14:	7cfb      	ldrb	r3, [r7, #19]
 801eb16:	461a      	mov	r2, r3
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	18d0      	adds	r0, r2, r3
 801eb1c:	7cfb      	ldrb	r3, [r7, #19]
 801eb1e:	461a      	mov	r2, r3
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	441a      	add	r2, r3
 801eb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb26:	441a      	add	r2, r3
 801eb28:	7cbb      	ldrb	r3, [r7, #18]
 801eb2a:	4619      	mov	r1, r3
 801eb2c:	683b      	ldr	r3, [r7, #0]
 801eb2e:	440b      	add	r3, r1
 801eb30:	1e59      	subs	r1, r3, #1
 801eb32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eb34:	9300      	str	r3, [sp, #0]
 801eb36:	460b      	mov	r3, r1
 801eb38:	6839      	ldr	r1, [r7, #0]
 801eb3a:	f7f8 fe7d 	bl	8017838 <TFT_Fill_Rectangle>
		 }
		 xpos += (width + abstand);
 801eb3e:	7cfb      	ldrb	r3, [r7, #19]
 801eb40:	461a      	mov	r2, r3
 801eb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb44:	4413      	add	r3, r2
 801eb46:	687a      	ldr	r2, [r7, #4]
 801eb48:	4413      	add	r3, r2
 801eb4a:	607b      	str	r3, [r7, #4]
	 for(idx = 0; idx < strlen(text); idx++)
 801eb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eb50:	3301      	adds	r3, #1
 801eb52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801eb56:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 801eb5a:	68b8      	ldr	r0, [r7, #8]
 801eb5c:	f7e9 fa70 	bl	8008040 <strlen>
 801eb60:	4603      	mov	r3, r0
 801eb62:	429c      	cmp	r4, r3
 801eb64:	f4ff af65 	bcc.w	801ea32 <tft_print_restclear+0x1e>
	 }

	 // lösche von rechtester Position bis Position restclear
	 if(restclear > xright && restclear < TFT_WIDTH)
 801eb68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eb6a:	69fb      	ldr	r3, [r7, #28]
 801eb6c:	429a      	cmp	r2, r3
 801eb6e:	d912      	bls.n	801eb96 <tft_print_restclear+0x182>
 801eb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eb72:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801eb76:	d20e      	bcs.n	801eb96 <tft_print_restclear+0x182>
	 //tft_FillColor(xright+1, ypos, restclear-xright, height, bred,bgreen,bblue);
	 TFT_Fill_Rectangle(xright+1, ypos, restclear, ypos+height-1, bcol);
 801eb78:	69fb      	ldr	r3, [r7, #28]
 801eb7a:	3301      	adds	r3, #1
 801eb7c:	4618      	mov	r0, r3
 801eb7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eb80:	7cbb      	ldrb	r3, [r7, #18]
 801eb82:	4619      	mov	r1, r3
 801eb84:	683b      	ldr	r3, [r7, #0]
 801eb86:	440b      	add	r3, r1
 801eb88:	1e59      	subs	r1, r3, #1
 801eb8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eb8c:	9300      	str	r3, [sp, #0]
 801eb8e:	460b      	mov	r3, r1
 801eb90:	6839      	ldr	r1, [r7, #0]
 801eb92:	f7f8 fe51 	bl	8017838 <TFT_Fill_Rectangle>
 }
 801eb96:	bf00      	nop
 801eb98:	372c      	adds	r7, #44	; 0x2c
 801eb9a:	46bd      	mov	sp, r7
 801eb9c:	bd90      	pop	{r4, r7, pc}
 801eb9e:	bf00      	nop
 801eba0:	60020000 	.word	0x60020000

0801eba4 <tft_print>:

 void tft_print(FONT_INFO *pfont, char *text, int xpos, int ypos, int abstand, unsigned int fcol, unsigned int bcol)
 {
 801eba4:	b580      	push	{r7, lr}
 801eba6:	b088      	sub	sp, #32
 801eba8:	af04      	add	r7, sp, #16
 801ebaa:	60f8      	str	r0, [r7, #12]
 801ebac:	60b9      	str	r1, [r7, #8]
 801ebae:	607a      	str	r2, [r7, #4]
 801ebb0:	603b      	str	r3, [r7, #0]
	 tft_print_restclear(pfont,text,xpos,ypos,abstand,fcol, bcol,0);
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	9303      	str	r3, [sp, #12]
 801ebb6:	6a3b      	ldr	r3, [r7, #32]
 801ebb8:	9302      	str	r3, [sp, #8]
 801ebba:	69fb      	ldr	r3, [r7, #28]
 801ebbc:	9301      	str	r3, [sp, #4]
 801ebbe:	69bb      	ldr	r3, [r7, #24]
 801ebc0:	9300      	str	r3, [sp, #0]
 801ebc2:	683b      	ldr	r3, [r7, #0]
 801ebc4:	687a      	ldr	r2, [r7, #4]
 801ebc6:	68b9      	ldr	r1, [r7, #8]
 801ebc8:	68f8      	ldr	r0, [r7, #12]
 801ebca:	f7ff ff23 	bl	801ea14 <tft_print_restclear>
 }
 801ebce:	bf00      	nop
 801ebd0:	3710      	adds	r7, #16
 801ebd2:	46bd      	mov	sp, r7
 801ebd4:	bd80      	pop	{r7, pc}

0801ebd6 <tft_textwidth_pixel>:

 // ermittle die Breite eines Textes in Pixel
 void tft_textwidth_pixel(FONT_INFO *pfont, char *text, int *w, int *h)
 {
 801ebd6:	b590      	push	{r4, r7, lr}
 801ebd8:	b087      	sub	sp, #28
 801ebda:	af00      	add	r7, sp, #0
 801ebdc:	60f8      	str	r0, [r7, #12]
 801ebde:	60b9      	str	r1, [r7, #8]
 801ebe0:	607a      	str	r2, [r7, #4]
 801ebe2:	603b      	str	r3, [r7, #0]
	 *w = *h = 0;
 801ebe4:	683b      	ldr	r3, [r7, #0]
 801ebe6:	2200      	movs	r2, #0
 801ebe8:	601a      	str	r2, [r3, #0]
 801ebea:	683b      	ldr	r3, [r7, #0]
 801ebec:	681a      	ldr	r2, [r3, #0]
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	601a      	str	r2, [r3, #0]
	 unsigned char idx;
	 unsigned char width, height=0;
 801ebf2:	2300      	movs	r3, #0
 801ebf4:	757b      	strb	r3, [r7, #21]

	 for(idx = 0; idx < strlen(text); idx++)
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	75fb      	strb	r3, [r7, #23]
 801ebfa:	e017      	b.n	801ec2c <tft_textwidth_pixel+0x56>
	 {
		 // hole die größe eines Buchstabens
		 getFont(pfont, text[idx], &width, &height);
 801ebfc:	7dfb      	ldrb	r3, [r7, #23]
 801ebfe:	68ba      	ldr	r2, [r7, #8]
 801ec00:	4413      	add	r3, r2
 801ec02:	7819      	ldrb	r1, [r3, #0]
 801ec04:	f107 0315 	add.w	r3, r7, #21
 801ec08:	f107 0216 	add.w	r2, r7, #22
 801ec0c:	68f8      	ldr	r0, [r7, #12]
 801ec0e:	f7ff fedd 	bl	801e9cc <getFont>
		 *w += width;
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	7dba      	ldrb	r2, [r7, #22]
 801ec18:	441a      	add	r2, r3
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	601a      	str	r2, [r3, #0]
		 *h = height;
 801ec1e:	7d7b      	ldrb	r3, [r7, #21]
 801ec20:	461a      	mov	r2, r3
 801ec22:	683b      	ldr	r3, [r7, #0]
 801ec24:	601a      	str	r2, [r3, #0]
	 for(idx = 0; idx < strlen(text); idx++)
 801ec26:	7dfb      	ldrb	r3, [r7, #23]
 801ec28:	3301      	adds	r3, #1
 801ec2a:	75fb      	strb	r3, [r7, #23]
 801ec2c:	7dfc      	ldrb	r4, [r7, #23]
 801ec2e:	68b8      	ldr	r0, [r7, #8]
 801ec30:	f7e9 fa06 	bl	8008040 <strlen>
 801ec34:	4603      	mov	r3, r0
 801ec36:	429c      	cmp	r4, r3
 801ec38:	d3e0      	bcc.n	801ebfc <tft_textwidth_pixel+0x26>
	 }
 }
 801ec3a:	bf00      	nop
 801ec3c:	371c      	adds	r7, #28
 801ec3e:	46bd      	mov	sp, r7
 801ec40:	bd90      	pop	{r4, r7, pc}
	...

0801ec44 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801ec44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801ec46:	e003      	b.n	801ec50 <LoopCopyDataInit>

0801ec48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801ec48:	4b0b      	ldr	r3, [pc, #44]	; (801ec78 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 801ec4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801ec4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801ec4e:	3104      	adds	r1, #4

0801ec50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801ec50:	480a      	ldr	r0, [pc, #40]	; (801ec7c <LoopForever+0x6>)
	ldr	r3, =_edata
 801ec52:	4b0b      	ldr	r3, [pc, #44]	; (801ec80 <LoopForever+0xa>)
	adds	r2, r0, r1
 801ec54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801ec56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801ec58:	d3f6      	bcc.n	801ec48 <CopyDataInit>
	ldr	r2, =_sbss
 801ec5a:	4a0a      	ldr	r2, [pc, #40]	; (801ec84 <LoopForever+0xe>)
	b	LoopFillZerobss
 801ec5c:	e002      	b.n	801ec64 <LoopFillZerobss>

0801ec5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 801ec5e:	2300      	movs	r3, #0
 	str  r3, [r2]
 801ec60:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 801ec62:	3204      	adds	r2, #4

0801ec64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801ec64:	4b08      	ldr	r3, [pc, #32]	; (801ec88 <LoopForever+0x12>)
	cmp	r2, r3
 801ec66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801ec68:	d3f9      	bcc.n	801ec5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801ec6a:	f7f8 fcc3 	bl	80175f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801ec6e:	f000 f815 	bl	801ec9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801ec72:	f7f2 f985 	bl	8010f80 <main>

0801ec76 <LoopForever>:

LoopForever:
    b LoopForever
 801ec76:	e7fe      	b.n	801ec76 <LoopForever>
	ldr	r3, =_sidata
 801ec78:	080361cc 	.word	0x080361cc
	ldr	r0, =_sdata
 801ec7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801ec80:	20002644 	.word	0x20002644
	ldr	r2, =_sbss
 801ec84:	20002644 	.word	0x20002644
	ldr	r3, = _ebss
 801ec88:	20008ad8 	.word	0x20008ad8

0801ec8c <ADC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801ec8c:	e7fe      	b.n	801ec8c <ADC_IRQHandler>
	...

0801ec90 <__errno>:
 801ec90:	4b01      	ldr	r3, [pc, #4]	; (801ec98 <__errno+0x8>)
 801ec92:	6818      	ldr	r0, [r3, #0]
 801ec94:	4770      	bx	lr
 801ec96:	bf00      	nop
 801ec98:	20001c94 	.word	0x20001c94

0801ec9c <__libc_init_array>:
 801ec9c:	b570      	push	{r4, r5, r6, lr}
 801ec9e:	4e0d      	ldr	r6, [pc, #52]	; (801ecd4 <__libc_init_array+0x38>)
 801eca0:	4c0d      	ldr	r4, [pc, #52]	; (801ecd8 <__libc_init_array+0x3c>)
 801eca2:	1ba4      	subs	r4, r4, r6
 801eca4:	10a4      	asrs	r4, r4, #2
 801eca6:	2500      	movs	r5, #0
 801eca8:	42a5      	cmp	r5, r4
 801ecaa:	d109      	bne.n	801ecc0 <__libc_init_array+0x24>
 801ecac:	4e0b      	ldr	r6, [pc, #44]	; (801ecdc <__libc_init_array+0x40>)
 801ecae:	4c0c      	ldr	r4, [pc, #48]	; (801ece0 <__libc_init_array+0x44>)
 801ecb0:	f005 fd9c 	bl	80247ec <_init>
 801ecb4:	1ba4      	subs	r4, r4, r6
 801ecb6:	10a4      	asrs	r4, r4, #2
 801ecb8:	2500      	movs	r5, #0
 801ecba:	42a5      	cmp	r5, r4
 801ecbc:	d105      	bne.n	801ecca <__libc_init_array+0x2e>
 801ecbe:	bd70      	pop	{r4, r5, r6, pc}
 801ecc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ecc4:	4798      	blx	r3
 801ecc6:	3501      	adds	r5, #1
 801ecc8:	e7ee      	b.n	801eca8 <__libc_init_array+0xc>
 801ecca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ecce:	4798      	blx	r3
 801ecd0:	3501      	adds	r5, #1
 801ecd2:	e7f2      	b.n	801ecba <__libc_init_array+0x1e>
 801ecd4:	080361c0 	.word	0x080361c0
 801ecd8:	080361c0 	.word	0x080361c0
 801ecdc:	080361c0 	.word	0x080361c0
 801ece0:	080361c8 	.word	0x080361c8

0801ece4 <__locale_ctype_ptr>:
 801ece4:	4b04      	ldr	r3, [pc, #16]	; (801ecf8 <__locale_ctype_ptr+0x14>)
 801ece6:	4a05      	ldr	r2, [pc, #20]	; (801ecfc <__locale_ctype_ptr+0x18>)
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	bf08      	it	eq
 801ecf0:	4613      	moveq	r3, r2
 801ecf2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801ecf6:	4770      	bx	lr
 801ecf8:	20001c94 	.word	0x20001c94
 801ecfc:	200020c0 	.word	0x200020c0

0801ed00 <malloc>:
 801ed00:	4b02      	ldr	r3, [pc, #8]	; (801ed0c <malloc+0xc>)
 801ed02:	4601      	mov	r1, r0
 801ed04:	6818      	ldr	r0, [r3, #0]
 801ed06:	f000 b803 	b.w	801ed10 <_malloc_r>
 801ed0a:	bf00      	nop
 801ed0c:	20001c94 	.word	0x20001c94

0801ed10 <_malloc_r>:
 801ed10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed14:	f101 050b 	add.w	r5, r1, #11
 801ed18:	2d16      	cmp	r5, #22
 801ed1a:	4606      	mov	r6, r0
 801ed1c:	d906      	bls.n	801ed2c <_malloc_r+0x1c>
 801ed1e:	f035 0507 	bics.w	r5, r5, #7
 801ed22:	d504      	bpl.n	801ed2e <_malloc_r+0x1e>
 801ed24:	230c      	movs	r3, #12
 801ed26:	6033      	str	r3, [r6, #0]
 801ed28:	2400      	movs	r4, #0
 801ed2a:	e1a8      	b.n	801f07e <_malloc_r+0x36e>
 801ed2c:	2510      	movs	r5, #16
 801ed2e:	428d      	cmp	r5, r1
 801ed30:	d3f8      	bcc.n	801ed24 <_malloc_r+0x14>
 801ed32:	4630      	mov	r0, r6
 801ed34:	f000 fa64 	bl	801f200 <__malloc_lock>
 801ed38:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 801ed3c:	4fc0      	ldr	r7, [pc, #768]	; (801f040 <_malloc_r+0x330>)
 801ed3e:	d238      	bcs.n	801edb2 <_malloc_r+0xa2>
 801ed40:	f105 0208 	add.w	r2, r5, #8
 801ed44:	443a      	add	r2, r7
 801ed46:	f1a2 0108 	sub.w	r1, r2, #8
 801ed4a:	6854      	ldr	r4, [r2, #4]
 801ed4c:	428c      	cmp	r4, r1
 801ed4e:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 801ed52:	d102      	bne.n	801ed5a <_malloc_r+0x4a>
 801ed54:	68d4      	ldr	r4, [r2, #12]
 801ed56:	42a2      	cmp	r2, r4
 801ed58:	d010      	beq.n	801ed7c <_malloc_r+0x6c>
 801ed5a:	6863      	ldr	r3, [r4, #4]
 801ed5c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801ed60:	f023 0303 	bic.w	r3, r3, #3
 801ed64:	60ca      	str	r2, [r1, #12]
 801ed66:	4423      	add	r3, r4
 801ed68:	6091      	str	r1, [r2, #8]
 801ed6a:	685a      	ldr	r2, [r3, #4]
 801ed6c:	f042 0201 	orr.w	r2, r2, #1
 801ed70:	605a      	str	r2, [r3, #4]
 801ed72:	4630      	mov	r0, r6
 801ed74:	f000 fa4a 	bl	801f20c <__malloc_unlock>
 801ed78:	3408      	adds	r4, #8
 801ed7a:	e180      	b.n	801f07e <_malloc_r+0x36e>
 801ed7c:	3302      	adds	r3, #2
 801ed7e:	4ab1      	ldr	r2, [pc, #708]	; (801f044 <_malloc_r+0x334>)
 801ed80:	693c      	ldr	r4, [r7, #16]
 801ed82:	4294      	cmp	r4, r2
 801ed84:	4611      	mov	r1, r2
 801ed86:	d075      	beq.n	801ee74 <_malloc_r+0x164>
 801ed88:	6860      	ldr	r0, [r4, #4]
 801ed8a:	f020 0c03 	bic.w	ip, r0, #3
 801ed8e:	ebac 0005 	sub.w	r0, ip, r5
 801ed92:	280f      	cmp	r0, #15
 801ed94:	dd48      	ble.n	801ee28 <_malloc_r+0x118>
 801ed96:	1963      	adds	r3, r4, r5
 801ed98:	f045 0501 	orr.w	r5, r5, #1
 801ed9c:	6065      	str	r5, [r4, #4]
 801ed9e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 801eda2:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801eda6:	f040 0201 	orr.w	r2, r0, #1
 801edaa:	605a      	str	r2, [r3, #4]
 801edac:	f844 000c 	str.w	r0, [r4, ip]
 801edb0:	e7df      	b.n	801ed72 <_malloc_r+0x62>
 801edb2:	0a6b      	lsrs	r3, r5, #9
 801edb4:	d02a      	beq.n	801ee0c <_malloc_r+0xfc>
 801edb6:	2b04      	cmp	r3, #4
 801edb8:	d812      	bhi.n	801ede0 <_malloc_r+0xd0>
 801edba:	09ab      	lsrs	r3, r5, #6
 801edbc:	3338      	adds	r3, #56	; 0x38
 801edbe:	1c5a      	adds	r2, r3, #1
 801edc0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 801edc4:	f1a2 0c08 	sub.w	ip, r2, #8
 801edc8:	6854      	ldr	r4, [r2, #4]
 801edca:	4564      	cmp	r4, ip
 801edcc:	d006      	beq.n	801eddc <_malloc_r+0xcc>
 801edce:	6862      	ldr	r2, [r4, #4]
 801edd0:	f022 0203 	bic.w	r2, r2, #3
 801edd4:	1b50      	subs	r0, r2, r5
 801edd6:	280f      	cmp	r0, #15
 801edd8:	dd1c      	ble.n	801ee14 <_malloc_r+0x104>
 801edda:	3b01      	subs	r3, #1
 801eddc:	3301      	adds	r3, #1
 801edde:	e7ce      	b.n	801ed7e <_malloc_r+0x6e>
 801ede0:	2b14      	cmp	r3, #20
 801ede2:	d801      	bhi.n	801ede8 <_malloc_r+0xd8>
 801ede4:	335b      	adds	r3, #91	; 0x5b
 801ede6:	e7ea      	b.n	801edbe <_malloc_r+0xae>
 801ede8:	2b54      	cmp	r3, #84	; 0x54
 801edea:	d802      	bhi.n	801edf2 <_malloc_r+0xe2>
 801edec:	0b2b      	lsrs	r3, r5, #12
 801edee:	336e      	adds	r3, #110	; 0x6e
 801edf0:	e7e5      	b.n	801edbe <_malloc_r+0xae>
 801edf2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801edf6:	d802      	bhi.n	801edfe <_malloc_r+0xee>
 801edf8:	0beb      	lsrs	r3, r5, #15
 801edfa:	3377      	adds	r3, #119	; 0x77
 801edfc:	e7df      	b.n	801edbe <_malloc_r+0xae>
 801edfe:	f240 5254 	movw	r2, #1364	; 0x554
 801ee02:	4293      	cmp	r3, r2
 801ee04:	d804      	bhi.n	801ee10 <_malloc_r+0x100>
 801ee06:	0cab      	lsrs	r3, r5, #18
 801ee08:	337c      	adds	r3, #124	; 0x7c
 801ee0a:	e7d8      	b.n	801edbe <_malloc_r+0xae>
 801ee0c:	233f      	movs	r3, #63	; 0x3f
 801ee0e:	e7d6      	b.n	801edbe <_malloc_r+0xae>
 801ee10:	237e      	movs	r3, #126	; 0x7e
 801ee12:	e7d4      	b.n	801edbe <_malloc_r+0xae>
 801ee14:	2800      	cmp	r0, #0
 801ee16:	68e1      	ldr	r1, [r4, #12]
 801ee18:	db04      	blt.n	801ee24 <_malloc_r+0x114>
 801ee1a:	68a3      	ldr	r3, [r4, #8]
 801ee1c:	60d9      	str	r1, [r3, #12]
 801ee1e:	608b      	str	r3, [r1, #8]
 801ee20:	18a3      	adds	r3, r4, r2
 801ee22:	e7a2      	b.n	801ed6a <_malloc_r+0x5a>
 801ee24:	460c      	mov	r4, r1
 801ee26:	e7d0      	b.n	801edca <_malloc_r+0xba>
 801ee28:	2800      	cmp	r0, #0
 801ee2a:	e9c7 2204 	strd	r2, r2, [r7, #16]
 801ee2e:	db07      	blt.n	801ee40 <_malloc_r+0x130>
 801ee30:	44a4      	add	ip, r4
 801ee32:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ee36:	f043 0301 	orr.w	r3, r3, #1
 801ee3a:	f8cc 3004 	str.w	r3, [ip, #4]
 801ee3e:	e798      	b.n	801ed72 <_malloc_r+0x62>
 801ee40:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801ee44:	6878      	ldr	r0, [r7, #4]
 801ee46:	f080 8099 	bcs.w	801ef7c <_malloc_r+0x26c>
 801ee4a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 801ee4e:	ea4f 0eac 	mov.w	lr, ip, asr #2
 801ee52:	2201      	movs	r2, #1
 801ee54:	f10c 0c01 	add.w	ip, ip, #1
 801ee58:	fa02 f20e 	lsl.w	r2, r2, lr
 801ee5c:	4310      	orrs	r0, r2
 801ee5e:	6078      	str	r0, [r7, #4]
 801ee60:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 801ee64:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 801ee68:	3a08      	subs	r2, #8
 801ee6a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 801ee6e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 801ee72:	60c4      	str	r4, [r0, #12]
 801ee74:	2001      	movs	r0, #1
 801ee76:	109a      	asrs	r2, r3, #2
 801ee78:	fa00 f202 	lsl.w	r2, r0, r2
 801ee7c:	6878      	ldr	r0, [r7, #4]
 801ee7e:	4290      	cmp	r0, r2
 801ee80:	d326      	bcc.n	801eed0 <_malloc_r+0x1c0>
 801ee82:	4210      	tst	r0, r2
 801ee84:	d106      	bne.n	801ee94 <_malloc_r+0x184>
 801ee86:	f023 0303 	bic.w	r3, r3, #3
 801ee8a:	0052      	lsls	r2, r2, #1
 801ee8c:	4210      	tst	r0, r2
 801ee8e:	f103 0304 	add.w	r3, r3, #4
 801ee92:	d0fa      	beq.n	801ee8a <_malloc_r+0x17a>
 801ee94:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 801ee98:	46e1      	mov	r9, ip
 801ee9a:	4698      	mov	r8, r3
 801ee9c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801eea0:	454c      	cmp	r4, r9
 801eea2:	f040 80af 	bne.w	801f004 <_malloc_r+0x2f4>
 801eea6:	f108 0801 	add.w	r8, r8, #1
 801eeaa:	f018 0f03 	tst.w	r8, #3
 801eeae:	f109 0908 	add.w	r9, r9, #8
 801eeb2:	d1f3      	bne.n	801ee9c <_malloc_r+0x18c>
 801eeb4:	0798      	lsls	r0, r3, #30
 801eeb6:	f040 80e8 	bne.w	801f08a <_malloc_r+0x37a>
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	ea23 0302 	bic.w	r3, r3, r2
 801eec0:	607b      	str	r3, [r7, #4]
 801eec2:	6878      	ldr	r0, [r7, #4]
 801eec4:	0052      	lsls	r2, r2, #1
 801eec6:	4290      	cmp	r0, r2
 801eec8:	d302      	bcc.n	801eed0 <_malloc_r+0x1c0>
 801eeca:	2a00      	cmp	r2, #0
 801eecc:	f040 80ec 	bne.w	801f0a8 <_malloc_r+0x398>
 801eed0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801eed4:	f8da 4004 	ldr.w	r4, [sl, #4]
 801eed8:	f024 0203 	bic.w	r2, r4, #3
 801eedc:	42aa      	cmp	r2, r5
 801eede:	d303      	bcc.n	801eee8 <_malloc_r+0x1d8>
 801eee0:	1b53      	subs	r3, r2, r5
 801eee2:	2b0f      	cmp	r3, #15
 801eee4:	f300 8140 	bgt.w	801f168 <_malloc_r+0x458>
 801eee8:	4b57      	ldr	r3, [pc, #348]	; (801f048 <_malloc_r+0x338>)
 801eeea:	9200      	str	r2, [sp, #0]
 801eeec:	2008      	movs	r0, #8
 801eeee:	681c      	ldr	r4, [r3, #0]
 801eef0:	f001 fc18 	bl	8020724 <sysconf>
 801eef4:	4b55      	ldr	r3, [pc, #340]	; (801f04c <_malloc_r+0x33c>)
 801eef6:	9a00      	ldr	r2, [sp, #0]
 801eef8:	6819      	ldr	r1, [r3, #0]
 801eefa:	3410      	adds	r4, #16
 801eefc:	3101      	adds	r1, #1
 801eefe:	442c      	add	r4, r5
 801ef00:	bf1f      	itttt	ne
 801ef02:	f104 34ff 	addne.w	r4, r4, #4294967295
 801ef06:	1824      	addne	r4, r4, r0
 801ef08:	4241      	negne	r1, r0
 801ef0a:	400c      	andne	r4, r1
 801ef0c:	4680      	mov	r8, r0
 801ef0e:	4621      	mov	r1, r4
 801ef10:	4630      	mov	r0, r6
 801ef12:	e9cd 2300 	strd	r2, r3, [sp]
 801ef16:	f000 f97f 	bl	801f218 <_sbrk_r>
 801ef1a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ef1e:	4683      	mov	fp, r0
 801ef20:	f000 80fb 	beq.w	801f11a <_malloc_r+0x40a>
 801ef24:	9a00      	ldr	r2, [sp, #0]
 801ef26:	9b01      	ldr	r3, [sp, #4]
 801ef28:	eb0a 0102 	add.w	r1, sl, r2
 801ef2c:	4281      	cmp	r1, r0
 801ef2e:	d902      	bls.n	801ef36 <_malloc_r+0x226>
 801ef30:	45ba      	cmp	sl, r7
 801ef32:	f040 80f2 	bne.w	801f11a <_malloc_r+0x40a>
 801ef36:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801f058 <_malloc_r+0x348>
 801ef3a:	f8d9 0000 	ldr.w	r0, [r9]
 801ef3e:	4559      	cmp	r1, fp
 801ef40:	eb00 0e04 	add.w	lr, r0, r4
 801ef44:	f8c9 e000 	str.w	lr, [r9]
 801ef48:	f108 3cff 	add.w	ip, r8, #4294967295
 801ef4c:	f040 80ae 	bne.w	801f0ac <_malloc_r+0x39c>
 801ef50:	ea11 0f0c 	tst.w	r1, ip
 801ef54:	f040 80aa 	bne.w	801f0ac <_malloc_r+0x39c>
 801ef58:	68bb      	ldr	r3, [r7, #8]
 801ef5a:	4414      	add	r4, r2
 801ef5c:	f044 0401 	orr.w	r4, r4, #1
 801ef60:	605c      	str	r4, [r3, #4]
 801ef62:	4a3b      	ldr	r2, [pc, #236]	; (801f050 <_malloc_r+0x340>)
 801ef64:	f8d9 3000 	ldr.w	r3, [r9]
 801ef68:	6811      	ldr	r1, [r2, #0]
 801ef6a:	428b      	cmp	r3, r1
 801ef6c:	bf88      	it	hi
 801ef6e:	6013      	strhi	r3, [r2, #0]
 801ef70:	4a38      	ldr	r2, [pc, #224]	; (801f054 <_malloc_r+0x344>)
 801ef72:	6811      	ldr	r1, [r2, #0]
 801ef74:	428b      	cmp	r3, r1
 801ef76:	bf88      	it	hi
 801ef78:	6013      	strhi	r3, [r2, #0]
 801ef7a:	e0ce      	b.n	801f11a <_malloc_r+0x40a>
 801ef7c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801ef80:	2a04      	cmp	r2, #4
 801ef82:	d818      	bhi.n	801efb6 <_malloc_r+0x2a6>
 801ef84:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801ef88:	3238      	adds	r2, #56	; 0x38
 801ef8a:	f102 0e01 	add.w	lr, r2, #1
 801ef8e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 801ef92:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 801ef96:	45f0      	cmp	r8, lr
 801ef98:	d12b      	bne.n	801eff2 <_malloc_r+0x2e2>
 801ef9a:	1092      	asrs	r2, r2, #2
 801ef9c:	f04f 0c01 	mov.w	ip, #1
 801efa0:	fa0c f202 	lsl.w	r2, ip, r2
 801efa4:	4310      	orrs	r0, r2
 801efa6:	6078      	str	r0, [r7, #4]
 801efa8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801efac:	f8c8 4008 	str.w	r4, [r8, #8]
 801efb0:	f8ce 400c 	str.w	r4, [lr, #12]
 801efb4:	e75e      	b.n	801ee74 <_malloc_r+0x164>
 801efb6:	2a14      	cmp	r2, #20
 801efb8:	d801      	bhi.n	801efbe <_malloc_r+0x2ae>
 801efba:	325b      	adds	r2, #91	; 0x5b
 801efbc:	e7e5      	b.n	801ef8a <_malloc_r+0x27a>
 801efbe:	2a54      	cmp	r2, #84	; 0x54
 801efc0:	d803      	bhi.n	801efca <_malloc_r+0x2ba>
 801efc2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801efc6:	326e      	adds	r2, #110	; 0x6e
 801efc8:	e7df      	b.n	801ef8a <_malloc_r+0x27a>
 801efca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801efce:	d803      	bhi.n	801efd8 <_malloc_r+0x2c8>
 801efd0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801efd4:	3277      	adds	r2, #119	; 0x77
 801efd6:	e7d8      	b.n	801ef8a <_malloc_r+0x27a>
 801efd8:	f240 5e54 	movw	lr, #1364	; 0x554
 801efdc:	4572      	cmp	r2, lr
 801efde:	bf9a      	itte	ls
 801efe0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801efe4:	327c      	addls	r2, #124	; 0x7c
 801efe6:	227e      	movhi	r2, #126	; 0x7e
 801efe8:	e7cf      	b.n	801ef8a <_malloc_r+0x27a>
 801efea:	f8de e008 	ldr.w	lr, [lr, #8]
 801efee:	45f0      	cmp	r8, lr
 801eff0:	d005      	beq.n	801effe <_malloc_r+0x2ee>
 801eff2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801eff6:	f022 0203 	bic.w	r2, r2, #3
 801effa:	4562      	cmp	r2, ip
 801effc:	d8f5      	bhi.n	801efea <_malloc_r+0x2da>
 801effe:	f8de 800c 	ldr.w	r8, [lr, #12]
 801f002:	e7d1      	b.n	801efa8 <_malloc_r+0x298>
 801f004:	6860      	ldr	r0, [r4, #4]
 801f006:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 801f00a:	f020 0003 	bic.w	r0, r0, #3
 801f00e:	eba0 0a05 	sub.w	sl, r0, r5
 801f012:	f1ba 0f0f 	cmp.w	sl, #15
 801f016:	dd21      	ble.n	801f05c <_malloc_r+0x34c>
 801f018:	68a2      	ldr	r2, [r4, #8]
 801f01a:	1963      	adds	r3, r4, r5
 801f01c:	f045 0501 	orr.w	r5, r5, #1
 801f020:	6065      	str	r5, [r4, #4]
 801f022:	f8c2 e00c 	str.w	lr, [r2, #12]
 801f026:	f8ce 2008 	str.w	r2, [lr, #8]
 801f02a:	f04a 0201 	orr.w	r2, sl, #1
 801f02e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 801f032:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801f036:	605a      	str	r2, [r3, #4]
 801f038:	f844 a000 	str.w	sl, [r4, r0]
 801f03c:	e699      	b.n	801ed72 <_malloc_r+0x62>
 801f03e:	bf00      	nop
 801f040:	2000222c 	.word	0x2000222c
 801f044:	20002234 	.word	0x20002234
 801f048:	2000286c 	.word	0x2000286c
 801f04c:	20002634 	.word	0x20002634
 801f050:	20002864 	.word	0x20002864
 801f054:	20002868 	.word	0x20002868
 801f058:	2000283c 	.word	0x2000283c
 801f05c:	f1ba 0f00 	cmp.w	sl, #0
 801f060:	db11      	blt.n	801f086 <_malloc_r+0x376>
 801f062:	4420      	add	r0, r4
 801f064:	6843      	ldr	r3, [r0, #4]
 801f066:	f043 0301 	orr.w	r3, r3, #1
 801f06a:	6043      	str	r3, [r0, #4]
 801f06c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801f070:	4630      	mov	r0, r6
 801f072:	f8c3 e00c 	str.w	lr, [r3, #12]
 801f076:	f8ce 3008 	str.w	r3, [lr, #8]
 801f07a:	f000 f8c7 	bl	801f20c <__malloc_unlock>
 801f07e:	4620      	mov	r0, r4
 801f080:	b003      	add	sp, #12
 801f082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f086:	4674      	mov	r4, lr
 801f088:	e70a      	b.n	801eea0 <_malloc_r+0x190>
 801f08a:	f1ac 0008 	sub.w	r0, ip, #8
 801f08e:	f8dc c000 	ldr.w	ip, [ip]
 801f092:	4584      	cmp	ip, r0
 801f094:	f103 33ff 	add.w	r3, r3, #4294967295
 801f098:	f43f af0c 	beq.w	801eeb4 <_malloc_r+0x1a4>
 801f09c:	e711      	b.n	801eec2 <_malloc_r+0x1b2>
 801f09e:	3304      	adds	r3, #4
 801f0a0:	0052      	lsls	r2, r2, #1
 801f0a2:	4210      	tst	r0, r2
 801f0a4:	d0fb      	beq.n	801f09e <_malloc_r+0x38e>
 801f0a6:	e6f5      	b.n	801ee94 <_malloc_r+0x184>
 801f0a8:	4643      	mov	r3, r8
 801f0aa:	e7fa      	b.n	801f0a2 <_malloc_r+0x392>
 801f0ac:	6818      	ldr	r0, [r3, #0]
 801f0ae:	9200      	str	r2, [sp, #0]
 801f0b0:	3001      	adds	r0, #1
 801f0b2:	bf1b      	ittet	ne
 801f0b4:	ebab 0101 	subne.w	r1, fp, r1
 801f0b8:	4471      	addne	r1, lr
 801f0ba:	f8c3 b000 	streq.w	fp, [r3]
 801f0be:	f8c9 1000 	strne.w	r1, [r9]
 801f0c2:	f01b 0307 	ands.w	r3, fp, #7
 801f0c6:	bf1c      	itt	ne
 801f0c8:	f1c3 0308 	rsbne	r3, r3, #8
 801f0cc:	449b      	addne	fp, r3
 801f0ce:	445c      	add	r4, fp
 801f0d0:	4498      	add	r8, r3
 801f0d2:	ea04 030c 	and.w	r3, r4, ip
 801f0d6:	eba8 0803 	sub.w	r8, r8, r3
 801f0da:	4641      	mov	r1, r8
 801f0dc:	4630      	mov	r0, r6
 801f0de:	f000 f89b 	bl	801f218 <_sbrk_r>
 801f0e2:	1c43      	adds	r3, r0, #1
 801f0e4:	bf04      	itt	eq
 801f0e6:	4658      	moveq	r0, fp
 801f0e8:	f04f 0800 	moveq.w	r8, #0
 801f0ec:	f8d9 3000 	ldr.w	r3, [r9]
 801f0f0:	f8c7 b008 	str.w	fp, [r7, #8]
 801f0f4:	eba0 000b 	sub.w	r0, r0, fp
 801f0f8:	4440      	add	r0, r8
 801f0fa:	4443      	add	r3, r8
 801f0fc:	f040 0001 	orr.w	r0, r0, #1
 801f100:	45ba      	cmp	sl, r7
 801f102:	9a00      	ldr	r2, [sp, #0]
 801f104:	f8c9 3000 	str.w	r3, [r9]
 801f108:	f8cb 0004 	str.w	r0, [fp, #4]
 801f10c:	f43f af29 	beq.w	801ef62 <_malloc_r+0x252>
 801f110:	2a0f      	cmp	r2, #15
 801f112:	d810      	bhi.n	801f136 <_malloc_r+0x426>
 801f114:	2301      	movs	r3, #1
 801f116:	f8cb 3004 	str.w	r3, [fp, #4]
 801f11a:	68bb      	ldr	r3, [r7, #8]
 801f11c:	685a      	ldr	r2, [r3, #4]
 801f11e:	f022 0203 	bic.w	r2, r2, #3
 801f122:	42aa      	cmp	r2, r5
 801f124:	eba2 0305 	sub.w	r3, r2, r5
 801f128:	d301      	bcc.n	801f12e <_malloc_r+0x41e>
 801f12a:	2b0f      	cmp	r3, #15
 801f12c:	dc1c      	bgt.n	801f168 <_malloc_r+0x458>
 801f12e:	4630      	mov	r0, r6
 801f130:	f000 f86c 	bl	801f20c <__malloc_unlock>
 801f134:	e5f8      	b.n	801ed28 <_malloc_r+0x18>
 801f136:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f13a:	f1a2 040c 	sub.w	r4, r2, #12
 801f13e:	f024 0407 	bic.w	r4, r4, #7
 801f142:	f003 0301 	and.w	r3, r3, #1
 801f146:	4323      	orrs	r3, r4
 801f148:	f8ca 3004 	str.w	r3, [sl, #4]
 801f14c:	2205      	movs	r2, #5
 801f14e:	eb0a 0304 	add.w	r3, sl, r4
 801f152:	2c0f      	cmp	r4, #15
 801f154:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801f158:	f67f af03 	bls.w	801ef62 <_malloc_r+0x252>
 801f15c:	f10a 0108 	add.w	r1, sl, #8
 801f160:	4630      	mov	r0, r6
 801f162:	f002 f9a5 	bl	80214b0 <_free_r>
 801f166:	e6fc      	b.n	801ef62 <_malloc_r+0x252>
 801f168:	68bc      	ldr	r4, [r7, #8]
 801f16a:	f045 0201 	orr.w	r2, r5, #1
 801f16e:	4425      	add	r5, r4
 801f170:	f043 0301 	orr.w	r3, r3, #1
 801f174:	6062      	str	r2, [r4, #4]
 801f176:	60bd      	str	r5, [r7, #8]
 801f178:	606b      	str	r3, [r5, #4]
 801f17a:	e5fa      	b.n	801ed72 <_malloc_r+0x62>

0801f17c <__ascii_mbtowc>:
 801f17c:	b082      	sub	sp, #8
 801f17e:	b901      	cbnz	r1, 801f182 <__ascii_mbtowc+0x6>
 801f180:	a901      	add	r1, sp, #4
 801f182:	b142      	cbz	r2, 801f196 <__ascii_mbtowc+0x1a>
 801f184:	b14b      	cbz	r3, 801f19a <__ascii_mbtowc+0x1e>
 801f186:	7813      	ldrb	r3, [r2, #0]
 801f188:	600b      	str	r3, [r1, #0]
 801f18a:	7812      	ldrb	r2, [r2, #0]
 801f18c:	1c10      	adds	r0, r2, #0
 801f18e:	bf18      	it	ne
 801f190:	2001      	movne	r0, #1
 801f192:	b002      	add	sp, #8
 801f194:	4770      	bx	lr
 801f196:	4610      	mov	r0, r2
 801f198:	e7fb      	b.n	801f192 <__ascii_mbtowc+0x16>
 801f19a:	f06f 0001 	mvn.w	r0, #1
 801f19e:	e7f8      	b.n	801f192 <__ascii_mbtowc+0x16>

0801f1a0 <memcmp>:
 801f1a0:	b530      	push	{r4, r5, lr}
 801f1a2:	2400      	movs	r4, #0
 801f1a4:	42a2      	cmp	r2, r4
 801f1a6:	d101      	bne.n	801f1ac <memcmp+0xc>
 801f1a8:	2000      	movs	r0, #0
 801f1aa:	e007      	b.n	801f1bc <memcmp+0x1c>
 801f1ac:	5d03      	ldrb	r3, [r0, r4]
 801f1ae:	3401      	adds	r4, #1
 801f1b0:	190d      	adds	r5, r1, r4
 801f1b2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801f1b6:	42ab      	cmp	r3, r5
 801f1b8:	d0f4      	beq.n	801f1a4 <memcmp+0x4>
 801f1ba:	1b58      	subs	r0, r3, r5
 801f1bc:	bd30      	pop	{r4, r5, pc}

0801f1be <memmove>:
 801f1be:	4288      	cmp	r0, r1
 801f1c0:	b510      	push	{r4, lr}
 801f1c2:	eb01 0302 	add.w	r3, r1, r2
 801f1c6:	d807      	bhi.n	801f1d8 <memmove+0x1a>
 801f1c8:	1e42      	subs	r2, r0, #1
 801f1ca:	4299      	cmp	r1, r3
 801f1cc:	d00a      	beq.n	801f1e4 <memmove+0x26>
 801f1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f1d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 801f1d6:	e7f8      	b.n	801f1ca <memmove+0xc>
 801f1d8:	4283      	cmp	r3, r0
 801f1da:	d9f5      	bls.n	801f1c8 <memmove+0xa>
 801f1dc:	1881      	adds	r1, r0, r2
 801f1de:	1ad2      	subs	r2, r2, r3
 801f1e0:	42d3      	cmn	r3, r2
 801f1e2:	d100      	bne.n	801f1e6 <memmove+0x28>
 801f1e4:	bd10      	pop	{r4, pc}
 801f1e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f1ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801f1ee:	e7f7      	b.n	801f1e0 <memmove+0x22>

0801f1f0 <memset>:
 801f1f0:	4402      	add	r2, r0
 801f1f2:	4603      	mov	r3, r0
 801f1f4:	4293      	cmp	r3, r2
 801f1f6:	d100      	bne.n	801f1fa <memset+0xa>
 801f1f8:	4770      	bx	lr
 801f1fa:	f803 1b01 	strb.w	r1, [r3], #1
 801f1fe:	e7f9      	b.n	801f1f4 <memset+0x4>

0801f200 <__malloc_lock>:
 801f200:	4801      	ldr	r0, [pc, #4]	; (801f208 <__malloc_lock+0x8>)
 801f202:	f002 ba1f 	b.w	8021644 <__retarget_lock_acquire_recursive>
 801f206:	bf00      	nop
 801f208:	20008acc 	.word	0x20008acc

0801f20c <__malloc_unlock>:
 801f20c:	4801      	ldr	r0, [pc, #4]	; (801f214 <__malloc_unlock+0x8>)
 801f20e:	f002 ba1a 	b.w	8021646 <__retarget_lock_release_recursive>
 801f212:	bf00      	nop
 801f214:	20008acc 	.word	0x20008acc

0801f218 <_sbrk_r>:
 801f218:	b538      	push	{r3, r4, r5, lr}
 801f21a:	4c06      	ldr	r4, [pc, #24]	; (801f234 <_sbrk_r+0x1c>)
 801f21c:	2300      	movs	r3, #0
 801f21e:	4605      	mov	r5, r0
 801f220:	4608      	mov	r0, r1
 801f222:	6023      	str	r3, [r4, #0]
 801f224:	f7f7 fb36 	bl	8016894 <_sbrk>
 801f228:	1c43      	adds	r3, r0, #1
 801f22a:	d102      	bne.n	801f232 <_sbrk_r+0x1a>
 801f22c:	6823      	ldr	r3, [r4, #0]
 801f22e:	b103      	cbz	r3, 801f232 <_sbrk_r+0x1a>
 801f230:	602b      	str	r3, [r5, #0]
 801f232:	bd38      	pop	{r3, r4, r5, pc}
 801f234:	20008ad4 	.word	0x20008ad4

0801f238 <sprintf>:
 801f238:	b40e      	push	{r1, r2, r3}
 801f23a:	b500      	push	{lr}
 801f23c:	b09c      	sub	sp, #112	; 0x70
 801f23e:	ab1d      	add	r3, sp, #116	; 0x74
 801f240:	9002      	str	r0, [sp, #8]
 801f242:	9006      	str	r0, [sp, #24]
 801f244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f248:	4809      	ldr	r0, [pc, #36]	; (801f270 <sprintf+0x38>)
 801f24a:	9107      	str	r1, [sp, #28]
 801f24c:	9104      	str	r1, [sp, #16]
 801f24e:	4909      	ldr	r1, [pc, #36]	; (801f274 <sprintf+0x3c>)
 801f250:	f853 2b04 	ldr.w	r2, [r3], #4
 801f254:	9105      	str	r1, [sp, #20]
 801f256:	6800      	ldr	r0, [r0, #0]
 801f258:	9301      	str	r3, [sp, #4]
 801f25a:	a902      	add	r1, sp, #8
 801f25c:	f000 f844 	bl	801f2e8 <_svfprintf_r>
 801f260:	9b02      	ldr	r3, [sp, #8]
 801f262:	2200      	movs	r2, #0
 801f264:	701a      	strb	r2, [r3, #0]
 801f266:	b01c      	add	sp, #112	; 0x70
 801f268:	f85d eb04 	ldr.w	lr, [sp], #4
 801f26c:	b003      	add	sp, #12
 801f26e:	4770      	bx	lr
 801f270:	20001c94 	.word	0x20001c94
 801f274:	ffff0208 	.word	0xffff0208

0801f278 <strcpy>:
 801f278:	4603      	mov	r3, r0
 801f27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f27e:	f803 2b01 	strb.w	r2, [r3], #1
 801f282:	2a00      	cmp	r2, #0
 801f284:	d1f9      	bne.n	801f27a <strcpy+0x2>
 801f286:	4770      	bx	lr

0801f288 <strncpy>:
 801f288:	b570      	push	{r4, r5, r6, lr}
 801f28a:	3901      	subs	r1, #1
 801f28c:	4604      	mov	r4, r0
 801f28e:	b902      	cbnz	r2, 801f292 <strncpy+0xa>
 801f290:	bd70      	pop	{r4, r5, r6, pc}
 801f292:	4623      	mov	r3, r4
 801f294:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801f298:	f803 5b01 	strb.w	r5, [r3], #1
 801f29c:	1e56      	subs	r6, r2, #1
 801f29e:	b92d      	cbnz	r5, 801f2ac <strncpy+0x24>
 801f2a0:	4414      	add	r4, r2
 801f2a2:	42a3      	cmp	r3, r4
 801f2a4:	d0f4      	beq.n	801f290 <strncpy+0x8>
 801f2a6:	f803 5b01 	strb.w	r5, [r3], #1
 801f2aa:	e7fa      	b.n	801f2a2 <strncpy+0x1a>
 801f2ac:	461c      	mov	r4, r3
 801f2ae:	4632      	mov	r2, r6
 801f2b0:	e7ed      	b.n	801f28e <strncpy+0x6>

0801f2b2 <strstr>:
 801f2b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2b4:	7803      	ldrb	r3, [r0, #0]
 801f2b6:	b17b      	cbz	r3, 801f2d8 <strstr+0x26>
 801f2b8:	4604      	mov	r4, r0
 801f2ba:	7823      	ldrb	r3, [r4, #0]
 801f2bc:	4620      	mov	r0, r4
 801f2be:	1c66      	adds	r6, r4, #1
 801f2c0:	b17b      	cbz	r3, 801f2e2 <strstr+0x30>
 801f2c2:	1e4a      	subs	r2, r1, #1
 801f2c4:	1e63      	subs	r3, r4, #1
 801f2c6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801f2ca:	b14d      	cbz	r5, 801f2e0 <strstr+0x2e>
 801f2cc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801f2d0:	42af      	cmp	r7, r5
 801f2d2:	4634      	mov	r4, r6
 801f2d4:	d0f7      	beq.n	801f2c6 <strstr+0x14>
 801f2d6:	e7f0      	b.n	801f2ba <strstr+0x8>
 801f2d8:	780b      	ldrb	r3, [r1, #0]
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	bf18      	it	ne
 801f2de:	2000      	movne	r0, #0
 801f2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2e2:	4618      	mov	r0, r3
 801f2e4:	e7fc      	b.n	801f2e0 <strstr+0x2e>
	...

0801f2e8 <_svfprintf_r>:
 801f2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2ec:	b0d3      	sub	sp, #332	; 0x14c
 801f2ee:	4688      	mov	r8, r1
 801f2f0:	4693      	mov	fp, r2
 801f2f2:	461e      	mov	r6, r3
 801f2f4:	9003      	str	r0, [sp, #12]
 801f2f6:	f002 f997 	bl	8021628 <_localeconv_r>
 801f2fa:	6803      	ldr	r3, [r0, #0]
 801f2fc:	9316      	str	r3, [sp, #88]	; 0x58
 801f2fe:	4618      	mov	r0, r3
 801f300:	f7e8 fe9e 	bl	8008040 <strlen>
 801f304:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801f308:	900d      	str	r0, [sp, #52]	; 0x34
 801f30a:	0618      	lsls	r0, r3, #24
 801f30c:	d518      	bpl.n	801f340 <_svfprintf_r+0x58>
 801f30e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f312:	b9ab      	cbnz	r3, 801f340 <_svfprintf_r+0x58>
 801f314:	2140      	movs	r1, #64	; 0x40
 801f316:	9803      	ldr	r0, [sp, #12]
 801f318:	f7ff fcfa 	bl	801ed10 <_malloc_r>
 801f31c:	f8c8 0000 	str.w	r0, [r8]
 801f320:	f8c8 0010 	str.w	r0, [r8, #16]
 801f324:	b948      	cbnz	r0, 801f33a <_svfprintf_r+0x52>
 801f326:	9a03      	ldr	r2, [sp, #12]
 801f328:	230c      	movs	r3, #12
 801f32a:	6013      	str	r3, [r2, #0]
 801f32c:	f04f 33ff 	mov.w	r3, #4294967295
 801f330:	930e      	str	r3, [sp, #56]	; 0x38
 801f332:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f334:	b053      	add	sp, #332	; 0x14c
 801f336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f33a:	2340      	movs	r3, #64	; 0x40
 801f33c:	f8c8 3014 	str.w	r3, [r8, #20]
 801f340:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 801f668 <_svfprintf_r+0x380>
 801f344:	2300      	movs	r3, #0
 801f346:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 801f34a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801f34e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 801f352:	ac29      	add	r4, sp, #164	; 0xa4
 801f354:	9426      	str	r4, [sp, #152]	; 0x98
 801f356:	9304      	str	r3, [sp, #16]
 801f358:	9309      	str	r3, [sp, #36]	; 0x24
 801f35a:	9312      	str	r3, [sp, #72]	; 0x48
 801f35c:	9319      	str	r3, [sp, #100]	; 0x64
 801f35e:	930e      	str	r3, [sp, #56]	; 0x38
 801f360:	465d      	mov	r5, fp
 801f362:	462b      	mov	r3, r5
 801f364:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f368:	b112      	cbz	r2, 801f370 <_svfprintf_r+0x88>
 801f36a:	2a25      	cmp	r2, #37	; 0x25
 801f36c:	f040 80e4 	bne.w	801f538 <_svfprintf_r+0x250>
 801f370:	ebb5 070b 	subs.w	r7, r5, fp
 801f374:	d00e      	beq.n	801f394 <_svfprintf_r+0xac>
 801f376:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f378:	443b      	add	r3, r7
 801f37a:	9328      	str	r3, [sp, #160]	; 0xa0
 801f37c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f37e:	3301      	adds	r3, #1
 801f380:	2b07      	cmp	r3, #7
 801f382:	e9c4 b700 	strd	fp, r7, [r4]
 801f386:	9327      	str	r3, [sp, #156]	; 0x9c
 801f388:	f300 80d8 	bgt.w	801f53c <_svfprintf_r+0x254>
 801f38c:	3408      	adds	r4, #8
 801f38e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f390:	443b      	add	r3, r7
 801f392:	930e      	str	r3, [sp, #56]	; 0x38
 801f394:	782b      	ldrb	r3, [r5, #0]
 801f396:	2b00      	cmp	r3, #0
 801f398:	f001 81b4 	beq.w	8020704 <_svfprintf_r+0x141c>
 801f39c:	1c6b      	adds	r3, r5, #1
 801f39e:	930c      	str	r3, [sp, #48]	; 0x30
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801f3a6:	f04f 35ff 	mov.w	r5, #4294967295
 801f3aa:	930f      	str	r3, [sp, #60]	; 0x3c
 801f3ac:	469a      	mov	sl, r3
 801f3ae:	270a      	movs	r7, #10
 801f3b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3b2:	781b      	ldrb	r3, [r3, #0]
 801f3b4:	9306      	str	r3, [sp, #24]
 801f3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3b8:	3301      	adds	r3, #1
 801f3ba:	930c      	str	r3, [sp, #48]	; 0x30
 801f3bc:	9b06      	ldr	r3, [sp, #24]
 801f3be:	3b20      	subs	r3, #32
 801f3c0:	2b5a      	cmp	r3, #90	; 0x5a
 801f3c2:	f200 8624 	bhi.w	802000e <_svfprintf_r+0xd26>
 801f3c6:	a201      	add	r2, pc, #4	; (adr r2, 801f3cc <_svfprintf_r+0xe4>)
 801f3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3cc:	0801f5cf 	.word	0x0801f5cf
 801f3d0:	0802000f 	.word	0x0802000f
 801f3d4:	0802000f 	.word	0x0802000f
 801f3d8:	0801f5e1 	.word	0x0801f5e1
 801f3dc:	0802000f 	.word	0x0802000f
 801f3e0:	0802000f 	.word	0x0802000f
 801f3e4:	0802000f 	.word	0x0802000f
 801f3e8:	0801f595 	.word	0x0801f595
 801f3ec:	0802000f 	.word	0x0802000f
 801f3f0:	0802000f 	.word	0x0802000f
 801f3f4:	0801f5e7 	.word	0x0801f5e7
 801f3f8:	0801f5ff 	.word	0x0801f5ff
 801f3fc:	0802000f 	.word	0x0802000f
 801f400:	0801f5f9 	.word	0x0801f5f9
 801f404:	0801f603 	.word	0x0801f603
 801f408:	0802000f 	.word	0x0802000f
 801f40c:	0801f637 	.word	0x0801f637
 801f410:	0801f63d 	.word	0x0801f63d
 801f414:	0801f63d 	.word	0x0801f63d
 801f418:	0801f63d 	.word	0x0801f63d
 801f41c:	0801f63d 	.word	0x0801f63d
 801f420:	0801f63d 	.word	0x0801f63d
 801f424:	0801f63d 	.word	0x0801f63d
 801f428:	0801f63d 	.word	0x0801f63d
 801f42c:	0801f63d 	.word	0x0801f63d
 801f430:	0801f63d 	.word	0x0801f63d
 801f434:	0802000f 	.word	0x0802000f
 801f438:	0802000f 	.word	0x0802000f
 801f43c:	0802000f 	.word	0x0802000f
 801f440:	0802000f 	.word	0x0802000f
 801f444:	0802000f 	.word	0x0802000f
 801f448:	0802000f 	.word	0x0802000f
 801f44c:	0802000f 	.word	0x0802000f
 801f450:	0801f73f 	.word	0x0801f73f
 801f454:	0802000f 	.word	0x0802000f
 801f458:	0801f6a9 	.word	0x0801f6a9
 801f45c:	0801f6cb 	.word	0x0801f6cb
 801f460:	0801f73f 	.word	0x0801f73f
 801f464:	0801f73f 	.word	0x0801f73f
 801f468:	0801f73f 	.word	0x0801f73f
 801f46c:	0802000f 	.word	0x0802000f
 801f470:	0802000f 	.word	0x0802000f
 801f474:	0802000f 	.word	0x0802000f
 801f478:	0802000f 	.word	0x0802000f
 801f47c:	0801f65d 	.word	0x0801f65d
 801f480:	0802000f 	.word	0x0802000f
 801f484:	0802000f 	.word	0x0802000f
 801f488:	0801fc11 	.word	0x0801fc11
 801f48c:	0802000f 	.word	0x0802000f
 801f490:	0802000f 	.word	0x0802000f
 801f494:	0802000f 	.word	0x0802000f
 801f498:	0801fc9d 	.word	0x0801fc9d
 801f49c:	0802000f 	.word	0x0802000f
 801f4a0:	0801fe7f 	.word	0x0801fe7f
 801f4a4:	0802000f 	.word	0x0802000f
 801f4a8:	0802000f 	.word	0x0802000f
 801f4ac:	0801f555 	.word	0x0801f555
 801f4b0:	0802000f 	.word	0x0802000f
 801f4b4:	0802000f 	.word	0x0802000f
 801f4b8:	0802000f 	.word	0x0802000f
 801f4bc:	0802000f 	.word	0x0802000f
 801f4c0:	0802000f 	.word	0x0802000f
 801f4c4:	0802000f 	.word	0x0802000f
 801f4c8:	0802000f 	.word	0x0802000f
 801f4cc:	0802000f 	.word	0x0802000f
 801f4d0:	0801f73f 	.word	0x0801f73f
 801f4d4:	0802000f 	.word	0x0802000f
 801f4d8:	0801f6a9 	.word	0x0801f6a9
 801f4dc:	0801f6cf 	.word	0x0801f6cf
 801f4e0:	0801f73f 	.word	0x0801f73f
 801f4e4:	0801f73f 	.word	0x0801f73f
 801f4e8:	0801f73f 	.word	0x0801f73f
 801f4ec:	0801f675 	.word	0x0801f675
 801f4f0:	0801f6cf 	.word	0x0801f6cf
 801f4f4:	0801f69d 	.word	0x0801f69d
 801f4f8:	0802000f 	.word	0x0802000f
 801f4fc:	0801f68f 	.word	0x0801f68f
 801f500:	0802000f 	.word	0x0802000f
 801f504:	0801fbcb 	.word	0x0801fbcb
 801f508:	0801fc15 	.word	0x0801fc15
 801f50c:	0801fc7d 	.word	0x0801fc7d
 801f510:	0801f69d 	.word	0x0801f69d
 801f514:	0802000f 	.word	0x0802000f
 801f518:	0801fc9d 	.word	0x0801fc9d
 801f51c:	0801f3b1 	.word	0x0801f3b1
 801f520:	0801fe83 	.word	0x0801fe83
 801f524:	0802000f 	.word	0x0802000f
 801f528:	0802000f 	.word	0x0802000f
 801f52c:	0801fec1 	.word	0x0801fec1
 801f530:	0802000f 	.word	0x0802000f
 801f534:	0801f3b1 	.word	0x0801f3b1
 801f538:	461d      	mov	r5, r3
 801f53a:	e712      	b.n	801f362 <_svfprintf_r+0x7a>
 801f53c:	aa26      	add	r2, sp, #152	; 0x98
 801f53e:	4641      	mov	r1, r8
 801f540:	9803      	ldr	r0, [sp, #12]
 801f542:	f002 fb73 	bl	8021c2c <__ssprint_r>
 801f546:	2800      	cmp	r0, #0
 801f548:	f040 8166 	bne.w	801f818 <_svfprintf_r+0x530>
 801f54c:	ac29      	add	r4, sp, #164	; 0xa4
 801f54e:	e71e      	b.n	801f38e <_svfprintf_r+0xa6>
 801f550:	461e      	mov	r6, r3
 801f552:	e72d      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f554:	4b46      	ldr	r3, [pc, #280]	; (801f670 <_svfprintf_r+0x388>)
 801f556:	9318      	str	r3, [sp, #96]	; 0x60
 801f558:	f01a 0f20 	tst.w	sl, #32
 801f55c:	f000 84b3 	beq.w	801fec6 <_svfprintf_r+0xbde>
 801f560:	3607      	adds	r6, #7
 801f562:	f026 0607 	bic.w	r6, r6, #7
 801f566:	f106 0308 	add.w	r3, r6, #8
 801f56a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801f56e:	9308      	str	r3, [sp, #32]
 801f570:	f01a 0f01 	tst.w	sl, #1
 801f574:	d00a      	beq.n	801f58c <_svfprintf_r+0x2a4>
 801f576:	ea56 0307 	orrs.w	r3, r6, r7
 801f57a:	d007      	beq.n	801f58c <_svfprintf_r+0x2a4>
 801f57c:	2330      	movs	r3, #48	; 0x30
 801f57e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801f582:	9b06      	ldr	r3, [sp, #24]
 801f584:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801f588:	f04a 0a02 	orr.w	sl, sl, #2
 801f58c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801f590:	2302      	movs	r3, #2
 801f592:	e34d      	b.n	801fc30 <_svfprintf_r+0x948>
 801f594:	9803      	ldr	r0, [sp, #12]
 801f596:	f002 f847 	bl	8021628 <_localeconv_r>
 801f59a:	6843      	ldr	r3, [r0, #4]
 801f59c:	9319      	str	r3, [sp, #100]	; 0x64
 801f59e:	4618      	mov	r0, r3
 801f5a0:	f7e8 fd4e 	bl	8008040 <strlen>
 801f5a4:	9012      	str	r0, [sp, #72]	; 0x48
 801f5a6:	9803      	ldr	r0, [sp, #12]
 801f5a8:	f002 f83e 	bl	8021628 <_localeconv_r>
 801f5ac:	6883      	ldr	r3, [r0, #8]
 801f5ae:	9309      	str	r3, [sp, #36]	; 0x24
 801f5b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	f43f aefc 	beq.w	801f3b0 <_svfprintf_r+0xc8>
 801f5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	f43f aef8 	beq.w	801f3b0 <_svfprintf_r+0xc8>
 801f5c0:	781b      	ldrb	r3, [r3, #0]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	f43f aef4 	beq.w	801f3b0 <_svfprintf_r+0xc8>
 801f5c8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801f5cc:	e6f0      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f5ce:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	f47f aeec 	bne.w	801f3b0 <_svfprintf_r+0xc8>
 801f5d8:	2320      	movs	r3, #32
 801f5da:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801f5de:	e6e7      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f5e0:	f04a 0a01 	orr.w	sl, sl, #1
 801f5e4:	e6e4      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f5e6:	6832      	ldr	r2, [r6, #0]
 801f5e8:	920f      	str	r2, [sp, #60]	; 0x3c
 801f5ea:	2a00      	cmp	r2, #0
 801f5ec:	f106 0304 	add.w	r3, r6, #4
 801f5f0:	daae      	bge.n	801f550 <_svfprintf_r+0x268>
 801f5f2:	4252      	negs	r2, r2
 801f5f4:	920f      	str	r2, [sp, #60]	; 0x3c
 801f5f6:	461e      	mov	r6, r3
 801f5f8:	f04a 0a04 	orr.w	sl, sl, #4
 801f5fc:	e6d8      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f5fe:	232b      	movs	r3, #43	; 0x2b
 801f600:	e7eb      	b.n	801f5da <_svfprintf_r+0x2f2>
 801f602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f606:	7812      	ldrb	r2, [r2, #0]
 801f608:	9206      	str	r2, [sp, #24]
 801f60a:	2a2a      	cmp	r2, #42	; 0x2a
 801f60c:	f103 0301 	add.w	r3, r3, #1
 801f610:	d10f      	bne.n	801f632 <_svfprintf_r+0x34a>
 801f612:	6835      	ldr	r5, [r6, #0]
 801f614:	930c      	str	r3, [sp, #48]	; 0x30
 801f616:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 801f61a:	3604      	adds	r6, #4
 801f61c:	e6c8      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f61e:	fb07 2505 	mla	r5, r7, r5, r2
 801f622:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f626:	9206      	str	r2, [sp, #24]
 801f628:	9a06      	ldr	r2, [sp, #24]
 801f62a:	3a30      	subs	r2, #48	; 0x30
 801f62c:	2a09      	cmp	r2, #9
 801f62e:	d9f6      	bls.n	801f61e <_svfprintf_r+0x336>
 801f630:	e6c3      	b.n	801f3ba <_svfprintf_r+0xd2>
 801f632:	2500      	movs	r5, #0
 801f634:	e7f8      	b.n	801f628 <_svfprintf_r+0x340>
 801f636:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801f63a:	e6b9      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f63c:	2200      	movs	r2, #0
 801f63e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f640:	920f      	str	r2, [sp, #60]	; 0x3c
 801f642:	9a06      	ldr	r2, [sp, #24]
 801f644:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f646:	3a30      	subs	r2, #48	; 0x30
 801f648:	fb07 2201 	mla	r2, r7, r1, r2
 801f64c:	920f      	str	r2, [sp, #60]	; 0x3c
 801f64e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f652:	9206      	str	r2, [sp, #24]
 801f654:	3a30      	subs	r2, #48	; 0x30
 801f656:	2a09      	cmp	r2, #9
 801f658:	d9f3      	bls.n	801f642 <_svfprintf_r+0x35a>
 801f65a:	e6ae      	b.n	801f3ba <_svfprintf_r+0xd2>
 801f65c:	f04a 0a08 	orr.w	sl, sl, #8
 801f660:	e6a6      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f662:	bf00      	nop
 801f664:	f3af 8000 	nop.w
	...
 801f670:	08035d4b 	.word	0x08035d4b
 801f674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f676:	781b      	ldrb	r3, [r3, #0]
 801f678:	2b68      	cmp	r3, #104	; 0x68
 801f67a:	bf01      	itttt	eq
 801f67c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 801f67e:	3301      	addeq	r3, #1
 801f680:	930c      	streq	r3, [sp, #48]	; 0x30
 801f682:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801f686:	bf18      	it	ne
 801f688:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801f68c:	e690      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f68e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f690:	781b      	ldrb	r3, [r3, #0]
 801f692:	2b6c      	cmp	r3, #108	; 0x6c
 801f694:	d105      	bne.n	801f6a2 <_svfprintf_r+0x3ba>
 801f696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f698:	3301      	adds	r3, #1
 801f69a:	930c      	str	r3, [sp, #48]	; 0x30
 801f69c:	f04a 0a20 	orr.w	sl, sl, #32
 801f6a0:	e686      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f6a2:	f04a 0a10 	orr.w	sl, sl, #16
 801f6a6:	e683      	b.n	801f3b0 <_svfprintf_r+0xc8>
 801f6a8:	1d33      	adds	r3, r6, #4
 801f6aa:	9308      	str	r3, [sp, #32]
 801f6ac:	2000      	movs	r0, #0
 801f6ae:	6833      	ldr	r3, [r6, #0]
 801f6b0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801f6b4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801f6b8:	4681      	mov	r9, r0
 801f6ba:	2501      	movs	r5, #1
 801f6bc:	9010      	str	r0, [sp, #64]	; 0x40
 801f6be:	4607      	mov	r7, r0
 801f6c0:	9007      	str	r0, [sp, #28]
 801f6c2:	4606      	mov	r6, r0
 801f6c4:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 801f6c8:	e301      	b.n	801fcce <_svfprintf_r+0x9e6>
 801f6ca:	f04a 0a10 	orr.w	sl, sl, #16
 801f6ce:	f01a 0f20 	tst.w	sl, #32
 801f6d2:	d021      	beq.n	801f718 <_svfprintf_r+0x430>
 801f6d4:	3607      	adds	r6, #7
 801f6d6:	f026 0607 	bic.w	r6, r6, #7
 801f6da:	f106 0308 	add.w	r3, r6, #8
 801f6de:	e9d6 6700 	ldrd	r6, r7, [r6]
 801f6e2:	9308      	str	r3, [sp, #32]
 801f6e4:	2e00      	cmp	r6, #0
 801f6e6:	f177 0300 	sbcs.w	r3, r7, #0
 801f6ea:	da06      	bge.n	801f6fa <_svfprintf_r+0x412>
 801f6ec:	4276      	negs	r6, r6
 801f6ee:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801f6f2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801f6f6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801f6fa:	1c6b      	adds	r3, r5, #1
 801f6fc:	f040 83f6 	bne.w	801feec <_svfprintf_r+0xc04>
 801f700:	2f00      	cmp	r7, #0
 801f702:	bf08      	it	eq
 801f704:	2e0a      	cmpeq	r6, #10
 801f706:	f080 8427 	bcs.w	801ff58 <_svfprintf_r+0xc70>
 801f70a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801f70e:	3630      	adds	r6, #48	; 0x30
 801f710:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 801f714:	f000 bc0d 	b.w	801ff32 <_svfprintf_r+0xc4a>
 801f718:	1d33      	adds	r3, r6, #4
 801f71a:	f01a 0f10 	tst.w	sl, #16
 801f71e:	9308      	str	r3, [sp, #32]
 801f720:	d002      	beq.n	801f728 <_svfprintf_r+0x440>
 801f722:	6836      	ldr	r6, [r6, #0]
 801f724:	17f7      	asrs	r7, r6, #31
 801f726:	e7dd      	b.n	801f6e4 <_svfprintf_r+0x3fc>
 801f728:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801f72c:	6836      	ldr	r6, [r6, #0]
 801f72e:	d001      	beq.n	801f734 <_svfprintf_r+0x44c>
 801f730:	b236      	sxth	r6, r6
 801f732:	e7f7      	b.n	801f724 <_svfprintf_r+0x43c>
 801f734:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801f738:	bf18      	it	ne
 801f73a:	b276      	sxtbne	r6, r6
 801f73c:	e7f2      	b.n	801f724 <_svfprintf_r+0x43c>
 801f73e:	3607      	adds	r6, #7
 801f740:	f026 0607 	bic.w	r6, r6, #7
 801f744:	ed96 7b00 	vldr	d7, [r6]
 801f748:	f106 0308 	add.w	r3, r6, #8
 801f74c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801f750:	9308      	str	r3, [sp, #32]
 801f752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f754:	931a      	str	r3, [sp, #104]	; 0x68
 801f756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f75c:	931b      	str	r3, [sp, #108]	; 0x6c
 801f75e:	f04f 32ff 	mov.w	r2, #4294967295
 801f762:	4bb2      	ldr	r3, [pc, #712]	; (801fa2c <_svfprintf_r+0x744>)
 801f764:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801f768:	f7e9 f918 	bl	800899c <__aeabi_dcmpun>
 801f76c:	bb00      	cbnz	r0, 801f7b0 <_svfprintf_r+0x4c8>
 801f76e:	f04f 32ff 	mov.w	r2, #4294967295
 801f772:	4bae      	ldr	r3, [pc, #696]	; (801fa2c <_svfprintf_r+0x744>)
 801f774:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801f778:	f7e9 f8f2 	bl	8008960 <__aeabi_dcmple>
 801f77c:	b9c0      	cbnz	r0, 801f7b0 <_svfprintf_r+0x4c8>
 801f77e:	2200      	movs	r2, #0
 801f780:	2300      	movs	r3, #0
 801f782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f786:	f7e9 f8e1 	bl	800894c <__aeabi_dcmplt>
 801f78a:	b110      	cbz	r0, 801f792 <_svfprintf_r+0x4aa>
 801f78c:	232d      	movs	r3, #45	; 0x2d
 801f78e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801f792:	4aa7      	ldr	r2, [pc, #668]	; (801fa30 <_svfprintf_r+0x748>)
 801f794:	4ba7      	ldr	r3, [pc, #668]	; (801fa34 <_svfprintf_r+0x74c>)
 801f796:	9906      	ldr	r1, [sp, #24]
 801f798:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 801f79c:	2947      	cmp	r1, #71	; 0x47
 801f79e:	bfcc      	ite	gt
 801f7a0:	4693      	movgt	fp, r2
 801f7a2:	469b      	movle	fp, r3
 801f7a4:	f04f 0900 	mov.w	r9, #0
 801f7a8:	2503      	movs	r5, #3
 801f7aa:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801f7ae:	e3c6      	b.n	801ff3e <_svfprintf_r+0xc56>
 801f7b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f7b4:	4610      	mov	r0, r2
 801f7b6:	4619      	mov	r1, r3
 801f7b8:	f7e9 f8f0 	bl	800899c <__aeabi_dcmpun>
 801f7bc:	4681      	mov	r9, r0
 801f7be:	b140      	cbz	r0, 801f7d2 <_svfprintf_r+0x4ea>
 801f7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7c2:	4a9d      	ldr	r2, [pc, #628]	; (801fa38 <_svfprintf_r+0x750>)
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	bfbc      	itt	lt
 801f7c8:	232d      	movlt	r3, #45	; 0x2d
 801f7ca:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801f7ce:	4b9b      	ldr	r3, [pc, #620]	; (801fa3c <_svfprintf_r+0x754>)
 801f7d0:	e7e1      	b.n	801f796 <_svfprintf_r+0x4ae>
 801f7d2:	9b06      	ldr	r3, [sp, #24]
 801f7d4:	f023 0320 	bic.w	r3, r3, #32
 801f7d8:	2b41      	cmp	r3, #65	; 0x41
 801f7da:	9307      	str	r3, [sp, #28]
 801f7dc:	d125      	bne.n	801f82a <_svfprintf_r+0x542>
 801f7de:	2330      	movs	r3, #48	; 0x30
 801f7e0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801f7e4:	9b06      	ldr	r3, [sp, #24]
 801f7e6:	2b61      	cmp	r3, #97	; 0x61
 801f7e8:	bf14      	ite	ne
 801f7ea:	2358      	movne	r3, #88	; 0x58
 801f7ec:	2378      	moveq	r3, #120	; 0x78
 801f7ee:	2d63      	cmp	r5, #99	; 0x63
 801f7f0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801f7f4:	f04a 0a02 	orr.w	sl, sl, #2
 801f7f8:	f340 8108 	ble.w	801fa0c <_svfprintf_r+0x724>
 801f7fc:	1c69      	adds	r1, r5, #1
 801f7fe:	9803      	ldr	r0, [sp, #12]
 801f800:	f7ff fa86 	bl	801ed10 <_malloc_r>
 801f804:	4683      	mov	fp, r0
 801f806:	2800      	cmp	r0, #0
 801f808:	f040 8103 	bne.w	801fa12 <_svfprintf_r+0x72a>
 801f80c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801f810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f814:	f8a8 300c 	strh.w	r3, [r8, #12]
 801f818:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801f81c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f822:	bf18      	it	ne
 801f824:	f04f 33ff 	movne.w	r3, #4294967295
 801f828:	e582      	b.n	801f330 <_svfprintf_r+0x48>
 801f82a:	1c69      	adds	r1, r5, #1
 801f82c:	f000 80f3 	beq.w	801fa16 <_svfprintf_r+0x72e>
 801f830:	9b07      	ldr	r3, [sp, #28]
 801f832:	2b47      	cmp	r3, #71	; 0x47
 801f834:	d102      	bne.n	801f83c <_svfprintf_r+0x554>
 801f836:	2d00      	cmp	r5, #0
 801f838:	f000 80ef 	beq.w	801fa1a <_svfprintf_r+0x732>
 801f83c:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 801f840:	9310      	str	r3, [sp, #64]	; 0x40
 801f842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f844:	2b00      	cmp	r3, #0
 801f846:	f280 80eb 	bge.w	801fa20 <_svfprintf_r+0x738>
 801f84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f84c:	9314      	str	r3, [sp, #80]	; 0x50
 801f84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f850:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f854:	9315      	str	r3, [sp, #84]	; 0x54
 801f856:	232d      	movs	r3, #45	; 0x2d
 801f858:	9313      	str	r3, [sp, #76]	; 0x4c
 801f85a:	9b07      	ldr	r3, [sp, #28]
 801f85c:	2b41      	cmp	r3, #65	; 0x41
 801f85e:	f040 8105 	bne.w	801fa6c <_svfprintf_r+0x784>
 801f862:	a820      	add	r0, sp, #128	; 0x80
 801f864:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 801f868:	f002 f9aa 	bl	8021bc0 <frexp>
 801f86c:	2200      	movs	r2, #0
 801f86e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801f872:	ec51 0b10 	vmov	r0, r1, d0
 801f876:	f7e8 fdf7 	bl	8008468 <__aeabi_dmul>
 801f87a:	2200      	movs	r2, #0
 801f87c:	2300      	movs	r3, #0
 801f87e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f882:	f7e9 f859 	bl	8008938 <__aeabi_dcmpeq>
 801f886:	b108      	cbz	r0, 801f88c <_svfprintf_r+0x5a4>
 801f888:	2301      	movs	r3, #1
 801f88a:	9320      	str	r3, [sp, #128]	; 0x80
 801f88c:	4f6c      	ldr	r7, [pc, #432]	; (801fa40 <_svfprintf_r+0x758>)
 801f88e:	4b6d      	ldr	r3, [pc, #436]	; (801fa44 <_svfprintf_r+0x75c>)
 801f890:	9a06      	ldr	r2, [sp, #24]
 801f892:	2a61      	cmp	r2, #97	; 0x61
 801f894:	bf08      	it	eq
 801f896:	461f      	moveq	r7, r3
 801f898:	9711      	str	r7, [sp, #68]	; 0x44
 801f89a:	465e      	mov	r6, fp
 801f89c:	1e6f      	subs	r7, r5, #1
 801f89e:	2200      	movs	r2, #0
 801f8a0:	4b69      	ldr	r3, [pc, #420]	; (801fa48 <_svfprintf_r+0x760>)
 801f8a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f8a6:	f7e8 fddf 	bl	8008468 <__aeabi_dmul>
 801f8aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f8ae:	f7e9 f88b 	bl	80089c8 <__aeabi_d2iz>
 801f8b2:	901c      	str	r0, [sp, #112]	; 0x70
 801f8b4:	f7e8 fd6e 	bl	8008394 <__aeabi_i2d>
 801f8b8:	4602      	mov	r2, r0
 801f8ba:	460b      	mov	r3, r1
 801f8bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f8c0:	f7e8 fc1a 	bl	80080f8 <__aeabi_dsub>
 801f8c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801f8c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f8c8:	971d      	str	r7, [sp, #116]	; 0x74
 801f8ca:	5c9b      	ldrb	r3, [r3, r2]
 801f8cc:	f806 3b01 	strb.w	r3, [r6], #1
 801f8d0:	1c7a      	adds	r2, r7, #1
 801f8d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f8d6:	d006      	beq.n	801f8e6 <_svfprintf_r+0x5fe>
 801f8d8:	2200      	movs	r2, #0
 801f8da:	2300      	movs	r3, #0
 801f8dc:	3f01      	subs	r7, #1
 801f8de:	f7e9 f82b 	bl	8008938 <__aeabi_dcmpeq>
 801f8e2:	2800      	cmp	r0, #0
 801f8e4:	d0db      	beq.n	801f89e <_svfprintf_r+0x5b6>
 801f8e6:	2200      	movs	r2, #0
 801f8e8:	4b58      	ldr	r3, [pc, #352]	; (801fa4c <_svfprintf_r+0x764>)
 801f8ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f8ee:	f7e9 f84b 	bl	8008988 <__aeabi_dcmpgt>
 801f8f2:	b960      	cbnz	r0, 801f90e <_svfprintf_r+0x626>
 801f8f4:	2200      	movs	r2, #0
 801f8f6:	4b55      	ldr	r3, [pc, #340]	; (801fa4c <_svfprintf_r+0x764>)
 801f8f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f8fc:	f7e9 f81c 	bl	8008938 <__aeabi_dcmpeq>
 801f900:	2800      	cmp	r0, #0
 801f902:	f000 80ae 	beq.w	801fa62 <_svfprintf_r+0x77a>
 801f906:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f908:	07db      	lsls	r3, r3, #31
 801f90a:	f140 80aa 	bpl.w	801fa62 <_svfprintf_r+0x77a>
 801f90e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f910:	9624      	str	r6, [sp, #144]	; 0x90
 801f912:	7bd9      	ldrb	r1, [r3, #15]
 801f914:	2030      	movs	r0, #48	; 0x30
 801f916:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f918:	1e53      	subs	r3, r2, #1
 801f91a:	9324      	str	r3, [sp, #144]	; 0x90
 801f91c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801f920:	428b      	cmp	r3, r1
 801f922:	f000 8095 	beq.w	801fa50 <_svfprintf_r+0x768>
 801f926:	2b39      	cmp	r3, #57	; 0x39
 801f928:	bf0b      	itete	eq
 801f92a:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 801f92c:	3301      	addne	r3, #1
 801f92e:	7a9b      	ldrbeq	r3, [r3, #10]
 801f930:	b2db      	uxtbne	r3, r3
 801f932:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f936:	4633      	mov	r3, r6
 801f938:	eba3 030b 	sub.w	r3, r3, fp
 801f93c:	9304      	str	r3, [sp, #16]
 801f93e:	9b07      	ldr	r3, [sp, #28]
 801f940:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801f942:	2b47      	cmp	r3, #71	; 0x47
 801f944:	f040 80d7 	bne.w	801faf6 <_svfprintf_r+0x80e>
 801f948:	1cf7      	adds	r7, r6, #3
 801f94a:	db02      	blt.n	801f952 <_svfprintf_r+0x66a>
 801f94c:	42b5      	cmp	r5, r6
 801f94e:	f280 80fd 	bge.w	801fb4c <_svfprintf_r+0x864>
 801f952:	9b06      	ldr	r3, [sp, #24]
 801f954:	3b02      	subs	r3, #2
 801f956:	9306      	str	r3, [sp, #24]
 801f958:	9906      	ldr	r1, [sp, #24]
 801f95a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801f95e:	f021 0120 	bic.w	r1, r1, #32
 801f962:	2941      	cmp	r1, #65	; 0x41
 801f964:	bf08      	it	eq
 801f966:	320f      	addeq	r2, #15
 801f968:	f106 33ff 	add.w	r3, r6, #4294967295
 801f96c:	bf06      	itte	eq
 801f96e:	b2d2      	uxtbeq	r2, r2
 801f970:	2101      	moveq	r1, #1
 801f972:	2100      	movne	r1, #0
 801f974:	2b00      	cmp	r3, #0
 801f976:	9320      	str	r3, [sp, #128]	; 0x80
 801f978:	bfb8      	it	lt
 801f97a:	f1c6 0301 	rsblt	r3, r6, #1
 801f97e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801f982:	bfb4      	ite	lt
 801f984:	222d      	movlt	r2, #45	; 0x2d
 801f986:	222b      	movge	r2, #43	; 0x2b
 801f988:	2b09      	cmp	r3, #9
 801f98a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801f98e:	f340 80c9 	ble.w	801fb24 <_svfprintf_r+0x83c>
 801f992:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 801f996:	250a      	movs	r5, #10
 801f998:	fb93 f0f5 	sdiv	r0, r3, r5
 801f99c:	fb05 3310 	mls	r3, r5, r0, r3
 801f9a0:	3330      	adds	r3, #48	; 0x30
 801f9a2:	2809      	cmp	r0, #9
 801f9a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f9a8:	f102 31ff 	add.w	r1, r2, #4294967295
 801f9ac:	4603      	mov	r3, r0
 801f9ae:	f300 80b2 	bgt.w	801fb16 <_svfprintf_r+0x82e>
 801f9b2:	3330      	adds	r3, #48	; 0x30
 801f9b4:	f801 3c01 	strb.w	r3, [r1, #-1]
 801f9b8:	3a02      	subs	r2, #2
 801f9ba:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 801f9be:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 801f9c2:	4282      	cmp	r2, r0
 801f9c4:	4619      	mov	r1, r3
 801f9c6:	f0c0 80a8 	bcc.w	801fb1a <_svfprintf_r+0x832>
 801f9ca:	9a04      	ldr	r2, [sp, #16]
 801f9cc:	ab22      	add	r3, sp, #136	; 0x88
 801f9ce:	1acb      	subs	r3, r1, r3
 801f9d0:	2a01      	cmp	r2, #1
 801f9d2:	9317      	str	r3, [sp, #92]	; 0x5c
 801f9d4:	eb03 0502 	add.w	r5, r3, r2
 801f9d8:	dc02      	bgt.n	801f9e0 <_svfprintf_r+0x6f8>
 801f9da:	f01a 0f01 	tst.w	sl, #1
 801f9de:	d001      	beq.n	801f9e4 <_svfprintf_r+0x6fc>
 801f9e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9e2:	441d      	add	r5, r3
 801f9e4:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 801f9e8:	2700      	movs	r7, #0
 801f9ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f9ee:	9310      	str	r3, [sp, #64]	; 0x40
 801f9f0:	9707      	str	r7, [sp, #28]
 801f9f2:	463e      	mov	r6, r7
 801f9f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	f000 8315 	beq.w	8020026 <_svfprintf_r+0xd3e>
 801f9fc:	232d      	movs	r3, #45	; 0x2d
 801f9fe:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 801fa02:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801fa06:	2300      	movs	r3, #0
 801fa08:	9310      	str	r3, [sp, #64]	; 0x40
 801fa0a:	e160      	b.n	801fcce <_svfprintf_r+0x9e6>
 801fa0c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 801fa10:	e714      	b.n	801f83c <_svfprintf_r+0x554>
 801fa12:	4681      	mov	r9, r0
 801fa14:	e712      	b.n	801f83c <_svfprintf_r+0x554>
 801fa16:	2506      	movs	r5, #6
 801fa18:	e710      	b.n	801f83c <_svfprintf_r+0x554>
 801fa1a:	46a9      	mov	r9, r5
 801fa1c:	2501      	movs	r5, #1
 801fa1e:	e70d      	b.n	801f83c <_svfprintf_r+0x554>
 801fa20:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801fa24:	2300      	movs	r3, #0
 801fa26:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801fa2a:	e715      	b.n	801f858 <_svfprintf_r+0x570>
 801fa2c:	7fefffff 	.word	0x7fefffff
 801fa30:	08035d2e 	.word	0x08035d2e
 801fa34:	08035d2a 	.word	0x08035d2a
 801fa38:	08035d36 	.word	0x08035d36
 801fa3c:	08035d32 	.word	0x08035d32
 801fa40:	08035d4b 	.word	0x08035d4b
 801fa44:	08035d3a 	.word	0x08035d3a
 801fa48:	40300000 	.word	0x40300000
 801fa4c:	3fe00000 	.word	0x3fe00000
 801fa50:	f802 0c01 	strb.w	r0, [r2, #-1]
 801fa54:	e75f      	b.n	801f916 <_svfprintf_r+0x62e>
 801fa56:	f803 1b01 	strb.w	r1, [r3], #1
 801fa5a:	1af2      	subs	r2, r6, r3
 801fa5c:	2a00      	cmp	r2, #0
 801fa5e:	dafa      	bge.n	801fa56 <_svfprintf_r+0x76e>
 801fa60:	e76a      	b.n	801f938 <_svfprintf_r+0x650>
 801fa62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801fa64:	4633      	mov	r3, r6
 801fa66:	2130      	movs	r1, #48	; 0x30
 801fa68:	4416      	add	r6, r2
 801fa6a:	e7f6      	b.n	801fa5a <_svfprintf_r+0x772>
 801fa6c:	9b07      	ldr	r3, [sp, #28]
 801fa6e:	2b46      	cmp	r3, #70	; 0x46
 801fa70:	d004      	beq.n	801fa7c <_svfprintf_r+0x794>
 801fa72:	2b45      	cmp	r3, #69	; 0x45
 801fa74:	d13a      	bne.n	801faec <_svfprintf_r+0x804>
 801fa76:	1c6e      	adds	r6, r5, #1
 801fa78:	2102      	movs	r1, #2
 801fa7a:	e001      	b.n	801fa80 <_svfprintf_r+0x798>
 801fa7c:	462e      	mov	r6, r5
 801fa7e:	2103      	movs	r1, #3
 801fa80:	ab24      	add	r3, sp, #144	; 0x90
 801fa82:	9301      	str	r3, [sp, #4]
 801fa84:	ab21      	add	r3, sp, #132	; 0x84
 801fa86:	9300      	str	r3, [sp, #0]
 801fa88:	4632      	mov	r2, r6
 801fa8a:	ab20      	add	r3, sp, #128	; 0x80
 801fa8c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 801fa90:	9803      	ldr	r0, [sp, #12]
 801fa92:	f000 fefd 	bl	8020890 <_dtoa_r>
 801fa96:	9b07      	ldr	r3, [sp, #28]
 801fa98:	2b47      	cmp	r3, #71	; 0x47
 801fa9a:	4683      	mov	fp, r0
 801fa9c:	d102      	bne.n	801faa4 <_svfprintf_r+0x7bc>
 801fa9e:	f01a 0f01 	tst.w	sl, #1
 801faa2:	d026      	beq.n	801faf2 <_svfprintf_r+0x80a>
 801faa4:	9b07      	ldr	r3, [sp, #28]
 801faa6:	2b46      	cmp	r3, #70	; 0x46
 801faa8:	eb0b 0706 	add.w	r7, fp, r6
 801faac:	d10f      	bne.n	801face <_svfprintf_r+0x7e6>
 801faae:	f89b 3000 	ldrb.w	r3, [fp]
 801fab2:	2b30      	cmp	r3, #48	; 0x30
 801fab4:	d109      	bne.n	801faca <_svfprintf_r+0x7e2>
 801fab6:	2200      	movs	r2, #0
 801fab8:	2300      	movs	r3, #0
 801faba:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801fabe:	f7e8 ff3b 	bl	8008938 <__aeabi_dcmpeq>
 801fac2:	b910      	cbnz	r0, 801faca <_svfprintf_r+0x7e2>
 801fac4:	f1c6 0601 	rsb	r6, r6, #1
 801fac8:	9620      	str	r6, [sp, #128]	; 0x80
 801faca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801facc:	441f      	add	r7, r3
 801face:	2200      	movs	r2, #0
 801fad0:	2300      	movs	r3, #0
 801fad2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801fad6:	f7e8 ff2f 	bl	8008938 <__aeabi_dcmpeq>
 801fada:	b948      	cbnz	r0, 801faf0 <_svfprintf_r+0x808>
 801fadc:	2230      	movs	r2, #48	; 0x30
 801fade:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fae0:	429f      	cmp	r7, r3
 801fae2:	d906      	bls.n	801faf2 <_svfprintf_r+0x80a>
 801fae4:	1c59      	adds	r1, r3, #1
 801fae6:	9124      	str	r1, [sp, #144]	; 0x90
 801fae8:	701a      	strb	r2, [r3, #0]
 801faea:	e7f8      	b.n	801fade <_svfprintf_r+0x7f6>
 801faec:	462e      	mov	r6, r5
 801faee:	e7c3      	b.n	801fa78 <_svfprintf_r+0x790>
 801faf0:	9724      	str	r7, [sp, #144]	; 0x90
 801faf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801faf4:	e720      	b.n	801f938 <_svfprintf_r+0x650>
 801faf6:	9b07      	ldr	r3, [sp, #28]
 801faf8:	2b46      	cmp	r3, #70	; 0x46
 801fafa:	f47f af2d 	bne.w	801f958 <_svfprintf_r+0x670>
 801fafe:	2e00      	cmp	r6, #0
 801fb00:	dd1d      	ble.n	801fb3e <_svfprintf_r+0x856>
 801fb02:	b915      	cbnz	r5, 801fb0a <_svfprintf_r+0x822>
 801fb04:	f01a 0f01 	tst.w	sl, #1
 801fb08:	d034      	beq.n	801fb74 <_svfprintf_r+0x88c>
 801fb0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb0c:	18f3      	adds	r3, r6, r3
 801fb0e:	441d      	add	r5, r3
 801fb10:	2366      	movs	r3, #102	; 0x66
 801fb12:	9306      	str	r3, [sp, #24]
 801fb14:	e033      	b.n	801fb7e <_svfprintf_r+0x896>
 801fb16:	460a      	mov	r2, r1
 801fb18:	e73e      	b.n	801f998 <_svfprintf_r+0x6b0>
 801fb1a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801fb1e:	f803 1b01 	strb.w	r1, [r3], #1
 801fb22:	e74e      	b.n	801f9c2 <_svfprintf_r+0x6da>
 801fb24:	b941      	cbnz	r1, 801fb38 <_svfprintf_r+0x850>
 801fb26:	2230      	movs	r2, #48	; 0x30
 801fb28:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801fb2c:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 801fb30:	3330      	adds	r3, #48	; 0x30
 801fb32:	1c51      	adds	r1, r2, #1
 801fb34:	7013      	strb	r3, [r2, #0]
 801fb36:	e748      	b.n	801f9ca <_svfprintf_r+0x6e2>
 801fb38:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801fb3c:	e7f8      	b.n	801fb30 <_svfprintf_r+0x848>
 801fb3e:	b915      	cbnz	r5, 801fb46 <_svfprintf_r+0x85e>
 801fb40:	f01a 0f01 	tst.w	sl, #1
 801fb44:	d018      	beq.n	801fb78 <_svfprintf_r+0x890>
 801fb46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb48:	3301      	adds	r3, #1
 801fb4a:	e7e0      	b.n	801fb0e <_svfprintf_r+0x826>
 801fb4c:	9b04      	ldr	r3, [sp, #16]
 801fb4e:	42b3      	cmp	r3, r6
 801fb50:	dc06      	bgt.n	801fb60 <_svfprintf_r+0x878>
 801fb52:	f01a 0f01 	tst.w	sl, #1
 801fb56:	d025      	beq.n	801fba4 <_svfprintf_r+0x8bc>
 801fb58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb5a:	18f5      	adds	r5, r6, r3
 801fb5c:	2367      	movs	r3, #103	; 0x67
 801fb5e:	e7d8      	b.n	801fb12 <_svfprintf_r+0x82a>
 801fb60:	9b04      	ldr	r3, [sp, #16]
 801fb62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fb64:	2e00      	cmp	r6, #0
 801fb66:	eb03 0502 	add.w	r5, r3, r2
 801fb6a:	dcf7      	bgt.n	801fb5c <_svfprintf_r+0x874>
 801fb6c:	f1c6 0301 	rsb	r3, r6, #1
 801fb70:	441d      	add	r5, r3
 801fb72:	e7f3      	b.n	801fb5c <_svfprintf_r+0x874>
 801fb74:	4635      	mov	r5, r6
 801fb76:	e7cb      	b.n	801fb10 <_svfprintf_r+0x828>
 801fb78:	2366      	movs	r3, #102	; 0x66
 801fb7a:	9306      	str	r3, [sp, #24]
 801fb7c:	2501      	movs	r5, #1
 801fb7e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 801fb82:	9307      	str	r3, [sp, #28]
 801fb84:	d01f      	beq.n	801fbc6 <_svfprintf_r+0x8de>
 801fb86:	2700      	movs	r7, #0
 801fb88:	2e00      	cmp	r6, #0
 801fb8a:	9707      	str	r7, [sp, #28]
 801fb8c:	f77f af32 	ble.w	801f9f4 <_svfprintf_r+0x70c>
 801fb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb92:	781b      	ldrb	r3, [r3, #0]
 801fb94:	2bff      	cmp	r3, #255	; 0xff
 801fb96:	d107      	bne.n	801fba8 <_svfprintf_r+0x8c0>
 801fb98:	9b07      	ldr	r3, [sp, #28]
 801fb9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb9c:	443b      	add	r3, r7
 801fb9e:	fb02 5503 	mla	r5, r2, r3, r5
 801fba2:	e727      	b.n	801f9f4 <_svfprintf_r+0x70c>
 801fba4:	4635      	mov	r5, r6
 801fba6:	e7d9      	b.n	801fb5c <_svfprintf_r+0x874>
 801fba8:	42b3      	cmp	r3, r6
 801fbaa:	daf5      	bge.n	801fb98 <_svfprintf_r+0x8b0>
 801fbac:	1af6      	subs	r6, r6, r3
 801fbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbb0:	785b      	ldrb	r3, [r3, #1]
 801fbb2:	b133      	cbz	r3, 801fbc2 <_svfprintf_r+0x8da>
 801fbb4:	9b07      	ldr	r3, [sp, #28]
 801fbb6:	3301      	adds	r3, #1
 801fbb8:	9307      	str	r3, [sp, #28]
 801fbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbbc:	3301      	adds	r3, #1
 801fbbe:	9309      	str	r3, [sp, #36]	; 0x24
 801fbc0:	e7e6      	b.n	801fb90 <_svfprintf_r+0x8a8>
 801fbc2:	3701      	adds	r7, #1
 801fbc4:	e7e4      	b.n	801fb90 <_svfprintf_r+0x8a8>
 801fbc6:	9f07      	ldr	r7, [sp, #28]
 801fbc8:	e714      	b.n	801f9f4 <_svfprintf_r+0x70c>
 801fbca:	4632      	mov	r2, r6
 801fbcc:	f01a 0f20 	tst.w	sl, #32
 801fbd0:	f852 3b04 	ldr.w	r3, [r2], #4
 801fbd4:	9208      	str	r2, [sp, #32]
 801fbd6:	d009      	beq.n	801fbec <_svfprintf_r+0x904>
 801fbd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fbda:	4610      	mov	r0, r2
 801fbdc:	17d1      	asrs	r1, r2, #31
 801fbde:	e9c3 0100 	strd	r0, r1, [r3]
 801fbe2:	9e08      	ldr	r6, [sp, #32]
 801fbe4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801fbe8:	f7ff bbba 	b.w	801f360 <_svfprintf_r+0x78>
 801fbec:	f01a 0f10 	tst.w	sl, #16
 801fbf0:	d002      	beq.n	801fbf8 <_svfprintf_r+0x910>
 801fbf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fbf4:	601a      	str	r2, [r3, #0]
 801fbf6:	e7f4      	b.n	801fbe2 <_svfprintf_r+0x8fa>
 801fbf8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801fbfc:	d002      	beq.n	801fc04 <_svfprintf_r+0x91c>
 801fbfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fc00:	801a      	strh	r2, [r3, #0]
 801fc02:	e7ee      	b.n	801fbe2 <_svfprintf_r+0x8fa>
 801fc04:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801fc08:	d0f3      	beq.n	801fbf2 <_svfprintf_r+0x90a>
 801fc0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fc0c:	701a      	strb	r2, [r3, #0]
 801fc0e:	e7e8      	b.n	801fbe2 <_svfprintf_r+0x8fa>
 801fc10:	f04a 0a10 	orr.w	sl, sl, #16
 801fc14:	f01a 0f20 	tst.w	sl, #32
 801fc18:	d01e      	beq.n	801fc58 <_svfprintf_r+0x970>
 801fc1a:	3607      	adds	r6, #7
 801fc1c:	f026 0607 	bic.w	r6, r6, #7
 801fc20:	f106 0308 	add.w	r3, r6, #8
 801fc24:	e9d6 6700 	ldrd	r6, r7, [r6]
 801fc28:	9308      	str	r3, [sp, #32]
 801fc2a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801fc2e:	2300      	movs	r3, #0
 801fc30:	2200      	movs	r2, #0
 801fc32:	1c69      	adds	r1, r5, #1
 801fc34:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801fc38:	f000 815b 	beq.w	801fef2 <_svfprintf_r+0xc0a>
 801fc3c:	4652      	mov	r2, sl
 801fc3e:	ea56 0107 	orrs.w	r1, r6, r7
 801fc42:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 801fc46:	f040 8154 	bne.w	801fef2 <_svfprintf_r+0xc0a>
 801fc4a:	2d00      	cmp	r5, #0
 801fc4c:	f000 81d5 	beq.w	801fffa <_svfprintf_r+0xd12>
 801fc50:	2b01      	cmp	r3, #1
 801fc52:	f040 8151 	bne.w	801fef8 <_svfprintf_r+0xc10>
 801fc56:	e558      	b.n	801f70a <_svfprintf_r+0x422>
 801fc58:	1d33      	adds	r3, r6, #4
 801fc5a:	f01a 0f10 	tst.w	sl, #16
 801fc5e:	9308      	str	r3, [sp, #32]
 801fc60:	d001      	beq.n	801fc66 <_svfprintf_r+0x97e>
 801fc62:	6836      	ldr	r6, [r6, #0]
 801fc64:	e003      	b.n	801fc6e <_svfprintf_r+0x986>
 801fc66:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801fc6a:	d002      	beq.n	801fc72 <_svfprintf_r+0x98a>
 801fc6c:	8836      	ldrh	r6, [r6, #0]
 801fc6e:	2700      	movs	r7, #0
 801fc70:	e7db      	b.n	801fc2a <_svfprintf_r+0x942>
 801fc72:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801fc76:	d0f4      	beq.n	801fc62 <_svfprintf_r+0x97a>
 801fc78:	7836      	ldrb	r6, [r6, #0]
 801fc7a:	e7f8      	b.n	801fc6e <_svfprintf_r+0x986>
 801fc7c:	1d33      	adds	r3, r6, #4
 801fc7e:	9308      	str	r3, [sp, #32]
 801fc80:	f647 0330 	movw	r3, #30768	; 0x7830
 801fc84:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 801fc88:	2278      	movs	r2, #120	; 0x78
 801fc8a:	4bb0      	ldr	r3, [pc, #704]	; (801ff4c <_svfprintf_r+0xc64>)
 801fc8c:	9318      	str	r3, [sp, #96]	; 0x60
 801fc8e:	6836      	ldr	r6, [r6, #0]
 801fc90:	9206      	str	r2, [sp, #24]
 801fc92:	2700      	movs	r7, #0
 801fc94:	f04a 0a02 	orr.w	sl, sl, #2
 801fc98:	2302      	movs	r3, #2
 801fc9a:	e7c9      	b.n	801fc30 <_svfprintf_r+0x948>
 801fc9c:	1d33      	adds	r3, r6, #4
 801fc9e:	f8d6 b000 	ldr.w	fp, [r6]
 801fca2:	9308      	str	r3, [sp, #32]
 801fca4:	2600      	movs	r6, #0
 801fca6:	1c68      	adds	r0, r5, #1
 801fca8:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 801fcac:	f000 80e1 	beq.w	801fe72 <_svfprintf_r+0xb8a>
 801fcb0:	462a      	mov	r2, r5
 801fcb2:	4631      	mov	r1, r6
 801fcb4:	4658      	mov	r0, fp
 801fcb6:	f7e8 f9cb 	bl	8008050 <memchr>
 801fcba:	4681      	mov	r9, r0
 801fcbc:	2800      	cmp	r0, #0
 801fcbe:	f43f ad74 	beq.w	801f7aa <_svfprintf_r+0x4c2>
 801fcc2:	eba0 050b 	sub.w	r5, r0, fp
 801fcc6:	46b1      	mov	r9, r6
 801fcc8:	9610      	str	r6, [sp, #64]	; 0x40
 801fcca:	4637      	mov	r7, r6
 801fccc:	9607      	str	r6, [sp, #28]
 801fcce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fcd0:	42ab      	cmp	r3, r5
 801fcd2:	bfb8      	it	lt
 801fcd4:	462b      	movlt	r3, r5
 801fcd6:	9311      	str	r3, [sp, #68]	; 0x44
 801fcd8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801fcdc:	b113      	cbz	r3, 801fce4 <_svfprintf_r+0x9fc>
 801fcde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fce0:	3301      	adds	r3, #1
 801fce2:	9311      	str	r3, [sp, #68]	; 0x44
 801fce4:	f01a 0302 	ands.w	r3, sl, #2
 801fce8:	931c      	str	r3, [sp, #112]	; 0x70
 801fcea:	bf1e      	ittt	ne
 801fcec:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801fcee:	3302      	addne	r3, #2
 801fcf0:	9311      	strne	r3, [sp, #68]	; 0x44
 801fcf2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801fcf6:	931d      	str	r3, [sp, #116]	; 0x74
 801fcf8:	d122      	bne.n	801fd40 <_svfprintf_r+0xa58>
 801fcfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fcfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fcfe:	1a9b      	subs	r3, r3, r2
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	9313      	str	r3, [sp, #76]	; 0x4c
 801fd04:	dd1c      	ble.n	801fd40 <_svfprintf_r+0xa58>
 801fd06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fd08:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801fd0c:	2810      	cmp	r0, #16
 801fd0e:	4890      	ldr	r0, [pc, #576]	; (801ff50 <_svfprintf_r+0xc68>)
 801fd10:	6020      	str	r0, [r4, #0]
 801fd12:	f102 0201 	add.w	r2, r2, #1
 801fd16:	f104 0108 	add.w	r1, r4, #8
 801fd1a:	f300 8188 	bgt.w	802002e <_svfprintf_r+0xd46>
 801fd1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fd20:	6060      	str	r0, [r4, #4]
 801fd22:	4403      	add	r3, r0
 801fd24:	2a07      	cmp	r2, #7
 801fd26:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801fd2a:	f340 8195 	ble.w	8020058 <_svfprintf_r+0xd70>
 801fd2e:	aa26      	add	r2, sp, #152	; 0x98
 801fd30:	4641      	mov	r1, r8
 801fd32:	9803      	ldr	r0, [sp, #12]
 801fd34:	f001 ff7a 	bl	8021c2c <__ssprint_r>
 801fd38:	2800      	cmp	r0, #0
 801fd3a:	f040 84c1 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 801fd3e:	ac29      	add	r4, sp, #164	; 0xa4
 801fd40:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801fd44:	b173      	cbz	r3, 801fd64 <_svfprintf_r+0xa7c>
 801fd46:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 801fd4a:	6023      	str	r3, [r4, #0]
 801fd4c:	2301      	movs	r3, #1
 801fd4e:	6063      	str	r3, [r4, #4]
 801fd50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fd52:	3301      	adds	r3, #1
 801fd54:	9328      	str	r3, [sp, #160]	; 0xa0
 801fd56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fd58:	3301      	adds	r3, #1
 801fd5a:	2b07      	cmp	r3, #7
 801fd5c:	9327      	str	r3, [sp, #156]	; 0x9c
 801fd5e:	f300 817d 	bgt.w	802005c <_svfprintf_r+0xd74>
 801fd62:	3408      	adds	r4, #8
 801fd64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fd66:	b16b      	cbz	r3, 801fd84 <_svfprintf_r+0xa9c>
 801fd68:	ab1f      	add	r3, sp, #124	; 0x7c
 801fd6a:	6023      	str	r3, [r4, #0]
 801fd6c:	2302      	movs	r3, #2
 801fd6e:	6063      	str	r3, [r4, #4]
 801fd70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fd72:	3302      	adds	r3, #2
 801fd74:	9328      	str	r3, [sp, #160]	; 0xa0
 801fd76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fd78:	3301      	adds	r3, #1
 801fd7a:	2b07      	cmp	r3, #7
 801fd7c:	9327      	str	r3, [sp, #156]	; 0x9c
 801fd7e:	f300 8177 	bgt.w	8020070 <_svfprintf_r+0xd88>
 801fd82:	3408      	adds	r4, #8
 801fd84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fd86:	2b80      	cmp	r3, #128	; 0x80
 801fd88:	d122      	bne.n	801fdd0 <_svfprintf_r+0xae8>
 801fd8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fd8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd8e:	1a9b      	subs	r3, r3, r2
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	9313      	str	r3, [sp, #76]	; 0x4c
 801fd94:	dd1c      	ble.n	801fdd0 <_svfprintf_r+0xae8>
 801fd96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fd98:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801fd9c:	2810      	cmp	r0, #16
 801fd9e:	486d      	ldr	r0, [pc, #436]	; (801ff54 <_svfprintf_r+0xc6c>)
 801fda0:	6020      	str	r0, [r4, #0]
 801fda2:	f102 0201 	add.w	r2, r2, #1
 801fda6:	f104 0108 	add.w	r1, r4, #8
 801fdaa:	f300 816b 	bgt.w	8020084 <_svfprintf_r+0xd9c>
 801fdae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fdb0:	6060      	str	r0, [r4, #4]
 801fdb2:	4403      	add	r3, r0
 801fdb4:	2a07      	cmp	r2, #7
 801fdb6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801fdba:	f340 8178 	ble.w	80200ae <_svfprintf_r+0xdc6>
 801fdbe:	aa26      	add	r2, sp, #152	; 0x98
 801fdc0:	4641      	mov	r1, r8
 801fdc2:	9803      	ldr	r0, [sp, #12]
 801fdc4:	f001 ff32 	bl	8021c2c <__ssprint_r>
 801fdc8:	2800      	cmp	r0, #0
 801fdca:	f040 8479 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 801fdce:	ac29      	add	r4, sp, #164	; 0xa4
 801fdd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fdd2:	1b5b      	subs	r3, r3, r5
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	9310      	str	r3, [sp, #64]	; 0x40
 801fdd8:	dd1c      	ble.n	801fe14 <_svfprintf_r+0xb2c>
 801fdda:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fddc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801fde0:	2810      	cmp	r0, #16
 801fde2:	485c      	ldr	r0, [pc, #368]	; (801ff54 <_svfprintf_r+0xc6c>)
 801fde4:	6020      	str	r0, [r4, #0]
 801fde6:	f102 0201 	add.w	r2, r2, #1
 801fdea:	f104 0108 	add.w	r1, r4, #8
 801fdee:	f300 8160 	bgt.w	80200b2 <_svfprintf_r+0xdca>
 801fdf2:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fdf4:	6060      	str	r0, [r4, #4]
 801fdf6:	4403      	add	r3, r0
 801fdf8:	2a07      	cmp	r2, #7
 801fdfa:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801fdfe:	f340 816d 	ble.w	80200dc <_svfprintf_r+0xdf4>
 801fe02:	aa26      	add	r2, sp, #152	; 0x98
 801fe04:	4641      	mov	r1, r8
 801fe06:	9803      	ldr	r0, [sp, #12]
 801fe08:	f001 ff10 	bl	8021c2c <__ssprint_r>
 801fe0c:	2800      	cmp	r0, #0
 801fe0e:	f040 8457 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 801fe12:	ac29      	add	r4, sp, #164	; 0xa4
 801fe14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe16:	9310      	str	r3, [sp, #64]	; 0x40
 801fe18:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801fe1c:	f040 8160 	bne.w	80200e0 <_svfprintf_r+0xdf8>
 801fe20:	e9c4 b500 	strd	fp, r5, [r4]
 801fe24:	441d      	add	r5, r3
 801fe26:	9528      	str	r5, [sp, #160]	; 0xa0
 801fe28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fe2a:	3301      	adds	r3, #1
 801fe2c:	2b07      	cmp	r3, #7
 801fe2e:	9327      	str	r3, [sp, #156]	; 0x9c
 801fe30:	f300 819c 	bgt.w	802016c <_svfprintf_r+0xe84>
 801fe34:	3408      	adds	r4, #8
 801fe36:	f01a 0f04 	tst.w	sl, #4
 801fe3a:	f040 8423 	bne.w	8020684 <_svfprintf_r+0x139c>
 801fe3e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801fe42:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fe44:	428a      	cmp	r2, r1
 801fe46:	bfac      	ite	ge
 801fe48:	189b      	addge	r3, r3, r2
 801fe4a:	185b      	addlt	r3, r3, r1
 801fe4c:	930e      	str	r3, [sp, #56]	; 0x38
 801fe4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe50:	b13b      	cbz	r3, 801fe62 <_svfprintf_r+0xb7a>
 801fe52:	aa26      	add	r2, sp, #152	; 0x98
 801fe54:	4641      	mov	r1, r8
 801fe56:	9803      	ldr	r0, [sp, #12]
 801fe58:	f001 fee8 	bl	8021c2c <__ssprint_r>
 801fe5c:	2800      	cmp	r0, #0
 801fe5e:	f040 842f 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 801fe62:	2300      	movs	r3, #0
 801fe64:	9327      	str	r3, [sp, #156]	; 0x9c
 801fe66:	f1b9 0f00 	cmp.w	r9, #0
 801fe6a:	f040 8445 	bne.w	80206f8 <_svfprintf_r+0x1410>
 801fe6e:	ac29      	add	r4, sp, #164	; 0xa4
 801fe70:	e6b7      	b.n	801fbe2 <_svfprintf_r+0x8fa>
 801fe72:	4658      	mov	r0, fp
 801fe74:	f7e8 f8e4 	bl	8008040 <strlen>
 801fe78:	46b1      	mov	r9, r6
 801fe7a:	4605      	mov	r5, r0
 801fe7c:	e495      	b.n	801f7aa <_svfprintf_r+0x4c2>
 801fe7e:	f04a 0a10 	orr.w	sl, sl, #16
 801fe82:	f01a 0f20 	tst.w	sl, #32
 801fe86:	d009      	beq.n	801fe9c <_svfprintf_r+0xbb4>
 801fe88:	3607      	adds	r6, #7
 801fe8a:	f026 0607 	bic.w	r6, r6, #7
 801fe8e:	f106 0308 	add.w	r3, r6, #8
 801fe92:	e9d6 6700 	ldrd	r6, r7, [r6]
 801fe96:	9308      	str	r3, [sp, #32]
 801fe98:	2301      	movs	r3, #1
 801fe9a:	e6c9      	b.n	801fc30 <_svfprintf_r+0x948>
 801fe9c:	1d33      	adds	r3, r6, #4
 801fe9e:	f01a 0f10 	tst.w	sl, #16
 801fea2:	9308      	str	r3, [sp, #32]
 801fea4:	d001      	beq.n	801feaa <_svfprintf_r+0xbc2>
 801fea6:	6836      	ldr	r6, [r6, #0]
 801fea8:	e003      	b.n	801feb2 <_svfprintf_r+0xbca>
 801feaa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801feae:	d002      	beq.n	801feb6 <_svfprintf_r+0xbce>
 801feb0:	8836      	ldrh	r6, [r6, #0]
 801feb2:	2700      	movs	r7, #0
 801feb4:	e7f0      	b.n	801fe98 <_svfprintf_r+0xbb0>
 801feb6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801feba:	d0f4      	beq.n	801fea6 <_svfprintf_r+0xbbe>
 801febc:	7836      	ldrb	r6, [r6, #0]
 801febe:	e7f8      	b.n	801feb2 <_svfprintf_r+0xbca>
 801fec0:	4b22      	ldr	r3, [pc, #136]	; (801ff4c <_svfprintf_r+0xc64>)
 801fec2:	f7ff bb48 	b.w	801f556 <_svfprintf_r+0x26e>
 801fec6:	1d33      	adds	r3, r6, #4
 801fec8:	f01a 0f10 	tst.w	sl, #16
 801fecc:	9308      	str	r3, [sp, #32]
 801fece:	d001      	beq.n	801fed4 <_svfprintf_r+0xbec>
 801fed0:	6836      	ldr	r6, [r6, #0]
 801fed2:	e003      	b.n	801fedc <_svfprintf_r+0xbf4>
 801fed4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801fed8:	d003      	beq.n	801fee2 <_svfprintf_r+0xbfa>
 801feda:	8836      	ldrh	r6, [r6, #0]
 801fedc:	2700      	movs	r7, #0
 801fede:	f7ff bb47 	b.w	801f570 <_svfprintf_r+0x288>
 801fee2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801fee6:	d0f3      	beq.n	801fed0 <_svfprintf_r+0xbe8>
 801fee8:	7836      	ldrb	r6, [r6, #0]
 801feea:	e7f7      	b.n	801fedc <_svfprintf_r+0xbf4>
 801feec:	4652      	mov	r2, sl
 801feee:	2301      	movs	r3, #1
 801fef0:	e6a5      	b.n	801fc3e <_svfprintf_r+0x956>
 801fef2:	2b01      	cmp	r3, #1
 801fef4:	f43f ac04 	beq.w	801f700 <_svfprintf_r+0x418>
 801fef8:	2b02      	cmp	r3, #2
 801fefa:	d06c      	beq.n	801ffd6 <_svfprintf_r+0xcee>
 801fefc:	ab52      	add	r3, sp, #328	; 0x148
 801fefe:	08f1      	lsrs	r1, r6, #3
 801ff00:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801ff04:	08f8      	lsrs	r0, r7, #3
 801ff06:	f006 0207 	and.w	r2, r6, #7
 801ff0a:	4607      	mov	r7, r0
 801ff0c:	460e      	mov	r6, r1
 801ff0e:	3230      	adds	r2, #48	; 0x30
 801ff10:	ea56 0107 	orrs.w	r1, r6, r7
 801ff14:	f103 3bff 	add.w	fp, r3, #4294967295
 801ff18:	f803 2c01 	strb.w	r2, [r3, #-1]
 801ff1c:	d114      	bne.n	801ff48 <_svfprintf_r+0xc60>
 801ff1e:	f01a 0f01 	tst.w	sl, #1
 801ff22:	d006      	beq.n	801ff32 <_svfprintf_r+0xc4a>
 801ff24:	2a30      	cmp	r2, #48	; 0x30
 801ff26:	d004      	beq.n	801ff32 <_svfprintf_r+0xc4a>
 801ff28:	2230      	movs	r2, #48	; 0x30
 801ff2a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801ff2e:	f1a3 0b02 	sub.w	fp, r3, #2
 801ff32:	ab52      	add	r3, sp, #328	; 0x148
 801ff34:	9510      	str	r5, [sp, #64]	; 0x40
 801ff36:	f04f 0900 	mov.w	r9, #0
 801ff3a:	eba3 050b 	sub.w	r5, r3, fp
 801ff3e:	464f      	mov	r7, r9
 801ff40:	f8cd 901c 	str.w	r9, [sp, #28]
 801ff44:	464e      	mov	r6, r9
 801ff46:	e6c2      	b.n	801fcce <_svfprintf_r+0x9e6>
 801ff48:	465b      	mov	r3, fp
 801ff4a:	e7d8      	b.n	801fefe <_svfprintf_r+0xc16>
 801ff4c:	08035d3a 	.word	0x08035d3a
 801ff50:	08035d5c 	.word	0x08035d5c
 801ff54:	08035d6c 	.word	0x08035d6c
 801ff58:	2300      	movs	r3, #0
 801ff5a:	9304      	str	r3, [sp, #16]
 801ff5c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 801ff60:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801ff64:	9307      	str	r3, [sp, #28]
 801ff66:	220a      	movs	r2, #10
 801ff68:	2300      	movs	r3, #0
 801ff6a:	4630      	mov	r0, r6
 801ff6c:	4639      	mov	r1, r7
 801ff6e:	f7e8 fda3 	bl	8008ab8 <__aeabi_uldivmod>
 801ff72:	9b04      	ldr	r3, [sp, #16]
 801ff74:	3301      	adds	r3, #1
 801ff76:	9304      	str	r3, [sp, #16]
 801ff78:	9b07      	ldr	r3, [sp, #28]
 801ff7a:	3230      	adds	r2, #48	; 0x30
 801ff7c:	f109 3bff 	add.w	fp, r9, #4294967295
 801ff80:	f809 2c01 	strb.w	r2, [r9, #-1]
 801ff84:	b1d3      	cbz	r3, 801ffbc <_svfprintf_r+0xcd4>
 801ff86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff88:	9a04      	ldr	r2, [sp, #16]
 801ff8a:	781b      	ldrb	r3, [r3, #0]
 801ff8c:	429a      	cmp	r2, r3
 801ff8e:	d115      	bne.n	801ffbc <_svfprintf_r+0xcd4>
 801ff90:	2aff      	cmp	r2, #255	; 0xff
 801ff92:	d013      	beq.n	801ffbc <_svfprintf_r+0xcd4>
 801ff94:	2f00      	cmp	r7, #0
 801ff96:	bf08      	it	eq
 801ff98:	2e0a      	cmpeq	r6, #10
 801ff9a:	d30f      	bcc.n	801ffbc <_svfprintf_r+0xcd4>
 801ff9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ff9e:	9919      	ldr	r1, [sp, #100]	; 0x64
 801ffa0:	ebab 0b03 	sub.w	fp, fp, r3
 801ffa4:	461a      	mov	r2, r3
 801ffa6:	4658      	mov	r0, fp
 801ffa8:	f7ff f96e 	bl	801f288 <strncpy>
 801ffac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffae:	785b      	ldrb	r3, [r3, #1]
 801ffb0:	b11b      	cbz	r3, 801ffba <_svfprintf_r+0xcd2>
 801ffb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffb4:	3301      	adds	r3, #1
 801ffb6:	9309      	str	r3, [sp, #36]	; 0x24
 801ffb8:	2300      	movs	r3, #0
 801ffba:	9304      	str	r3, [sp, #16]
 801ffbc:	2300      	movs	r3, #0
 801ffbe:	4630      	mov	r0, r6
 801ffc0:	4639      	mov	r1, r7
 801ffc2:	220a      	movs	r2, #10
 801ffc4:	f7e8 fd78 	bl	8008ab8 <__aeabi_uldivmod>
 801ffc8:	4606      	mov	r6, r0
 801ffca:	460f      	mov	r7, r1
 801ffcc:	ea56 0307 	orrs.w	r3, r6, r7
 801ffd0:	d0af      	beq.n	801ff32 <_svfprintf_r+0xc4a>
 801ffd2:	46d9      	mov	r9, fp
 801ffd4:	e7c7      	b.n	801ff66 <_svfprintf_r+0xc7e>
 801ffd6:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801ffda:	f006 030f 	and.w	r3, r6, #15
 801ffde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ffe0:	5cd3      	ldrb	r3, [r2, r3]
 801ffe2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801ffe6:	0933      	lsrs	r3, r6, #4
 801ffe8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801ffec:	093a      	lsrs	r2, r7, #4
 801ffee:	461e      	mov	r6, r3
 801fff0:	4617      	mov	r7, r2
 801fff2:	ea56 0307 	orrs.w	r3, r6, r7
 801fff6:	d1f0      	bne.n	801ffda <_svfprintf_r+0xcf2>
 801fff8:	e79b      	b.n	801ff32 <_svfprintf_r+0xc4a>
 801fffa:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d197      	bne.n	801ff32 <_svfprintf_r+0xc4a>
 8020002:	07d2      	lsls	r2, r2, #31
 8020004:	bf44      	itt	mi
 8020006:	2330      	movmi	r3, #48	; 0x30
 8020008:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 802000c:	e791      	b.n	801ff32 <_svfprintf_r+0xc4a>
 802000e:	9b06      	ldr	r3, [sp, #24]
 8020010:	2b00      	cmp	r3, #0
 8020012:	f000 8377 	beq.w	8020704 <_svfprintf_r+0x141c>
 8020016:	2000      	movs	r0, #0
 8020018:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 802001c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8020020:	9608      	str	r6, [sp, #32]
 8020022:	f7ff bb49 	b.w	801f6b8 <_svfprintf_r+0x3d0>
 8020026:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 802002a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802002c:	e4ec      	b.n	801fa08 <_svfprintf_r+0x720>
 802002e:	2010      	movs	r0, #16
 8020030:	4403      	add	r3, r0
 8020032:	2a07      	cmp	r2, #7
 8020034:	6060      	str	r0, [r4, #4]
 8020036:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 802003a:	dd08      	ble.n	802004e <_svfprintf_r+0xd66>
 802003c:	aa26      	add	r2, sp, #152	; 0x98
 802003e:	4641      	mov	r1, r8
 8020040:	9803      	ldr	r0, [sp, #12]
 8020042:	f001 fdf3 	bl	8021c2c <__ssprint_r>
 8020046:	2800      	cmp	r0, #0
 8020048:	f040 833a 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 802004c:	a929      	add	r1, sp, #164	; 0xa4
 802004e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020050:	3b10      	subs	r3, #16
 8020052:	9313      	str	r3, [sp, #76]	; 0x4c
 8020054:	460c      	mov	r4, r1
 8020056:	e656      	b.n	801fd06 <_svfprintf_r+0xa1e>
 8020058:	460c      	mov	r4, r1
 802005a:	e671      	b.n	801fd40 <_svfprintf_r+0xa58>
 802005c:	aa26      	add	r2, sp, #152	; 0x98
 802005e:	4641      	mov	r1, r8
 8020060:	9803      	ldr	r0, [sp, #12]
 8020062:	f001 fde3 	bl	8021c2c <__ssprint_r>
 8020066:	2800      	cmp	r0, #0
 8020068:	f040 832a 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 802006c:	ac29      	add	r4, sp, #164	; 0xa4
 802006e:	e679      	b.n	801fd64 <_svfprintf_r+0xa7c>
 8020070:	aa26      	add	r2, sp, #152	; 0x98
 8020072:	4641      	mov	r1, r8
 8020074:	9803      	ldr	r0, [sp, #12]
 8020076:	f001 fdd9 	bl	8021c2c <__ssprint_r>
 802007a:	2800      	cmp	r0, #0
 802007c:	f040 8320 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 8020080:	ac29      	add	r4, sp, #164	; 0xa4
 8020082:	e67f      	b.n	801fd84 <_svfprintf_r+0xa9c>
 8020084:	2010      	movs	r0, #16
 8020086:	4403      	add	r3, r0
 8020088:	2a07      	cmp	r2, #7
 802008a:	6060      	str	r0, [r4, #4]
 802008c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8020090:	dd08      	ble.n	80200a4 <_svfprintf_r+0xdbc>
 8020092:	aa26      	add	r2, sp, #152	; 0x98
 8020094:	4641      	mov	r1, r8
 8020096:	9803      	ldr	r0, [sp, #12]
 8020098:	f001 fdc8 	bl	8021c2c <__ssprint_r>
 802009c:	2800      	cmp	r0, #0
 802009e:	f040 830f 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80200a2:	a929      	add	r1, sp, #164	; 0xa4
 80200a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80200a6:	3b10      	subs	r3, #16
 80200a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80200aa:	460c      	mov	r4, r1
 80200ac:	e673      	b.n	801fd96 <_svfprintf_r+0xaae>
 80200ae:	460c      	mov	r4, r1
 80200b0:	e68e      	b.n	801fdd0 <_svfprintf_r+0xae8>
 80200b2:	2010      	movs	r0, #16
 80200b4:	4403      	add	r3, r0
 80200b6:	2a07      	cmp	r2, #7
 80200b8:	6060      	str	r0, [r4, #4]
 80200ba:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80200be:	dd08      	ble.n	80200d2 <_svfprintf_r+0xdea>
 80200c0:	aa26      	add	r2, sp, #152	; 0x98
 80200c2:	4641      	mov	r1, r8
 80200c4:	9803      	ldr	r0, [sp, #12]
 80200c6:	f001 fdb1 	bl	8021c2c <__ssprint_r>
 80200ca:	2800      	cmp	r0, #0
 80200cc:	f040 82f8 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80200d0:	a929      	add	r1, sp, #164	; 0xa4
 80200d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80200d4:	3b10      	subs	r3, #16
 80200d6:	9310      	str	r3, [sp, #64]	; 0x40
 80200d8:	460c      	mov	r4, r1
 80200da:	e67e      	b.n	801fdda <_svfprintf_r+0xaf2>
 80200dc:	460c      	mov	r4, r1
 80200de:	e699      	b.n	801fe14 <_svfprintf_r+0xb2c>
 80200e0:	9b06      	ldr	r3, [sp, #24]
 80200e2:	2b65      	cmp	r3, #101	; 0x65
 80200e4:	f340 8234 	ble.w	8020550 <_svfprintf_r+0x1268>
 80200e8:	2200      	movs	r2, #0
 80200ea:	2300      	movs	r3, #0
 80200ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80200f0:	f7e8 fc22 	bl	8008938 <__aeabi_dcmpeq>
 80200f4:	2800      	cmp	r0, #0
 80200f6:	d069      	beq.n	80201cc <_svfprintf_r+0xee4>
 80200f8:	4b6e      	ldr	r3, [pc, #440]	; (80202b4 <_svfprintf_r+0xfcc>)
 80200fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80200fc:	6023      	str	r3, [r4, #0]
 80200fe:	2301      	movs	r3, #1
 8020100:	441d      	add	r5, r3
 8020102:	6063      	str	r3, [r4, #4]
 8020104:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020106:	9528      	str	r5, [sp, #160]	; 0xa0
 8020108:	3301      	adds	r3, #1
 802010a:	2b07      	cmp	r3, #7
 802010c:	9327      	str	r3, [sp, #156]	; 0x9c
 802010e:	dc37      	bgt.n	8020180 <_svfprintf_r+0xe98>
 8020110:	3408      	adds	r4, #8
 8020112:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020114:	9a04      	ldr	r2, [sp, #16]
 8020116:	4293      	cmp	r3, r2
 8020118:	db03      	blt.n	8020122 <_svfprintf_r+0xe3a>
 802011a:	f01a 0f01 	tst.w	sl, #1
 802011e:	f43f ae8a 	beq.w	801fe36 <_svfprintf_r+0xb4e>
 8020122:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020124:	6023      	str	r3, [r4, #0]
 8020126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020128:	6063      	str	r3, [r4, #4]
 802012a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802012c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802012e:	4413      	add	r3, r2
 8020130:	9328      	str	r3, [sp, #160]	; 0xa0
 8020132:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020134:	3301      	adds	r3, #1
 8020136:	2b07      	cmp	r3, #7
 8020138:	9327      	str	r3, [sp, #156]	; 0x9c
 802013a:	dc2b      	bgt.n	8020194 <_svfprintf_r+0xeac>
 802013c:	3408      	adds	r4, #8
 802013e:	9b04      	ldr	r3, [sp, #16]
 8020140:	1e5d      	subs	r5, r3, #1
 8020142:	2d00      	cmp	r5, #0
 8020144:	f77f ae77 	ble.w	801fe36 <_svfprintf_r+0xb4e>
 8020148:	4e5b      	ldr	r6, [pc, #364]	; (80202b8 <_svfprintf_r+0xfd0>)
 802014a:	2710      	movs	r7, #16
 802014c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8020150:	2d10      	cmp	r5, #16
 8020152:	f103 0301 	add.w	r3, r3, #1
 8020156:	f104 0108 	add.w	r1, r4, #8
 802015a:	6026      	str	r6, [r4, #0]
 802015c:	dc24      	bgt.n	80201a8 <_svfprintf_r+0xec0>
 802015e:	6065      	str	r5, [r4, #4]
 8020160:	2b07      	cmp	r3, #7
 8020162:	4415      	add	r5, r2
 8020164:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8020168:	f340 8289 	ble.w	802067e <_svfprintf_r+0x1396>
 802016c:	aa26      	add	r2, sp, #152	; 0x98
 802016e:	4641      	mov	r1, r8
 8020170:	9803      	ldr	r0, [sp, #12]
 8020172:	f001 fd5b 	bl	8021c2c <__ssprint_r>
 8020176:	2800      	cmp	r0, #0
 8020178:	f040 82a2 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 802017c:	ac29      	add	r4, sp, #164	; 0xa4
 802017e:	e65a      	b.n	801fe36 <_svfprintf_r+0xb4e>
 8020180:	aa26      	add	r2, sp, #152	; 0x98
 8020182:	4641      	mov	r1, r8
 8020184:	9803      	ldr	r0, [sp, #12]
 8020186:	f001 fd51 	bl	8021c2c <__ssprint_r>
 802018a:	2800      	cmp	r0, #0
 802018c:	f040 8298 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 8020190:	ac29      	add	r4, sp, #164	; 0xa4
 8020192:	e7be      	b.n	8020112 <_svfprintf_r+0xe2a>
 8020194:	aa26      	add	r2, sp, #152	; 0x98
 8020196:	4641      	mov	r1, r8
 8020198:	9803      	ldr	r0, [sp, #12]
 802019a:	f001 fd47 	bl	8021c2c <__ssprint_r>
 802019e:	2800      	cmp	r0, #0
 80201a0:	f040 828e 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80201a4:	ac29      	add	r4, sp, #164	; 0xa4
 80201a6:	e7ca      	b.n	802013e <_svfprintf_r+0xe56>
 80201a8:	3210      	adds	r2, #16
 80201aa:	2b07      	cmp	r3, #7
 80201ac:	6067      	str	r7, [r4, #4]
 80201ae:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80201b2:	dd08      	ble.n	80201c6 <_svfprintf_r+0xede>
 80201b4:	aa26      	add	r2, sp, #152	; 0x98
 80201b6:	4641      	mov	r1, r8
 80201b8:	9803      	ldr	r0, [sp, #12]
 80201ba:	f001 fd37 	bl	8021c2c <__ssprint_r>
 80201be:	2800      	cmp	r0, #0
 80201c0:	f040 827e 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80201c4:	a929      	add	r1, sp, #164	; 0xa4
 80201c6:	3d10      	subs	r5, #16
 80201c8:	460c      	mov	r4, r1
 80201ca:	e7bf      	b.n	802014c <_svfprintf_r+0xe64>
 80201cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	dc74      	bgt.n	80202bc <_svfprintf_r+0xfd4>
 80201d2:	4b38      	ldr	r3, [pc, #224]	; (80202b4 <_svfprintf_r+0xfcc>)
 80201d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80201d6:	6023      	str	r3, [r4, #0]
 80201d8:	2301      	movs	r3, #1
 80201da:	441d      	add	r5, r3
 80201dc:	6063      	str	r3, [r4, #4]
 80201de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80201e0:	9528      	str	r5, [sp, #160]	; 0xa0
 80201e2:	3301      	adds	r3, #1
 80201e4:	2b07      	cmp	r3, #7
 80201e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80201e8:	dc3e      	bgt.n	8020268 <_svfprintf_r+0xf80>
 80201ea:	3408      	adds	r4, #8
 80201ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80201ee:	b92b      	cbnz	r3, 80201fc <_svfprintf_r+0xf14>
 80201f0:	9b04      	ldr	r3, [sp, #16]
 80201f2:	b91b      	cbnz	r3, 80201fc <_svfprintf_r+0xf14>
 80201f4:	f01a 0f01 	tst.w	sl, #1
 80201f8:	f43f ae1d 	beq.w	801fe36 <_svfprintf_r+0xb4e>
 80201fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80201fe:	6023      	str	r3, [r4, #0]
 8020200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020202:	6063      	str	r3, [r4, #4]
 8020204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020206:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020208:	4413      	add	r3, r2
 802020a:	9328      	str	r3, [sp, #160]	; 0xa0
 802020c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802020e:	3301      	adds	r3, #1
 8020210:	2b07      	cmp	r3, #7
 8020212:	9327      	str	r3, [sp, #156]	; 0x9c
 8020214:	dc32      	bgt.n	802027c <_svfprintf_r+0xf94>
 8020216:	3408      	adds	r4, #8
 8020218:	9d20      	ldr	r5, [sp, #128]	; 0x80
 802021a:	2d00      	cmp	r5, #0
 802021c:	da1b      	bge.n	8020256 <_svfprintf_r+0xf6e>
 802021e:	4e26      	ldr	r6, [pc, #152]	; (80202b8 <_svfprintf_r+0xfd0>)
 8020220:	426d      	negs	r5, r5
 8020222:	4623      	mov	r3, r4
 8020224:	2710      	movs	r7, #16
 8020226:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 802022a:	2d10      	cmp	r5, #16
 802022c:	f102 0201 	add.w	r2, r2, #1
 8020230:	f104 0408 	add.w	r4, r4, #8
 8020234:	601e      	str	r6, [r3, #0]
 8020236:	dc2b      	bgt.n	8020290 <_svfprintf_r+0xfa8>
 8020238:	605d      	str	r5, [r3, #4]
 802023a:	2a07      	cmp	r2, #7
 802023c:	440d      	add	r5, r1
 802023e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8020242:	dd08      	ble.n	8020256 <_svfprintf_r+0xf6e>
 8020244:	aa26      	add	r2, sp, #152	; 0x98
 8020246:	4641      	mov	r1, r8
 8020248:	9803      	ldr	r0, [sp, #12]
 802024a:	f001 fcef 	bl	8021c2c <__ssprint_r>
 802024e:	2800      	cmp	r0, #0
 8020250:	f040 8236 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 8020254:	ac29      	add	r4, sp, #164	; 0xa4
 8020256:	9b04      	ldr	r3, [sp, #16]
 8020258:	6063      	str	r3, [r4, #4]
 802025a:	9a04      	ldr	r2, [sp, #16]
 802025c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802025e:	f8c4 b000 	str.w	fp, [r4]
 8020262:	4413      	add	r3, r2
 8020264:	9328      	str	r3, [sp, #160]	; 0xa0
 8020266:	e5df      	b.n	801fe28 <_svfprintf_r+0xb40>
 8020268:	aa26      	add	r2, sp, #152	; 0x98
 802026a:	4641      	mov	r1, r8
 802026c:	9803      	ldr	r0, [sp, #12]
 802026e:	f001 fcdd 	bl	8021c2c <__ssprint_r>
 8020272:	2800      	cmp	r0, #0
 8020274:	f040 8224 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 8020278:	ac29      	add	r4, sp, #164	; 0xa4
 802027a:	e7b7      	b.n	80201ec <_svfprintf_r+0xf04>
 802027c:	aa26      	add	r2, sp, #152	; 0x98
 802027e:	4641      	mov	r1, r8
 8020280:	9803      	ldr	r0, [sp, #12]
 8020282:	f001 fcd3 	bl	8021c2c <__ssprint_r>
 8020286:	2800      	cmp	r0, #0
 8020288:	f040 821a 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 802028c:	ac29      	add	r4, sp, #164	; 0xa4
 802028e:	e7c3      	b.n	8020218 <_svfprintf_r+0xf30>
 8020290:	3110      	adds	r1, #16
 8020292:	2a07      	cmp	r2, #7
 8020294:	605f      	str	r7, [r3, #4]
 8020296:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 802029a:	dd08      	ble.n	80202ae <_svfprintf_r+0xfc6>
 802029c:	aa26      	add	r2, sp, #152	; 0x98
 802029e:	4641      	mov	r1, r8
 80202a0:	9803      	ldr	r0, [sp, #12]
 80202a2:	f001 fcc3 	bl	8021c2c <__ssprint_r>
 80202a6:	2800      	cmp	r0, #0
 80202a8:	f040 820a 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80202ac:	ac29      	add	r4, sp, #164	; 0xa4
 80202ae:	3d10      	subs	r5, #16
 80202b0:	4623      	mov	r3, r4
 80202b2:	e7b8      	b.n	8020226 <_svfprintf_r+0xf3e>
 80202b4:	08035f90 	.word	0x08035f90
 80202b8:	08035d6c 	.word	0x08035d6c
 80202bc:	9b04      	ldr	r3, [sp, #16]
 80202be:	42b3      	cmp	r3, r6
 80202c0:	bfa8      	it	ge
 80202c2:	4633      	movge	r3, r6
 80202c4:	2b00      	cmp	r3, #0
 80202c6:	461d      	mov	r5, r3
 80202c8:	dd0b      	ble.n	80202e2 <_svfprintf_r+0xffa>
 80202ca:	e9c4 b300 	strd	fp, r3, [r4]
 80202ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202d0:	442b      	add	r3, r5
 80202d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80202d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80202d6:	3301      	adds	r3, #1
 80202d8:	2b07      	cmp	r3, #7
 80202da:	9327      	str	r3, [sp, #156]	; 0x9c
 80202dc:	f300 8086 	bgt.w	80203ec <_svfprintf_r+0x1104>
 80202e0:	3408      	adds	r4, #8
 80202e2:	2d00      	cmp	r5, #0
 80202e4:	bfac      	ite	ge
 80202e6:	1b75      	subge	r5, r6, r5
 80202e8:	4635      	movlt	r5, r6
 80202ea:	2d00      	cmp	r5, #0
 80202ec:	dd19      	ble.n	8020322 <_svfprintf_r+0x103a>
 80202ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80202f2:	4896      	ldr	r0, [pc, #600]	; (802054c <_svfprintf_r+0x1264>)
 80202f4:	6020      	str	r0, [r4, #0]
 80202f6:	2d10      	cmp	r5, #16
 80202f8:	f103 0301 	add.w	r3, r3, #1
 80202fc:	f104 0108 	add.w	r1, r4, #8
 8020300:	dc7e      	bgt.n	8020400 <_svfprintf_r+0x1118>
 8020302:	6065      	str	r5, [r4, #4]
 8020304:	2b07      	cmp	r3, #7
 8020306:	4415      	add	r5, r2
 8020308:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802030c:	f340 808b 	ble.w	8020426 <_svfprintf_r+0x113e>
 8020310:	aa26      	add	r2, sp, #152	; 0x98
 8020312:	4641      	mov	r1, r8
 8020314:	9803      	ldr	r0, [sp, #12]
 8020316:	f001 fc89 	bl	8021c2c <__ssprint_r>
 802031a:	2800      	cmp	r0, #0
 802031c:	f040 81d0 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 8020320:	ac29      	add	r4, sp, #164	; 0xa4
 8020322:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8020326:	445e      	add	r6, fp
 8020328:	d009      	beq.n	802033e <_svfprintf_r+0x1056>
 802032a:	9b07      	ldr	r3, [sp, #28]
 802032c:	2b00      	cmp	r3, #0
 802032e:	d17c      	bne.n	802042a <_svfprintf_r+0x1142>
 8020330:	2f00      	cmp	r7, #0
 8020332:	d17c      	bne.n	802042e <_svfprintf_r+0x1146>
 8020334:	9b04      	ldr	r3, [sp, #16]
 8020336:	445b      	add	r3, fp
 8020338:	429e      	cmp	r6, r3
 802033a:	bf28      	it	cs
 802033c:	461e      	movcs	r6, r3
 802033e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020340:	9a04      	ldr	r2, [sp, #16]
 8020342:	4293      	cmp	r3, r2
 8020344:	db02      	blt.n	802034c <_svfprintf_r+0x1064>
 8020346:	f01a 0f01 	tst.w	sl, #1
 802034a:	d00e      	beq.n	802036a <_svfprintf_r+0x1082>
 802034c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802034e:	6023      	str	r3, [r4, #0]
 8020350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020352:	6063      	str	r3, [r4, #4]
 8020354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020356:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020358:	4413      	add	r3, r2
 802035a:	9328      	str	r3, [sp, #160]	; 0xa0
 802035c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802035e:	3301      	adds	r3, #1
 8020360:	2b07      	cmp	r3, #7
 8020362:	9327      	str	r3, [sp, #156]	; 0x9c
 8020364:	f300 80dd 	bgt.w	8020522 <_svfprintf_r+0x123a>
 8020368:	3408      	adds	r4, #8
 802036a:	9b04      	ldr	r3, [sp, #16]
 802036c:	9a04      	ldr	r2, [sp, #16]
 802036e:	eb0b 0503 	add.w	r5, fp, r3
 8020372:	1bab      	subs	r3, r5, r6
 8020374:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8020376:	1b55      	subs	r5, r2, r5
 8020378:	429d      	cmp	r5, r3
 802037a:	bfa8      	it	ge
 802037c:	461d      	movge	r5, r3
 802037e:	2d00      	cmp	r5, #0
 8020380:	dd0b      	ble.n	802039a <_svfprintf_r+0x10b2>
 8020382:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020384:	442b      	add	r3, r5
 8020386:	9328      	str	r3, [sp, #160]	; 0xa0
 8020388:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802038a:	3301      	adds	r3, #1
 802038c:	2b07      	cmp	r3, #7
 802038e:	e9c4 6500 	strd	r6, r5, [r4]
 8020392:	9327      	str	r3, [sp, #156]	; 0x9c
 8020394:	f300 80cf 	bgt.w	8020536 <_svfprintf_r+0x124e>
 8020398:	3408      	adds	r4, #8
 802039a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802039c:	9a04      	ldr	r2, [sp, #16]
 802039e:	2d00      	cmp	r5, #0
 80203a0:	eba2 0303 	sub.w	r3, r2, r3
 80203a4:	bfac      	ite	ge
 80203a6:	1b5d      	subge	r5, r3, r5
 80203a8:	461d      	movlt	r5, r3
 80203aa:	2d00      	cmp	r5, #0
 80203ac:	f77f ad43 	ble.w	801fe36 <_svfprintf_r+0xb4e>
 80203b0:	4e66      	ldr	r6, [pc, #408]	; (802054c <_svfprintf_r+0x1264>)
 80203b2:	2710      	movs	r7, #16
 80203b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80203b8:	2d10      	cmp	r5, #16
 80203ba:	f103 0301 	add.w	r3, r3, #1
 80203be:	f104 0108 	add.w	r1, r4, #8
 80203c2:	6026      	str	r6, [r4, #0]
 80203c4:	f77f aecb 	ble.w	802015e <_svfprintf_r+0xe76>
 80203c8:	3210      	adds	r2, #16
 80203ca:	2b07      	cmp	r3, #7
 80203cc:	6067      	str	r7, [r4, #4]
 80203ce:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80203d2:	dd08      	ble.n	80203e6 <_svfprintf_r+0x10fe>
 80203d4:	aa26      	add	r2, sp, #152	; 0x98
 80203d6:	4641      	mov	r1, r8
 80203d8:	9803      	ldr	r0, [sp, #12]
 80203da:	f001 fc27 	bl	8021c2c <__ssprint_r>
 80203de:	2800      	cmp	r0, #0
 80203e0:	f040 816e 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80203e4:	a929      	add	r1, sp, #164	; 0xa4
 80203e6:	3d10      	subs	r5, #16
 80203e8:	460c      	mov	r4, r1
 80203ea:	e7e3      	b.n	80203b4 <_svfprintf_r+0x10cc>
 80203ec:	aa26      	add	r2, sp, #152	; 0x98
 80203ee:	4641      	mov	r1, r8
 80203f0:	9803      	ldr	r0, [sp, #12]
 80203f2:	f001 fc1b 	bl	8021c2c <__ssprint_r>
 80203f6:	2800      	cmp	r0, #0
 80203f8:	f040 8162 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80203fc:	ac29      	add	r4, sp, #164	; 0xa4
 80203fe:	e770      	b.n	80202e2 <_svfprintf_r+0xffa>
 8020400:	2010      	movs	r0, #16
 8020402:	4402      	add	r2, r0
 8020404:	2b07      	cmp	r3, #7
 8020406:	6060      	str	r0, [r4, #4]
 8020408:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 802040c:	dd08      	ble.n	8020420 <_svfprintf_r+0x1138>
 802040e:	aa26      	add	r2, sp, #152	; 0x98
 8020410:	4641      	mov	r1, r8
 8020412:	9803      	ldr	r0, [sp, #12]
 8020414:	f001 fc0a 	bl	8021c2c <__ssprint_r>
 8020418:	2800      	cmp	r0, #0
 802041a:	f040 8151 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 802041e:	a929      	add	r1, sp, #164	; 0xa4
 8020420:	3d10      	subs	r5, #16
 8020422:	460c      	mov	r4, r1
 8020424:	e763      	b.n	80202ee <_svfprintf_r+0x1006>
 8020426:	460c      	mov	r4, r1
 8020428:	e77b      	b.n	8020322 <_svfprintf_r+0x103a>
 802042a:	2f00      	cmp	r7, #0
 802042c:	d049      	beq.n	80204c2 <_svfprintf_r+0x11da>
 802042e:	3f01      	subs	r7, #1
 8020430:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020432:	6023      	str	r3, [r4, #0]
 8020434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020436:	6063      	str	r3, [r4, #4]
 8020438:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802043a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802043c:	4413      	add	r3, r2
 802043e:	9328      	str	r3, [sp, #160]	; 0xa0
 8020440:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020442:	3301      	adds	r3, #1
 8020444:	2b07      	cmp	r3, #7
 8020446:	9327      	str	r3, [sp, #156]	; 0x9c
 8020448:	dc42      	bgt.n	80204d0 <_svfprintf_r+0x11e8>
 802044a:	3408      	adds	r4, #8
 802044c:	9b04      	ldr	r3, [sp, #16]
 802044e:	445b      	add	r3, fp
 8020450:	1b9a      	subs	r2, r3, r6
 8020452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020454:	781b      	ldrb	r3, [r3, #0]
 8020456:	4293      	cmp	r3, r2
 8020458:	bfa8      	it	ge
 802045a:	4613      	movge	r3, r2
 802045c:	2b00      	cmp	r3, #0
 802045e:	461d      	mov	r5, r3
 8020460:	dd0a      	ble.n	8020478 <_svfprintf_r+0x1190>
 8020462:	e9c4 6300 	strd	r6, r3, [r4]
 8020466:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020468:	442b      	add	r3, r5
 802046a:	9328      	str	r3, [sp, #160]	; 0xa0
 802046c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802046e:	3301      	adds	r3, #1
 8020470:	2b07      	cmp	r3, #7
 8020472:	9327      	str	r3, [sp, #156]	; 0x9c
 8020474:	dc36      	bgt.n	80204e4 <_svfprintf_r+0x11fc>
 8020476:	3408      	adds	r4, #8
 8020478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802047a:	781b      	ldrb	r3, [r3, #0]
 802047c:	2d00      	cmp	r5, #0
 802047e:	bfac      	ite	ge
 8020480:	1b5d      	subge	r5, r3, r5
 8020482:	461d      	movlt	r5, r3
 8020484:	2d00      	cmp	r5, #0
 8020486:	dd18      	ble.n	80204ba <_svfprintf_r+0x11d2>
 8020488:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 802048c:	482f      	ldr	r0, [pc, #188]	; (802054c <_svfprintf_r+0x1264>)
 802048e:	6020      	str	r0, [r4, #0]
 8020490:	2d10      	cmp	r5, #16
 8020492:	f102 0201 	add.w	r2, r2, #1
 8020496:	f104 0108 	add.w	r1, r4, #8
 802049a:	dc2d      	bgt.n	80204f8 <_svfprintf_r+0x1210>
 802049c:	442b      	add	r3, r5
 802049e:	2a07      	cmp	r2, #7
 80204a0:	6065      	str	r5, [r4, #4]
 80204a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80204a6:	dd3a      	ble.n	802051e <_svfprintf_r+0x1236>
 80204a8:	aa26      	add	r2, sp, #152	; 0x98
 80204aa:	4641      	mov	r1, r8
 80204ac:	9803      	ldr	r0, [sp, #12]
 80204ae:	f001 fbbd 	bl	8021c2c <__ssprint_r>
 80204b2:	2800      	cmp	r0, #0
 80204b4:	f040 8104 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80204b8:	ac29      	add	r4, sp, #164	; 0xa4
 80204ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204bc:	781b      	ldrb	r3, [r3, #0]
 80204be:	441e      	add	r6, r3
 80204c0:	e733      	b.n	802032a <_svfprintf_r+0x1042>
 80204c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204c4:	3b01      	subs	r3, #1
 80204c6:	9309      	str	r3, [sp, #36]	; 0x24
 80204c8:	9b07      	ldr	r3, [sp, #28]
 80204ca:	3b01      	subs	r3, #1
 80204cc:	9307      	str	r3, [sp, #28]
 80204ce:	e7af      	b.n	8020430 <_svfprintf_r+0x1148>
 80204d0:	aa26      	add	r2, sp, #152	; 0x98
 80204d2:	4641      	mov	r1, r8
 80204d4:	9803      	ldr	r0, [sp, #12]
 80204d6:	f001 fba9 	bl	8021c2c <__ssprint_r>
 80204da:	2800      	cmp	r0, #0
 80204dc:	f040 80f0 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80204e0:	ac29      	add	r4, sp, #164	; 0xa4
 80204e2:	e7b3      	b.n	802044c <_svfprintf_r+0x1164>
 80204e4:	aa26      	add	r2, sp, #152	; 0x98
 80204e6:	4641      	mov	r1, r8
 80204e8:	9803      	ldr	r0, [sp, #12]
 80204ea:	f001 fb9f 	bl	8021c2c <__ssprint_r>
 80204ee:	2800      	cmp	r0, #0
 80204f0:	f040 80e6 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 80204f4:	ac29      	add	r4, sp, #164	; 0xa4
 80204f6:	e7bf      	b.n	8020478 <_svfprintf_r+0x1190>
 80204f8:	2010      	movs	r0, #16
 80204fa:	4403      	add	r3, r0
 80204fc:	2a07      	cmp	r2, #7
 80204fe:	6060      	str	r0, [r4, #4]
 8020500:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8020504:	dd08      	ble.n	8020518 <_svfprintf_r+0x1230>
 8020506:	aa26      	add	r2, sp, #152	; 0x98
 8020508:	4641      	mov	r1, r8
 802050a:	9803      	ldr	r0, [sp, #12]
 802050c:	f001 fb8e 	bl	8021c2c <__ssprint_r>
 8020510:	2800      	cmp	r0, #0
 8020512:	f040 80d5 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 8020516:	a929      	add	r1, sp, #164	; 0xa4
 8020518:	3d10      	subs	r5, #16
 802051a:	460c      	mov	r4, r1
 802051c:	e7b4      	b.n	8020488 <_svfprintf_r+0x11a0>
 802051e:	460c      	mov	r4, r1
 8020520:	e7cb      	b.n	80204ba <_svfprintf_r+0x11d2>
 8020522:	aa26      	add	r2, sp, #152	; 0x98
 8020524:	4641      	mov	r1, r8
 8020526:	9803      	ldr	r0, [sp, #12]
 8020528:	f001 fb80 	bl	8021c2c <__ssprint_r>
 802052c:	2800      	cmp	r0, #0
 802052e:	f040 80c7 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 8020532:	ac29      	add	r4, sp, #164	; 0xa4
 8020534:	e719      	b.n	802036a <_svfprintf_r+0x1082>
 8020536:	aa26      	add	r2, sp, #152	; 0x98
 8020538:	4641      	mov	r1, r8
 802053a:	9803      	ldr	r0, [sp, #12]
 802053c:	f001 fb76 	bl	8021c2c <__ssprint_r>
 8020540:	2800      	cmp	r0, #0
 8020542:	f040 80bd 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 8020546:	ac29      	add	r4, sp, #164	; 0xa4
 8020548:	e727      	b.n	802039a <_svfprintf_r+0x10b2>
 802054a:	bf00      	nop
 802054c:	08035d6c 	.word	0x08035d6c
 8020550:	9a04      	ldr	r2, [sp, #16]
 8020552:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020554:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020556:	2a01      	cmp	r2, #1
 8020558:	f105 0501 	add.w	r5, r5, #1
 802055c:	f103 0301 	add.w	r3, r3, #1
 8020560:	f104 0608 	add.w	r6, r4, #8
 8020564:	dc02      	bgt.n	802056c <_svfprintf_r+0x1284>
 8020566:	f01a 0f01 	tst.w	sl, #1
 802056a:	d07d      	beq.n	8020668 <_svfprintf_r+0x1380>
 802056c:	2201      	movs	r2, #1
 802056e:	2b07      	cmp	r3, #7
 8020570:	f8c4 b000 	str.w	fp, [r4]
 8020574:	6062      	str	r2, [r4, #4]
 8020576:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 802057a:	dd08      	ble.n	802058e <_svfprintf_r+0x12a6>
 802057c:	aa26      	add	r2, sp, #152	; 0x98
 802057e:	4641      	mov	r1, r8
 8020580:	9803      	ldr	r0, [sp, #12]
 8020582:	f001 fb53 	bl	8021c2c <__ssprint_r>
 8020586:	2800      	cmp	r0, #0
 8020588:	f040 809a 	bne.w	80206c0 <_svfprintf_r+0x13d8>
 802058c:	ae29      	add	r6, sp, #164	; 0xa4
 802058e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020590:	6033      	str	r3, [r6, #0]
 8020592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020594:	6073      	str	r3, [r6, #4]
 8020596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020598:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802059a:	4413      	add	r3, r2
 802059c:	9328      	str	r3, [sp, #160]	; 0xa0
 802059e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80205a0:	3301      	adds	r3, #1
 80205a2:	2b07      	cmp	r3, #7
 80205a4:	9327      	str	r3, [sp, #156]	; 0x9c
 80205a6:	dc31      	bgt.n	802060c <_svfprintf_r+0x1324>
 80205a8:	3608      	adds	r6, #8
 80205aa:	9b04      	ldr	r3, [sp, #16]
 80205ac:	2200      	movs	r2, #0
 80205ae:	1e5c      	subs	r4, r3, #1
 80205b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80205b4:	2300      	movs	r3, #0
 80205b6:	f7e8 f9bf 	bl	8008938 <__aeabi_dcmpeq>
 80205ba:	2800      	cmp	r0, #0
 80205bc:	d12f      	bne.n	802061e <_svfprintf_r+0x1336>
 80205be:	f10b 0301 	add.w	r3, fp, #1
 80205c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80205c4:	9904      	ldr	r1, [sp, #16]
 80205c6:	e9c6 3400 	strd	r3, r4, [r6]
 80205ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205cc:	3201      	adds	r2, #1
 80205ce:	3b01      	subs	r3, #1
 80205d0:	440b      	add	r3, r1
 80205d2:	2a07      	cmp	r2, #7
 80205d4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80205d8:	dd4f      	ble.n	802067a <_svfprintf_r+0x1392>
 80205da:	aa26      	add	r2, sp, #152	; 0x98
 80205dc:	4641      	mov	r1, r8
 80205de:	9803      	ldr	r0, [sp, #12]
 80205e0:	f001 fb24 	bl	8021c2c <__ssprint_r>
 80205e4:	2800      	cmp	r0, #0
 80205e6:	d16b      	bne.n	80206c0 <_svfprintf_r+0x13d8>
 80205e8:	ae29      	add	r6, sp, #164	; 0xa4
 80205ea:	ab22      	add	r3, sp, #136	; 0x88
 80205ec:	6033      	str	r3, [r6, #0]
 80205ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80205f0:	6073      	str	r3, [r6, #4]
 80205f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80205f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205f6:	4413      	add	r3, r2
 80205f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80205fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80205fc:	3301      	adds	r3, #1
 80205fe:	2b07      	cmp	r3, #7
 8020600:	9327      	str	r3, [sp, #156]	; 0x9c
 8020602:	f73f adb3 	bgt.w	802016c <_svfprintf_r+0xe84>
 8020606:	f106 0408 	add.w	r4, r6, #8
 802060a:	e414      	b.n	801fe36 <_svfprintf_r+0xb4e>
 802060c:	aa26      	add	r2, sp, #152	; 0x98
 802060e:	4641      	mov	r1, r8
 8020610:	9803      	ldr	r0, [sp, #12]
 8020612:	f001 fb0b 	bl	8021c2c <__ssprint_r>
 8020616:	2800      	cmp	r0, #0
 8020618:	d152      	bne.n	80206c0 <_svfprintf_r+0x13d8>
 802061a:	ae29      	add	r6, sp, #164	; 0xa4
 802061c:	e7c5      	b.n	80205aa <_svfprintf_r+0x12c2>
 802061e:	2c00      	cmp	r4, #0
 8020620:	dde3      	ble.n	80205ea <_svfprintf_r+0x1302>
 8020622:	4d3e      	ldr	r5, [pc, #248]	; (802071c <_svfprintf_r+0x1434>)
 8020624:	2710      	movs	r7, #16
 8020626:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 802062a:	2c10      	cmp	r4, #16
 802062c:	f103 0301 	add.w	r3, r3, #1
 8020630:	f106 0108 	add.w	r1, r6, #8
 8020634:	6035      	str	r5, [r6, #0]
 8020636:	dc07      	bgt.n	8020648 <_svfprintf_r+0x1360>
 8020638:	6074      	str	r4, [r6, #4]
 802063a:	2b07      	cmp	r3, #7
 802063c:	4414      	add	r4, r2
 802063e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8020642:	dcca      	bgt.n	80205da <_svfprintf_r+0x12f2>
 8020644:	460e      	mov	r6, r1
 8020646:	e7d0      	b.n	80205ea <_svfprintf_r+0x1302>
 8020648:	3210      	adds	r2, #16
 802064a:	2b07      	cmp	r3, #7
 802064c:	6077      	str	r7, [r6, #4]
 802064e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8020652:	dd06      	ble.n	8020662 <_svfprintf_r+0x137a>
 8020654:	aa26      	add	r2, sp, #152	; 0x98
 8020656:	4641      	mov	r1, r8
 8020658:	9803      	ldr	r0, [sp, #12]
 802065a:	f001 fae7 	bl	8021c2c <__ssprint_r>
 802065e:	bb78      	cbnz	r0, 80206c0 <_svfprintf_r+0x13d8>
 8020660:	a929      	add	r1, sp, #164	; 0xa4
 8020662:	3c10      	subs	r4, #16
 8020664:	460e      	mov	r6, r1
 8020666:	e7de      	b.n	8020626 <_svfprintf_r+0x133e>
 8020668:	2201      	movs	r2, #1
 802066a:	2b07      	cmp	r3, #7
 802066c:	f8c4 b000 	str.w	fp, [r4]
 8020670:	6062      	str	r2, [r4, #4]
 8020672:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8020676:	ddb8      	ble.n	80205ea <_svfprintf_r+0x1302>
 8020678:	e7af      	b.n	80205da <_svfprintf_r+0x12f2>
 802067a:	3608      	adds	r6, #8
 802067c:	e7b5      	b.n	80205ea <_svfprintf_r+0x1302>
 802067e:	460c      	mov	r4, r1
 8020680:	f7ff bbd9 	b.w	801fe36 <_svfprintf_r+0xb4e>
 8020684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020686:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020688:	1a9d      	subs	r5, r3, r2
 802068a:	2d00      	cmp	r5, #0
 802068c:	f77f abd7 	ble.w	801fe3e <_svfprintf_r+0xb56>
 8020690:	4e23      	ldr	r6, [pc, #140]	; (8020720 <_svfprintf_r+0x1438>)
 8020692:	2710      	movs	r7, #16
 8020694:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8020698:	2d10      	cmp	r5, #16
 802069a:	f103 0301 	add.w	r3, r3, #1
 802069e:	6026      	str	r6, [r4, #0]
 80206a0:	dc18      	bgt.n	80206d4 <_svfprintf_r+0x13ec>
 80206a2:	6065      	str	r5, [r4, #4]
 80206a4:	2b07      	cmp	r3, #7
 80206a6:	4415      	add	r5, r2
 80206a8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80206ac:	f77f abc7 	ble.w	801fe3e <_svfprintf_r+0xb56>
 80206b0:	aa26      	add	r2, sp, #152	; 0x98
 80206b2:	4641      	mov	r1, r8
 80206b4:	9803      	ldr	r0, [sp, #12]
 80206b6:	f001 fab9 	bl	8021c2c <__ssprint_r>
 80206ba:	2800      	cmp	r0, #0
 80206bc:	f43f abbf 	beq.w	801fe3e <_svfprintf_r+0xb56>
 80206c0:	f1b9 0f00 	cmp.w	r9, #0
 80206c4:	f43f a8a8 	beq.w	801f818 <_svfprintf_r+0x530>
 80206c8:	4649      	mov	r1, r9
 80206ca:	9803      	ldr	r0, [sp, #12]
 80206cc:	f000 fef0 	bl	80214b0 <_free_r>
 80206d0:	f7ff b8a2 	b.w	801f818 <_svfprintf_r+0x530>
 80206d4:	3210      	adds	r2, #16
 80206d6:	2b07      	cmp	r3, #7
 80206d8:	6067      	str	r7, [r4, #4]
 80206da:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80206de:	dc02      	bgt.n	80206e6 <_svfprintf_r+0x13fe>
 80206e0:	3408      	adds	r4, #8
 80206e2:	3d10      	subs	r5, #16
 80206e4:	e7d6      	b.n	8020694 <_svfprintf_r+0x13ac>
 80206e6:	aa26      	add	r2, sp, #152	; 0x98
 80206e8:	4641      	mov	r1, r8
 80206ea:	9803      	ldr	r0, [sp, #12]
 80206ec:	f001 fa9e 	bl	8021c2c <__ssprint_r>
 80206f0:	2800      	cmp	r0, #0
 80206f2:	d1e5      	bne.n	80206c0 <_svfprintf_r+0x13d8>
 80206f4:	ac29      	add	r4, sp, #164	; 0xa4
 80206f6:	e7f4      	b.n	80206e2 <_svfprintf_r+0x13fa>
 80206f8:	4649      	mov	r1, r9
 80206fa:	9803      	ldr	r0, [sp, #12]
 80206fc:	f000 fed8 	bl	80214b0 <_free_r>
 8020700:	f7ff bbb5 	b.w	801fe6e <_svfprintf_r+0xb86>
 8020704:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020706:	2b00      	cmp	r3, #0
 8020708:	f43f a886 	beq.w	801f818 <_svfprintf_r+0x530>
 802070c:	aa26      	add	r2, sp, #152	; 0x98
 802070e:	4641      	mov	r1, r8
 8020710:	9803      	ldr	r0, [sp, #12]
 8020712:	f001 fa8b 	bl	8021c2c <__ssprint_r>
 8020716:	f7ff b87f 	b.w	801f818 <_svfprintf_r+0x530>
 802071a:	bf00      	nop
 802071c:	08035d6c 	.word	0x08035d6c
 8020720:	08035d5c 	.word	0x08035d5c

08020724 <sysconf>:
 8020724:	2808      	cmp	r0, #8
 8020726:	b508      	push	{r3, lr}
 8020728:	d006      	beq.n	8020738 <sysconf+0x14>
 802072a:	f7fe fab1 	bl	801ec90 <__errno>
 802072e:	2316      	movs	r3, #22
 8020730:	6003      	str	r3, [r0, #0]
 8020732:	f04f 30ff 	mov.w	r0, #4294967295
 8020736:	bd08      	pop	{r3, pc}
 8020738:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 802073c:	e7fb      	b.n	8020736 <sysconf+0x12>

0802073e <__ascii_wctomb>:
 802073e:	b149      	cbz	r1, 8020754 <__ascii_wctomb+0x16>
 8020740:	2aff      	cmp	r2, #255	; 0xff
 8020742:	bf85      	ittet	hi
 8020744:	238a      	movhi	r3, #138	; 0x8a
 8020746:	6003      	strhi	r3, [r0, #0]
 8020748:	700a      	strbls	r2, [r1, #0]
 802074a:	f04f 30ff 	movhi.w	r0, #4294967295
 802074e:	bf98      	it	ls
 8020750:	2001      	movls	r0, #1
 8020752:	4770      	bx	lr
 8020754:	4608      	mov	r0, r1
 8020756:	4770      	bx	lr

08020758 <register_fini>:
 8020758:	4b02      	ldr	r3, [pc, #8]	; (8020764 <register_fini+0xc>)
 802075a:	b113      	cbz	r3, 8020762 <register_fini+0xa>
 802075c:	4802      	ldr	r0, [pc, #8]	; (8020768 <register_fini+0x10>)
 802075e:	f000 b805 	b.w	802076c <atexit>
 8020762:	4770      	bx	lr
 8020764:	00000000 	.word	0x00000000
 8020768:	080213e1 	.word	0x080213e1

0802076c <atexit>:
 802076c:	2300      	movs	r3, #0
 802076e:	4601      	mov	r1, r0
 8020770:	461a      	mov	r2, r3
 8020772:	4618      	mov	r0, r3
 8020774:	f001 bad2 	b.w	8021d1c <__register_exitproc>

08020778 <quorem>:
 8020778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802077c:	6903      	ldr	r3, [r0, #16]
 802077e:	690c      	ldr	r4, [r1, #16]
 8020780:	42a3      	cmp	r3, r4
 8020782:	4680      	mov	r8, r0
 8020784:	f2c0 8082 	blt.w	802088c <quorem+0x114>
 8020788:	3c01      	subs	r4, #1
 802078a:	f101 0714 	add.w	r7, r1, #20
 802078e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8020792:	f100 0614 	add.w	r6, r0, #20
 8020796:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802079a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802079e:	eb06 030c 	add.w	r3, r6, ip
 80207a2:	3501      	adds	r5, #1
 80207a4:	eb07 090c 	add.w	r9, r7, ip
 80207a8:	9301      	str	r3, [sp, #4]
 80207aa:	fbb0 f5f5 	udiv	r5, r0, r5
 80207ae:	b395      	cbz	r5, 8020816 <quorem+0x9e>
 80207b0:	f04f 0a00 	mov.w	sl, #0
 80207b4:	4638      	mov	r0, r7
 80207b6:	46b6      	mov	lr, r6
 80207b8:	46d3      	mov	fp, sl
 80207ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80207be:	b293      	uxth	r3, r2
 80207c0:	fb05 a303 	mla	r3, r5, r3, sl
 80207c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80207c8:	b29b      	uxth	r3, r3
 80207ca:	ebab 0303 	sub.w	r3, fp, r3
 80207ce:	0c12      	lsrs	r2, r2, #16
 80207d0:	f8de b000 	ldr.w	fp, [lr]
 80207d4:	fb05 a202 	mla	r2, r5, r2, sl
 80207d8:	fa13 f38b 	uxtah	r3, r3, fp
 80207dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80207e0:	fa1f fb82 	uxth.w	fp, r2
 80207e4:	f8de 2000 	ldr.w	r2, [lr]
 80207e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80207ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80207f0:	b29b      	uxth	r3, r3
 80207f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80207f6:	4581      	cmp	r9, r0
 80207f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80207fc:	f84e 3b04 	str.w	r3, [lr], #4
 8020800:	d2db      	bcs.n	80207ba <quorem+0x42>
 8020802:	f856 300c 	ldr.w	r3, [r6, ip]
 8020806:	b933      	cbnz	r3, 8020816 <quorem+0x9e>
 8020808:	9b01      	ldr	r3, [sp, #4]
 802080a:	3b04      	subs	r3, #4
 802080c:	429e      	cmp	r6, r3
 802080e:	461a      	mov	r2, r3
 8020810:	d330      	bcc.n	8020874 <quorem+0xfc>
 8020812:	f8c8 4010 	str.w	r4, [r8, #16]
 8020816:	4640      	mov	r0, r8
 8020818:	f001 f90c 	bl	8021a34 <__mcmp>
 802081c:	2800      	cmp	r0, #0
 802081e:	db25      	blt.n	802086c <quorem+0xf4>
 8020820:	3501      	adds	r5, #1
 8020822:	4630      	mov	r0, r6
 8020824:	f04f 0c00 	mov.w	ip, #0
 8020828:	f857 2b04 	ldr.w	r2, [r7], #4
 802082c:	f8d0 e000 	ldr.w	lr, [r0]
 8020830:	b293      	uxth	r3, r2
 8020832:	ebac 0303 	sub.w	r3, ip, r3
 8020836:	0c12      	lsrs	r2, r2, #16
 8020838:	fa13 f38e 	uxtah	r3, r3, lr
 802083c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020840:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020844:	b29b      	uxth	r3, r3
 8020846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802084a:	45b9      	cmp	r9, r7
 802084c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020850:	f840 3b04 	str.w	r3, [r0], #4
 8020854:	d2e8      	bcs.n	8020828 <quorem+0xb0>
 8020856:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802085a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802085e:	b92a      	cbnz	r2, 802086c <quorem+0xf4>
 8020860:	3b04      	subs	r3, #4
 8020862:	429e      	cmp	r6, r3
 8020864:	461a      	mov	r2, r3
 8020866:	d30b      	bcc.n	8020880 <quorem+0x108>
 8020868:	f8c8 4010 	str.w	r4, [r8, #16]
 802086c:	4628      	mov	r0, r5
 802086e:	b003      	add	sp, #12
 8020870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020874:	6812      	ldr	r2, [r2, #0]
 8020876:	3b04      	subs	r3, #4
 8020878:	2a00      	cmp	r2, #0
 802087a:	d1ca      	bne.n	8020812 <quorem+0x9a>
 802087c:	3c01      	subs	r4, #1
 802087e:	e7c5      	b.n	802080c <quorem+0x94>
 8020880:	6812      	ldr	r2, [r2, #0]
 8020882:	3b04      	subs	r3, #4
 8020884:	2a00      	cmp	r2, #0
 8020886:	d1ef      	bne.n	8020868 <quorem+0xf0>
 8020888:	3c01      	subs	r4, #1
 802088a:	e7ea      	b.n	8020862 <quorem+0xea>
 802088c:	2000      	movs	r0, #0
 802088e:	e7ee      	b.n	802086e <quorem+0xf6>

08020890 <_dtoa_r>:
 8020890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020894:	b097      	sub	sp, #92	; 0x5c
 8020896:	ec57 6b10 	vmov	r6, r7, d0
 802089a:	9106      	str	r1, [sp, #24]
 802089c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 802089e:	920b      	str	r2, [sp, #44]	; 0x2c
 80208a0:	4604      	mov	r4, r0
 80208a2:	9312      	str	r3, [sp, #72]	; 0x48
 80208a4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80208a6:	e9cd 6700 	strd	r6, r7, [sp]
 80208aa:	b141      	cbz	r1, 80208be <_dtoa_r+0x2e>
 80208ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80208ae:	604a      	str	r2, [r1, #4]
 80208b0:	2301      	movs	r3, #1
 80208b2:	4093      	lsls	r3, r2
 80208b4:	608b      	str	r3, [r1, #8]
 80208b6:	f000 fef7 	bl	80216a8 <_Bfree>
 80208ba:	2300      	movs	r3, #0
 80208bc:	6423      	str	r3, [r4, #64]	; 0x40
 80208be:	1e3b      	subs	r3, r7, #0
 80208c0:	bfb9      	ittee	lt
 80208c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80208c6:	9301      	strlt	r3, [sp, #4]
 80208c8:	2300      	movge	r3, #0
 80208ca:	602b      	strge	r3, [r5, #0]
 80208cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80208d0:	4baf      	ldr	r3, [pc, #700]	; (8020b90 <_dtoa_r+0x300>)
 80208d2:	bfbc      	itt	lt
 80208d4:	2201      	movlt	r2, #1
 80208d6:	602a      	strlt	r2, [r5, #0]
 80208d8:	ea33 0308 	bics.w	r3, r3, r8
 80208dc:	d116      	bne.n	802090c <_dtoa_r+0x7c>
 80208de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80208e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80208e4:	6013      	str	r3, [r2, #0]
 80208e6:	9b00      	ldr	r3, [sp, #0]
 80208e8:	b923      	cbnz	r3, 80208f4 <_dtoa_r+0x64>
 80208ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80208ee:	2800      	cmp	r0, #0
 80208f0:	f000 8543 	beq.w	802137a <_dtoa_r+0xaea>
 80208f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8020ba4 <_dtoa_r+0x314>
 80208fa:	b11b      	cbz	r3, 8020904 <_dtoa_r+0x74>
 80208fc:	f10b 0303 	add.w	r3, fp, #3
 8020900:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020902:	6013      	str	r3, [r2, #0]
 8020904:	4658      	mov	r0, fp
 8020906:	b017      	add	sp, #92	; 0x5c
 8020908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802090c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020910:	2200      	movs	r2, #0
 8020912:	2300      	movs	r3, #0
 8020914:	4630      	mov	r0, r6
 8020916:	4639      	mov	r1, r7
 8020918:	f7e8 f80e 	bl	8008938 <__aeabi_dcmpeq>
 802091c:	4681      	mov	r9, r0
 802091e:	b160      	cbz	r0, 802093a <_dtoa_r+0xaa>
 8020920:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020922:	2301      	movs	r3, #1
 8020924:	6013      	str	r3, [r2, #0]
 8020926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020928:	2b00      	cmp	r3, #0
 802092a:	f000 8522 	beq.w	8021372 <_dtoa_r+0xae2>
 802092e:	4b99      	ldr	r3, [pc, #612]	; (8020b94 <_dtoa_r+0x304>)
 8020930:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020932:	f103 3bff 	add.w	fp, r3, #4294967295
 8020936:	6013      	str	r3, [r2, #0]
 8020938:	e7e4      	b.n	8020904 <_dtoa_r+0x74>
 802093a:	aa14      	add	r2, sp, #80	; 0x50
 802093c:	a915      	add	r1, sp, #84	; 0x54
 802093e:	ec47 6b10 	vmov	d0, r6, r7
 8020942:	4620      	mov	r0, r4
 8020944:	f001 f8ed 	bl	8021b22 <__d2b>
 8020948:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802094c:	9004      	str	r0, [sp, #16]
 802094e:	2d00      	cmp	r5, #0
 8020950:	d07c      	beq.n	8020a4c <_dtoa_r+0x1bc>
 8020952:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020956:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 802095a:	46b2      	mov	sl, r6
 802095c:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8020960:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020964:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8020968:	2200      	movs	r2, #0
 802096a:	4b8b      	ldr	r3, [pc, #556]	; (8020b98 <_dtoa_r+0x308>)
 802096c:	4650      	mov	r0, sl
 802096e:	4659      	mov	r1, fp
 8020970:	f7e7 fbc2 	bl	80080f8 <__aeabi_dsub>
 8020974:	a380      	add	r3, pc, #512	; (adr r3, 8020b78 <_dtoa_r+0x2e8>)
 8020976:	e9d3 2300 	ldrd	r2, r3, [r3]
 802097a:	f7e7 fd75 	bl	8008468 <__aeabi_dmul>
 802097e:	a380      	add	r3, pc, #512	; (adr r3, 8020b80 <_dtoa_r+0x2f0>)
 8020980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020984:	f7e7 fbba 	bl	80080fc <__adddf3>
 8020988:	4606      	mov	r6, r0
 802098a:	4628      	mov	r0, r5
 802098c:	460f      	mov	r7, r1
 802098e:	f7e7 fd01 	bl	8008394 <__aeabi_i2d>
 8020992:	a37d      	add	r3, pc, #500	; (adr r3, 8020b88 <_dtoa_r+0x2f8>)
 8020994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020998:	f7e7 fd66 	bl	8008468 <__aeabi_dmul>
 802099c:	4602      	mov	r2, r0
 802099e:	460b      	mov	r3, r1
 80209a0:	4630      	mov	r0, r6
 80209a2:	4639      	mov	r1, r7
 80209a4:	f7e7 fbaa 	bl	80080fc <__adddf3>
 80209a8:	4606      	mov	r6, r0
 80209aa:	460f      	mov	r7, r1
 80209ac:	f7e8 f80c 	bl	80089c8 <__aeabi_d2iz>
 80209b0:	2200      	movs	r2, #0
 80209b2:	4682      	mov	sl, r0
 80209b4:	2300      	movs	r3, #0
 80209b6:	4630      	mov	r0, r6
 80209b8:	4639      	mov	r1, r7
 80209ba:	f7e7 ffc7 	bl	800894c <__aeabi_dcmplt>
 80209be:	b148      	cbz	r0, 80209d4 <_dtoa_r+0x144>
 80209c0:	4650      	mov	r0, sl
 80209c2:	f7e7 fce7 	bl	8008394 <__aeabi_i2d>
 80209c6:	4632      	mov	r2, r6
 80209c8:	463b      	mov	r3, r7
 80209ca:	f7e7 ffb5 	bl	8008938 <__aeabi_dcmpeq>
 80209ce:	b908      	cbnz	r0, 80209d4 <_dtoa_r+0x144>
 80209d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80209d4:	f1ba 0f16 	cmp.w	sl, #22
 80209d8:	d859      	bhi.n	8020a8e <_dtoa_r+0x1fe>
 80209da:	4970      	ldr	r1, [pc, #448]	; (8020b9c <_dtoa_r+0x30c>)
 80209dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80209e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80209e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80209e8:	f7e7 ffce 	bl	8008988 <__aeabi_dcmpgt>
 80209ec:	2800      	cmp	r0, #0
 80209ee:	d050      	beq.n	8020a92 <_dtoa_r+0x202>
 80209f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80209f4:	2300      	movs	r3, #0
 80209f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80209f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80209fa:	1b5d      	subs	r5, r3, r5
 80209fc:	f1b5 0801 	subs.w	r8, r5, #1
 8020a00:	bf49      	itett	mi
 8020a02:	f1c5 0301 	rsbmi	r3, r5, #1
 8020a06:	2300      	movpl	r3, #0
 8020a08:	9305      	strmi	r3, [sp, #20]
 8020a0a:	f04f 0800 	movmi.w	r8, #0
 8020a0e:	bf58      	it	pl
 8020a10:	9305      	strpl	r3, [sp, #20]
 8020a12:	f1ba 0f00 	cmp.w	sl, #0
 8020a16:	db3e      	blt.n	8020a96 <_dtoa_r+0x206>
 8020a18:	2300      	movs	r3, #0
 8020a1a:	44d0      	add	r8, sl
 8020a1c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8020a20:	9307      	str	r3, [sp, #28]
 8020a22:	9b06      	ldr	r3, [sp, #24]
 8020a24:	2b09      	cmp	r3, #9
 8020a26:	f200 808d 	bhi.w	8020b44 <_dtoa_r+0x2b4>
 8020a2a:	2b05      	cmp	r3, #5
 8020a2c:	bfc4      	itt	gt
 8020a2e:	3b04      	subgt	r3, #4
 8020a30:	9306      	strgt	r3, [sp, #24]
 8020a32:	9b06      	ldr	r3, [sp, #24]
 8020a34:	f1a3 0302 	sub.w	r3, r3, #2
 8020a38:	bfcc      	ite	gt
 8020a3a:	2500      	movgt	r5, #0
 8020a3c:	2501      	movle	r5, #1
 8020a3e:	2b03      	cmp	r3, #3
 8020a40:	f200 808c 	bhi.w	8020b5c <_dtoa_r+0x2cc>
 8020a44:	e8df f003 	tbb	[pc, r3]
 8020a48:	6e317c7a 	.word	0x6e317c7a
 8020a4c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8020a50:	441d      	add	r5, r3
 8020a52:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8020a56:	2820      	cmp	r0, #32
 8020a58:	dd13      	ble.n	8020a82 <_dtoa_r+0x1f2>
 8020a5a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8020a5e:	9b00      	ldr	r3, [sp, #0]
 8020a60:	fa08 f800 	lsl.w	r8, r8, r0
 8020a64:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8020a68:	fa23 f000 	lsr.w	r0, r3, r0
 8020a6c:	ea48 0000 	orr.w	r0, r8, r0
 8020a70:	f7e7 fc80 	bl	8008374 <__aeabi_ui2d>
 8020a74:	2301      	movs	r3, #1
 8020a76:	4682      	mov	sl, r0
 8020a78:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8020a7c:	3d01      	subs	r5, #1
 8020a7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8020a80:	e772      	b.n	8020968 <_dtoa_r+0xd8>
 8020a82:	9b00      	ldr	r3, [sp, #0]
 8020a84:	f1c0 0020 	rsb	r0, r0, #32
 8020a88:	fa03 f000 	lsl.w	r0, r3, r0
 8020a8c:	e7f0      	b.n	8020a70 <_dtoa_r+0x1e0>
 8020a8e:	2301      	movs	r3, #1
 8020a90:	e7b1      	b.n	80209f6 <_dtoa_r+0x166>
 8020a92:	900f      	str	r0, [sp, #60]	; 0x3c
 8020a94:	e7b0      	b.n	80209f8 <_dtoa_r+0x168>
 8020a96:	9b05      	ldr	r3, [sp, #20]
 8020a98:	eba3 030a 	sub.w	r3, r3, sl
 8020a9c:	9305      	str	r3, [sp, #20]
 8020a9e:	f1ca 0300 	rsb	r3, sl, #0
 8020aa2:	9307      	str	r3, [sp, #28]
 8020aa4:	2300      	movs	r3, #0
 8020aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8020aa8:	e7bb      	b.n	8020a22 <_dtoa_r+0x192>
 8020aaa:	2301      	movs	r3, #1
 8020aac:	930a      	str	r3, [sp, #40]	; 0x28
 8020aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	dd56      	ble.n	8020b62 <_dtoa_r+0x2d2>
 8020ab4:	9302      	str	r3, [sp, #8]
 8020ab6:	4699      	mov	r9, r3
 8020ab8:	2200      	movs	r2, #0
 8020aba:	6462      	str	r2, [r4, #68]	; 0x44
 8020abc:	2204      	movs	r2, #4
 8020abe:	f102 0014 	add.w	r0, r2, #20
 8020ac2:	4298      	cmp	r0, r3
 8020ac4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8020ac6:	d951      	bls.n	8020b6c <_dtoa_r+0x2dc>
 8020ac8:	4620      	mov	r0, r4
 8020aca:	f000 fdc8 	bl	802165e <_Balloc>
 8020ace:	f1b9 0f0e 	cmp.w	r9, #14
 8020ad2:	4683      	mov	fp, r0
 8020ad4:	6420      	str	r0, [r4, #64]	; 0x40
 8020ad6:	f200 80e8 	bhi.w	8020caa <_dtoa_r+0x41a>
 8020ada:	2d00      	cmp	r5, #0
 8020adc:	f000 80e5 	beq.w	8020caa <_dtoa_r+0x41a>
 8020ae0:	ed9d 7b00 	vldr	d7, [sp]
 8020ae4:	f1ba 0f00 	cmp.w	sl, #0
 8020ae8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8020aec:	dd76      	ble.n	8020bdc <_dtoa_r+0x34c>
 8020aee:	4a2b      	ldr	r2, [pc, #172]	; (8020b9c <_dtoa_r+0x30c>)
 8020af0:	f00a 030f 	and.w	r3, sl, #15
 8020af4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020af8:	ed93 7b00 	vldr	d7, [r3]
 8020afc:	ea4f 162a 	mov.w	r6, sl, asr #4
 8020b00:	06f0      	lsls	r0, r6, #27
 8020b02:	ed8d 7b08 	vstr	d7, [sp, #32]
 8020b06:	d567      	bpl.n	8020bd8 <_dtoa_r+0x348>
 8020b08:	4b25      	ldr	r3, [pc, #148]	; (8020ba0 <_dtoa_r+0x310>)
 8020b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8020b0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020b12:	f7e7 fdd3 	bl	80086bc <__aeabi_ddiv>
 8020b16:	e9cd 0100 	strd	r0, r1, [sp]
 8020b1a:	f006 060f 	and.w	r6, r6, #15
 8020b1e:	2503      	movs	r5, #3
 8020b20:	4f1f      	ldr	r7, [pc, #124]	; (8020ba0 <_dtoa_r+0x310>)
 8020b22:	e04e      	b.n	8020bc2 <_dtoa_r+0x332>
 8020b24:	2301      	movs	r3, #1
 8020b26:	930a      	str	r3, [sp, #40]	; 0x28
 8020b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b2a:	4453      	add	r3, sl
 8020b2c:	f103 0901 	add.w	r9, r3, #1
 8020b30:	9302      	str	r3, [sp, #8]
 8020b32:	464b      	mov	r3, r9
 8020b34:	2b01      	cmp	r3, #1
 8020b36:	bfb8      	it	lt
 8020b38:	2301      	movlt	r3, #1
 8020b3a:	e7bd      	b.n	8020ab8 <_dtoa_r+0x228>
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	e7b5      	b.n	8020aac <_dtoa_r+0x21c>
 8020b40:	2300      	movs	r3, #0
 8020b42:	e7f0      	b.n	8020b26 <_dtoa_r+0x296>
 8020b44:	2501      	movs	r5, #1
 8020b46:	2300      	movs	r3, #0
 8020b48:	9306      	str	r3, [sp, #24]
 8020b4a:	950a      	str	r5, [sp, #40]	; 0x28
 8020b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8020b50:	9302      	str	r3, [sp, #8]
 8020b52:	4699      	mov	r9, r3
 8020b54:	2200      	movs	r2, #0
 8020b56:	2312      	movs	r3, #18
 8020b58:	920b      	str	r2, [sp, #44]	; 0x2c
 8020b5a:	e7ad      	b.n	8020ab8 <_dtoa_r+0x228>
 8020b5c:	2301      	movs	r3, #1
 8020b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8020b60:	e7f4      	b.n	8020b4c <_dtoa_r+0x2bc>
 8020b62:	2301      	movs	r3, #1
 8020b64:	9302      	str	r3, [sp, #8]
 8020b66:	4699      	mov	r9, r3
 8020b68:	461a      	mov	r2, r3
 8020b6a:	e7f5      	b.n	8020b58 <_dtoa_r+0x2c8>
 8020b6c:	3101      	adds	r1, #1
 8020b6e:	6461      	str	r1, [r4, #68]	; 0x44
 8020b70:	0052      	lsls	r2, r2, #1
 8020b72:	e7a4      	b.n	8020abe <_dtoa_r+0x22e>
 8020b74:	f3af 8000 	nop.w
 8020b78:	636f4361 	.word	0x636f4361
 8020b7c:	3fd287a7 	.word	0x3fd287a7
 8020b80:	8b60c8b3 	.word	0x8b60c8b3
 8020b84:	3fc68a28 	.word	0x3fc68a28
 8020b88:	509f79fb 	.word	0x509f79fb
 8020b8c:	3fd34413 	.word	0x3fd34413
 8020b90:	7ff00000 	.word	0x7ff00000
 8020b94:	08035f91 	.word	0x08035f91
 8020b98:	3ff80000 	.word	0x3ff80000
 8020b9c:	08035eb8 	.word	0x08035eb8
 8020ba0:	08035e90 	.word	0x08035e90
 8020ba4:	08035e86 	.word	0x08035e86
 8020ba8:	07f1      	lsls	r1, r6, #31
 8020baa:	d508      	bpl.n	8020bbe <_dtoa_r+0x32e>
 8020bac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020bb4:	f7e7 fc58 	bl	8008468 <__aeabi_dmul>
 8020bb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020bbc:	3501      	adds	r5, #1
 8020bbe:	1076      	asrs	r6, r6, #1
 8020bc0:	3708      	adds	r7, #8
 8020bc2:	2e00      	cmp	r6, #0
 8020bc4:	d1f0      	bne.n	8020ba8 <_dtoa_r+0x318>
 8020bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020bce:	f7e7 fd75 	bl	80086bc <__aeabi_ddiv>
 8020bd2:	e9cd 0100 	strd	r0, r1, [sp]
 8020bd6:	e01a      	b.n	8020c0e <_dtoa_r+0x37e>
 8020bd8:	2502      	movs	r5, #2
 8020bda:	e7a1      	b.n	8020b20 <_dtoa_r+0x290>
 8020bdc:	f000 80a0 	beq.w	8020d20 <_dtoa_r+0x490>
 8020be0:	f1ca 0600 	rsb	r6, sl, #0
 8020be4:	4b9f      	ldr	r3, [pc, #636]	; (8020e64 <_dtoa_r+0x5d4>)
 8020be6:	4fa0      	ldr	r7, [pc, #640]	; (8020e68 <_dtoa_r+0x5d8>)
 8020be8:	f006 020f 	and.w	r2, r6, #15
 8020bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8020bf8:	f7e7 fc36 	bl	8008468 <__aeabi_dmul>
 8020bfc:	e9cd 0100 	strd	r0, r1, [sp]
 8020c00:	1136      	asrs	r6, r6, #4
 8020c02:	2300      	movs	r3, #0
 8020c04:	2502      	movs	r5, #2
 8020c06:	2e00      	cmp	r6, #0
 8020c08:	d17f      	bne.n	8020d0a <_dtoa_r+0x47a>
 8020c0a:	2b00      	cmp	r3, #0
 8020c0c:	d1e1      	bne.n	8020bd2 <_dtoa_r+0x342>
 8020c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	f000 8087 	beq.w	8020d24 <_dtoa_r+0x494>
 8020c16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	4b93      	ldr	r3, [pc, #588]	; (8020e6c <_dtoa_r+0x5dc>)
 8020c1e:	4630      	mov	r0, r6
 8020c20:	4639      	mov	r1, r7
 8020c22:	f7e7 fe93 	bl	800894c <__aeabi_dcmplt>
 8020c26:	2800      	cmp	r0, #0
 8020c28:	d07c      	beq.n	8020d24 <_dtoa_r+0x494>
 8020c2a:	f1b9 0f00 	cmp.w	r9, #0
 8020c2e:	d079      	beq.n	8020d24 <_dtoa_r+0x494>
 8020c30:	9b02      	ldr	r3, [sp, #8]
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	dd35      	ble.n	8020ca2 <_dtoa_r+0x412>
 8020c36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8020c3a:	9308      	str	r3, [sp, #32]
 8020c3c:	4639      	mov	r1, r7
 8020c3e:	2200      	movs	r2, #0
 8020c40:	4b8b      	ldr	r3, [pc, #556]	; (8020e70 <_dtoa_r+0x5e0>)
 8020c42:	4630      	mov	r0, r6
 8020c44:	f7e7 fc10 	bl	8008468 <__aeabi_dmul>
 8020c48:	e9cd 0100 	strd	r0, r1, [sp]
 8020c4c:	9f02      	ldr	r7, [sp, #8]
 8020c4e:	3501      	adds	r5, #1
 8020c50:	4628      	mov	r0, r5
 8020c52:	f7e7 fb9f 	bl	8008394 <__aeabi_i2d>
 8020c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020c5a:	f7e7 fc05 	bl	8008468 <__aeabi_dmul>
 8020c5e:	2200      	movs	r2, #0
 8020c60:	4b84      	ldr	r3, [pc, #528]	; (8020e74 <_dtoa_r+0x5e4>)
 8020c62:	f7e7 fa4b 	bl	80080fc <__adddf3>
 8020c66:	4605      	mov	r5, r0
 8020c68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8020c6c:	2f00      	cmp	r7, #0
 8020c6e:	d15d      	bne.n	8020d2c <_dtoa_r+0x49c>
 8020c70:	2200      	movs	r2, #0
 8020c72:	4b81      	ldr	r3, [pc, #516]	; (8020e78 <_dtoa_r+0x5e8>)
 8020c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020c78:	f7e7 fa3e 	bl	80080f8 <__aeabi_dsub>
 8020c7c:	462a      	mov	r2, r5
 8020c7e:	4633      	mov	r3, r6
 8020c80:	e9cd 0100 	strd	r0, r1, [sp]
 8020c84:	f7e7 fe80 	bl	8008988 <__aeabi_dcmpgt>
 8020c88:	2800      	cmp	r0, #0
 8020c8a:	f040 8288 	bne.w	802119e <_dtoa_r+0x90e>
 8020c8e:	462a      	mov	r2, r5
 8020c90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8020c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020c98:	f7e7 fe58 	bl	800894c <__aeabi_dcmplt>
 8020c9c:	2800      	cmp	r0, #0
 8020c9e:	f040 827c 	bne.w	802119a <_dtoa_r+0x90a>
 8020ca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8020ca6:	e9cd 2300 	strd	r2, r3, [sp]
 8020caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	f2c0 8150 	blt.w	8020f52 <_dtoa_r+0x6c2>
 8020cb2:	f1ba 0f0e 	cmp.w	sl, #14
 8020cb6:	f300 814c 	bgt.w	8020f52 <_dtoa_r+0x6c2>
 8020cba:	4b6a      	ldr	r3, [pc, #424]	; (8020e64 <_dtoa_r+0x5d4>)
 8020cbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020cc0:	ed93 7b00 	vldr	d7, [r3]
 8020cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cc6:	2b00      	cmp	r3, #0
 8020cc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020ccc:	f280 80d8 	bge.w	8020e80 <_dtoa_r+0x5f0>
 8020cd0:	f1b9 0f00 	cmp.w	r9, #0
 8020cd4:	f300 80d4 	bgt.w	8020e80 <_dtoa_r+0x5f0>
 8020cd8:	f040 825e 	bne.w	8021198 <_dtoa_r+0x908>
 8020cdc:	2200      	movs	r2, #0
 8020cde:	4b66      	ldr	r3, [pc, #408]	; (8020e78 <_dtoa_r+0x5e8>)
 8020ce0:	ec51 0b17 	vmov	r0, r1, d7
 8020ce4:	f7e7 fbc0 	bl	8008468 <__aeabi_dmul>
 8020ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020cec:	f7e7 fe42 	bl	8008974 <__aeabi_dcmpge>
 8020cf0:	464f      	mov	r7, r9
 8020cf2:	464e      	mov	r6, r9
 8020cf4:	2800      	cmp	r0, #0
 8020cf6:	f040 8234 	bne.w	8021162 <_dtoa_r+0x8d2>
 8020cfa:	2331      	movs	r3, #49	; 0x31
 8020cfc:	f10b 0501 	add.w	r5, fp, #1
 8020d00:	f88b 3000 	strb.w	r3, [fp]
 8020d04:	f10a 0a01 	add.w	sl, sl, #1
 8020d08:	e22f      	b.n	802116a <_dtoa_r+0x8da>
 8020d0a:	07f2      	lsls	r2, r6, #31
 8020d0c:	d505      	bpl.n	8020d1a <_dtoa_r+0x48a>
 8020d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020d12:	f7e7 fba9 	bl	8008468 <__aeabi_dmul>
 8020d16:	3501      	adds	r5, #1
 8020d18:	2301      	movs	r3, #1
 8020d1a:	1076      	asrs	r6, r6, #1
 8020d1c:	3708      	adds	r7, #8
 8020d1e:	e772      	b.n	8020c06 <_dtoa_r+0x376>
 8020d20:	2502      	movs	r5, #2
 8020d22:	e774      	b.n	8020c0e <_dtoa_r+0x37e>
 8020d24:	f8cd a020 	str.w	sl, [sp, #32]
 8020d28:	464f      	mov	r7, r9
 8020d2a:	e791      	b.n	8020c50 <_dtoa_r+0x3c0>
 8020d2c:	4b4d      	ldr	r3, [pc, #308]	; (8020e64 <_dtoa_r+0x5d4>)
 8020d2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8020d32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8020d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d047      	beq.n	8020dcc <_dtoa_r+0x53c>
 8020d3c:	4602      	mov	r2, r0
 8020d3e:	460b      	mov	r3, r1
 8020d40:	2000      	movs	r0, #0
 8020d42:	494e      	ldr	r1, [pc, #312]	; (8020e7c <_dtoa_r+0x5ec>)
 8020d44:	f7e7 fcba 	bl	80086bc <__aeabi_ddiv>
 8020d48:	462a      	mov	r2, r5
 8020d4a:	4633      	mov	r3, r6
 8020d4c:	f7e7 f9d4 	bl	80080f8 <__aeabi_dsub>
 8020d50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020d54:	465d      	mov	r5, fp
 8020d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020d5a:	f7e7 fe35 	bl	80089c8 <__aeabi_d2iz>
 8020d5e:	4606      	mov	r6, r0
 8020d60:	f7e7 fb18 	bl	8008394 <__aeabi_i2d>
 8020d64:	4602      	mov	r2, r0
 8020d66:	460b      	mov	r3, r1
 8020d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020d6c:	f7e7 f9c4 	bl	80080f8 <__aeabi_dsub>
 8020d70:	3630      	adds	r6, #48	; 0x30
 8020d72:	f805 6b01 	strb.w	r6, [r5], #1
 8020d76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8020d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8020d7e:	f7e7 fde5 	bl	800894c <__aeabi_dcmplt>
 8020d82:	2800      	cmp	r0, #0
 8020d84:	d163      	bne.n	8020e4e <_dtoa_r+0x5be>
 8020d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020d8a:	2000      	movs	r0, #0
 8020d8c:	4937      	ldr	r1, [pc, #220]	; (8020e6c <_dtoa_r+0x5dc>)
 8020d8e:	f7e7 f9b3 	bl	80080f8 <__aeabi_dsub>
 8020d92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8020d96:	f7e7 fdd9 	bl	800894c <__aeabi_dcmplt>
 8020d9a:	2800      	cmp	r0, #0
 8020d9c:	f040 80b7 	bne.w	8020f0e <_dtoa_r+0x67e>
 8020da0:	eba5 030b 	sub.w	r3, r5, fp
 8020da4:	429f      	cmp	r7, r3
 8020da6:	f77f af7c 	ble.w	8020ca2 <_dtoa_r+0x412>
 8020daa:	2200      	movs	r2, #0
 8020dac:	4b30      	ldr	r3, [pc, #192]	; (8020e70 <_dtoa_r+0x5e0>)
 8020dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020db2:	f7e7 fb59 	bl	8008468 <__aeabi_dmul>
 8020db6:	2200      	movs	r2, #0
 8020db8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020dbc:	4b2c      	ldr	r3, [pc, #176]	; (8020e70 <_dtoa_r+0x5e0>)
 8020dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020dc2:	f7e7 fb51 	bl	8008468 <__aeabi_dmul>
 8020dc6:	e9cd 0100 	strd	r0, r1, [sp]
 8020dca:	e7c4      	b.n	8020d56 <_dtoa_r+0x4c6>
 8020dcc:	462a      	mov	r2, r5
 8020dce:	4633      	mov	r3, r6
 8020dd0:	f7e7 fb4a 	bl	8008468 <__aeabi_dmul>
 8020dd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020dd8:	eb0b 0507 	add.w	r5, fp, r7
 8020ddc:	465e      	mov	r6, fp
 8020dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020de2:	f7e7 fdf1 	bl	80089c8 <__aeabi_d2iz>
 8020de6:	4607      	mov	r7, r0
 8020de8:	f7e7 fad4 	bl	8008394 <__aeabi_i2d>
 8020dec:	3730      	adds	r7, #48	; 0x30
 8020dee:	4602      	mov	r2, r0
 8020df0:	460b      	mov	r3, r1
 8020df2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020df6:	f7e7 f97f 	bl	80080f8 <__aeabi_dsub>
 8020dfa:	f806 7b01 	strb.w	r7, [r6], #1
 8020dfe:	42ae      	cmp	r6, r5
 8020e00:	e9cd 0100 	strd	r0, r1, [sp]
 8020e04:	f04f 0200 	mov.w	r2, #0
 8020e08:	d126      	bne.n	8020e58 <_dtoa_r+0x5c8>
 8020e0a:	4b1c      	ldr	r3, [pc, #112]	; (8020e7c <_dtoa_r+0x5ec>)
 8020e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020e10:	f7e7 f974 	bl	80080fc <__adddf3>
 8020e14:	4602      	mov	r2, r0
 8020e16:	460b      	mov	r3, r1
 8020e18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020e1c:	f7e7 fdb4 	bl	8008988 <__aeabi_dcmpgt>
 8020e20:	2800      	cmp	r0, #0
 8020e22:	d174      	bne.n	8020f0e <_dtoa_r+0x67e>
 8020e24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8020e28:	2000      	movs	r0, #0
 8020e2a:	4914      	ldr	r1, [pc, #80]	; (8020e7c <_dtoa_r+0x5ec>)
 8020e2c:	f7e7 f964 	bl	80080f8 <__aeabi_dsub>
 8020e30:	4602      	mov	r2, r0
 8020e32:	460b      	mov	r3, r1
 8020e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020e38:	f7e7 fd88 	bl	800894c <__aeabi_dcmplt>
 8020e3c:	2800      	cmp	r0, #0
 8020e3e:	f43f af30 	beq.w	8020ca2 <_dtoa_r+0x412>
 8020e42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020e46:	2b30      	cmp	r3, #48	; 0x30
 8020e48:	f105 32ff 	add.w	r2, r5, #4294967295
 8020e4c:	d002      	beq.n	8020e54 <_dtoa_r+0x5c4>
 8020e4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020e52:	e04a      	b.n	8020eea <_dtoa_r+0x65a>
 8020e54:	4615      	mov	r5, r2
 8020e56:	e7f4      	b.n	8020e42 <_dtoa_r+0x5b2>
 8020e58:	4b05      	ldr	r3, [pc, #20]	; (8020e70 <_dtoa_r+0x5e0>)
 8020e5a:	f7e7 fb05 	bl	8008468 <__aeabi_dmul>
 8020e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8020e62:	e7bc      	b.n	8020dde <_dtoa_r+0x54e>
 8020e64:	08035eb8 	.word	0x08035eb8
 8020e68:	08035e90 	.word	0x08035e90
 8020e6c:	3ff00000 	.word	0x3ff00000
 8020e70:	40240000 	.word	0x40240000
 8020e74:	401c0000 	.word	0x401c0000
 8020e78:	40140000 	.word	0x40140000
 8020e7c:	3fe00000 	.word	0x3fe00000
 8020e80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020e84:	465d      	mov	r5, fp
 8020e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020e8a:	4630      	mov	r0, r6
 8020e8c:	4639      	mov	r1, r7
 8020e8e:	f7e7 fc15 	bl	80086bc <__aeabi_ddiv>
 8020e92:	f7e7 fd99 	bl	80089c8 <__aeabi_d2iz>
 8020e96:	4680      	mov	r8, r0
 8020e98:	f7e7 fa7c 	bl	8008394 <__aeabi_i2d>
 8020e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020ea0:	f7e7 fae2 	bl	8008468 <__aeabi_dmul>
 8020ea4:	4602      	mov	r2, r0
 8020ea6:	460b      	mov	r3, r1
 8020ea8:	4630      	mov	r0, r6
 8020eaa:	4639      	mov	r1, r7
 8020eac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8020eb0:	f7e7 f922 	bl	80080f8 <__aeabi_dsub>
 8020eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8020eb8:	eba5 060b 	sub.w	r6, r5, fp
 8020ebc:	45b1      	cmp	r9, r6
 8020ebe:	4602      	mov	r2, r0
 8020ec0:	460b      	mov	r3, r1
 8020ec2:	d139      	bne.n	8020f38 <_dtoa_r+0x6a8>
 8020ec4:	f7e7 f91a 	bl	80080fc <__adddf3>
 8020ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020ecc:	4606      	mov	r6, r0
 8020ece:	460f      	mov	r7, r1
 8020ed0:	f7e7 fd5a 	bl	8008988 <__aeabi_dcmpgt>
 8020ed4:	b9c8      	cbnz	r0, 8020f0a <_dtoa_r+0x67a>
 8020ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020eda:	4630      	mov	r0, r6
 8020edc:	4639      	mov	r1, r7
 8020ede:	f7e7 fd2b 	bl	8008938 <__aeabi_dcmpeq>
 8020ee2:	b110      	cbz	r0, 8020eea <_dtoa_r+0x65a>
 8020ee4:	f018 0f01 	tst.w	r8, #1
 8020ee8:	d10f      	bne.n	8020f0a <_dtoa_r+0x67a>
 8020eea:	9904      	ldr	r1, [sp, #16]
 8020eec:	4620      	mov	r0, r4
 8020eee:	f000 fbdb 	bl	80216a8 <_Bfree>
 8020ef2:	2300      	movs	r3, #0
 8020ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020ef6:	702b      	strb	r3, [r5, #0]
 8020ef8:	f10a 0301 	add.w	r3, sl, #1
 8020efc:	6013      	str	r3, [r2, #0]
 8020efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	f43f acff 	beq.w	8020904 <_dtoa_r+0x74>
 8020f06:	601d      	str	r5, [r3, #0]
 8020f08:	e4fc      	b.n	8020904 <_dtoa_r+0x74>
 8020f0a:	f8cd a020 	str.w	sl, [sp, #32]
 8020f0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020f12:	2a39      	cmp	r2, #57	; 0x39
 8020f14:	f105 33ff 	add.w	r3, r5, #4294967295
 8020f18:	d108      	bne.n	8020f2c <_dtoa_r+0x69c>
 8020f1a:	459b      	cmp	fp, r3
 8020f1c:	d10a      	bne.n	8020f34 <_dtoa_r+0x6a4>
 8020f1e:	9b08      	ldr	r3, [sp, #32]
 8020f20:	3301      	adds	r3, #1
 8020f22:	9308      	str	r3, [sp, #32]
 8020f24:	2330      	movs	r3, #48	; 0x30
 8020f26:	f88b 3000 	strb.w	r3, [fp]
 8020f2a:	465b      	mov	r3, fp
 8020f2c:	781a      	ldrb	r2, [r3, #0]
 8020f2e:	3201      	adds	r2, #1
 8020f30:	701a      	strb	r2, [r3, #0]
 8020f32:	e78c      	b.n	8020e4e <_dtoa_r+0x5be>
 8020f34:	461d      	mov	r5, r3
 8020f36:	e7ea      	b.n	8020f0e <_dtoa_r+0x67e>
 8020f38:	2200      	movs	r2, #0
 8020f3a:	4b9b      	ldr	r3, [pc, #620]	; (80211a8 <_dtoa_r+0x918>)
 8020f3c:	f7e7 fa94 	bl	8008468 <__aeabi_dmul>
 8020f40:	2200      	movs	r2, #0
 8020f42:	2300      	movs	r3, #0
 8020f44:	4606      	mov	r6, r0
 8020f46:	460f      	mov	r7, r1
 8020f48:	f7e7 fcf6 	bl	8008938 <__aeabi_dcmpeq>
 8020f4c:	2800      	cmp	r0, #0
 8020f4e:	d09a      	beq.n	8020e86 <_dtoa_r+0x5f6>
 8020f50:	e7cb      	b.n	8020eea <_dtoa_r+0x65a>
 8020f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f54:	2a00      	cmp	r2, #0
 8020f56:	f000 808b 	beq.w	8021070 <_dtoa_r+0x7e0>
 8020f5a:	9a06      	ldr	r2, [sp, #24]
 8020f5c:	2a01      	cmp	r2, #1
 8020f5e:	dc6e      	bgt.n	802103e <_dtoa_r+0x7ae>
 8020f60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020f62:	2a00      	cmp	r2, #0
 8020f64:	d067      	beq.n	8021036 <_dtoa_r+0x7a6>
 8020f66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020f6a:	9f07      	ldr	r7, [sp, #28]
 8020f6c:	9d05      	ldr	r5, [sp, #20]
 8020f6e:	9a05      	ldr	r2, [sp, #20]
 8020f70:	2101      	movs	r1, #1
 8020f72:	441a      	add	r2, r3
 8020f74:	4620      	mov	r0, r4
 8020f76:	9205      	str	r2, [sp, #20]
 8020f78:	4498      	add	r8, r3
 8020f7a:	f000 fc27 	bl	80217cc <__i2b>
 8020f7e:	4606      	mov	r6, r0
 8020f80:	2d00      	cmp	r5, #0
 8020f82:	dd0c      	ble.n	8020f9e <_dtoa_r+0x70e>
 8020f84:	f1b8 0f00 	cmp.w	r8, #0
 8020f88:	dd09      	ble.n	8020f9e <_dtoa_r+0x70e>
 8020f8a:	4545      	cmp	r5, r8
 8020f8c:	9a05      	ldr	r2, [sp, #20]
 8020f8e:	462b      	mov	r3, r5
 8020f90:	bfa8      	it	ge
 8020f92:	4643      	movge	r3, r8
 8020f94:	1ad2      	subs	r2, r2, r3
 8020f96:	9205      	str	r2, [sp, #20]
 8020f98:	1aed      	subs	r5, r5, r3
 8020f9a:	eba8 0803 	sub.w	r8, r8, r3
 8020f9e:	9b07      	ldr	r3, [sp, #28]
 8020fa0:	b1eb      	cbz	r3, 8020fde <_dtoa_r+0x74e>
 8020fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d067      	beq.n	8021078 <_dtoa_r+0x7e8>
 8020fa8:	b18f      	cbz	r7, 8020fce <_dtoa_r+0x73e>
 8020faa:	4631      	mov	r1, r6
 8020fac:	463a      	mov	r2, r7
 8020fae:	4620      	mov	r0, r4
 8020fb0:	f000 fcac 	bl	802190c <__pow5mult>
 8020fb4:	9a04      	ldr	r2, [sp, #16]
 8020fb6:	4601      	mov	r1, r0
 8020fb8:	4606      	mov	r6, r0
 8020fba:	4620      	mov	r0, r4
 8020fbc:	f000 fc0f 	bl	80217de <__multiply>
 8020fc0:	9904      	ldr	r1, [sp, #16]
 8020fc2:	9008      	str	r0, [sp, #32]
 8020fc4:	4620      	mov	r0, r4
 8020fc6:	f000 fb6f 	bl	80216a8 <_Bfree>
 8020fca:	9b08      	ldr	r3, [sp, #32]
 8020fcc:	9304      	str	r3, [sp, #16]
 8020fce:	9b07      	ldr	r3, [sp, #28]
 8020fd0:	1bda      	subs	r2, r3, r7
 8020fd2:	d004      	beq.n	8020fde <_dtoa_r+0x74e>
 8020fd4:	9904      	ldr	r1, [sp, #16]
 8020fd6:	4620      	mov	r0, r4
 8020fd8:	f000 fc98 	bl	802190c <__pow5mult>
 8020fdc:	9004      	str	r0, [sp, #16]
 8020fde:	2101      	movs	r1, #1
 8020fe0:	4620      	mov	r0, r4
 8020fe2:	f000 fbf3 	bl	80217cc <__i2b>
 8020fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020fe8:	4607      	mov	r7, r0
 8020fea:	2b00      	cmp	r3, #0
 8020fec:	f000 81cf 	beq.w	802138e <_dtoa_r+0xafe>
 8020ff0:	461a      	mov	r2, r3
 8020ff2:	4601      	mov	r1, r0
 8020ff4:	4620      	mov	r0, r4
 8020ff6:	f000 fc89 	bl	802190c <__pow5mult>
 8020ffa:	9b06      	ldr	r3, [sp, #24]
 8020ffc:	2b01      	cmp	r3, #1
 8020ffe:	4607      	mov	r7, r0
 8021000:	dc40      	bgt.n	8021084 <_dtoa_r+0x7f4>
 8021002:	9b00      	ldr	r3, [sp, #0]
 8021004:	2b00      	cmp	r3, #0
 8021006:	d139      	bne.n	802107c <_dtoa_r+0x7ec>
 8021008:	9b01      	ldr	r3, [sp, #4]
 802100a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802100e:	2b00      	cmp	r3, #0
 8021010:	d136      	bne.n	8021080 <_dtoa_r+0x7f0>
 8021012:	9b01      	ldr	r3, [sp, #4]
 8021014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021018:	0d1b      	lsrs	r3, r3, #20
 802101a:	051b      	lsls	r3, r3, #20
 802101c:	b12b      	cbz	r3, 802102a <_dtoa_r+0x79a>
 802101e:	9b05      	ldr	r3, [sp, #20]
 8021020:	3301      	adds	r3, #1
 8021022:	9305      	str	r3, [sp, #20]
 8021024:	f108 0801 	add.w	r8, r8, #1
 8021028:	2301      	movs	r3, #1
 802102a:	9307      	str	r3, [sp, #28]
 802102c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802102e:	2b00      	cmp	r3, #0
 8021030:	d12a      	bne.n	8021088 <_dtoa_r+0x7f8>
 8021032:	2001      	movs	r0, #1
 8021034:	e030      	b.n	8021098 <_dtoa_r+0x808>
 8021036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021038:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802103c:	e795      	b.n	8020f6a <_dtoa_r+0x6da>
 802103e:	9b07      	ldr	r3, [sp, #28]
 8021040:	f109 37ff 	add.w	r7, r9, #4294967295
 8021044:	42bb      	cmp	r3, r7
 8021046:	bfbf      	itttt	lt
 8021048:	9b07      	ldrlt	r3, [sp, #28]
 802104a:	9707      	strlt	r7, [sp, #28]
 802104c:	1afa      	sublt	r2, r7, r3
 802104e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8021050:	bfbb      	ittet	lt
 8021052:	189b      	addlt	r3, r3, r2
 8021054:	930e      	strlt	r3, [sp, #56]	; 0x38
 8021056:	1bdf      	subge	r7, r3, r7
 8021058:	2700      	movlt	r7, #0
 802105a:	f1b9 0f00 	cmp.w	r9, #0
 802105e:	bfb5      	itete	lt
 8021060:	9b05      	ldrlt	r3, [sp, #20]
 8021062:	9d05      	ldrge	r5, [sp, #20]
 8021064:	eba3 0509 	sublt.w	r5, r3, r9
 8021068:	464b      	movge	r3, r9
 802106a:	bfb8      	it	lt
 802106c:	2300      	movlt	r3, #0
 802106e:	e77e      	b.n	8020f6e <_dtoa_r+0x6de>
 8021070:	9f07      	ldr	r7, [sp, #28]
 8021072:	9d05      	ldr	r5, [sp, #20]
 8021074:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021076:	e783      	b.n	8020f80 <_dtoa_r+0x6f0>
 8021078:	9a07      	ldr	r2, [sp, #28]
 802107a:	e7ab      	b.n	8020fd4 <_dtoa_r+0x744>
 802107c:	2300      	movs	r3, #0
 802107e:	e7d4      	b.n	802102a <_dtoa_r+0x79a>
 8021080:	9b00      	ldr	r3, [sp, #0]
 8021082:	e7d2      	b.n	802102a <_dtoa_r+0x79a>
 8021084:	2300      	movs	r3, #0
 8021086:	9307      	str	r3, [sp, #28]
 8021088:	693b      	ldr	r3, [r7, #16]
 802108a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802108e:	6918      	ldr	r0, [r3, #16]
 8021090:	f000 fb4e 	bl	8021730 <__hi0bits>
 8021094:	f1c0 0020 	rsb	r0, r0, #32
 8021098:	4440      	add	r0, r8
 802109a:	f010 001f 	ands.w	r0, r0, #31
 802109e:	d047      	beq.n	8021130 <_dtoa_r+0x8a0>
 80210a0:	f1c0 0320 	rsb	r3, r0, #32
 80210a4:	2b04      	cmp	r3, #4
 80210a6:	dd3b      	ble.n	8021120 <_dtoa_r+0x890>
 80210a8:	9b05      	ldr	r3, [sp, #20]
 80210aa:	f1c0 001c 	rsb	r0, r0, #28
 80210ae:	4403      	add	r3, r0
 80210b0:	9305      	str	r3, [sp, #20]
 80210b2:	4405      	add	r5, r0
 80210b4:	4480      	add	r8, r0
 80210b6:	9b05      	ldr	r3, [sp, #20]
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	dd05      	ble.n	80210c8 <_dtoa_r+0x838>
 80210bc:	461a      	mov	r2, r3
 80210be:	9904      	ldr	r1, [sp, #16]
 80210c0:	4620      	mov	r0, r4
 80210c2:	f000 fc63 	bl	802198c <__lshift>
 80210c6:	9004      	str	r0, [sp, #16]
 80210c8:	f1b8 0f00 	cmp.w	r8, #0
 80210cc:	dd05      	ble.n	80210da <_dtoa_r+0x84a>
 80210ce:	4639      	mov	r1, r7
 80210d0:	4642      	mov	r2, r8
 80210d2:	4620      	mov	r0, r4
 80210d4:	f000 fc5a 	bl	802198c <__lshift>
 80210d8:	4607      	mov	r7, r0
 80210da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80210dc:	b353      	cbz	r3, 8021134 <_dtoa_r+0x8a4>
 80210de:	4639      	mov	r1, r7
 80210e0:	9804      	ldr	r0, [sp, #16]
 80210e2:	f000 fca7 	bl	8021a34 <__mcmp>
 80210e6:	2800      	cmp	r0, #0
 80210e8:	da24      	bge.n	8021134 <_dtoa_r+0x8a4>
 80210ea:	2300      	movs	r3, #0
 80210ec:	220a      	movs	r2, #10
 80210ee:	9904      	ldr	r1, [sp, #16]
 80210f0:	4620      	mov	r0, r4
 80210f2:	f000 fae2 	bl	80216ba <__multadd>
 80210f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210f8:	9004      	str	r0, [sp, #16]
 80210fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80210fe:	2b00      	cmp	r3, #0
 8021100:	f000 814c 	beq.w	802139c <_dtoa_r+0xb0c>
 8021104:	2300      	movs	r3, #0
 8021106:	4631      	mov	r1, r6
 8021108:	220a      	movs	r2, #10
 802110a:	4620      	mov	r0, r4
 802110c:	f000 fad5 	bl	80216ba <__multadd>
 8021110:	9b02      	ldr	r3, [sp, #8]
 8021112:	2b00      	cmp	r3, #0
 8021114:	4606      	mov	r6, r0
 8021116:	dc4f      	bgt.n	80211b8 <_dtoa_r+0x928>
 8021118:	9b06      	ldr	r3, [sp, #24]
 802111a:	2b02      	cmp	r3, #2
 802111c:	dd4c      	ble.n	80211b8 <_dtoa_r+0x928>
 802111e:	e011      	b.n	8021144 <_dtoa_r+0x8b4>
 8021120:	d0c9      	beq.n	80210b6 <_dtoa_r+0x826>
 8021122:	9a05      	ldr	r2, [sp, #20]
 8021124:	331c      	adds	r3, #28
 8021126:	441a      	add	r2, r3
 8021128:	9205      	str	r2, [sp, #20]
 802112a:	441d      	add	r5, r3
 802112c:	4498      	add	r8, r3
 802112e:	e7c2      	b.n	80210b6 <_dtoa_r+0x826>
 8021130:	4603      	mov	r3, r0
 8021132:	e7f6      	b.n	8021122 <_dtoa_r+0x892>
 8021134:	f1b9 0f00 	cmp.w	r9, #0
 8021138:	dc38      	bgt.n	80211ac <_dtoa_r+0x91c>
 802113a:	9b06      	ldr	r3, [sp, #24]
 802113c:	2b02      	cmp	r3, #2
 802113e:	dd35      	ble.n	80211ac <_dtoa_r+0x91c>
 8021140:	f8cd 9008 	str.w	r9, [sp, #8]
 8021144:	9b02      	ldr	r3, [sp, #8]
 8021146:	b963      	cbnz	r3, 8021162 <_dtoa_r+0x8d2>
 8021148:	4639      	mov	r1, r7
 802114a:	2205      	movs	r2, #5
 802114c:	4620      	mov	r0, r4
 802114e:	f000 fab4 	bl	80216ba <__multadd>
 8021152:	4601      	mov	r1, r0
 8021154:	4607      	mov	r7, r0
 8021156:	9804      	ldr	r0, [sp, #16]
 8021158:	f000 fc6c 	bl	8021a34 <__mcmp>
 802115c:	2800      	cmp	r0, #0
 802115e:	f73f adcc 	bgt.w	8020cfa <_dtoa_r+0x46a>
 8021162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021164:	465d      	mov	r5, fp
 8021166:	ea6f 0a03 	mvn.w	sl, r3
 802116a:	f04f 0900 	mov.w	r9, #0
 802116e:	4639      	mov	r1, r7
 8021170:	4620      	mov	r0, r4
 8021172:	f000 fa99 	bl	80216a8 <_Bfree>
 8021176:	2e00      	cmp	r6, #0
 8021178:	f43f aeb7 	beq.w	8020eea <_dtoa_r+0x65a>
 802117c:	f1b9 0f00 	cmp.w	r9, #0
 8021180:	d005      	beq.n	802118e <_dtoa_r+0x8fe>
 8021182:	45b1      	cmp	r9, r6
 8021184:	d003      	beq.n	802118e <_dtoa_r+0x8fe>
 8021186:	4649      	mov	r1, r9
 8021188:	4620      	mov	r0, r4
 802118a:	f000 fa8d 	bl	80216a8 <_Bfree>
 802118e:	4631      	mov	r1, r6
 8021190:	4620      	mov	r0, r4
 8021192:	f000 fa89 	bl	80216a8 <_Bfree>
 8021196:	e6a8      	b.n	8020eea <_dtoa_r+0x65a>
 8021198:	2700      	movs	r7, #0
 802119a:	463e      	mov	r6, r7
 802119c:	e7e1      	b.n	8021162 <_dtoa_r+0x8d2>
 802119e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80211a2:	463e      	mov	r6, r7
 80211a4:	e5a9      	b.n	8020cfa <_dtoa_r+0x46a>
 80211a6:	bf00      	nop
 80211a8:	40240000 	.word	0x40240000
 80211ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80211b2:	2b00      	cmp	r3, #0
 80211b4:	f000 80f9 	beq.w	80213aa <_dtoa_r+0xb1a>
 80211b8:	2d00      	cmp	r5, #0
 80211ba:	dd05      	ble.n	80211c8 <_dtoa_r+0x938>
 80211bc:	4631      	mov	r1, r6
 80211be:	462a      	mov	r2, r5
 80211c0:	4620      	mov	r0, r4
 80211c2:	f000 fbe3 	bl	802198c <__lshift>
 80211c6:	4606      	mov	r6, r0
 80211c8:	9b07      	ldr	r3, [sp, #28]
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d04c      	beq.n	8021268 <_dtoa_r+0x9d8>
 80211ce:	6871      	ldr	r1, [r6, #4]
 80211d0:	4620      	mov	r0, r4
 80211d2:	f000 fa44 	bl	802165e <_Balloc>
 80211d6:	6932      	ldr	r2, [r6, #16]
 80211d8:	3202      	adds	r2, #2
 80211da:	4605      	mov	r5, r0
 80211dc:	0092      	lsls	r2, r2, #2
 80211de:	f106 010c 	add.w	r1, r6, #12
 80211e2:	300c      	adds	r0, #12
 80211e4:	f000 fa30 	bl	8021648 <memcpy>
 80211e8:	2201      	movs	r2, #1
 80211ea:	4629      	mov	r1, r5
 80211ec:	4620      	mov	r0, r4
 80211ee:	f000 fbcd 	bl	802198c <__lshift>
 80211f2:	9b00      	ldr	r3, [sp, #0]
 80211f4:	f8cd b014 	str.w	fp, [sp, #20]
 80211f8:	f003 0301 	and.w	r3, r3, #1
 80211fc:	46b1      	mov	r9, r6
 80211fe:	9307      	str	r3, [sp, #28]
 8021200:	4606      	mov	r6, r0
 8021202:	4639      	mov	r1, r7
 8021204:	9804      	ldr	r0, [sp, #16]
 8021206:	f7ff fab7 	bl	8020778 <quorem>
 802120a:	4649      	mov	r1, r9
 802120c:	4605      	mov	r5, r0
 802120e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8021212:	9804      	ldr	r0, [sp, #16]
 8021214:	f000 fc0e 	bl	8021a34 <__mcmp>
 8021218:	4632      	mov	r2, r6
 802121a:	9000      	str	r0, [sp, #0]
 802121c:	4639      	mov	r1, r7
 802121e:	4620      	mov	r0, r4
 8021220:	f000 fc22 	bl	8021a68 <__mdiff>
 8021224:	68c3      	ldr	r3, [r0, #12]
 8021226:	4602      	mov	r2, r0
 8021228:	bb03      	cbnz	r3, 802126c <_dtoa_r+0x9dc>
 802122a:	4601      	mov	r1, r0
 802122c:	9008      	str	r0, [sp, #32]
 802122e:	9804      	ldr	r0, [sp, #16]
 8021230:	f000 fc00 	bl	8021a34 <__mcmp>
 8021234:	9a08      	ldr	r2, [sp, #32]
 8021236:	4603      	mov	r3, r0
 8021238:	4611      	mov	r1, r2
 802123a:	4620      	mov	r0, r4
 802123c:	9308      	str	r3, [sp, #32]
 802123e:	f000 fa33 	bl	80216a8 <_Bfree>
 8021242:	9b08      	ldr	r3, [sp, #32]
 8021244:	b9a3      	cbnz	r3, 8021270 <_dtoa_r+0x9e0>
 8021246:	9a06      	ldr	r2, [sp, #24]
 8021248:	b992      	cbnz	r2, 8021270 <_dtoa_r+0x9e0>
 802124a:	9a07      	ldr	r2, [sp, #28]
 802124c:	b982      	cbnz	r2, 8021270 <_dtoa_r+0x9e0>
 802124e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8021252:	d029      	beq.n	80212a8 <_dtoa_r+0xa18>
 8021254:	9b00      	ldr	r3, [sp, #0]
 8021256:	2b00      	cmp	r3, #0
 8021258:	dd01      	ble.n	802125e <_dtoa_r+0x9ce>
 802125a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 802125e:	9b05      	ldr	r3, [sp, #20]
 8021260:	1c5d      	adds	r5, r3, #1
 8021262:	f883 8000 	strb.w	r8, [r3]
 8021266:	e782      	b.n	802116e <_dtoa_r+0x8de>
 8021268:	4630      	mov	r0, r6
 802126a:	e7c2      	b.n	80211f2 <_dtoa_r+0x962>
 802126c:	2301      	movs	r3, #1
 802126e:	e7e3      	b.n	8021238 <_dtoa_r+0x9a8>
 8021270:	9a00      	ldr	r2, [sp, #0]
 8021272:	2a00      	cmp	r2, #0
 8021274:	db04      	blt.n	8021280 <_dtoa_r+0x9f0>
 8021276:	d125      	bne.n	80212c4 <_dtoa_r+0xa34>
 8021278:	9a06      	ldr	r2, [sp, #24]
 802127a:	bb1a      	cbnz	r2, 80212c4 <_dtoa_r+0xa34>
 802127c:	9a07      	ldr	r2, [sp, #28]
 802127e:	bb0a      	cbnz	r2, 80212c4 <_dtoa_r+0xa34>
 8021280:	2b00      	cmp	r3, #0
 8021282:	ddec      	ble.n	802125e <_dtoa_r+0x9ce>
 8021284:	2201      	movs	r2, #1
 8021286:	9904      	ldr	r1, [sp, #16]
 8021288:	4620      	mov	r0, r4
 802128a:	f000 fb7f 	bl	802198c <__lshift>
 802128e:	4639      	mov	r1, r7
 8021290:	9004      	str	r0, [sp, #16]
 8021292:	f000 fbcf 	bl	8021a34 <__mcmp>
 8021296:	2800      	cmp	r0, #0
 8021298:	dc03      	bgt.n	80212a2 <_dtoa_r+0xa12>
 802129a:	d1e0      	bne.n	802125e <_dtoa_r+0x9ce>
 802129c:	f018 0f01 	tst.w	r8, #1
 80212a0:	d0dd      	beq.n	802125e <_dtoa_r+0x9ce>
 80212a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80212a6:	d1d8      	bne.n	802125a <_dtoa_r+0x9ca>
 80212a8:	9b05      	ldr	r3, [sp, #20]
 80212aa:	9a05      	ldr	r2, [sp, #20]
 80212ac:	1c5d      	adds	r5, r3, #1
 80212ae:	2339      	movs	r3, #57	; 0x39
 80212b0:	7013      	strb	r3, [r2, #0]
 80212b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80212b6:	2b39      	cmp	r3, #57	; 0x39
 80212b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80212bc:	d04f      	beq.n	802135e <_dtoa_r+0xace>
 80212be:	3301      	adds	r3, #1
 80212c0:	7013      	strb	r3, [r2, #0]
 80212c2:	e754      	b.n	802116e <_dtoa_r+0x8de>
 80212c4:	9a05      	ldr	r2, [sp, #20]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	f102 0501 	add.w	r5, r2, #1
 80212cc:	dd06      	ble.n	80212dc <_dtoa_r+0xa4c>
 80212ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80212d2:	d0e9      	beq.n	80212a8 <_dtoa_r+0xa18>
 80212d4:	f108 0801 	add.w	r8, r8, #1
 80212d8:	9b05      	ldr	r3, [sp, #20]
 80212da:	e7c2      	b.n	8021262 <_dtoa_r+0x9d2>
 80212dc:	9a02      	ldr	r2, [sp, #8]
 80212de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80212e2:	eba5 030b 	sub.w	r3, r5, fp
 80212e6:	4293      	cmp	r3, r2
 80212e8:	d021      	beq.n	802132e <_dtoa_r+0xa9e>
 80212ea:	2300      	movs	r3, #0
 80212ec:	220a      	movs	r2, #10
 80212ee:	9904      	ldr	r1, [sp, #16]
 80212f0:	4620      	mov	r0, r4
 80212f2:	f000 f9e2 	bl	80216ba <__multadd>
 80212f6:	45b1      	cmp	r9, r6
 80212f8:	9004      	str	r0, [sp, #16]
 80212fa:	f04f 0300 	mov.w	r3, #0
 80212fe:	f04f 020a 	mov.w	r2, #10
 8021302:	4649      	mov	r1, r9
 8021304:	4620      	mov	r0, r4
 8021306:	d105      	bne.n	8021314 <_dtoa_r+0xa84>
 8021308:	f000 f9d7 	bl	80216ba <__multadd>
 802130c:	4681      	mov	r9, r0
 802130e:	4606      	mov	r6, r0
 8021310:	9505      	str	r5, [sp, #20]
 8021312:	e776      	b.n	8021202 <_dtoa_r+0x972>
 8021314:	f000 f9d1 	bl	80216ba <__multadd>
 8021318:	4631      	mov	r1, r6
 802131a:	4681      	mov	r9, r0
 802131c:	2300      	movs	r3, #0
 802131e:	220a      	movs	r2, #10
 8021320:	4620      	mov	r0, r4
 8021322:	f000 f9ca 	bl	80216ba <__multadd>
 8021326:	4606      	mov	r6, r0
 8021328:	e7f2      	b.n	8021310 <_dtoa_r+0xa80>
 802132a:	f04f 0900 	mov.w	r9, #0
 802132e:	2201      	movs	r2, #1
 8021330:	9904      	ldr	r1, [sp, #16]
 8021332:	4620      	mov	r0, r4
 8021334:	f000 fb2a 	bl	802198c <__lshift>
 8021338:	4639      	mov	r1, r7
 802133a:	9004      	str	r0, [sp, #16]
 802133c:	f000 fb7a 	bl	8021a34 <__mcmp>
 8021340:	2800      	cmp	r0, #0
 8021342:	dcb6      	bgt.n	80212b2 <_dtoa_r+0xa22>
 8021344:	d102      	bne.n	802134c <_dtoa_r+0xabc>
 8021346:	f018 0f01 	tst.w	r8, #1
 802134a:	d1b2      	bne.n	80212b2 <_dtoa_r+0xa22>
 802134c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021350:	2b30      	cmp	r3, #48	; 0x30
 8021352:	f105 32ff 	add.w	r2, r5, #4294967295
 8021356:	f47f af0a 	bne.w	802116e <_dtoa_r+0x8de>
 802135a:	4615      	mov	r5, r2
 802135c:	e7f6      	b.n	802134c <_dtoa_r+0xabc>
 802135e:	4593      	cmp	fp, r2
 8021360:	d105      	bne.n	802136e <_dtoa_r+0xade>
 8021362:	2331      	movs	r3, #49	; 0x31
 8021364:	f10a 0a01 	add.w	sl, sl, #1
 8021368:	f88b 3000 	strb.w	r3, [fp]
 802136c:	e6ff      	b.n	802116e <_dtoa_r+0x8de>
 802136e:	4615      	mov	r5, r2
 8021370:	e79f      	b.n	80212b2 <_dtoa_r+0xa22>
 8021372:	f8df b064 	ldr.w	fp, [pc, #100]	; 80213d8 <_dtoa_r+0xb48>
 8021376:	f7ff bac5 	b.w	8020904 <_dtoa_r+0x74>
 802137a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802137c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80213dc <_dtoa_r+0xb4c>
 8021380:	2b00      	cmp	r3, #0
 8021382:	f43f aabf 	beq.w	8020904 <_dtoa_r+0x74>
 8021386:	f10b 0308 	add.w	r3, fp, #8
 802138a:	f7ff bab9 	b.w	8020900 <_dtoa_r+0x70>
 802138e:	9b06      	ldr	r3, [sp, #24]
 8021390:	2b01      	cmp	r3, #1
 8021392:	f77f ae36 	ble.w	8021002 <_dtoa_r+0x772>
 8021396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021398:	9307      	str	r3, [sp, #28]
 802139a:	e64a      	b.n	8021032 <_dtoa_r+0x7a2>
 802139c:	9b02      	ldr	r3, [sp, #8]
 802139e:	2b00      	cmp	r3, #0
 80213a0:	dc03      	bgt.n	80213aa <_dtoa_r+0xb1a>
 80213a2:	9b06      	ldr	r3, [sp, #24]
 80213a4:	2b02      	cmp	r3, #2
 80213a6:	f73f aecd 	bgt.w	8021144 <_dtoa_r+0x8b4>
 80213aa:	465d      	mov	r5, fp
 80213ac:	4639      	mov	r1, r7
 80213ae:	9804      	ldr	r0, [sp, #16]
 80213b0:	f7ff f9e2 	bl	8020778 <quorem>
 80213b4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80213b8:	f805 8b01 	strb.w	r8, [r5], #1
 80213bc:	9a02      	ldr	r2, [sp, #8]
 80213be:	eba5 030b 	sub.w	r3, r5, fp
 80213c2:	429a      	cmp	r2, r3
 80213c4:	ddb1      	ble.n	802132a <_dtoa_r+0xa9a>
 80213c6:	2300      	movs	r3, #0
 80213c8:	220a      	movs	r2, #10
 80213ca:	9904      	ldr	r1, [sp, #16]
 80213cc:	4620      	mov	r0, r4
 80213ce:	f000 f974 	bl	80216ba <__multadd>
 80213d2:	9004      	str	r0, [sp, #16]
 80213d4:	e7ea      	b.n	80213ac <_dtoa_r+0xb1c>
 80213d6:	bf00      	nop
 80213d8:	08035f90 	.word	0x08035f90
 80213dc:	08035e7d 	.word	0x08035e7d

080213e0 <__libc_fini_array>:
 80213e0:	b538      	push	{r3, r4, r5, lr}
 80213e2:	4d07      	ldr	r5, [pc, #28]	; (8021400 <__libc_fini_array+0x20>)
 80213e4:	4c07      	ldr	r4, [pc, #28]	; (8021404 <__libc_fini_array+0x24>)
 80213e6:	1b64      	subs	r4, r4, r5
 80213e8:	10a4      	asrs	r4, r4, #2
 80213ea:	b91c      	cbnz	r4, 80213f4 <__libc_fini_array+0x14>
 80213ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80213f0:	f003 ba02 	b.w	80247f8 <_fini>
 80213f4:	3c01      	subs	r4, #1
 80213f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80213fa:	4798      	blx	r3
 80213fc:	e7f5      	b.n	80213ea <__libc_fini_array+0xa>
 80213fe:	bf00      	nop
 8021400:	080361c8 	.word	0x080361c8
 8021404:	080361cc 	.word	0x080361cc

08021408 <_malloc_trim_r>:
 8021408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802140c:	4605      	mov	r5, r0
 802140e:	2008      	movs	r0, #8
 8021410:	460c      	mov	r4, r1
 8021412:	f7ff f987 	bl	8020724 <sysconf>
 8021416:	4f23      	ldr	r7, [pc, #140]	; (80214a4 <_malloc_trim_r+0x9c>)
 8021418:	4680      	mov	r8, r0
 802141a:	4628      	mov	r0, r5
 802141c:	f7fd fef0 	bl	801f200 <__malloc_lock>
 8021420:	68bb      	ldr	r3, [r7, #8]
 8021422:	685e      	ldr	r6, [r3, #4]
 8021424:	f026 0603 	bic.w	r6, r6, #3
 8021428:	1b34      	subs	r4, r6, r4
 802142a:	3c11      	subs	r4, #17
 802142c:	4444      	add	r4, r8
 802142e:	fbb4 f4f8 	udiv	r4, r4, r8
 8021432:	3c01      	subs	r4, #1
 8021434:	fb08 f404 	mul.w	r4, r8, r4
 8021438:	45a0      	cmp	r8, r4
 802143a:	dd05      	ble.n	8021448 <_malloc_trim_r+0x40>
 802143c:	4628      	mov	r0, r5
 802143e:	f7fd fee5 	bl	801f20c <__malloc_unlock>
 8021442:	2000      	movs	r0, #0
 8021444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021448:	2100      	movs	r1, #0
 802144a:	4628      	mov	r0, r5
 802144c:	f7fd fee4 	bl	801f218 <_sbrk_r>
 8021450:	68bb      	ldr	r3, [r7, #8]
 8021452:	4433      	add	r3, r6
 8021454:	4298      	cmp	r0, r3
 8021456:	d1f1      	bne.n	802143c <_malloc_trim_r+0x34>
 8021458:	4261      	negs	r1, r4
 802145a:	4628      	mov	r0, r5
 802145c:	f7fd fedc 	bl	801f218 <_sbrk_r>
 8021460:	3001      	adds	r0, #1
 8021462:	d110      	bne.n	8021486 <_malloc_trim_r+0x7e>
 8021464:	2100      	movs	r1, #0
 8021466:	4628      	mov	r0, r5
 8021468:	f7fd fed6 	bl	801f218 <_sbrk_r>
 802146c:	68ba      	ldr	r2, [r7, #8]
 802146e:	1a83      	subs	r3, r0, r2
 8021470:	2b0f      	cmp	r3, #15
 8021472:	dde3      	ble.n	802143c <_malloc_trim_r+0x34>
 8021474:	490c      	ldr	r1, [pc, #48]	; (80214a8 <_malloc_trim_r+0xa0>)
 8021476:	6809      	ldr	r1, [r1, #0]
 8021478:	1a40      	subs	r0, r0, r1
 802147a:	490c      	ldr	r1, [pc, #48]	; (80214ac <_malloc_trim_r+0xa4>)
 802147c:	f043 0301 	orr.w	r3, r3, #1
 8021480:	6008      	str	r0, [r1, #0]
 8021482:	6053      	str	r3, [r2, #4]
 8021484:	e7da      	b.n	802143c <_malloc_trim_r+0x34>
 8021486:	68bb      	ldr	r3, [r7, #8]
 8021488:	4a08      	ldr	r2, [pc, #32]	; (80214ac <_malloc_trim_r+0xa4>)
 802148a:	1b36      	subs	r6, r6, r4
 802148c:	f046 0601 	orr.w	r6, r6, #1
 8021490:	605e      	str	r6, [r3, #4]
 8021492:	6813      	ldr	r3, [r2, #0]
 8021494:	4628      	mov	r0, r5
 8021496:	1b1c      	subs	r4, r3, r4
 8021498:	6014      	str	r4, [r2, #0]
 802149a:	f7fd feb7 	bl	801f20c <__malloc_unlock>
 802149e:	2001      	movs	r0, #1
 80214a0:	e7d0      	b.n	8021444 <_malloc_trim_r+0x3c>
 80214a2:	bf00      	nop
 80214a4:	2000222c 	.word	0x2000222c
 80214a8:	20002634 	.word	0x20002634
 80214ac:	2000283c 	.word	0x2000283c

080214b0 <_free_r>:
 80214b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80214b4:	4604      	mov	r4, r0
 80214b6:	4688      	mov	r8, r1
 80214b8:	2900      	cmp	r1, #0
 80214ba:	f000 80ab 	beq.w	8021614 <_free_r+0x164>
 80214be:	f7fd fe9f 	bl	801f200 <__malloc_lock>
 80214c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80214c6:	4d54      	ldr	r5, [pc, #336]	; (8021618 <_free_r+0x168>)
 80214c8:	f022 0001 	bic.w	r0, r2, #1
 80214cc:	f1a8 0308 	sub.w	r3, r8, #8
 80214d0:	181f      	adds	r7, r3, r0
 80214d2:	68a9      	ldr	r1, [r5, #8]
 80214d4:	687e      	ldr	r6, [r7, #4]
 80214d6:	42b9      	cmp	r1, r7
 80214d8:	f026 0603 	bic.w	r6, r6, #3
 80214dc:	f002 0201 	and.w	r2, r2, #1
 80214e0:	d11b      	bne.n	802151a <_free_r+0x6a>
 80214e2:	4430      	add	r0, r6
 80214e4:	b93a      	cbnz	r2, 80214f6 <_free_r+0x46>
 80214e6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80214ea:	1a9b      	subs	r3, r3, r2
 80214ec:	4410      	add	r0, r2
 80214ee:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80214f2:	60ca      	str	r2, [r1, #12]
 80214f4:	6091      	str	r1, [r2, #8]
 80214f6:	f040 0201 	orr.w	r2, r0, #1
 80214fa:	605a      	str	r2, [r3, #4]
 80214fc:	60ab      	str	r3, [r5, #8]
 80214fe:	4b47      	ldr	r3, [pc, #284]	; (802161c <_free_r+0x16c>)
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	4283      	cmp	r3, r0
 8021504:	d804      	bhi.n	8021510 <_free_r+0x60>
 8021506:	4b46      	ldr	r3, [pc, #280]	; (8021620 <_free_r+0x170>)
 8021508:	4620      	mov	r0, r4
 802150a:	6819      	ldr	r1, [r3, #0]
 802150c:	f7ff ff7c 	bl	8021408 <_malloc_trim_r>
 8021510:	4620      	mov	r0, r4
 8021512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021516:	f7fd be79 	b.w	801f20c <__malloc_unlock>
 802151a:	607e      	str	r6, [r7, #4]
 802151c:	2a00      	cmp	r2, #0
 802151e:	d139      	bne.n	8021594 <_free_r+0xe4>
 8021520:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8021524:	1a5b      	subs	r3, r3, r1
 8021526:	4408      	add	r0, r1
 8021528:	6899      	ldr	r1, [r3, #8]
 802152a:	f105 0c08 	add.w	ip, r5, #8
 802152e:	4561      	cmp	r1, ip
 8021530:	d032      	beq.n	8021598 <_free_r+0xe8>
 8021532:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8021536:	f8c1 c00c 	str.w	ip, [r1, #12]
 802153a:	f8cc 1008 	str.w	r1, [ip, #8]
 802153e:	19b9      	adds	r1, r7, r6
 8021540:	6849      	ldr	r1, [r1, #4]
 8021542:	07c9      	lsls	r1, r1, #31
 8021544:	d40a      	bmi.n	802155c <_free_r+0xac>
 8021546:	4430      	add	r0, r6
 8021548:	68b9      	ldr	r1, [r7, #8]
 802154a:	bb3a      	cbnz	r2, 802159c <_free_r+0xec>
 802154c:	4e35      	ldr	r6, [pc, #212]	; (8021624 <_free_r+0x174>)
 802154e:	42b1      	cmp	r1, r6
 8021550:	d124      	bne.n	802159c <_free_r+0xec>
 8021552:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8021556:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802155a:	2201      	movs	r2, #1
 802155c:	f040 0101 	orr.w	r1, r0, #1
 8021560:	6059      	str	r1, [r3, #4]
 8021562:	5018      	str	r0, [r3, r0]
 8021564:	2a00      	cmp	r2, #0
 8021566:	d1d3      	bne.n	8021510 <_free_r+0x60>
 8021568:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 802156c:	d21a      	bcs.n	80215a4 <_free_r+0xf4>
 802156e:	08c0      	lsrs	r0, r0, #3
 8021570:	1081      	asrs	r1, r0, #2
 8021572:	2201      	movs	r2, #1
 8021574:	408a      	lsls	r2, r1
 8021576:	6869      	ldr	r1, [r5, #4]
 8021578:	3001      	adds	r0, #1
 802157a:	430a      	orrs	r2, r1
 802157c:	606a      	str	r2, [r5, #4]
 802157e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8021582:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8021586:	3a08      	subs	r2, #8
 8021588:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802158c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8021590:	60cb      	str	r3, [r1, #12]
 8021592:	e7bd      	b.n	8021510 <_free_r+0x60>
 8021594:	2200      	movs	r2, #0
 8021596:	e7d2      	b.n	802153e <_free_r+0x8e>
 8021598:	2201      	movs	r2, #1
 802159a:	e7d0      	b.n	802153e <_free_r+0x8e>
 802159c:	68fe      	ldr	r6, [r7, #12]
 802159e:	60ce      	str	r6, [r1, #12]
 80215a0:	60b1      	str	r1, [r6, #8]
 80215a2:	e7db      	b.n	802155c <_free_r+0xac>
 80215a4:	0a42      	lsrs	r2, r0, #9
 80215a6:	2a04      	cmp	r2, #4
 80215a8:	d813      	bhi.n	80215d2 <_free_r+0x122>
 80215aa:	0982      	lsrs	r2, r0, #6
 80215ac:	3238      	adds	r2, #56	; 0x38
 80215ae:	1c51      	adds	r1, r2, #1
 80215b0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80215b4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80215b8:	428e      	cmp	r6, r1
 80215ba:	d124      	bne.n	8021606 <_free_r+0x156>
 80215bc:	2001      	movs	r0, #1
 80215be:	1092      	asrs	r2, r2, #2
 80215c0:	fa00 f202 	lsl.w	r2, r0, r2
 80215c4:	6868      	ldr	r0, [r5, #4]
 80215c6:	4302      	orrs	r2, r0
 80215c8:	606a      	str	r2, [r5, #4]
 80215ca:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80215ce:	60b3      	str	r3, [r6, #8]
 80215d0:	e7de      	b.n	8021590 <_free_r+0xe0>
 80215d2:	2a14      	cmp	r2, #20
 80215d4:	d801      	bhi.n	80215da <_free_r+0x12a>
 80215d6:	325b      	adds	r2, #91	; 0x5b
 80215d8:	e7e9      	b.n	80215ae <_free_r+0xfe>
 80215da:	2a54      	cmp	r2, #84	; 0x54
 80215dc:	d802      	bhi.n	80215e4 <_free_r+0x134>
 80215de:	0b02      	lsrs	r2, r0, #12
 80215e0:	326e      	adds	r2, #110	; 0x6e
 80215e2:	e7e4      	b.n	80215ae <_free_r+0xfe>
 80215e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80215e8:	d802      	bhi.n	80215f0 <_free_r+0x140>
 80215ea:	0bc2      	lsrs	r2, r0, #15
 80215ec:	3277      	adds	r2, #119	; 0x77
 80215ee:	e7de      	b.n	80215ae <_free_r+0xfe>
 80215f0:	f240 5154 	movw	r1, #1364	; 0x554
 80215f4:	428a      	cmp	r2, r1
 80215f6:	bf9a      	itte	ls
 80215f8:	0c82      	lsrls	r2, r0, #18
 80215fa:	327c      	addls	r2, #124	; 0x7c
 80215fc:	227e      	movhi	r2, #126	; 0x7e
 80215fe:	e7d6      	b.n	80215ae <_free_r+0xfe>
 8021600:	6889      	ldr	r1, [r1, #8]
 8021602:	428e      	cmp	r6, r1
 8021604:	d004      	beq.n	8021610 <_free_r+0x160>
 8021606:	684a      	ldr	r2, [r1, #4]
 8021608:	f022 0203 	bic.w	r2, r2, #3
 802160c:	4282      	cmp	r2, r0
 802160e:	d8f7      	bhi.n	8021600 <_free_r+0x150>
 8021610:	68ce      	ldr	r6, [r1, #12]
 8021612:	e7da      	b.n	80215ca <_free_r+0x11a>
 8021614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021618:	2000222c 	.word	0x2000222c
 802161c:	20002638 	.word	0x20002638
 8021620:	2000286c 	.word	0x2000286c
 8021624:	20002234 	.word	0x20002234

08021628 <_localeconv_r>:
 8021628:	4b04      	ldr	r3, [pc, #16]	; (802163c <_localeconv_r+0x14>)
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 802162e:	4b04      	ldr	r3, [pc, #16]	; (8021640 <_localeconv_r+0x18>)
 8021630:	2800      	cmp	r0, #0
 8021632:	bf08      	it	eq
 8021634:	4618      	moveq	r0, r3
 8021636:	30f0      	adds	r0, #240	; 0xf0
 8021638:	4770      	bx	lr
 802163a:	bf00      	nop
 802163c:	20001c94 	.word	0x20001c94
 8021640:	200020c0 	.word	0x200020c0

08021644 <__retarget_lock_acquire_recursive>:
 8021644:	4770      	bx	lr

08021646 <__retarget_lock_release_recursive>:
 8021646:	4770      	bx	lr

08021648 <memcpy>:
 8021648:	b510      	push	{r4, lr}
 802164a:	1e43      	subs	r3, r0, #1
 802164c:	440a      	add	r2, r1
 802164e:	4291      	cmp	r1, r2
 8021650:	d100      	bne.n	8021654 <memcpy+0xc>
 8021652:	bd10      	pop	{r4, pc}
 8021654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021658:	f803 4f01 	strb.w	r4, [r3, #1]!
 802165c:	e7f7      	b.n	802164e <memcpy+0x6>

0802165e <_Balloc>:
 802165e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8021660:	b570      	push	{r4, r5, r6, lr}
 8021662:	4605      	mov	r5, r0
 8021664:	460c      	mov	r4, r1
 8021666:	b17b      	cbz	r3, 8021688 <_Balloc+0x2a>
 8021668:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 802166a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802166e:	b9a0      	cbnz	r0, 802169a <_Balloc+0x3c>
 8021670:	2101      	movs	r1, #1
 8021672:	fa01 f604 	lsl.w	r6, r1, r4
 8021676:	1d72      	adds	r2, r6, #5
 8021678:	0092      	lsls	r2, r2, #2
 802167a:	4628      	mov	r0, r5
 802167c:	f000 fba4 	bl	8021dc8 <_calloc_r>
 8021680:	b148      	cbz	r0, 8021696 <_Balloc+0x38>
 8021682:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8021686:	e00b      	b.n	80216a0 <_Balloc+0x42>
 8021688:	2221      	movs	r2, #33	; 0x21
 802168a:	2104      	movs	r1, #4
 802168c:	f000 fb9c 	bl	8021dc8 <_calloc_r>
 8021690:	64e8      	str	r0, [r5, #76]	; 0x4c
 8021692:	2800      	cmp	r0, #0
 8021694:	d1e8      	bne.n	8021668 <_Balloc+0xa>
 8021696:	2000      	movs	r0, #0
 8021698:	bd70      	pop	{r4, r5, r6, pc}
 802169a:	6802      	ldr	r2, [r0, #0]
 802169c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80216a0:	2300      	movs	r3, #0
 80216a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80216a6:	e7f7      	b.n	8021698 <_Balloc+0x3a>

080216a8 <_Bfree>:
 80216a8:	b131      	cbz	r1, 80216b8 <_Bfree+0x10>
 80216aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80216ac:	684a      	ldr	r2, [r1, #4]
 80216ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80216b2:	6008      	str	r0, [r1, #0]
 80216b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80216b8:	4770      	bx	lr

080216ba <__multadd>:
 80216ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216be:	690d      	ldr	r5, [r1, #16]
 80216c0:	461f      	mov	r7, r3
 80216c2:	4606      	mov	r6, r0
 80216c4:	460c      	mov	r4, r1
 80216c6:	f101 0c14 	add.w	ip, r1, #20
 80216ca:	2300      	movs	r3, #0
 80216cc:	f8dc 0000 	ldr.w	r0, [ip]
 80216d0:	b281      	uxth	r1, r0
 80216d2:	fb02 7101 	mla	r1, r2, r1, r7
 80216d6:	0c0f      	lsrs	r7, r1, #16
 80216d8:	0c00      	lsrs	r0, r0, #16
 80216da:	fb02 7000 	mla	r0, r2, r0, r7
 80216de:	b289      	uxth	r1, r1
 80216e0:	3301      	adds	r3, #1
 80216e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80216e6:	429d      	cmp	r5, r3
 80216e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80216ec:	f84c 1b04 	str.w	r1, [ip], #4
 80216f0:	dcec      	bgt.n	80216cc <__multadd+0x12>
 80216f2:	b1d7      	cbz	r7, 802172a <__multadd+0x70>
 80216f4:	68a3      	ldr	r3, [r4, #8]
 80216f6:	42ab      	cmp	r3, r5
 80216f8:	dc12      	bgt.n	8021720 <__multadd+0x66>
 80216fa:	6861      	ldr	r1, [r4, #4]
 80216fc:	4630      	mov	r0, r6
 80216fe:	3101      	adds	r1, #1
 8021700:	f7ff ffad 	bl	802165e <_Balloc>
 8021704:	6922      	ldr	r2, [r4, #16]
 8021706:	3202      	adds	r2, #2
 8021708:	f104 010c 	add.w	r1, r4, #12
 802170c:	4680      	mov	r8, r0
 802170e:	0092      	lsls	r2, r2, #2
 8021710:	300c      	adds	r0, #12
 8021712:	f7ff ff99 	bl	8021648 <memcpy>
 8021716:	4621      	mov	r1, r4
 8021718:	4630      	mov	r0, r6
 802171a:	f7ff ffc5 	bl	80216a8 <_Bfree>
 802171e:	4644      	mov	r4, r8
 8021720:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021724:	3501      	adds	r5, #1
 8021726:	615f      	str	r7, [r3, #20]
 8021728:	6125      	str	r5, [r4, #16]
 802172a:	4620      	mov	r0, r4
 802172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021730 <__hi0bits>:
 8021730:	0c02      	lsrs	r2, r0, #16
 8021732:	0412      	lsls	r2, r2, #16
 8021734:	4603      	mov	r3, r0
 8021736:	b9b2      	cbnz	r2, 8021766 <__hi0bits+0x36>
 8021738:	0403      	lsls	r3, r0, #16
 802173a:	2010      	movs	r0, #16
 802173c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8021740:	bf04      	itt	eq
 8021742:	021b      	lsleq	r3, r3, #8
 8021744:	3008      	addeq	r0, #8
 8021746:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802174a:	bf04      	itt	eq
 802174c:	011b      	lsleq	r3, r3, #4
 802174e:	3004      	addeq	r0, #4
 8021750:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8021754:	bf04      	itt	eq
 8021756:	009b      	lsleq	r3, r3, #2
 8021758:	3002      	addeq	r0, #2
 802175a:	2b00      	cmp	r3, #0
 802175c:	db06      	blt.n	802176c <__hi0bits+0x3c>
 802175e:	005b      	lsls	r3, r3, #1
 8021760:	d503      	bpl.n	802176a <__hi0bits+0x3a>
 8021762:	3001      	adds	r0, #1
 8021764:	4770      	bx	lr
 8021766:	2000      	movs	r0, #0
 8021768:	e7e8      	b.n	802173c <__hi0bits+0xc>
 802176a:	2020      	movs	r0, #32
 802176c:	4770      	bx	lr

0802176e <__lo0bits>:
 802176e:	6803      	ldr	r3, [r0, #0]
 8021770:	f013 0207 	ands.w	r2, r3, #7
 8021774:	4601      	mov	r1, r0
 8021776:	d00b      	beq.n	8021790 <__lo0bits+0x22>
 8021778:	07da      	lsls	r2, r3, #31
 802177a:	d423      	bmi.n	80217c4 <__lo0bits+0x56>
 802177c:	0798      	lsls	r0, r3, #30
 802177e:	bf49      	itett	mi
 8021780:	085b      	lsrmi	r3, r3, #1
 8021782:	089b      	lsrpl	r3, r3, #2
 8021784:	2001      	movmi	r0, #1
 8021786:	600b      	strmi	r3, [r1, #0]
 8021788:	bf5c      	itt	pl
 802178a:	600b      	strpl	r3, [r1, #0]
 802178c:	2002      	movpl	r0, #2
 802178e:	4770      	bx	lr
 8021790:	b298      	uxth	r0, r3
 8021792:	b9a8      	cbnz	r0, 80217c0 <__lo0bits+0x52>
 8021794:	0c1b      	lsrs	r3, r3, #16
 8021796:	2010      	movs	r0, #16
 8021798:	f013 0fff 	tst.w	r3, #255	; 0xff
 802179c:	bf04      	itt	eq
 802179e:	0a1b      	lsreq	r3, r3, #8
 80217a0:	3008      	addeq	r0, #8
 80217a2:	071a      	lsls	r2, r3, #28
 80217a4:	bf04      	itt	eq
 80217a6:	091b      	lsreq	r3, r3, #4
 80217a8:	3004      	addeq	r0, #4
 80217aa:	079a      	lsls	r2, r3, #30
 80217ac:	bf04      	itt	eq
 80217ae:	089b      	lsreq	r3, r3, #2
 80217b0:	3002      	addeq	r0, #2
 80217b2:	07da      	lsls	r2, r3, #31
 80217b4:	d402      	bmi.n	80217bc <__lo0bits+0x4e>
 80217b6:	085b      	lsrs	r3, r3, #1
 80217b8:	d006      	beq.n	80217c8 <__lo0bits+0x5a>
 80217ba:	3001      	adds	r0, #1
 80217bc:	600b      	str	r3, [r1, #0]
 80217be:	4770      	bx	lr
 80217c0:	4610      	mov	r0, r2
 80217c2:	e7e9      	b.n	8021798 <__lo0bits+0x2a>
 80217c4:	2000      	movs	r0, #0
 80217c6:	4770      	bx	lr
 80217c8:	2020      	movs	r0, #32
 80217ca:	4770      	bx	lr

080217cc <__i2b>:
 80217cc:	b510      	push	{r4, lr}
 80217ce:	460c      	mov	r4, r1
 80217d0:	2101      	movs	r1, #1
 80217d2:	f7ff ff44 	bl	802165e <_Balloc>
 80217d6:	2201      	movs	r2, #1
 80217d8:	6144      	str	r4, [r0, #20]
 80217da:	6102      	str	r2, [r0, #16]
 80217dc:	bd10      	pop	{r4, pc}

080217de <__multiply>:
 80217de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217e2:	4614      	mov	r4, r2
 80217e4:	690a      	ldr	r2, [r1, #16]
 80217e6:	6923      	ldr	r3, [r4, #16]
 80217e8:	429a      	cmp	r2, r3
 80217ea:	bfb8      	it	lt
 80217ec:	460b      	movlt	r3, r1
 80217ee:	4688      	mov	r8, r1
 80217f0:	bfbc      	itt	lt
 80217f2:	46a0      	movlt	r8, r4
 80217f4:	461c      	movlt	r4, r3
 80217f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80217fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80217fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021802:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021806:	eb07 0609 	add.w	r6, r7, r9
 802180a:	42b3      	cmp	r3, r6
 802180c:	bfb8      	it	lt
 802180e:	3101      	addlt	r1, #1
 8021810:	f7ff ff25 	bl	802165e <_Balloc>
 8021814:	f100 0514 	add.w	r5, r0, #20
 8021818:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802181c:	462b      	mov	r3, r5
 802181e:	2200      	movs	r2, #0
 8021820:	4573      	cmp	r3, lr
 8021822:	d316      	bcc.n	8021852 <__multiply+0x74>
 8021824:	f104 0214 	add.w	r2, r4, #20
 8021828:	f108 0114 	add.w	r1, r8, #20
 802182c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8021830:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8021834:	9300      	str	r3, [sp, #0]
 8021836:	9b00      	ldr	r3, [sp, #0]
 8021838:	9201      	str	r2, [sp, #4]
 802183a:	4293      	cmp	r3, r2
 802183c:	d80c      	bhi.n	8021858 <__multiply+0x7a>
 802183e:	2e00      	cmp	r6, #0
 8021840:	dd03      	ble.n	802184a <__multiply+0x6c>
 8021842:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8021846:	2b00      	cmp	r3, #0
 8021848:	d05d      	beq.n	8021906 <__multiply+0x128>
 802184a:	6106      	str	r6, [r0, #16]
 802184c:	b003      	add	sp, #12
 802184e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021852:	f843 2b04 	str.w	r2, [r3], #4
 8021856:	e7e3      	b.n	8021820 <__multiply+0x42>
 8021858:	f8b2 b000 	ldrh.w	fp, [r2]
 802185c:	f1bb 0f00 	cmp.w	fp, #0
 8021860:	d023      	beq.n	80218aa <__multiply+0xcc>
 8021862:	4689      	mov	r9, r1
 8021864:	46ac      	mov	ip, r5
 8021866:	f04f 0800 	mov.w	r8, #0
 802186a:	f859 4b04 	ldr.w	r4, [r9], #4
 802186e:	f8dc a000 	ldr.w	sl, [ip]
 8021872:	b2a3      	uxth	r3, r4
 8021874:	fa1f fa8a 	uxth.w	sl, sl
 8021878:	fb0b a303 	mla	r3, fp, r3, sl
 802187c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021880:	f8dc 4000 	ldr.w	r4, [ip]
 8021884:	4443      	add	r3, r8
 8021886:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802188a:	fb0b 840a 	mla	r4, fp, sl, r8
 802188e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8021892:	46e2      	mov	sl, ip
 8021894:	b29b      	uxth	r3, r3
 8021896:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802189a:	454f      	cmp	r7, r9
 802189c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80218a0:	f84a 3b04 	str.w	r3, [sl], #4
 80218a4:	d82b      	bhi.n	80218fe <__multiply+0x120>
 80218a6:	f8cc 8004 	str.w	r8, [ip, #4]
 80218aa:	9b01      	ldr	r3, [sp, #4]
 80218ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80218b0:	3204      	adds	r2, #4
 80218b2:	f1ba 0f00 	cmp.w	sl, #0
 80218b6:	d020      	beq.n	80218fa <__multiply+0x11c>
 80218b8:	682b      	ldr	r3, [r5, #0]
 80218ba:	4689      	mov	r9, r1
 80218bc:	46a8      	mov	r8, r5
 80218be:	f04f 0b00 	mov.w	fp, #0
 80218c2:	f8b9 c000 	ldrh.w	ip, [r9]
 80218c6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80218ca:	fb0a 440c 	mla	r4, sl, ip, r4
 80218ce:	445c      	add	r4, fp
 80218d0:	46c4      	mov	ip, r8
 80218d2:	b29b      	uxth	r3, r3
 80218d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80218d8:	f84c 3b04 	str.w	r3, [ip], #4
 80218dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80218e0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80218e4:	0c1b      	lsrs	r3, r3, #16
 80218e6:	fb0a b303 	mla	r3, sl, r3, fp
 80218ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80218ee:	454f      	cmp	r7, r9
 80218f0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80218f4:	d805      	bhi.n	8021902 <__multiply+0x124>
 80218f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80218fa:	3504      	adds	r5, #4
 80218fc:	e79b      	b.n	8021836 <__multiply+0x58>
 80218fe:	46d4      	mov	ip, sl
 8021900:	e7b3      	b.n	802186a <__multiply+0x8c>
 8021902:	46e0      	mov	r8, ip
 8021904:	e7dd      	b.n	80218c2 <__multiply+0xe4>
 8021906:	3e01      	subs	r6, #1
 8021908:	e799      	b.n	802183e <__multiply+0x60>
	...

0802190c <__pow5mult>:
 802190c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021910:	4615      	mov	r5, r2
 8021912:	f012 0203 	ands.w	r2, r2, #3
 8021916:	4606      	mov	r6, r0
 8021918:	460f      	mov	r7, r1
 802191a:	d007      	beq.n	802192c <__pow5mult+0x20>
 802191c:	3a01      	subs	r2, #1
 802191e:	4c1a      	ldr	r4, [pc, #104]	; (8021988 <__pow5mult+0x7c>)
 8021920:	2300      	movs	r3, #0
 8021922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021926:	f7ff fec8 	bl	80216ba <__multadd>
 802192a:	4607      	mov	r7, r0
 802192c:	10ad      	asrs	r5, r5, #2
 802192e:	d027      	beq.n	8021980 <__pow5mult+0x74>
 8021930:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8021932:	b944      	cbnz	r4, 8021946 <__pow5mult+0x3a>
 8021934:	f240 2171 	movw	r1, #625	; 0x271
 8021938:	4630      	mov	r0, r6
 802193a:	f7ff ff47 	bl	80217cc <__i2b>
 802193e:	2300      	movs	r3, #0
 8021940:	64b0      	str	r0, [r6, #72]	; 0x48
 8021942:	4604      	mov	r4, r0
 8021944:	6003      	str	r3, [r0, #0]
 8021946:	f04f 0800 	mov.w	r8, #0
 802194a:	07eb      	lsls	r3, r5, #31
 802194c:	d50a      	bpl.n	8021964 <__pow5mult+0x58>
 802194e:	4639      	mov	r1, r7
 8021950:	4622      	mov	r2, r4
 8021952:	4630      	mov	r0, r6
 8021954:	f7ff ff43 	bl	80217de <__multiply>
 8021958:	4639      	mov	r1, r7
 802195a:	4681      	mov	r9, r0
 802195c:	4630      	mov	r0, r6
 802195e:	f7ff fea3 	bl	80216a8 <_Bfree>
 8021962:	464f      	mov	r7, r9
 8021964:	106d      	asrs	r5, r5, #1
 8021966:	d00b      	beq.n	8021980 <__pow5mult+0x74>
 8021968:	6820      	ldr	r0, [r4, #0]
 802196a:	b938      	cbnz	r0, 802197c <__pow5mult+0x70>
 802196c:	4622      	mov	r2, r4
 802196e:	4621      	mov	r1, r4
 8021970:	4630      	mov	r0, r6
 8021972:	f7ff ff34 	bl	80217de <__multiply>
 8021976:	6020      	str	r0, [r4, #0]
 8021978:	f8c0 8000 	str.w	r8, [r0]
 802197c:	4604      	mov	r4, r0
 802197e:	e7e4      	b.n	802194a <__pow5mult+0x3e>
 8021980:	4638      	mov	r0, r7
 8021982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021986:	bf00      	nop
 8021988:	08035f80 	.word	0x08035f80

0802198c <__lshift>:
 802198c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021990:	460c      	mov	r4, r1
 8021992:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021996:	6923      	ldr	r3, [r4, #16]
 8021998:	6849      	ldr	r1, [r1, #4]
 802199a:	eb0a 0903 	add.w	r9, sl, r3
 802199e:	68a3      	ldr	r3, [r4, #8]
 80219a0:	4607      	mov	r7, r0
 80219a2:	4616      	mov	r6, r2
 80219a4:	f109 0501 	add.w	r5, r9, #1
 80219a8:	42ab      	cmp	r3, r5
 80219aa:	db32      	blt.n	8021a12 <__lshift+0x86>
 80219ac:	4638      	mov	r0, r7
 80219ae:	f7ff fe56 	bl	802165e <_Balloc>
 80219b2:	2300      	movs	r3, #0
 80219b4:	4680      	mov	r8, r0
 80219b6:	f100 0114 	add.w	r1, r0, #20
 80219ba:	461a      	mov	r2, r3
 80219bc:	4553      	cmp	r3, sl
 80219be:	db2b      	blt.n	8021a18 <__lshift+0x8c>
 80219c0:	6920      	ldr	r0, [r4, #16]
 80219c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80219c6:	f104 0314 	add.w	r3, r4, #20
 80219ca:	f016 021f 	ands.w	r2, r6, #31
 80219ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80219d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80219d6:	d025      	beq.n	8021a24 <__lshift+0x98>
 80219d8:	f1c2 0e20 	rsb	lr, r2, #32
 80219dc:	2000      	movs	r0, #0
 80219de:	681e      	ldr	r6, [r3, #0]
 80219e0:	468a      	mov	sl, r1
 80219e2:	4096      	lsls	r6, r2
 80219e4:	4330      	orrs	r0, r6
 80219e6:	f84a 0b04 	str.w	r0, [sl], #4
 80219ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80219ee:	459c      	cmp	ip, r3
 80219f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80219f4:	d814      	bhi.n	8021a20 <__lshift+0x94>
 80219f6:	6048      	str	r0, [r1, #4]
 80219f8:	b108      	cbz	r0, 80219fe <__lshift+0x72>
 80219fa:	f109 0502 	add.w	r5, r9, #2
 80219fe:	3d01      	subs	r5, #1
 8021a00:	4638      	mov	r0, r7
 8021a02:	f8c8 5010 	str.w	r5, [r8, #16]
 8021a06:	4621      	mov	r1, r4
 8021a08:	f7ff fe4e 	bl	80216a8 <_Bfree>
 8021a0c:	4640      	mov	r0, r8
 8021a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a12:	3101      	adds	r1, #1
 8021a14:	005b      	lsls	r3, r3, #1
 8021a16:	e7c7      	b.n	80219a8 <__lshift+0x1c>
 8021a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021a1c:	3301      	adds	r3, #1
 8021a1e:	e7cd      	b.n	80219bc <__lshift+0x30>
 8021a20:	4651      	mov	r1, sl
 8021a22:	e7dc      	b.n	80219de <__lshift+0x52>
 8021a24:	3904      	subs	r1, #4
 8021a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8021a2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8021a2e:	459c      	cmp	ip, r3
 8021a30:	d8f9      	bhi.n	8021a26 <__lshift+0x9a>
 8021a32:	e7e4      	b.n	80219fe <__lshift+0x72>

08021a34 <__mcmp>:
 8021a34:	6903      	ldr	r3, [r0, #16]
 8021a36:	690a      	ldr	r2, [r1, #16]
 8021a38:	1a9b      	subs	r3, r3, r2
 8021a3a:	b530      	push	{r4, r5, lr}
 8021a3c:	d10c      	bne.n	8021a58 <__mcmp+0x24>
 8021a3e:	0092      	lsls	r2, r2, #2
 8021a40:	3014      	adds	r0, #20
 8021a42:	3114      	adds	r1, #20
 8021a44:	1884      	adds	r4, r0, r2
 8021a46:	4411      	add	r1, r2
 8021a48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8021a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8021a50:	4295      	cmp	r5, r2
 8021a52:	d003      	beq.n	8021a5c <__mcmp+0x28>
 8021a54:	d305      	bcc.n	8021a62 <__mcmp+0x2e>
 8021a56:	2301      	movs	r3, #1
 8021a58:	4618      	mov	r0, r3
 8021a5a:	bd30      	pop	{r4, r5, pc}
 8021a5c:	42a0      	cmp	r0, r4
 8021a5e:	d3f3      	bcc.n	8021a48 <__mcmp+0x14>
 8021a60:	e7fa      	b.n	8021a58 <__mcmp+0x24>
 8021a62:	f04f 33ff 	mov.w	r3, #4294967295
 8021a66:	e7f7      	b.n	8021a58 <__mcmp+0x24>

08021a68 <__mdiff>:
 8021a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021a6c:	460d      	mov	r5, r1
 8021a6e:	4607      	mov	r7, r0
 8021a70:	4611      	mov	r1, r2
 8021a72:	4628      	mov	r0, r5
 8021a74:	4614      	mov	r4, r2
 8021a76:	f7ff ffdd 	bl	8021a34 <__mcmp>
 8021a7a:	1e06      	subs	r6, r0, #0
 8021a7c:	d108      	bne.n	8021a90 <__mdiff+0x28>
 8021a7e:	4631      	mov	r1, r6
 8021a80:	4638      	mov	r0, r7
 8021a82:	f7ff fdec 	bl	802165e <_Balloc>
 8021a86:	2301      	movs	r3, #1
 8021a88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8021a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a90:	bfa4      	itt	ge
 8021a92:	4623      	movge	r3, r4
 8021a94:	462c      	movge	r4, r5
 8021a96:	4638      	mov	r0, r7
 8021a98:	6861      	ldr	r1, [r4, #4]
 8021a9a:	bfa6      	itte	ge
 8021a9c:	461d      	movge	r5, r3
 8021a9e:	2600      	movge	r6, #0
 8021aa0:	2601      	movlt	r6, #1
 8021aa2:	f7ff fddc 	bl	802165e <_Balloc>
 8021aa6:	692b      	ldr	r3, [r5, #16]
 8021aa8:	60c6      	str	r6, [r0, #12]
 8021aaa:	6926      	ldr	r6, [r4, #16]
 8021aac:	f105 0914 	add.w	r9, r5, #20
 8021ab0:	f104 0214 	add.w	r2, r4, #20
 8021ab4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8021ab8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8021abc:	f100 0514 	add.w	r5, r0, #20
 8021ac0:	f04f 0e00 	mov.w	lr, #0
 8021ac4:	f852 ab04 	ldr.w	sl, [r2], #4
 8021ac8:	f859 4b04 	ldr.w	r4, [r9], #4
 8021acc:	fa1e f18a 	uxtah	r1, lr, sl
 8021ad0:	b2a3      	uxth	r3, r4
 8021ad2:	1ac9      	subs	r1, r1, r3
 8021ad4:	0c23      	lsrs	r3, r4, #16
 8021ad6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8021ada:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8021ade:	b289      	uxth	r1, r1
 8021ae0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8021ae4:	45c8      	cmp	r8, r9
 8021ae6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8021aea:	4694      	mov	ip, r2
 8021aec:	f845 3b04 	str.w	r3, [r5], #4
 8021af0:	d8e8      	bhi.n	8021ac4 <__mdiff+0x5c>
 8021af2:	45bc      	cmp	ip, r7
 8021af4:	d304      	bcc.n	8021b00 <__mdiff+0x98>
 8021af6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8021afa:	b183      	cbz	r3, 8021b1e <__mdiff+0xb6>
 8021afc:	6106      	str	r6, [r0, #16]
 8021afe:	e7c5      	b.n	8021a8c <__mdiff+0x24>
 8021b00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8021b04:	fa1e f381 	uxtah	r3, lr, r1
 8021b08:	141a      	asrs	r2, r3, #16
 8021b0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021b0e:	b29b      	uxth	r3, r3
 8021b10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021b14:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8021b18:	f845 3b04 	str.w	r3, [r5], #4
 8021b1c:	e7e9      	b.n	8021af2 <__mdiff+0x8a>
 8021b1e:	3e01      	subs	r6, #1
 8021b20:	e7e9      	b.n	8021af6 <__mdiff+0x8e>

08021b22 <__d2b>:
 8021b22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021b26:	460e      	mov	r6, r1
 8021b28:	2101      	movs	r1, #1
 8021b2a:	ec59 8b10 	vmov	r8, r9, d0
 8021b2e:	4615      	mov	r5, r2
 8021b30:	f7ff fd95 	bl	802165e <_Balloc>
 8021b34:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8021b38:	4607      	mov	r7, r0
 8021b3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021b3e:	bb34      	cbnz	r4, 8021b8e <__d2b+0x6c>
 8021b40:	9301      	str	r3, [sp, #4]
 8021b42:	f1b8 0300 	subs.w	r3, r8, #0
 8021b46:	d027      	beq.n	8021b98 <__d2b+0x76>
 8021b48:	a802      	add	r0, sp, #8
 8021b4a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8021b4e:	f7ff fe0e 	bl	802176e <__lo0bits>
 8021b52:	9900      	ldr	r1, [sp, #0]
 8021b54:	b1f0      	cbz	r0, 8021b94 <__d2b+0x72>
 8021b56:	9a01      	ldr	r2, [sp, #4]
 8021b58:	f1c0 0320 	rsb	r3, r0, #32
 8021b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8021b60:	430b      	orrs	r3, r1
 8021b62:	40c2      	lsrs	r2, r0
 8021b64:	617b      	str	r3, [r7, #20]
 8021b66:	9201      	str	r2, [sp, #4]
 8021b68:	9b01      	ldr	r3, [sp, #4]
 8021b6a:	61bb      	str	r3, [r7, #24]
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	bf14      	ite	ne
 8021b70:	2102      	movne	r1, #2
 8021b72:	2101      	moveq	r1, #1
 8021b74:	6139      	str	r1, [r7, #16]
 8021b76:	b1c4      	cbz	r4, 8021baa <__d2b+0x88>
 8021b78:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8021b7c:	4404      	add	r4, r0
 8021b7e:	6034      	str	r4, [r6, #0]
 8021b80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021b84:	6028      	str	r0, [r5, #0]
 8021b86:	4638      	mov	r0, r7
 8021b88:	b003      	add	sp, #12
 8021b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021b92:	e7d5      	b.n	8021b40 <__d2b+0x1e>
 8021b94:	6179      	str	r1, [r7, #20]
 8021b96:	e7e7      	b.n	8021b68 <__d2b+0x46>
 8021b98:	a801      	add	r0, sp, #4
 8021b9a:	f7ff fde8 	bl	802176e <__lo0bits>
 8021b9e:	9b01      	ldr	r3, [sp, #4]
 8021ba0:	617b      	str	r3, [r7, #20]
 8021ba2:	2101      	movs	r1, #1
 8021ba4:	6139      	str	r1, [r7, #16]
 8021ba6:	3020      	adds	r0, #32
 8021ba8:	e7e5      	b.n	8021b76 <__d2b+0x54>
 8021baa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8021bae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021bb2:	6030      	str	r0, [r6, #0]
 8021bb4:	6918      	ldr	r0, [r3, #16]
 8021bb6:	f7ff fdbb 	bl	8021730 <__hi0bits>
 8021bba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8021bbe:	e7e1      	b.n	8021b84 <__d2b+0x62>

08021bc0 <frexp>:
 8021bc0:	b570      	push	{r4, r5, r6, lr}
 8021bc2:	2100      	movs	r1, #0
 8021bc4:	ec55 4b10 	vmov	r4, r5, d0
 8021bc8:	6001      	str	r1, [r0, #0]
 8021bca:	4916      	ldr	r1, [pc, #88]	; (8021c24 <frexp+0x64>)
 8021bcc:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021bd0:	428b      	cmp	r3, r1
 8021bd2:	4606      	mov	r6, r0
 8021bd4:	462a      	mov	r2, r5
 8021bd6:	dc22      	bgt.n	8021c1e <frexp+0x5e>
 8021bd8:	ee10 1a10 	vmov	r1, s0
 8021bdc:	4319      	orrs	r1, r3
 8021bde:	d01e      	beq.n	8021c1e <frexp+0x5e>
 8021be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021be4:	da0d      	bge.n	8021c02 <frexp+0x42>
 8021be6:	2200      	movs	r2, #0
 8021be8:	4b0f      	ldr	r3, [pc, #60]	; (8021c28 <frexp+0x68>)
 8021bea:	ee10 0a10 	vmov	r0, s0
 8021bee:	4629      	mov	r1, r5
 8021bf0:	f7e6 fc3a 	bl	8008468 <__aeabi_dmul>
 8021bf4:	460a      	mov	r2, r1
 8021bf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021bfa:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8021bfe:	4604      	mov	r4, r0
 8021c00:	6031      	str	r1, [r6, #0]
 8021c02:	6831      	ldr	r1, [r6, #0]
 8021c04:	151b      	asrs	r3, r3, #20
 8021c06:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8021c0a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8021c0e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8021c12:	440b      	add	r3, r1
 8021c14:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8021c18:	6033      	str	r3, [r6, #0]
 8021c1a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8021c1e:	ec45 4b10 	vmov	d0, r4, r5
 8021c22:	bd70      	pop	{r4, r5, r6, pc}
 8021c24:	7fefffff 	.word	0x7fefffff
 8021c28:	43500000 	.word	0x43500000

08021c2c <__ssprint_r>:
 8021c2c:	6893      	ldr	r3, [r2, #8]
 8021c2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c32:	4681      	mov	r9, r0
 8021c34:	460c      	mov	r4, r1
 8021c36:	4616      	mov	r6, r2
 8021c38:	2b00      	cmp	r3, #0
 8021c3a:	d05e      	beq.n	8021cfa <__ssprint_r+0xce>
 8021c3c:	f04f 0b00 	mov.w	fp, #0
 8021c40:	f8d2 a000 	ldr.w	sl, [r2]
 8021c44:	465f      	mov	r7, fp
 8021c46:	b357      	cbz	r7, 8021c9e <__ssprint_r+0x72>
 8021c48:	68a3      	ldr	r3, [r4, #8]
 8021c4a:	429f      	cmp	r7, r3
 8021c4c:	d340      	bcc.n	8021cd0 <__ssprint_r+0xa4>
 8021c4e:	89a2      	ldrh	r2, [r4, #12]
 8021c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021c54:	d03c      	beq.n	8021cd0 <__ssprint_r+0xa4>
 8021c56:	6825      	ldr	r5, [r4, #0]
 8021c58:	6921      	ldr	r1, [r4, #16]
 8021c5a:	eba5 0801 	sub.w	r8, r5, r1
 8021c5e:	6965      	ldr	r5, [r4, #20]
 8021c60:	2302      	movs	r3, #2
 8021c62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021c66:	fb95 f5f3 	sdiv	r5, r5, r3
 8021c6a:	f108 0301 	add.w	r3, r8, #1
 8021c6e:	443b      	add	r3, r7
 8021c70:	429d      	cmp	r5, r3
 8021c72:	bf38      	it	cc
 8021c74:	461d      	movcc	r5, r3
 8021c76:	0553      	lsls	r3, r2, #21
 8021c78:	d544      	bpl.n	8021d04 <__ssprint_r+0xd8>
 8021c7a:	4629      	mov	r1, r5
 8021c7c:	4648      	mov	r0, r9
 8021c7e:	f7fd f847 	bl	801ed10 <_malloc_r>
 8021c82:	b988      	cbnz	r0, 8021ca8 <__ssprint_r+0x7c>
 8021c84:	230c      	movs	r3, #12
 8021c86:	f8c9 3000 	str.w	r3, [r9]
 8021c8a:	89a3      	ldrh	r3, [r4, #12]
 8021c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021c90:	81a3      	strh	r3, [r4, #12]
 8021c92:	2300      	movs	r3, #0
 8021c94:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8021c98:	f04f 30ff 	mov.w	r0, #4294967295
 8021c9c:	e02f      	b.n	8021cfe <__ssprint_r+0xd2>
 8021c9e:	e9da b700 	ldrd	fp, r7, [sl]
 8021ca2:	f10a 0a08 	add.w	sl, sl, #8
 8021ca6:	e7ce      	b.n	8021c46 <__ssprint_r+0x1a>
 8021ca8:	4642      	mov	r2, r8
 8021caa:	6921      	ldr	r1, [r4, #16]
 8021cac:	9001      	str	r0, [sp, #4]
 8021cae:	f7ff fccb 	bl	8021648 <memcpy>
 8021cb2:	89a2      	ldrh	r2, [r4, #12]
 8021cb4:	9b01      	ldr	r3, [sp, #4]
 8021cb6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8021cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021cbe:	81a2      	strh	r2, [r4, #12]
 8021cc0:	6123      	str	r3, [r4, #16]
 8021cc2:	6165      	str	r5, [r4, #20]
 8021cc4:	4443      	add	r3, r8
 8021cc6:	eba5 0508 	sub.w	r5, r5, r8
 8021cca:	6023      	str	r3, [r4, #0]
 8021ccc:	60a5      	str	r5, [r4, #8]
 8021cce:	463b      	mov	r3, r7
 8021cd0:	42bb      	cmp	r3, r7
 8021cd2:	bf28      	it	cs
 8021cd4:	463b      	movcs	r3, r7
 8021cd6:	461a      	mov	r2, r3
 8021cd8:	4659      	mov	r1, fp
 8021cda:	6820      	ldr	r0, [r4, #0]
 8021cdc:	9301      	str	r3, [sp, #4]
 8021cde:	f7fd fa6e 	bl	801f1be <memmove>
 8021ce2:	68a2      	ldr	r2, [r4, #8]
 8021ce4:	9b01      	ldr	r3, [sp, #4]
 8021ce6:	1ad2      	subs	r2, r2, r3
 8021ce8:	60a2      	str	r2, [r4, #8]
 8021cea:	6822      	ldr	r2, [r4, #0]
 8021cec:	4413      	add	r3, r2
 8021cee:	6023      	str	r3, [r4, #0]
 8021cf0:	68b3      	ldr	r3, [r6, #8]
 8021cf2:	1bdf      	subs	r7, r3, r7
 8021cf4:	60b7      	str	r7, [r6, #8]
 8021cf6:	2f00      	cmp	r7, #0
 8021cf8:	d1d1      	bne.n	8021c9e <__ssprint_r+0x72>
 8021cfa:	2000      	movs	r0, #0
 8021cfc:	6070      	str	r0, [r6, #4]
 8021cfe:	b003      	add	sp, #12
 8021d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d04:	462a      	mov	r2, r5
 8021d06:	4648      	mov	r0, r9
 8021d08:	f000 f88c 	bl	8021e24 <_realloc_r>
 8021d0c:	4603      	mov	r3, r0
 8021d0e:	2800      	cmp	r0, #0
 8021d10:	d1d6      	bne.n	8021cc0 <__ssprint_r+0x94>
 8021d12:	6921      	ldr	r1, [r4, #16]
 8021d14:	4648      	mov	r0, r9
 8021d16:	f7ff fbcb 	bl	80214b0 <_free_r>
 8021d1a:	e7b3      	b.n	8021c84 <__ssprint_r+0x58>

08021d1c <__register_exitproc>:
 8021d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d20:	4c26      	ldr	r4, [pc, #152]	; (8021dbc <__register_exitproc+0xa0>)
 8021d22:	4606      	mov	r6, r0
 8021d24:	6820      	ldr	r0, [r4, #0]
 8021d26:	4698      	mov	r8, r3
 8021d28:	460f      	mov	r7, r1
 8021d2a:	4691      	mov	r9, r2
 8021d2c:	f7ff fc8a 	bl	8021644 <__retarget_lock_acquire_recursive>
 8021d30:	4b23      	ldr	r3, [pc, #140]	; (8021dc0 <__register_exitproc+0xa4>)
 8021d32:	681d      	ldr	r5, [r3, #0]
 8021d34:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8021d38:	b918      	cbnz	r0, 8021d42 <__register_exitproc+0x26>
 8021d3a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8021d3e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8021d42:	6843      	ldr	r3, [r0, #4]
 8021d44:	2b1f      	cmp	r3, #31
 8021d46:	dd19      	ble.n	8021d7c <__register_exitproc+0x60>
 8021d48:	4b1e      	ldr	r3, [pc, #120]	; (8021dc4 <__register_exitproc+0xa8>)
 8021d4a:	b933      	cbnz	r3, 8021d5a <__register_exitproc+0x3e>
 8021d4c:	6820      	ldr	r0, [r4, #0]
 8021d4e:	f7ff fc7a 	bl	8021646 <__retarget_lock_release_recursive>
 8021d52:	f04f 30ff 	mov.w	r0, #4294967295
 8021d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021d5e:	f7fc ffcf 	bl	801ed00 <malloc>
 8021d62:	2800      	cmp	r0, #0
 8021d64:	d0f2      	beq.n	8021d4c <__register_exitproc+0x30>
 8021d66:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8021d6a:	6003      	str	r3, [r0, #0]
 8021d6c:	2200      	movs	r2, #0
 8021d6e:	6042      	str	r2, [r0, #4]
 8021d70:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8021d74:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8021d78:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8021d7c:	6843      	ldr	r3, [r0, #4]
 8021d7e:	b19e      	cbz	r6, 8021da8 <__register_exitproc+0x8c>
 8021d80:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8021d84:	2201      	movs	r2, #1
 8021d86:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8021d8a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8021d8e:	409a      	lsls	r2, r3
 8021d90:	4311      	orrs	r1, r2
 8021d92:	2e02      	cmp	r6, #2
 8021d94:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8021d98:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8021d9c:	bf02      	ittt	eq
 8021d9e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8021da2:	430a      	orreq	r2, r1
 8021da4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8021da8:	1c5a      	adds	r2, r3, #1
 8021daa:	3302      	adds	r3, #2
 8021dac:	6042      	str	r2, [r0, #4]
 8021dae:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8021db2:	6820      	ldr	r0, [r4, #0]
 8021db4:	f7ff fc47 	bl	8021646 <__retarget_lock_release_recursive>
 8021db8:	2000      	movs	r0, #0
 8021dba:	e7cc      	b.n	8021d56 <__register_exitproc+0x3a>
 8021dbc:	2000263c 	.word	0x2000263c
 8021dc0:	08035d1c 	.word	0x08035d1c
 8021dc4:	0801ed01 	.word	0x0801ed01

08021dc8 <_calloc_r>:
 8021dc8:	b510      	push	{r4, lr}
 8021dca:	4351      	muls	r1, r2
 8021dcc:	f7fc ffa0 	bl	801ed10 <_malloc_r>
 8021dd0:	4604      	mov	r4, r0
 8021dd2:	b198      	cbz	r0, 8021dfc <_calloc_r+0x34>
 8021dd4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8021dd8:	f022 0203 	bic.w	r2, r2, #3
 8021ddc:	3a04      	subs	r2, #4
 8021dde:	2a24      	cmp	r2, #36	; 0x24
 8021de0:	d81b      	bhi.n	8021e1a <_calloc_r+0x52>
 8021de2:	2a13      	cmp	r2, #19
 8021de4:	d917      	bls.n	8021e16 <_calloc_r+0x4e>
 8021de6:	2100      	movs	r1, #0
 8021de8:	2a1b      	cmp	r2, #27
 8021dea:	e9c0 1100 	strd	r1, r1, [r0]
 8021dee:	d807      	bhi.n	8021e00 <_calloc_r+0x38>
 8021df0:	f100 0308 	add.w	r3, r0, #8
 8021df4:	2200      	movs	r2, #0
 8021df6:	e9c3 2200 	strd	r2, r2, [r3]
 8021dfa:	609a      	str	r2, [r3, #8]
 8021dfc:	4620      	mov	r0, r4
 8021dfe:	bd10      	pop	{r4, pc}
 8021e00:	2a24      	cmp	r2, #36	; 0x24
 8021e02:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8021e06:	bf11      	iteee	ne
 8021e08:	f100 0310 	addne.w	r3, r0, #16
 8021e0c:	6101      	streq	r1, [r0, #16]
 8021e0e:	f100 0318 	addeq.w	r3, r0, #24
 8021e12:	6141      	streq	r1, [r0, #20]
 8021e14:	e7ee      	b.n	8021df4 <_calloc_r+0x2c>
 8021e16:	4603      	mov	r3, r0
 8021e18:	e7ec      	b.n	8021df4 <_calloc_r+0x2c>
 8021e1a:	2100      	movs	r1, #0
 8021e1c:	f7fd f9e8 	bl	801f1f0 <memset>
 8021e20:	e7ec      	b.n	8021dfc <_calloc_r+0x34>
	...

08021e24 <_realloc_r>:
 8021e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e28:	4682      	mov	sl, r0
 8021e2a:	460c      	mov	r4, r1
 8021e2c:	b929      	cbnz	r1, 8021e3a <_realloc_r+0x16>
 8021e2e:	4611      	mov	r1, r2
 8021e30:	b003      	add	sp, #12
 8021e32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e36:	f7fc bf6b 	b.w	801ed10 <_malloc_r>
 8021e3a:	9201      	str	r2, [sp, #4]
 8021e3c:	f7fd f9e0 	bl	801f200 <__malloc_lock>
 8021e40:	9a01      	ldr	r2, [sp, #4]
 8021e42:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8021e46:	f102 080b 	add.w	r8, r2, #11
 8021e4a:	f1b8 0f16 	cmp.w	r8, #22
 8021e4e:	f1a4 0908 	sub.w	r9, r4, #8
 8021e52:	f025 0603 	bic.w	r6, r5, #3
 8021e56:	d90b      	bls.n	8021e70 <_realloc_r+0x4c>
 8021e58:	f038 0807 	bics.w	r8, r8, #7
 8021e5c:	d50a      	bpl.n	8021e74 <_realloc_r+0x50>
 8021e5e:	230c      	movs	r3, #12
 8021e60:	f8ca 3000 	str.w	r3, [sl]
 8021e64:	f04f 0b00 	mov.w	fp, #0
 8021e68:	4658      	mov	r0, fp
 8021e6a:	b003      	add	sp, #12
 8021e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e70:	f04f 0810 	mov.w	r8, #16
 8021e74:	4590      	cmp	r8, r2
 8021e76:	d3f2      	bcc.n	8021e5e <_realloc_r+0x3a>
 8021e78:	45b0      	cmp	r8, r6
 8021e7a:	f340 8170 	ble.w	802215e <_realloc_r+0x33a>
 8021e7e:	49a9      	ldr	r1, [pc, #676]	; (8022124 <_realloc_r+0x300>)
 8021e80:	9101      	str	r1, [sp, #4]
 8021e82:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8021e86:	eb09 0306 	add.w	r3, r9, r6
 8021e8a:	459c      	cmp	ip, r3
 8021e8c:	6858      	ldr	r0, [r3, #4]
 8021e8e:	d005      	beq.n	8021e9c <_realloc_r+0x78>
 8021e90:	f020 0101 	bic.w	r1, r0, #1
 8021e94:	4419      	add	r1, r3
 8021e96:	6849      	ldr	r1, [r1, #4]
 8021e98:	07cf      	lsls	r7, r1, #31
 8021e9a:	d447      	bmi.n	8021f2c <_realloc_r+0x108>
 8021e9c:	f020 0003 	bic.w	r0, r0, #3
 8021ea0:	459c      	cmp	ip, r3
 8021ea2:	eb06 0700 	add.w	r7, r6, r0
 8021ea6:	d119      	bne.n	8021edc <_realloc_r+0xb8>
 8021ea8:	f108 0110 	add.w	r1, r8, #16
 8021eac:	42b9      	cmp	r1, r7
 8021eae:	dc3f      	bgt.n	8021f30 <_realloc_r+0x10c>
 8021eb0:	eb09 0308 	add.w	r3, r9, r8
 8021eb4:	9a01      	ldr	r2, [sp, #4]
 8021eb6:	eba7 0708 	sub.w	r7, r7, r8
 8021eba:	f047 0701 	orr.w	r7, r7, #1
 8021ebe:	6093      	str	r3, [r2, #8]
 8021ec0:	605f      	str	r7, [r3, #4]
 8021ec2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021ec6:	f003 0301 	and.w	r3, r3, #1
 8021eca:	ea43 0308 	orr.w	r3, r3, r8
 8021ece:	f844 3c04 	str.w	r3, [r4, #-4]
 8021ed2:	4650      	mov	r0, sl
 8021ed4:	f7fd f99a 	bl	801f20c <__malloc_unlock>
 8021ed8:	46a3      	mov	fp, r4
 8021eda:	e7c5      	b.n	8021e68 <_realloc_r+0x44>
 8021edc:	45b8      	cmp	r8, r7
 8021ede:	dc27      	bgt.n	8021f30 <_realloc_r+0x10c>
 8021ee0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8021ee4:	60da      	str	r2, [r3, #12]
 8021ee6:	6093      	str	r3, [r2, #8]
 8021ee8:	eba7 0008 	sub.w	r0, r7, r8
 8021eec:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8021ef0:	280f      	cmp	r0, #15
 8021ef2:	f002 0201 	and.w	r2, r2, #1
 8021ef6:	eb09 0307 	add.w	r3, r9, r7
 8021efa:	f240 8132 	bls.w	8022162 <_realloc_r+0x33e>
 8021efe:	eb09 0108 	add.w	r1, r9, r8
 8021f02:	ea48 0202 	orr.w	r2, r8, r2
 8021f06:	f040 0001 	orr.w	r0, r0, #1
 8021f0a:	f8c9 2004 	str.w	r2, [r9, #4]
 8021f0e:	6048      	str	r0, [r1, #4]
 8021f10:	685a      	ldr	r2, [r3, #4]
 8021f12:	f042 0201 	orr.w	r2, r2, #1
 8021f16:	605a      	str	r2, [r3, #4]
 8021f18:	3108      	adds	r1, #8
 8021f1a:	4650      	mov	r0, sl
 8021f1c:	f7ff fac8 	bl	80214b0 <_free_r>
 8021f20:	4650      	mov	r0, sl
 8021f22:	f7fd f973 	bl	801f20c <__malloc_unlock>
 8021f26:	f109 0b08 	add.w	fp, r9, #8
 8021f2a:	e79d      	b.n	8021e68 <_realloc_r+0x44>
 8021f2c:	2000      	movs	r0, #0
 8021f2e:	4603      	mov	r3, r0
 8021f30:	07e9      	lsls	r1, r5, #31
 8021f32:	f100 80c6 	bmi.w	80220c2 <_realloc_r+0x29e>
 8021f36:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8021f3a:	eba9 0505 	sub.w	r5, r9, r5
 8021f3e:	6869      	ldr	r1, [r5, #4]
 8021f40:	f021 0103 	bic.w	r1, r1, #3
 8021f44:	eb01 0b06 	add.w	fp, r1, r6
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	f000 8086 	beq.w	802205a <_realloc_r+0x236>
 8021f4e:	459c      	cmp	ip, r3
 8021f50:	eb00 070b 	add.w	r7, r0, fp
 8021f54:	d149      	bne.n	8021fea <_realloc_r+0x1c6>
 8021f56:	f108 0310 	add.w	r3, r8, #16
 8021f5a:	42bb      	cmp	r3, r7
 8021f5c:	dc7d      	bgt.n	802205a <_realloc_r+0x236>
 8021f5e:	46ab      	mov	fp, r5
 8021f60:	68eb      	ldr	r3, [r5, #12]
 8021f62:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8021f66:	60d3      	str	r3, [r2, #12]
 8021f68:	609a      	str	r2, [r3, #8]
 8021f6a:	1f32      	subs	r2, r6, #4
 8021f6c:	2a24      	cmp	r2, #36	; 0x24
 8021f6e:	d837      	bhi.n	8021fe0 <_realloc_r+0x1bc>
 8021f70:	2a13      	cmp	r2, #19
 8021f72:	d933      	bls.n	8021fdc <_realloc_r+0x1b8>
 8021f74:	6823      	ldr	r3, [r4, #0]
 8021f76:	60ab      	str	r3, [r5, #8]
 8021f78:	6863      	ldr	r3, [r4, #4]
 8021f7a:	60eb      	str	r3, [r5, #12]
 8021f7c:	2a1b      	cmp	r2, #27
 8021f7e:	d81b      	bhi.n	8021fb8 <_realloc_r+0x194>
 8021f80:	3408      	adds	r4, #8
 8021f82:	f105 0310 	add.w	r3, r5, #16
 8021f86:	6822      	ldr	r2, [r4, #0]
 8021f88:	601a      	str	r2, [r3, #0]
 8021f8a:	6862      	ldr	r2, [r4, #4]
 8021f8c:	605a      	str	r2, [r3, #4]
 8021f8e:	68a2      	ldr	r2, [r4, #8]
 8021f90:	609a      	str	r2, [r3, #8]
 8021f92:	eb05 0308 	add.w	r3, r5, r8
 8021f96:	9a01      	ldr	r2, [sp, #4]
 8021f98:	eba7 0708 	sub.w	r7, r7, r8
 8021f9c:	f047 0701 	orr.w	r7, r7, #1
 8021fa0:	6093      	str	r3, [r2, #8]
 8021fa2:	605f      	str	r7, [r3, #4]
 8021fa4:	686b      	ldr	r3, [r5, #4]
 8021fa6:	f003 0301 	and.w	r3, r3, #1
 8021faa:	ea43 0308 	orr.w	r3, r3, r8
 8021fae:	606b      	str	r3, [r5, #4]
 8021fb0:	4650      	mov	r0, sl
 8021fb2:	f7fd f92b 	bl	801f20c <__malloc_unlock>
 8021fb6:	e757      	b.n	8021e68 <_realloc_r+0x44>
 8021fb8:	68a3      	ldr	r3, [r4, #8]
 8021fba:	612b      	str	r3, [r5, #16]
 8021fbc:	68e3      	ldr	r3, [r4, #12]
 8021fbe:	616b      	str	r3, [r5, #20]
 8021fc0:	2a24      	cmp	r2, #36	; 0x24
 8021fc2:	bf01      	itttt	eq
 8021fc4:	6923      	ldreq	r3, [r4, #16]
 8021fc6:	61ab      	streq	r3, [r5, #24]
 8021fc8:	6962      	ldreq	r2, [r4, #20]
 8021fca:	61ea      	streq	r2, [r5, #28]
 8021fcc:	bf19      	ittee	ne
 8021fce:	3410      	addne	r4, #16
 8021fd0:	f105 0318 	addne.w	r3, r5, #24
 8021fd4:	f105 0320 	addeq.w	r3, r5, #32
 8021fd8:	3418      	addeq	r4, #24
 8021fda:	e7d4      	b.n	8021f86 <_realloc_r+0x162>
 8021fdc:	465b      	mov	r3, fp
 8021fde:	e7d2      	b.n	8021f86 <_realloc_r+0x162>
 8021fe0:	4621      	mov	r1, r4
 8021fe2:	4658      	mov	r0, fp
 8021fe4:	f7fd f8eb 	bl	801f1be <memmove>
 8021fe8:	e7d3      	b.n	8021f92 <_realloc_r+0x16e>
 8021fea:	45b8      	cmp	r8, r7
 8021fec:	dc35      	bgt.n	802205a <_realloc_r+0x236>
 8021fee:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8021ff2:	4628      	mov	r0, r5
 8021ff4:	60da      	str	r2, [r3, #12]
 8021ff6:	6093      	str	r3, [r2, #8]
 8021ff8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8021ffc:	68eb      	ldr	r3, [r5, #12]
 8021ffe:	60d3      	str	r3, [r2, #12]
 8022000:	609a      	str	r2, [r3, #8]
 8022002:	1f32      	subs	r2, r6, #4
 8022004:	2a24      	cmp	r2, #36	; 0x24
 8022006:	d824      	bhi.n	8022052 <_realloc_r+0x22e>
 8022008:	2a13      	cmp	r2, #19
 802200a:	d908      	bls.n	802201e <_realloc_r+0x1fa>
 802200c:	6823      	ldr	r3, [r4, #0]
 802200e:	60ab      	str	r3, [r5, #8]
 8022010:	6863      	ldr	r3, [r4, #4]
 8022012:	60eb      	str	r3, [r5, #12]
 8022014:	2a1b      	cmp	r2, #27
 8022016:	d80a      	bhi.n	802202e <_realloc_r+0x20a>
 8022018:	3408      	adds	r4, #8
 802201a:	f105 0010 	add.w	r0, r5, #16
 802201e:	6823      	ldr	r3, [r4, #0]
 8022020:	6003      	str	r3, [r0, #0]
 8022022:	6863      	ldr	r3, [r4, #4]
 8022024:	6043      	str	r3, [r0, #4]
 8022026:	68a3      	ldr	r3, [r4, #8]
 8022028:	6083      	str	r3, [r0, #8]
 802202a:	46a9      	mov	r9, r5
 802202c:	e75c      	b.n	8021ee8 <_realloc_r+0xc4>
 802202e:	68a3      	ldr	r3, [r4, #8]
 8022030:	612b      	str	r3, [r5, #16]
 8022032:	68e3      	ldr	r3, [r4, #12]
 8022034:	616b      	str	r3, [r5, #20]
 8022036:	2a24      	cmp	r2, #36	; 0x24
 8022038:	bf01      	itttt	eq
 802203a:	6923      	ldreq	r3, [r4, #16]
 802203c:	61ab      	streq	r3, [r5, #24]
 802203e:	6963      	ldreq	r3, [r4, #20]
 8022040:	61eb      	streq	r3, [r5, #28]
 8022042:	bf19      	ittee	ne
 8022044:	3410      	addne	r4, #16
 8022046:	f105 0018 	addne.w	r0, r5, #24
 802204a:	f105 0020 	addeq.w	r0, r5, #32
 802204e:	3418      	addeq	r4, #24
 8022050:	e7e5      	b.n	802201e <_realloc_r+0x1fa>
 8022052:	4621      	mov	r1, r4
 8022054:	f7fd f8b3 	bl	801f1be <memmove>
 8022058:	e7e7      	b.n	802202a <_realloc_r+0x206>
 802205a:	45d8      	cmp	r8, fp
 802205c:	dc31      	bgt.n	80220c2 <_realloc_r+0x29e>
 802205e:	4628      	mov	r0, r5
 8022060:	68eb      	ldr	r3, [r5, #12]
 8022062:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022066:	60d3      	str	r3, [r2, #12]
 8022068:	609a      	str	r2, [r3, #8]
 802206a:	1f32      	subs	r2, r6, #4
 802206c:	2a24      	cmp	r2, #36	; 0x24
 802206e:	d824      	bhi.n	80220ba <_realloc_r+0x296>
 8022070:	2a13      	cmp	r2, #19
 8022072:	d908      	bls.n	8022086 <_realloc_r+0x262>
 8022074:	6823      	ldr	r3, [r4, #0]
 8022076:	60ab      	str	r3, [r5, #8]
 8022078:	6863      	ldr	r3, [r4, #4]
 802207a:	60eb      	str	r3, [r5, #12]
 802207c:	2a1b      	cmp	r2, #27
 802207e:	d80a      	bhi.n	8022096 <_realloc_r+0x272>
 8022080:	3408      	adds	r4, #8
 8022082:	f105 0010 	add.w	r0, r5, #16
 8022086:	6823      	ldr	r3, [r4, #0]
 8022088:	6003      	str	r3, [r0, #0]
 802208a:	6863      	ldr	r3, [r4, #4]
 802208c:	6043      	str	r3, [r0, #4]
 802208e:	68a3      	ldr	r3, [r4, #8]
 8022090:	6083      	str	r3, [r0, #8]
 8022092:	465f      	mov	r7, fp
 8022094:	e7c9      	b.n	802202a <_realloc_r+0x206>
 8022096:	68a3      	ldr	r3, [r4, #8]
 8022098:	612b      	str	r3, [r5, #16]
 802209a:	68e3      	ldr	r3, [r4, #12]
 802209c:	616b      	str	r3, [r5, #20]
 802209e:	2a24      	cmp	r2, #36	; 0x24
 80220a0:	bf01      	itttt	eq
 80220a2:	6923      	ldreq	r3, [r4, #16]
 80220a4:	61ab      	streq	r3, [r5, #24]
 80220a6:	6963      	ldreq	r3, [r4, #20]
 80220a8:	61eb      	streq	r3, [r5, #28]
 80220aa:	bf19      	ittee	ne
 80220ac:	3410      	addne	r4, #16
 80220ae:	f105 0018 	addne.w	r0, r5, #24
 80220b2:	f105 0020 	addeq.w	r0, r5, #32
 80220b6:	3418      	addeq	r4, #24
 80220b8:	e7e5      	b.n	8022086 <_realloc_r+0x262>
 80220ba:	4621      	mov	r1, r4
 80220bc:	f7fd f87f 	bl	801f1be <memmove>
 80220c0:	e7e7      	b.n	8022092 <_realloc_r+0x26e>
 80220c2:	4611      	mov	r1, r2
 80220c4:	4650      	mov	r0, sl
 80220c6:	f7fc fe23 	bl	801ed10 <_malloc_r>
 80220ca:	4683      	mov	fp, r0
 80220cc:	2800      	cmp	r0, #0
 80220ce:	f43f af6f 	beq.w	8021fb0 <_realloc_r+0x18c>
 80220d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80220d6:	f023 0301 	bic.w	r3, r3, #1
 80220da:	444b      	add	r3, r9
 80220dc:	f1a0 0208 	sub.w	r2, r0, #8
 80220e0:	4293      	cmp	r3, r2
 80220e2:	d105      	bne.n	80220f0 <_realloc_r+0x2cc>
 80220e4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80220e8:	f027 0703 	bic.w	r7, r7, #3
 80220ec:	4437      	add	r7, r6
 80220ee:	e6fb      	b.n	8021ee8 <_realloc_r+0xc4>
 80220f0:	1f32      	subs	r2, r6, #4
 80220f2:	2a24      	cmp	r2, #36	; 0x24
 80220f4:	d82f      	bhi.n	8022156 <_realloc_r+0x332>
 80220f6:	2a13      	cmp	r2, #19
 80220f8:	d92a      	bls.n	8022150 <_realloc_r+0x32c>
 80220fa:	6823      	ldr	r3, [r4, #0]
 80220fc:	6003      	str	r3, [r0, #0]
 80220fe:	6863      	ldr	r3, [r4, #4]
 8022100:	6043      	str	r3, [r0, #4]
 8022102:	2a1b      	cmp	r2, #27
 8022104:	d810      	bhi.n	8022128 <_realloc_r+0x304>
 8022106:	f104 0208 	add.w	r2, r4, #8
 802210a:	f100 0308 	add.w	r3, r0, #8
 802210e:	6811      	ldr	r1, [r2, #0]
 8022110:	6019      	str	r1, [r3, #0]
 8022112:	6851      	ldr	r1, [r2, #4]
 8022114:	6059      	str	r1, [r3, #4]
 8022116:	6892      	ldr	r2, [r2, #8]
 8022118:	609a      	str	r2, [r3, #8]
 802211a:	4621      	mov	r1, r4
 802211c:	4650      	mov	r0, sl
 802211e:	f7ff f9c7 	bl	80214b0 <_free_r>
 8022122:	e745      	b.n	8021fb0 <_realloc_r+0x18c>
 8022124:	2000222c 	.word	0x2000222c
 8022128:	68a3      	ldr	r3, [r4, #8]
 802212a:	6083      	str	r3, [r0, #8]
 802212c:	68e3      	ldr	r3, [r4, #12]
 802212e:	60c3      	str	r3, [r0, #12]
 8022130:	2a24      	cmp	r2, #36	; 0x24
 8022132:	bf01      	itttt	eq
 8022134:	6923      	ldreq	r3, [r4, #16]
 8022136:	6103      	streq	r3, [r0, #16]
 8022138:	6961      	ldreq	r1, [r4, #20]
 802213a:	6141      	streq	r1, [r0, #20]
 802213c:	bf19      	ittee	ne
 802213e:	f104 0210 	addne.w	r2, r4, #16
 8022142:	f100 0310 	addne.w	r3, r0, #16
 8022146:	f104 0218 	addeq.w	r2, r4, #24
 802214a:	f100 0318 	addeq.w	r3, r0, #24
 802214e:	e7de      	b.n	802210e <_realloc_r+0x2ea>
 8022150:	4603      	mov	r3, r0
 8022152:	4622      	mov	r2, r4
 8022154:	e7db      	b.n	802210e <_realloc_r+0x2ea>
 8022156:	4621      	mov	r1, r4
 8022158:	f7fd f831 	bl	801f1be <memmove>
 802215c:	e7dd      	b.n	802211a <_realloc_r+0x2f6>
 802215e:	4637      	mov	r7, r6
 8022160:	e6c2      	b.n	8021ee8 <_realloc_r+0xc4>
 8022162:	4317      	orrs	r7, r2
 8022164:	f8c9 7004 	str.w	r7, [r9, #4]
 8022168:	685a      	ldr	r2, [r3, #4]
 802216a:	f042 0201 	orr.w	r2, r2, #1
 802216e:	605a      	str	r2, [r3, #4]
 8022170:	e6d6      	b.n	8021f20 <_realloc_r+0xfc>
 8022172:	bf00      	nop
 8022174:	0000      	movs	r0, r0
	...

08022178 <cos>:
 8022178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802217a:	ec51 0b10 	vmov	r0, r1, d0
 802217e:	4a1e      	ldr	r2, [pc, #120]	; (80221f8 <cos+0x80>)
 8022180:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022184:	4293      	cmp	r3, r2
 8022186:	dc06      	bgt.n	8022196 <cos+0x1e>
 8022188:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80221f0 <cos+0x78>
 802218c:	f001 fb0c 	bl	80237a8 <__kernel_cos>
 8022190:	ec51 0b10 	vmov	r0, r1, d0
 8022194:	e007      	b.n	80221a6 <cos+0x2e>
 8022196:	4a19      	ldr	r2, [pc, #100]	; (80221fc <cos+0x84>)
 8022198:	4293      	cmp	r3, r2
 802219a:	dd09      	ble.n	80221b0 <cos+0x38>
 802219c:	ee10 2a10 	vmov	r2, s0
 80221a0:	460b      	mov	r3, r1
 80221a2:	f7e5 ffa9 	bl	80080f8 <__aeabi_dsub>
 80221a6:	ec41 0b10 	vmov	d0, r0, r1
 80221aa:	b005      	add	sp, #20
 80221ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80221b0:	4668      	mov	r0, sp
 80221b2:	f001 f855 	bl	8023260 <__ieee754_rem_pio2>
 80221b6:	f000 0003 	and.w	r0, r0, #3
 80221ba:	2801      	cmp	r0, #1
 80221bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80221c0:	ed9d 0b00 	vldr	d0, [sp]
 80221c4:	d007      	beq.n	80221d6 <cos+0x5e>
 80221c6:	2802      	cmp	r0, #2
 80221c8:	d00e      	beq.n	80221e8 <cos+0x70>
 80221ca:	2800      	cmp	r0, #0
 80221cc:	d0de      	beq.n	802218c <cos+0x14>
 80221ce:	2001      	movs	r0, #1
 80221d0:	f001 fef2 	bl	8023fb8 <__kernel_sin>
 80221d4:	e7dc      	b.n	8022190 <cos+0x18>
 80221d6:	f001 feef 	bl	8023fb8 <__kernel_sin>
 80221da:	ec53 2b10 	vmov	r2, r3, d0
 80221de:	ee10 0a10 	vmov	r0, s0
 80221e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80221e6:	e7de      	b.n	80221a6 <cos+0x2e>
 80221e8:	f001 fade 	bl	80237a8 <__kernel_cos>
 80221ec:	e7f5      	b.n	80221da <cos+0x62>
 80221ee:	bf00      	nop
	...
 80221f8:	3fe921fb 	.word	0x3fe921fb
 80221fc:	7fefffff 	.word	0x7fefffff

08022200 <sin>:
 8022200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022202:	ec51 0b10 	vmov	r0, r1, d0
 8022206:	4a20      	ldr	r2, [pc, #128]	; (8022288 <sin+0x88>)
 8022208:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802220c:	4293      	cmp	r3, r2
 802220e:	dc07      	bgt.n	8022220 <sin+0x20>
 8022210:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8022280 <sin+0x80>
 8022214:	2000      	movs	r0, #0
 8022216:	f001 fecf 	bl	8023fb8 <__kernel_sin>
 802221a:	ec51 0b10 	vmov	r0, r1, d0
 802221e:	e007      	b.n	8022230 <sin+0x30>
 8022220:	4a1a      	ldr	r2, [pc, #104]	; (802228c <sin+0x8c>)
 8022222:	4293      	cmp	r3, r2
 8022224:	dd09      	ble.n	802223a <sin+0x3a>
 8022226:	ee10 2a10 	vmov	r2, s0
 802222a:	460b      	mov	r3, r1
 802222c:	f7e5 ff64 	bl	80080f8 <__aeabi_dsub>
 8022230:	ec41 0b10 	vmov	d0, r0, r1
 8022234:	b005      	add	sp, #20
 8022236:	f85d fb04 	ldr.w	pc, [sp], #4
 802223a:	4668      	mov	r0, sp
 802223c:	f001 f810 	bl	8023260 <__ieee754_rem_pio2>
 8022240:	f000 0003 	and.w	r0, r0, #3
 8022244:	2801      	cmp	r0, #1
 8022246:	ed9d 1b02 	vldr	d1, [sp, #8]
 802224a:	ed9d 0b00 	vldr	d0, [sp]
 802224e:	d004      	beq.n	802225a <sin+0x5a>
 8022250:	2802      	cmp	r0, #2
 8022252:	d005      	beq.n	8022260 <sin+0x60>
 8022254:	b970      	cbnz	r0, 8022274 <sin+0x74>
 8022256:	2001      	movs	r0, #1
 8022258:	e7dd      	b.n	8022216 <sin+0x16>
 802225a:	f001 faa5 	bl	80237a8 <__kernel_cos>
 802225e:	e7dc      	b.n	802221a <sin+0x1a>
 8022260:	2001      	movs	r0, #1
 8022262:	f001 fea9 	bl	8023fb8 <__kernel_sin>
 8022266:	ec53 2b10 	vmov	r2, r3, d0
 802226a:	ee10 0a10 	vmov	r0, s0
 802226e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022272:	e7dd      	b.n	8022230 <sin+0x30>
 8022274:	f001 fa98 	bl	80237a8 <__kernel_cos>
 8022278:	e7f5      	b.n	8022266 <sin+0x66>
 802227a:	bf00      	nop
 802227c:	f3af 8000 	nop.w
	...
 8022288:	3fe921fb 	.word	0x3fe921fb
 802228c:	7fefffff 	.word	0x7fefffff

08022290 <log10>:
 8022290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022292:	ed2d 8b02 	vpush	{d8}
 8022296:	b08b      	sub	sp, #44	; 0x2c
 8022298:	ec55 4b10 	vmov	r4, r5, d0
 802229c:	f000 fa44 	bl	8022728 <__ieee754_log10>
 80222a0:	4b36      	ldr	r3, [pc, #216]	; (802237c <log10+0xec>)
 80222a2:	eeb0 8a40 	vmov.f32	s16, s0
 80222a6:	eef0 8a60 	vmov.f32	s17, s1
 80222aa:	f993 6000 	ldrsb.w	r6, [r3]
 80222ae:	1c73      	adds	r3, r6, #1
 80222b0:	d05c      	beq.n	802236c <log10+0xdc>
 80222b2:	4622      	mov	r2, r4
 80222b4:	462b      	mov	r3, r5
 80222b6:	4620      	mov	r0, r4
 80222b8:	4629      	mov	r1, r5
 80222ba:	f7e6 fb6f 	bl	800899c <__aeabi_dcmpun>
 80222be:	4607      	mov	r7, r0
 80222c0:	2800      	cmp	r0, #0
 80222c2:	d153      	bne.n	802236c <log10+0xdc>
 80222c4:	2200      	movs	r2, #0
 80222c6:	2300      	movs	r3, #0
 80222c8:	4620      	mov	r0, r4
 80222ca:	4629      	mov	r1, r5
 80222cc:	f7e6 fb48 	bl	8008960 <__aeabi_dcmple>
 80222d0:	2800      	cmp	r0, #0
 80222d2:	d04b      	beq.n	802236c <log10+0xdc>
 80222d4:	4b2a      	ldr	r3, [pc, #168]	; (8022380 <log10+0xf0>)
 80222d6:	9301      	str	r3, [sp, #4]
 80222d8:	9708      	str	r7, [sp, #32]
 80222da:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80222de:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80222e2:	b9a6      	cbnz	r6, 802230e <log10+0x7e>
 80222e4:	4b27      	ldr	r3, [pc, #156]	; (8022384 <log10+0xf4>)
 80222e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80222ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80222ee:	4620      	mov	r0, r4
 80222f0:	2200      	movs	r2, #0
 80222f2:	2300      	movs	r3, #0
 80222f4:	4629      	mov	r1, r5
 80222f6:	f7e6 fb1f 	bl	8008938 <__aeabi_dcmpeq>
 80222fa:	bb40      	cbnz	r0, 802234e <log10+0xbe>
 80222fc:	2301      	movs	r3, #1
 80222fe:	2e02      	cmp	r6, #2
 8022300:	9300      	str	r3, [sp, #0]
 8022302:	d119      	bne.n	8022338 <log10+0xa8>
 8022304:	f7fc fcc4 	bl	801ec90 <__errno>
 8022308:	2321      	movs	r3, #33	; 0x21
 802230a:	6003      	str	r3, [r0, #0]
 802230c:	e019      	b.n	8022342 <log10+0xb2>
 802230e:	4b1e      	ldr	r3, [pc, #120]	; (8022388 <log10+0xf8>)
 8022310:	2200      	movs	r2, #0
 8022312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022316:	4620      	mov	r0, r4
 8022318:	2200      	movs	r2, #0
 802231a:	2300      	movs	r3, #0
 802231c:	4629      	mov	r1, r5
 802231e:	f7e6 fb0b 	bl	8008938 <__aeabi_dcmpeq>
 8022322:	2800      	cmp	r0, #0
 8022324:	d0ea      	beq.n	80222fc <log10+0x6c>
 8022326:	2302      	movs	r3, #2
 8022328:	429e      	cmp	r6, r3
 802232a:	9300      	str	r3, [sp, #0]
 802232c:	d111      	bne.n	8022352 <log10+0xc2>
 802232e:	f7fc fcaf 	bl	801ec90 <__errno>
 8022332:	2322      	movs	r3, #34	; 0x22
 8022334:	6003      	str	r3, [r0, #0]
 8022336:	e011      	b.n	802235c <log10+0xcc>
 8022338:	4668      	mov	r0, sp
 802233a:	f001 ff8d 	bl	8024258 <matherr>
 802233e:	2800      	cmp	r0, #0
 8022340:	d0e0      	beq.n	8022304 <log10+0x74>
 8022342:	4812      	ldr	r0, [pc, #72]	; (802238c <log10+0xfc>)
 8022344:	f001 ff8c 	bl	8024260 <nan>
 8022348:	ed8d 0b06 	vstr	d0, [sp, #24]
 802234c:	e006      	b.n	802235c <log10+0xcc>
 802234e:	2302      	movs	r3, #2
 8022350:	9300      	str	r3, [sp, #0]
 8022352:	4668      	mov	r0, sp
 8022354:	f001 ff80 	bl	8024258 <matherr>
 8022358:	2800      	cmp	r0, #0
 802235a:	d0e8      	beq.n	802232e <log10+0x9e>
 802235c:	9b08      	ldr	r3, [sp, #32]
 802235e:	b11b      	cbz	r3, 8022368 <log10+0xd8>
 8022360:	f7fc fc96 	bl	801ec90 <__errno>
 8022364:	9b08      	ldr	r3, [sp, #32]
 8022366:	6003      	str	r3, [r0, #0]
 8022368:	ed9d 8b06 	vldr	d8, [sp, #24]
 802236c:	eeb0 0a48 	vmov.f32	s0, s16
 8022370:	eef0 0a68 	vmov.f32	s1, s17
 8022374:	b00b      	add	sp, #44	; 0x2c
 8022376:	ecbd 8b02 	vpop	{d8}
 802237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802237c:	20002640 	.word	0x20002640
 8022380:	08035f8c 	.word	0x08035f8c
 8022384:	c7efffff 	.word	0xc7efffff
 8022388:	fff00000 	.word	0xfff00000
 802238c:	08035d29 	.word	0x08035d29

08022390 <pow>:
 8022390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022394:	ed2d 8b04 	vpush	{d8-d9}
 8022398:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 802266c <pow+0x2dc>
 802239c:	b08d      	sub	sp, #52	; 0x34
 802239e:	ec57 6b10 	vmov	r6, r7, d0
 80223a2:	ec55 4b11 	vmov	r4, r5, d1
 80223a6:	f000 fa4b 	bl	8022840 <__ieee754_pow>
 80223aa:	f999 3000 	ldrsb.w	r3, [r9]
 80223ae:	9300      	str	r3, [sp, #0]
 80223b0:	3301      	adds	r3, #1
 80223b2:	eeb0 8a40 	vmov.f32	s16, s0
 80223b6:	eef0 8a60 	vmov.f32	s17, s1
 80223ba:	46c8      	mov	r8, r9
 80223bc:	d05f      	beq.n	802247e <pow+0xee>
 80223be:	4622      	mov	r2, r4
 80223c0:	462b      	mov	r3, r5
 80223c2:	4620      	mov	r0, r4
 80223c4:	4629      	mov	r1, r5
 80223c6:	f7e6 fae9 	bl	800899c <__aeabi_dcmpun>
 80223ca:	4683      	mov	fp, r0
 80223cc:	2800      	cmp	r0, #0
 80223ce:	d156      	bne.n	802247e <pow+0xee>
 80223d0:	4632      	mov	r2, r6
 80223d2:	463b      	mov	r3, r7
 80223d4:	4630      	mov	r0, r6
 80223d6:	4639      	mov	r1, r7
 80223d8:	f7e6 fae0 	bl	800899c <__aeabi_dcmpun>
 80223dc:	9001      	str	r0, [sp, #4]
 80223de:	b1e8      	cbz	r0, 802241c <pow+0x8c>
 80223e0:	2200      	movs	r2, #0
 80223e2:	2300      	movs	r3, #0
 80223e4:	4620      	mov	r0, r4
 80223e6:	4629      	mov	r1, r5
 80223e8:	f7e6 faa6 	bl	8008938 <__aeabi_dcmpeq>
 80223ec:	2800      	cmp	r0, #0
 80223ee:	d046      	beq.n	802247e <pow+0xee>
 80223f0:	2301      	movs	r3, #1
 80223f2:	9302      	str	r3, [sp, #8]
 80223f4:	4b96      	ldr	r3, [pc, #600]	; (8022650 <pow+0x2c0>)
 80223f6:	9303      	str	r3, [sp, #12]
 80223f8:	4b96      	ldr	r3, [pc, #600]	; (8022654 <pow+0x2c4>)
 80223fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80223fe:	2200      	movs	r2, #0
 8022400:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022404:	9b00      	ldr	r3, [sp, #0]
 8022406:	2b02      	cmp	r3, #2
 8022408:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802240c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022410:	d033      	beq.n	802247a <pow+0xea>
 8022412:	a802      	add	r0, sp, #8
 8022414:	f001 ff20 	bl	8024258 <matherr>
 8022418:	bb48      	cbnz	r0, 802246e <pow+0xde>
 802241a:	e05d      	b.n	80224d8 <pow+0x148>
 802241c:	f04f 0a00 	mov.w	sl, #0
 8022420:	f04f 0b00 	mov.w	fp, #0
 8022424:	4652      	mov	r2, sl
 8022426:	465b      	mov	r3, fp
 8022428:	4630      	mov	r0, r6
 802242a:	4639      	mov	r1, r7
 802242c:	f7e6 fa84 	bl	8008938 <__aeabi_dcmpeq>
 8022430:	ec4b ab19 	vmov	d9, sl, fp
 8022434:	2800      	cmp	r0, #0
 8022436:	d054      	beq.n	80224e2 <pow+0x152>
 8022438:	4652      	mov	r2, sl
 802243a:	465b      	mov	r3, fp
 802243c:	4620      	mov	r0, r4
 802243e:	4629      	mov	r1, r5
 8022440:	f7e6 fa7a 	bl	8008938 <__aeabi_dcmpeq>
 8022444:	4680      	mov	r8, r0
 8022446:	b318      	cbz	r0, 8022490 <pow+0x100>
 8022448:	2301      	movs	r3, #1
 802244a:	9302      	str	r3, [sp, #8]
 802244c:	4b80      	ldr	r3, [pc, #512]	; (8022650 <pow+0x2c0>)
 802244e:	9303      	str	r3, [sp, #12]
 8022450:	9b01      	ldr	r3, [sp, #4]
 8022452:	930a      	str	r3, [sp, #40]	; 0x28
 8022454:	9b00      	ldr	r3, [sp, #0]
 8022456:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802245a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802245e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022462:	2b00      	cmp	r3, #0
 8022464:	d0d5      	beq.n	8022412 <pow+0x82>
 8022466:	4b7b      	ldr	r3, [pc, #492]	; (8022654 <pow+0x2c4>)
 8022468:	2200      	movs	r2, #0
 802246a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802246e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022470:	b11b      	cbz	r3, 802247a <pow+0xea>
 8022472:	f7fc fc0d 	bl	801ec90 <__errno>
 8022476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022478:	6003      	str	r3, [r0, #0]
 802247a:	ed9d 8b08 	vldr	d8, [sp, #32]
 802247e:	eeb0 0a48 	vmov.f32	s0, s16
 8022482:	eef0 0a68 	vmov.f32	s1, s17
 8022486:	b00d      	add	sp, #52	; 0x34
 8022488:	ecbd 8b04 	vpop	{d8-d9}
 802248c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022490:	ec45 4b10 	vmov	d0, r4, r5
 8022494:	f001 fe53 	bl	802413e <finite>
 8022498:	2800      	cmp	r0, #0
 802249a:	d0f0      	beq.n	802247e <pow+0xee>
 802249c:	4652      	mov	r2, sl
 802249e:	465b      	mov	r3, fp
 80224a0:	4620      	mov	r0, r4
 80224a2:	4629      	mov	r1, r5
 80224a4:	f7e6 fa52 	bl	800894c <__aeabi_dcmplt>
 80224a8:	2800      	cmp	r0, #0
 80224aa:	d0e8      	beq.n	802247e <pow+0xee>
 80224ac:	2301      	movs	r3, #1
 80224ae:	9302      	str	r3, [sp, #8]
 80224b0:	4b67      	ldr	r3, [pc, #412]	; (8022650 <pow+0x2c0>)
 80224b2:	9303      	str	r3, [sp, #12]
 80224b4:	f999 3000 	ldrsb.w	r3, [r9]
 80224b8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80224bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80224c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80224c4:	b913      	cbnz	r3, 80224cc <pow+0x13c>
 80224c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80224ca:	e7a2      	b.n	8022412 <pow+0x82>
 80224cc:	4962      	ldr	r1, [pc, #392]	; (8022658 <pow+0x2c8>)
 80224ce:	2000      	movs	r0, #0
 80224d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80224d4:	2b02      	cmp	r3, #2
 80224d6:	d19c      	bne.n	8022412 <pow+0x82>
 80224d8:	f7fc fbda 	bl	801ec90 <__errno>
 80224dc:	2321      	movs	r3, #33	; 0x21
 80224de:	6003      	str	r3, [r0, #0]
 80224e0:	e7c5      	b.n	802246e <pow+0xde>
 80224e2:	eeb0 0a48 	vmov.f32	s0, s16
 80224e6:	eef0 0a68 	vmov.f32	s1, s17
 80224ea:	f001 fe28 	bl	802413e <finite>
 80224ee:	9000      	str	r0, [sp, #0]
 80224f0:	2800      	cmp	r0, #0
 80224f2:	f040 8081 	bne.w	80225f8 <pow+0x268>
 80224f6:	ec47 6b10 	vmov	d0, r6, r7
 80224fa:	f001 fe20 	bl	802413e <finite>
 80224fe:	2800      	cmp	r0, #0
 8022500:	d07a      	beq.n	80225f8 <pow+0x268>
 8022502:	ec45 4b10 	vmov	d0, r4, r5
 8022506:	f001 fe1a 	bl	802413e <finite>
 802250a:	2800      	cmp	r0, #0
 802250c:	d074      	beq.n	80225f8 <pow+0x268>
 802250e:	ec53 2b18 	vmov	r2, r3, d8
 8022512:	ee18 0a10 	vmov	r0, s16
 8022516:	4619      	mov	r1, r3
 8022518:	f7e6 fa40 	bl	800899c <__aeabi_dcmpun>
 802251c:	f999 9000 	ldrsb.w	r9, [r9]
 8022520:	4b4b      	ldr	r3, [pc, #300]	; (8022650 <pow+0x2c0>)
 8022522:	b1b0      	cbz	r0, 8022552 <pow+0x1c2>
 8022524:	2201      	movs	r2, #1
 8022526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802252a:	9b00      	ldr	r3, [sp, #0]
 802252c:	930a      	str	r3, [sp, #40]	; 0x28
 802252e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022532:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022536:	f1b9 0f00 	cmp.w	r9, #0
 802253a:	d0c4      	beq.n	80224c6 <pow+0x136>
 802253c:	4652      	mov	r2, sl
 802253e:	465b      	mov	r3, fp
 8022540:	4650      	mov	r0, sl
 8022542:	4659      	mov	r1, fp
 8022544:	f7e6 f8ba 	bl	80086bc <__aeabi_ddiv>
 8022548:	f1b9 0f02 	cmp.w	r9, #2
 802254c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022550:	e7c1      	b.n	80224d6 <pow+0x146>
 8022552:	2203      	movs	r2, #3
 8022554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022558:	900a      	str	r0, [sp, #40]	; 0x28
 802255a:	4629      	mov	r1, r5
 802255c:	4620      	mov	r0, r4
 802255e:	2200      	movs	r2, #0
 8022560:	4b3e      	ldr	r3, [pc, #248]	; (802265c <pow+0x2cc>)
 8022562:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022566:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802256a:	f7e5 ff7d 	bl	8008468 <__aeabi_dmul>
 802256e:	4604      	mov	r4, r0
 8022570:	460d      	mov	r5, r1
 8022572:	f1b9 0f00 	cmp.w	r9, #0
 8022576:	d124      	bne.n	80225c2 <pow+0x232>
 8022578:	4b39      	ldr	r3, [pc, #228]	; (8022660 <pow+0x2d0>)
 802257a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802257e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022582:	4630      	mov	r0, r6
 8022584:	4652      	mov	r2, sl
 8022586:	465b      	mov	r3, fp
 8022588:	4639      	mov	r1, r7
 802258a:	f7e6 f9df 	bl	800894c <__aeabi_dcmplt>
 802258e:	2800      	cmp	r0, #0
 8022590:	d056      	beq.n	8022640 <pow+0x2b0>
 8022592:	ec45 4b10 	vmov	d0, r4, r5
 8022596:	f001 fe6b 	bl	8024270 <rint>
 802259a:	4622      	mov	r2, r4
 802259c:	462b      	mov	r3, r5
 802259e:	ec51 0b10 	vmov	r0, r1, d0
 80225a2:	f7e6 f9c9 	bl	8008938 <__aeabi_dcmpeq>
 80225a6:	b920      	cbnz	r0, 80225b2 <pow+0x222>
 80225a8:	4b2e      	ldr	r3, [pc, #184]	; (8022664 <pow+0x2d4>)
 80225aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80225ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80225b2:	f998 3000 	ldrsb.w	r3, [r8]
 80225b6:	2b02      	cmp	r3, #2
 80225b8:	d142      	bne.n	8022640 <pow+0x2b0>
 80225ba:	f7fc fb69 	bl	801ec90 <__errno>
 80225be:	2322      	movs	r3, #34	; 0x22
 80225c0:	e78d      	b.n	80224de <pow+0x14e>
 80225c2:	4b29      	ldr	r3, [pc, #164]	; (8022668 <pow+0x2d8>)
 80225c4:	2200      	movs	r2, #0
 80225c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80225ca:	4630      	mov	r0, r6
 80225cc:	4652      	mov	r2, sl
 80225ce:	465b      	mov	r3, fp
 80225d0:	4639      	mov	r1, r7
 80225d2:	f7e6 f9bb 	bl	800894c <__aeabi_dcmplt>
 80225d6:	2800      	cmp	r0, #0
 80225d8:	d0eb      	beq.n	80225b2 <pow+0x222>
 80225da:	ec45 4b10 	vmov	d0, r4, r5
 80225de:	f001 fe47 	bl	8024270 <rint>
 80225e2:	4622      	mov	r2, r4
 80225e4:	462b      	mov	r3, r5
 80225e6:	ec51 0b10 	vmov	r0, r1, d0
 80225ea:	f7e6 f9a5 	bl	8008938 <__aeabi_dcmpeq>
 80225ee:	2800      	cmp	r0, #0
 80225f0:	d1df      	bne.n	80225b2 <pow+0x222>
 80225f2:	2200      	movs	r2, #0
 80225f4:	4b18      	ldr	r3, [pc, #96]	; (8022658 <pow+0x2c8>)
 80225f6:	e7da      	b.n	80225ae <pow+0x21e>
 80225f8:	2200      	movs	r2, #0
 80225fa:	2300      	movs	r3, #0
 80225fc:	ec51 0b18 	vmov	r0, r1, d8
 8022600:	f7e6 f99a 	bl	8008938 <__aeabi_dcmpeq>
 8022604:	2800      	cmp	r0, #0
 8022606:	f43f af3a 	beq.w	802247e <pow+0xee>
 802260a:	ec47 6b10 	vmov	d0, r6, r7
 802260e:	f001 fd96 	bl	802413e <finite>
 8022612:	2800      	cmp	r0, #0
 8022614:	f43f af33 	beq.w	802247e <pow+0xee>
 8022618:	ec45 4b10 	vmov	d0, r4, r5
 802261c:	f001 fd8f 	bl	802413e <finite>
 8022620:	2800      	cmp	r0, #0
 8022622:	f43f af2c 	beq.w	802247e <pow+0xee>
 8022626:	2304      	movs	r3, #4
 8022628:	9302      	str	r3, [sp, #8]
 802262a:	4b09      	ldr	r3, [pc, #36]	; (8022650 <pow+0x2c0>)
 802262c:	9303      	str	r3, [sp, #12]
 802262e:	2300      	movs	r3, #0
 8022630:	930a      	str	r3, [sp, #40]	; 0x28
 8022632:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022636:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802263a:	ed8d 9b08 	vstr	d9, [sp, #32]
 802263e:	e7b8      	b.n	80225b2 <pow+0x222>
 8022640:	a802      	add	r0, sp, #8
 8022642:	f001 fe09 	bl	8024258 <matherr>
 8022646:	2800      	cmp	r0, #0
 8022648:	f47f af11 	bne.w	802246e <pow+0xde>
 802264c:	e7b5      	b.n	80225ba <pow+0x22a>
 802264e:	bf00      	nop
 8022650:	08035f92 	.word	0x08035f92
 8022654:	3ff00000 	.word	0x3ff00000
 8022658:	fff00000 	.word	0xfff00000
 802265c:	3fe00000 	.word	0x3fe00000
 8022660:	47efffff 	.word	0x47efffff
 8022664:	c7efffff 	.word	0xc7efffff
 8022668:	7ff00000 	.word	0x7ff00000
 802266c:	20002640 	.word	0x20002640

08022670 <sqrt>:
 8022670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022674:	ed2d 8b02 	vpush	{d8}
 8022678:	b08b      	sub	sp, #44	; 0x2c
 802267a:	ec55 4b10 	vmov	r4, r5, d0
 802267e:	f000 ffe1 	bl	8023644 <__ieee754_sqrt>
 8022682:	4b26      	ldr	r3, [pc, #152]	; (802271c <sqrt+0xac>)
 8022684:	eeb0 8a40 	vmov.f32	s16, s0
 8022688:	eef0 8a60 	vmov.f32	s17, s1
 802268c:	f993 6000 	ldrsb.w	r6, [r3]
 8022690:	1c73      	adds	r3, r6, #1
 8022692:	d02a      	beq.n	80226ea <sqrt+0x7a>
 8022694:	4622      	mov	r2, r4
 8022696:	462b      	mov	r3, r5
 8022698:	4620      	mov	r0, r4
 802269a:	4629      	mov	r1, r5
 802269c:	f7e6 f97e 	bl	800899c <__aeabi_dcmpun>
 80226a0:	4607      	mov	r7, r0
 80226a2:	bb10      	cbnz	r0, 80226ea <sqrt+0x7a>
 80226a4:	f04f 0800 	mov.w	r8, #0
 80226a8:	f04f 0900 	mov.w	r9, #0
 80226ac:	4642      	mov	r2, r8
 80226ae:	464b      	mov	r3, r9
 80226b0:	4620      	mov	r0, r4
 80226b2:	4629      	mov	r1, r5
 80226b4:	f7e6 f94a 	bl	800894c <__aeabi_dcmplt>
 80226b8:	b1b8      	cbz	r0, 80226ea <sqrt+0x7a>
 80226ba:	2301      	movs	r3, #1
 80226bc:	9300      	str	r3, [sp, #0]
 80226be:	4b18      	ldr	r3, [pc, #96]	; (8022720 <sqrt+0xb0>)
 80226c0:	9301      	str	r3, [sp, #4]
 80226c2:	9708      	str	r7, [sp, #32]
 80226c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80226c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80226cc:	b9b6      	cbnz	r6, 80226fc <sqrt+0x8c>
 80226ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80226d2:	4668      	mov	r0, sp
 80226d4:	f001 fdc0 	bl	8024258 <matherr>
 80226d8:	b1d0      	cbz	r0, 8022710 <sqrt+0xa0>
 80226da:	9b08      	ldr	r3, [sp, #32]
 80226dc:	b11b      	cbz	r3, 80226e6 <sqrt+0x76>
 80226de:	f7fc fad7 	bl	801ec90 <__errno>
 80226e2:	9b08      	ldr	r3, [sp, #32]
 80226e4:	6003      	str	r3, [r0, #0]
 80226e6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80226ea:	eeb0 0a48 	vmov.f32	s0, s16
 80226ee:	eef0 0a68 	vmov.f32	s1, s17
 80226f2:	b00b      	add	sp, #44	; 0x2c
 80226f4:	ecbd 8b02 	vpop	{d8}
 80226f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80226fc:	4642      	mov	r2, r8
 80226fe:	464b      	mov	r3, r9
 8022700:	4640      	mov	r0, r8
 8022702:	4649      	mov	r1, r9
 8022704:	f7e5 ffda 	bl	80086bc <__aeabi_ddiv>
 8022708:	2e02      	cmp	r6, #2
 802270a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802270e:	d1e0      	bne.n	80226d2 <sqrt+0x62>
 8022710:	f7fc fabe 	bl	801ec90 <__errno>
 8022714:	2321      	movs	r3, #33	; 0x21
 8022716:	6003      	str	r3, [r0, #0]
 8022718:	e7df      	b.n	80226da <sqrt+0x6a>
 802271a:	bf00      	nop
 802271c:	20002640 	.word	0x20002640
 8022720:	08035f96 	.word	0x08035f96
 8022724:	00000000 	.word	0x00000000

08022728 <__ieee754_log10>:
 8022728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802272c:	ec55 4b10 	vmov	r4, r5, d0
 8022730:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8022734:	462b      	mov	r3, r5
 8022736:	da2f      	bge.n	8022798 <__ieee754_log10+0x70>
 8022738:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 802273c:	4322      	orrs	r2, r4
 802273e:	d10a      	bne.n	8022756 <__ieee754_log10+0x2e>
 8022740:	493b      	ldr	r1, [pc, #236]	; (8022830 <__ieee754_log10+0x108>)
 8022742:	2200      	movs	r2, #0
 8022744:	2300      	movs	r3, #0
 8022746:	2000      	movs	r0, #0
 8022748:	f7e5 ffb8 	bl	80086bc <__aeabi_ddiv>
 802274c:	ec41 0b10 	vmov	d0, r0, r1
 8022750:	b003      	add	sp, #12
 8022752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022756:	2d00      	cmp	r5, #0
 8022758:	da08      	bge.n	802276c <__ieee754_log10+0x44>
 802275a:	ee10 2a10 	vmov	r2, s0
 802275e:	4620      	mov	r0, r4
 8022760:	4629      	mov	r1, r5
 8022762:	f7e5 fcc9 	bl	80080f8 <__aeabi_dsub>
 8022766:	2200      	movs	r2, #0
 8022768:	2300      	movs	r3, #0
 802276a:	e7ed      	b.n	8022748 <__ieee754_log10+0x20>
 802276c:	2200      	movs	r2, #0
 802276e:	4b31      	ldr	r3, [pc, #196]	; (8022834 <__ieee754_log10+0x10c>)
 8022770:	4629      	mov	r1, r5
 8022772:	ee10 0a10 	vmov	r0, s0
 8022776:	f7e5 fe77 	bl	8008468 <__aeabi_dmul>
 802277a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 802277e:	4604      	mov	r4, r0
 8022780:	460d      	mov	r5, r1
 8022782:	460b      	mov	r3, r1
 8022784:	492c      	ldr	r1, [pc, #176]	; (8022838 <__ieee754_log10+0x110>)
 8022786:	428b      	cmp	r3, r1
 8022788:	dd08      	ble.n	802279c <__ieee754_log10+0x74>
 802278a:	4622      	mov	r2, r4
 802278c:	462b      	mov	r3, r5
 802278e:	4620      	mov	r0, r4
 8022790:	4629      	mov	r1, r5
 8022792:	f7e5 fcb3 	bl	80080fc <__adddf3>
 8022796:	e7d9      	b.n	802274c <__ieee754_log10+0x24>
 8022798:	2200      	movs	r2, #0
 802279a:	e7f3      	b.n	8022784 <__ieee754_log10+0x5c>
 802279c:	1518      	asrs	r0, r3, #20
 802279e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80227a2:	4410      	add	r0, r2
 80227a4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80227a8:	4448      	add	r0, r9
 80227aa:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80227ae:	f7e5 fdf1 	bl	8008394 <__aeabi_i2d>
 80227b2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80227b6:	3303      	adds	r3, #3
 80227b8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80227bc:	ec45 4b10 	vmov	d0, r4, r5
 80227c0:	4606      	mov	r6, r0
 80227c2:	460f      	mov	r7, r1
 80227c4:	f001 fe50 	bl	8024468 <__ieee754_log>
 80227c8:	a313      	add	r3, pc, #76	; (adr r3, 8022818 <__ieee754_log10+0xf0>)
 80227ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ce:	4630      	mov	r0, r6
 80227d0:	4639      	mov	r1, r7
 80227d2:	ed8d 0b00 	vstr	d0, [sp]
 80227d6:	f7e5 fe47 	bl	8008468 <__aeabi_dmul>
 80227da:	ed9d 0b00 	vldr	d0, [sp]
 80227de:	4604      	mov	r4, r0
 80227e0:	460d      	mov	r5, r1
 80227e2:	a30f      	add	r3, pc, #60	; (adr r3, 8022820 <__ieee754_log10+0xf8>)
 80227e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227e8:	ec51 0b10 	vmov	r0, r1, d0
 80227ec:	f7e5 fe3c 	bl	8008468 <__aeabi_dmul>
 80227f0:	4602      	mov	r2, r0
 80227f2:	460b      	mov	r3, r1
 80227f4:	4620      	mov	r0, r4
 80227f6:	4629      	mov	r1, r5
 80227f8:	f7e5 fc80 	bl	80080fc <__adddf3>
 80227fc:	a30a      	add	r3, pc, #40	; (adr r3, 8022828 <__ieee754_log10+0x100>)
 80227fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022802:	4604      	mov	r4, r0
 8022804:	460d      	mov	r5, r1
 8022806:	4630      	mov	r0, r6
 8022808:	4639      	mov	r1, r7
 802280a:	f7e5 fe2d 	bl	8008468 <__aeabi_dmul>
 802280e:	4602      	mov	r2, r0
 8022810:	460b      	mov	r3, r1
 8022812:	4620      	mov	r0, r4
 8022814:	4629      	mov	r1, r5
 8022816:	e7bc      	b.n	8022792 <__ieee754_log10+0x6a>
 8022818:	11f12b36 	.word	0x11f12b36
 802281c:	3d59fef3 	.word	0x3d59fef3
 8022820:	1526e50e 	.word	0x1526e50e
 8022824:	3fdbcb7b 	.word	0x3fdbcb7b
 8022828:	509f6000 	.word	0x509f6000
 802282c:	3fd34413 	.word	0x3fd34413
 8022830:	c3500000 	.word	0xc3500000
 8022834:	43500000 	.word	0x43500000
 8022838:	7fefffff 	.word	0x7fefffff
 802283c:	00000000 	.word	0x00000000

08022840 <__ieee754_pow>:
 8022840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022844:	b091      	sub	sp, #68	; 0x44
 8022846:	ed8d 1b00 	vstr	d1, [sp]
 802284a:	e9dd 2900 	ldrd	r2, r9, [sp]
 802284e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8022852:	ea58 0302 	orrs.w	r3, r8, r2
 8022856:	ec57 6b10 	vmov	r6, r7, d0
 802285a:	f000 84be 	beq.w	80231da <__ieee754_pow+0x99a>
 802285e:	4b7a      	ldr	r3, [pc, #488]	; (8022a48 <__ieee754_pow+0x208>)
 8022860:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8022864:	429c      	cmp	r4, r3
 8022866:	463d      	mov	r5, r7
 8022868:	ee10 aa10 	vmov	sl, s0
 802286c:	dc09      	bgt.n	8022882 <__ieee754_pow+0x42>
 802286e:	d103      	bne.n	8022878 <__ieee754_pow+0x38>
 8022870:	b93e      	cbnz	r6, 8022882 <__ieee754_pow+0x42>
 8022872:	45a0      	cmp	r8, r4
 8022874:	dc0d      	bgt.n	8022892 <__ieee754_pow+0x52>
 8022876:	e001      	b.n	802287c <__ieee754_pow+0x3c>
 8022878:	4598      	cmp	r8, r3
 802287a:	dc02      	bgt.n	8022882 <__ieee754_pow+0x42>
 802287c:	4598      	cmp	r8, r3
 802287e:	d10e      	bne.n	802289e <__ieee754_pow+0x5e>
 8022880:	b16a      	cbz	r2, 802289e <__ieee754_pow+0x5e>
 8022882:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022886:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802288a:	ea54 030a 	orrs.w	r3, r4, sl
 802288e:	f000 84a4 	beq.w	80231da <__ieee754_pow+0x99a>
 8022892:	486e      	ldr	r0, [pc, #440]	; (8022a4c <__ieee754_pow+0x20c>)
 8022894:	b011      	add	sp, #68	; 0x44
 8022896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802289a:	f001 bce1 	b.w	8024260 <nan>
 802289e:	2d00      	cmp	r5, #0
 80228a0:	da53      	bge.n	802294a <__ieee754_pow+0x10a>
 80228a2:	4b6b      	ldr	r3, [pc, #428]	; (8022a50 <__ieee754_pow+0x210>)
 80228a4:	4598      	cmp	r8, r3
 80228a6:	dc4d      	bgt.n	8022944 <__ieee754_pow+0x104>
 80228a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80228ac:	4598      	cmp	r8, r3
 80228ae:	dd4c      	ble.n	802294a <__ieee754_pow+0x10a>
 80228b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80228b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80228b8:	2b14      	cmp	r3, #20
 80228ba:	dd26      	ble.n	802290a <__ieee754_pow+0xca>
 80228bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80228c0:	fa22 f103 	lsr.w	r1, r2, r3
 80228c4:	fa01 f303 	lsl.w	r3, r1, r3
 80228c8:	4293      	cmp	r3, r2
 80228ca:	d13e      	bne.n	802294a <__ieee754_pow+0x10a>
 80228cc:	f001 0101 	and.w	r1, r1, #1
 80228d0:	f1c1 0b02 	rsb	fp, r1, #2
 80228d4:	2a00      	cmp	r2, #0
 80228d6:	d15b      	bne.n	8022990 <__ieee754_pow+0x150>
 80228d8:	4b5b      	ldr	r3, [pc, #364]	; (8022a48 <__ieee754_pow+0x208>)
 80228da:	4598      	cmp	r8, r3
 80228dc:	d124      	bne.n	8022928 <__ieee754_pow+0xe8>
 80228de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80228e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80228e6:	ea53 030a 	orrs.w	r3, r3, sl
 80228ea:	f000 8476 	beq.w	80231da <__ieee754_pow+0x99a>
 80228ee:	4b59      	ldr	r3, [pc, #356]	; (8022a54 <__ieee754_pow+0x214>)
 80228f0:	429c      	cmp	r4, r3
 80228f2:	dd2d      	ble.n	8022950 <__ieee754_pow+0x110>
 80228f4:	f1b9 0f00 	cmp.w	r9, #0
 80228f8:	f280 8473 	bge.w	80231e2 <__ieee754_pow+0x9a2>
 80228fc:	2000      	movs	r0, #0
 80228fe:	2100      	movs	r1, #0
 8022900:	ec41 0b10 	vmov	d0, r0, r1
 8022904:	b011      	add	sp, #68	; 0x44
 8022906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802290a:	2a00      	cmp	r2, #0
 802290c:	d13e      	bne.n	802298c <__ieee754_pow+0x14c>
 802290e:	f1c3 0314 	rsb	r3, r3, #20
 8022912:	fa48 f103 	asr.w	r1, r8, r3
 8022916:	fa01 f303 	lsl.w	r3, r1, r3
 802291a:	4543      	cmp	r3, r8
 802291c:	f040 8469 	bne.w	80231f2 <__ieee754_pow+0x9b2>
 8022920:	f001 0101 	and.w	r1, r1, #1
 8022924:	f1c1 0b02 	rsb	fp, r1, #2
 8022928:	4b4b      	ldr	r3, [pc, #300]	; (8022a58 <__ieee754_pow+0x218>)
 802292a:	4598      	cmp	r8, r3
 802292c:	d118      	bne.n	8022960 <__ieee754_pow+0x120>
 802292e:	f1b9 0f00 	cmp.w	r9, #0
 8022932:	f280 845a 	bge.w	80231ea <__ieee754_pow+0x9aa>
 8022936:	4948      	ldr	r1, [pc, #288]	; (8022a58 <__ieee754_pow+0x218>)
 8022938:	4632      	mov	r2, r6
 802293a:	463b      	mov	r3, r7
 802293c:	2000      	movs	r0, #0
 802293e:	f7e5 febd 	bl	80086bc <__aeabi_ddiv>
 8022942:	e7dd      	b.n	8022900 <__ieee754_pow+0xc0>
 8022944:	f04f 0b02 	mov.w	fp, #2
 8022948:	e7c4      	b.n	80228d4 <__ieee754_pow+0x94>
 802294a:	f04f 0b00 	mov.w	fp, #0
 802294e:	e7c1      	b.n	80228d4 <__ieee754_pow+0x94>
 8022950:	f1b9 0f00 	cmp.w	r9, #0
 8022954:	dad2      	bge.n	80228fc <__ieee754_pow+0xbc>
 8022956:	e9dd 0300 	ldrd	r0, r3, [sp]
 802295a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802295e:	e7cf      	b.n	8022900 <__ieee754_pow+0xc0>
 8022960:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8022964:	d106      	bne.n	8022974 <__ieee754_pow+0x134>
 8022966:	4632      	mov	r2, r6
 8022968:	463b      	mov	r3, r7
 802296a:	4610      	mov	r0, r2
 802296c:	4619      	mov	r1, r3
 802296e:	f7e5 fd7b 	bl	8008468 <__aeabi_dmul>
 8022972:	e7c5      	b.n	8022900 <__ieee754_pow+0xc0>
 8022974:	4b39      	ldr	r3, [pc, #228]	; (8022a5c <__ieee754_pow+0x21c>)
 8022976:	4599      	cmp	r9, r3
 8022978:	d10a      	bne.n	8022990 <__ieee754_pow+0x150>
 802297a:	2d00      	cmp	r5, #0
 802297c:	db08      	blt.n	8022990 <__ieee754_pow+0x150>
 802297e:	ec47 6b10 	vmov	d0, r6, r7
 8022982:	b011      	add	sp, #68	; 0x44
 8022984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022988:	f000 be5c 	b.w	8023644 <__ieee754_sqrt>
 802298c:	f04f 0b00 	mov.w	fp, #0
 8022990:	ec47 6b10 	vmov	d0, r6, r7
 8022994:	f001 fbca 	bl	802412c <fabs>
 8022998:	ec51 0b10 	vmov	r0, r1, d0
 802299c:	f1ba 0f00 	cmp.w	sl, #0
 80229a0:	d127      	bne.n	80229f2 <__ieee754_pow+0x1b2>
 80229a2:	b124      	cbz	r4, 80229ae <__ieee754_pow+0x16e>
 80229a4:	4b2c      	ldr	r3, [pc, #176]	; (8022a58 <__ieee754_pow+0x218>)
 80229a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80229aa:	429a      	cmp	r2, r3
 80229ac:	d121      	bne.n	80229f2 <__ieee754_pow+0x1b2>
 80229ae:	f1b9 0f00 	cmp.w	r9, #0
 80229b2:	da05      	bge.n	80229c0 <__ieee754_pow+0x180>
 80229b4:	4602      	mov	r2, r0
 80229b6:	460b      	mov	r3, r1
 80229b8:	2000      	movs	r0, #0
 80229ba:	4927      	ldr	r1, [pc, #156]	; (8022a58 <__ieee754_pow+0x218>)
 80229bc:	f7e5 fe7e 	bl	80086bc <__aeabi_ddiv>
 80229c0:	2d00      	cmp	r5, #0
 80229c2:	da9d      	bge.n	8022900 <__ieee754_pow+0xc0>
 80229c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80229c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80229cc:	ea54 030b 	orrs.w	r3, r4, fp
 80229d0:	d108      	bne.n	80229e4 <__ieee754_pow+0x1a4>
 80229d2:	4602      	mov	r2, r0
 80229d4:	460b      	mov	r3, r1
 80229d6:	4610      	mov	r0, r2
 80229d8:	4619      	mov	r1, r3
 80229da:	f7e5 fb8d 	bl	80080f8 <__aeabi_dsub>
 80229de:	4602      	mov	r2, r0
 80229e0:	460b      	mov	r3, r1
 80229e2:	e7ac      	b.n	802293e <__ieee754_pow+0xfe>
 80229e4:	f1bb 0f01 	cmp.w	fp, #1
 80229e8:	d18a      	bne.n	8022900 <__ieee754_pow+0xc0>
 80229ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80229ee:	4619      	mov	r1, r3
 80229f0:	e786      	b.n	8022900 <__ieee754_pow+0xc0>
 80229f2:	0fed      	lsrs	r5, r5, #31
 80229f4:	1e6b      	subs	r3, r5, #1
 80229f6:	930d      	str	r3, [sp, #52]	; 0x34
 80229f8:	ea5b 0303 	orrs.w	r3, fp, r3
 80229fc:	d102      	bne.n	8022a04 <__ieee754_pow+0x1c4>
 80229fe:	4632      	mov	r2, r6
 8022a00:	463b      	mov	r3, r7
 8022a02:	e7e8      	b.n	80229d6 <__ieee754_pow+0x196>
 8022a04:	4b16      	ldr	r3, [pc, #88]	; (8022a60 <__ieee754_pow+0x220>)
 8022a06:	4598      	cmp	r8, r3
 8022a08:	f340 80fe 	ble.w	8022c08 <__ieee754_pow+0x3c8>
 8022a0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8022a10:	4598      	cmp	r8, r3
 8022a12:	dd0a      	ble.n	8022a2a <__ieee754_pow+0x1ea>
 8022a14:	4b0f      	ldr	r3, [pc, #60]	; (8022a54 <__ieee754_pow+0x214>)
 8022a16:	429c      	cmp	r4, r3
 8022a18:	dc0d      	bgt.n	8022a36 <__ieee754_pow+0x1f6>
 8022a1a:	f1b9 0f00 	cmp.w	r9, #0
 8022a1e:	f6bf af6d 	bge.w	80228fc <__ieee754_pow+0xbc>
 8022a22:	a307      	add	r3, pc, #28	; (adr r3, 8022a40 <__ieee754_pow+0x200>)
 8022a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a28:	e79f      	b.n	802296a <__ieee754_pow+0x12a>
 8022a2a:	4b0e      	ldr	r3, [pc, #56]	; (8022a64 <__ieee754_pow+0x224>)
 8022a2c:	429c      	cmp	r4, r3
 8022a2e:	ddf4      	ble.n	8022a1a <__ieee754_pow+0x1da>
 8022a30:	4b09      	ldr	r3, [pc, #36]	; (8022a58 <__ieee754_pow+0x218>)
 8022a32:	429c      	cmp	r4, r3
 8022a34:	dd18      	ble.n	8022a68 <__ieee754_pow+0x228>
 8022a36:	f1b9 0f00 	cmp.w	r9, #0
 8022a3a:	dcf2      	bgt.n	8022a22 <__ieee754_pow+0x1e2>
 8022a3c:	e75e      	b.n	80228fc <__ieee754_pow+0xbc>
 8022a3e:	bf00      	nop
 8022a40:	8800759c 	.word	0x8800759c
 8022a44:	7e37e43c 	.word	0x7e37e43c
 8022a48:	7ff00000 	.word	0x7ff00000
 8022a4c:	08035d29 	.word	0x08035d29
 8022a50:	433fffff 	.word	0x433fffff
 8022a54:	3fefffff 	.word	0x3fefffff
 8022a58:	3ff00000 	.word	0x3ff00000
 8022a5c:	3fe00000 	.word	0x3fe00000
 8022a60:	41e00000 	.word	0x41e00000
 8022a64:	3feffffe 	.word	0x3feffffe
 8022a68:	2200      	movs	r2, #0
 8022a6a:	4b63      	ldr	r3, [pc, #396]	; (8022bf8 <__ieee754_pow+0x3b8>)
 8022a6c:	f7e5 fb44 	bl	80080f8 <__aeabi_dsub>
 8022a70:	a355      	add	r3, pc, #340	; (adr r3, 8022bc8 <__ieee754_pow+0x388>)
 8022a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a76:	4604      	mov	r4, r0
 8022a78:	460d      	mov	r5, r1
 8022a7a:	f7e5 fcf5 	bl	8008468 <__aeabi_dmul>
 8022a7e:	a354      	add	r3, pc, #336	; (adr r3, 8022bd0 <__ieee754_pow+0x390>)
 8022a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a84:	4606      	mov	r6, r0
 8022a86:	460f      	mov	r7, r1
 8022a88:	4620      	mov	r0, r4
 8022a8a:	4629      	mov	r1, r5
 8022a8c:	f7e5 fcec 	bl	8008468 <__aeabi_dmul>
 8022a90:	2200      	movs	r2, #0
 8022a92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022a96:	4b59      	ldr	r3, [pc, #356]	; (8022bfc <__ieee754_pow+0x3bc>)
 8022a98:	4620      	mov	r0, r4
 8022a9a:	4629      	mov	r1, r5
 8022a9c:	f7e5 fce4 	bl	8008468 <__aeabi_dmul>
 8022aa0:	4602      	mov	r2, r0
 8022aa2:	460b      	mov	r3, r1
 8022aa4:	a14c      	add	r1, pc, #304	; (adr r1, 8022bd8 <__ieee754_pow+0x398>)
 8022aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022aaa:	f7e5 fb25 	bl	80080f8 <__aeabi_dsub>
 8022aae:	4622      	mov	r2, r4
 8022ab0:	462b      	mov	r3, r5
 8022ab2:	f7e5 fcd9 	bl	8008468 <__aeabi_dmul>
 8022ab6:	4602      	mov	r2, r0
 8022ab8:	460b      	mov	r3, r1
 8022aba:	2000      	movs	r0, #0
 8022abc:	4950      	ldr	r1, [pc, #320]	; (8022c00 <__ieee754_pow+0x3c0>)
 8022abe:	f7e5 fb1b 	bl	80080f8 <__aeabi_dsub>
 8022ac2:	4622      	mov	r2, r4
 8022ac4:	462b      	mov	r3, r5
 8022ac6:	4680      	mov	r8, r0
 8022ac8:	4689      	mov	r9, r1
 8022aca:	4620      	mov	r0, r4
 8022acc:	4629      	mov	r1, r5
 8022ace:	f7e5 fccb 	bl	8008468 <__aeabi_dmul>
 8022ad2:	4602      	mov	r2, r0
 8022ad4:	460b      	mov	r3, r1
 8022ad6:	4640      	mov	r0, r8
 8022ad8:	4649      	mov	r1, r9
 8022ada:	f7e5 fcc5 	bl	8008468 <__aeabi_dmul>
 8022ade:	a340      	add	r3, pc, #256	; (adr r3, 8022be0 <__ieee754_pow+0x3a0>)
 8022ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ae4:	f7e5 fcc0 	bl	8008468 <__aeabi_dmul>
 8022ae8:	4602      	mov	r2, r0
 8022aea:	460b      	mov	r3, r1
 8022aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022af0:	f7e5 fb02 	bl	80080f8 <__aeabi_dsub>
 8022af4:	4602      	mov	r2, r0
 8022af6:	460b      	mov	r3, r1
 8022af8:	4604      	mov	r4, r0
 8022afa:	460d      	mov	r5, r1
 8022afc:	4630      	mov	r0, r6
 8022afe:	4639      	mov	r1, r7
 8022b00:	f7e5 fafc 	bl	80080fc <__adddf3>
 8022b04:	2000      	movs	r0, #0
 8022b06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022b0a:	4632      	mov	r2, r6
 8022b0c:	463b      	mov	r3, r7
 8022b0e:	f7e5 faf3 	bl	80080f8 <__aeabi_dsub>
 8022b12:	4602      	mov	r2, r0
 8022b14:	460b      	mov	r3, r1
 8022b16:	4620      	mov	r0, r4
 8022b18:	4629      	mov	r1, r5
 8022b1a:	f7e5 faed 	bl	80080f8 <__aeabi_dsub>
 8022b1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b20:	f10b 33ff 	add.w	r3, fp, #4294967295
 8022b24:	4313      	orrs	r3, r2
 8022b26:	4606      	mov	r6, r0
 8022b28:	460f      	mov	r7, r1
 8022b2a:	f040 81eb 	bne.w	8022f04 <__ieee754_pow+0x6c4>
 8022b2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8022be8 <__ieee754_pow+0x3a8>
 8022b32:	e9dd 4500 	ldrd	r4, r5, [sp]
 8022b36:	2400      	movs	r4, #0
 8022b38:	4622      	mov	r2, r4
 8022b3a:	462b      	mov	r3, r5
 8022b3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022b40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022b44:	f7e5 fad8 	bl	80080f8 <__aeabi_dsub>
 8022b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022b4c:	f7e5 fc8c 	bl	8008468 <__aeabi_dmul>
 8022b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022b54:	4680      	mov	r8, r0
 8022b56:	4689      	mov	r9, r1
 8022b58:	4630      	mov	r0, r6
 8022b5a:	4639      	mov	r1, r7
 8022b5c:	f7e5 fc84 	bl	8008468 <__aeabi_dmul>
 8022b60:	4602      	mov	r2, r0
 8022b62:	460b      	mov	r3, r1
 8022b64:	4640      	mov	r0, r8
 8022b66:	4649      	mov	r1, r9
 8022b68:	f7e5 fac8 	bl	80080fc <__adddf3>
 8022b6c:	4622      	mov	r2, r4
 8022b6e:	462b      	mov	r3, r5
 8022b70:	4680      	mov	r8, r0
 8022b72:	4689      	mov	r9, r1
 8022b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022b78:	f7e5 fc76 	bl	8008468 <__aeabi_dmul>
 8022b7c:	460b      	mov	r3, r1
 8022b7e:	4604      	mov	r4, r0
 8022b80:	460d      	mov	r5, r1
 8022b82:	4602      	mov	r2, r0
 8022b84:	4649      	mov	r1, r9
 8022b86:	4640      	mov	r0, r8
 8022b88:	e9cd 4500 	strd	r4, r5, [sp]
 8022b8c:	f7e5 fab6 	bl	80080fc <__adddf3>
 8022b90:	4b1c      	ldr	r3, [pc, #112]	; (8022c04 <__ieee754_pow+0x3c4>)
 8022b92:	4299      	cmp	r1, r3
 8022b94:	4606      	mov	r6, r0
 8022b96:	460f      	mov	r7, r1
 8022b98:	468b      	mov	fp, r1
 8022b9a:	f340 82f7 	ble.w	802318c <__ieee754_pow+0x94c>
 8022b9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8022ba2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8022ba6:	4303      	orrs	r3, r0
 8022ba8:	f000 81ea 	beq.w	8022f80 <__ieee754_pow+0x740>
 8022bac:	a310      	add	r3, pc, #64	; (adr r3, 8022bf0 <__ieee754_pow+0x3b0>)
 8022bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022bb6:	f7e5 fc57 	bl	8008468 <__aeabi_dmul>
 8022bba:	a30d      	add	r3, pc, #52	; (adr r3, 8022bf0 <__ieee754_pow+0x3b0>)
 8022bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bc0:	e6d5      	b.n	802296e <__ieee754_pow+0x12e>
 8022bc2:	bf00      	nop
 8022bc4:	f3af 8000 	nop.w
 8022bc8:	60000000 	.word	0x60000000
 8022bcc:	3ff71547 	.word	0x3ff71547
 8022bd0:	f85ddf44 	.word	0xf85ddf44
 8022bd4:	3e54ae0b 	.word	0x3e54ae0b
 8022bd8:	55555555 	.word	0x55555555
 8022bdc:	3fd55555 	.word	0x3fd55555
 8022be0:	652b82fe 	.word	0x652b82fe
 8022be4:	3ff71547 	.word	0x3ff71547
 8022be8:	00000000 	.word	0x00000000
 8022bec:	bff00000 	.word	0xbff00000
 8022bf0:	8800759c 	.word	0x8800759c
 8022bf4:	7e37e43c 	.word	0x7e37e43c
 8022bf8:	3ff00000 	.word	0x3ff00000
 8022bfc:	3fd00000 	.word	0x3fd00000
 8022c00:	3fe00000 	.word	0x3fe00000
 8022c04:	408fffff 	.word	0x408fffff
 8022c08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8022c0c:	f04f 0200 	mov.w	r2, #0
 8022c10:	da05      	bge.n	8022c1e <__ieee754_pow+0x3de>
 8022c12:	4bd3      	ldr	r3, [pc, #844]	; (8022f60 <__ieee754_pow+0x720>)
 8022c14:	f7e5 fc28 	bl	8008468 <__aeabi_dmul>
 8022c18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8022c1c:	460c      	mov	r4, r1
 8022c1e:	1523      	asrs	r3, r4, #20
 8022c20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022c24:	4413      	add	r3, r2
 8022c26:	9309      	str	r3, [sp, #36]	; 0x24
 8022c28:	4bce      	ldr	r3, [pc, #824]	; (8022f64 <__ieee754_pow+0x724>)
 8022c2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8022c2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8022c32:	429c      	cmp	r4, r3
 8022c34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022c38:	dd08      	ble.n	8022c4c <__ieee754_pow+0x40c>
 8022c3a:	4bcb      	ldr	r3, [pc, #812]	; (8022f68 <__ieee754_pow+0x728>)
 8022c3c:	429c      	cmp	r4, r3
 8022c3e:	f340 815e 	ble.w	8022efe <__ieee754_pow+0x6be>
 8022c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c44:	3301      	adds	r3, #1
 8022c46:	9309      	str	r3, [sp, #36]	; 0x24
 8022c48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8022c4c:	f04f 0a00 	mov.w	sl, #0
 8022c50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8022c54:	930c      	str	r3, [sp, #48]	; 0x30
 8022c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022c58:	4bc4      	ldr	r3, [pc, #784]	; (8022f6c <__ieee754_pow+0x72c>)
 8022c5a:	4413      	add	r3, r2
 8022c5c:	ed93 7b00 	vldr	d7, [r3]
 8022c60:	4629      	mov	r1, r5
 8022c62:	ec53 2b17 	vmov	r2, r3, d7
 8022c66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022c6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8022c6e:	f7e5 fa43 	bl	80080f8 <__aeabi_dsub>
 8022c72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022c76:	4606      	mov	r6, r0
 8022c78:	460f      	mov	r7, r1
 8022c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022c7e:	f7e5 fa3d 	bl	80080fc <__adddf3>
 8022c82:	4602      	mov	r2, r0
 8022c84:	460b      	mov	r3, r1
 8022c86:	2000      	movs	r0, #0
 8022c88:	49b9      	ldr	r1, [pc, #740]	; (8022f70 <__ieee754_pow+0x730>)
 8022c8a:	f7e5 fd17 	bl	80086bc <__aeabi_ddiv>
 8022c8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8022c92:	4602      	mov	r2, r0
 8022c94:	460b      	mov	r3, r1
 8022c96:	4630      	mov	r0, r6
 8022c98:	4639      	mov	r1, r7
 8022c9a:	f7e5 fbe5 	bl	8008468 <__aeabi_dmul>
 8022c9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022ca2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8022ca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8022caa:	2300      	movs	r3, #0
 8022cac:	9302      	str	r3, [sp, #8]
 8022cae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8022cb2:	106d      	asrs	r5, r5, #1
 8022cb4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8022cb8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8022cbc:	2200      	movs	r2, #0
 8022cbe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8022cc2:	4640      	mov	r0, r8
 8022cc4:	4649      	mov	r1, r9
 8022cc6:	4614      	mov	r4, r2
 8022cc8:	461d      	mov	r5, r3
 8022cca:	f7e5 fbcd 	bl	8008468 <__aeabi_dmul>
 8022cce:	4602      	mov	r2, r0
 8022cd0:	460b      	mov	r3, r1
 8022cd2:	4630      	mov	r0, r6
 8022cd4:	4639      	mov	r1, r7
 8022cd6:	f7e5 fa0f 	bl	80080f8 <__aeabi_dsub>
 8022cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022cde:	4606      	mov	r6, r0
 8022ce0:	460f      	mov	r7, r1
 8022ce2:	4620      	mov	r0, r4
 8022ce4:	4629      	mov	r1, r5
 8022ce6:	f7e5 fa07 	bl	80080f8 <__aeabi_dsub>
 8022cea:	4602      	mov	r2, r0
 8022cec:	460b      	mov	r3, r1
 8022cee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8022cf2:	f7e5 fa01 	bl	80080f8 <__aeabi_dsub>
 8022cf6:	4642      	mov	r2, r8
 8022cf8:	464b      	mov	r3, r9
 8022cfa:	f7e5 fbb5 	bl	8008468 <__aeabi_dmul>
 8022cfe:	4602      	mov	r2, r0
 8022d00:	460b      	mov	r3, r1
 8022d02:	4630      	mov	r0, r6
 8022d04:	4639      	mov	r1, r7
 8022d06:	f7e5 f9f7 	bl	80080f8 <__aeabi_dsub>
 8022d0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8022d0e:	f7e5 fbab 	bl	8008468 <__aeabi_dmul>
 8022d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022d1a:	4610      	mov	r0, r2
 8022d1c:	4619      	mov	r1, r3
 8022d1e:	f7e5 fba3 	bl	8008468 <__aeabi_dmul>
 8022d22:	a37b      	add	r3, pc, #492	; (adr r3, 8022f10 <__ieee754_pow+0x6d0>)
 8022d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d28:	4604      	mov	r4, r0
 8022d2a:	460d      	mov	r5, r1
 8022d2c:	f7e5 fb9c 	bl	8008468 <__aeabi_dmul>
 8022d30:	a379      	add	r3, pc, #484	; (adr r3, 8022f18 <__ieee754_pow+0x6d8>)
 8022d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d36:	f7e5 f9e1 	bl	80080fc <__adddf3>
 8022d3a:	4622      	mov	r2, r4
 8022d3c:	462b      	mov	r3, r5
 8022d3e:	f7e5 fb93 	bl	8008468 <__aeabi_dmul>
 8022d42:	a377      	add	r3, pc, #476	; (adr r3, 8022f20 <__ieee754_pow+0x6e0>)
 8022d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d48:	f7e5 f9d8 	bl	80080fc <__adddf3>
 8022d4c:	4622      	mov	r2, r4
 8022d4e:	462b      	mov	r3, r5
 8022d50:	f7e5 fb8a 	bl	8008468 <__aeabi_dmul>
 8022d54:	a374      	add	r3, pc, #464	; (adr r3, 8022f28 <__ieee754_pow+0x6e8>)
 8022d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d5a:	f7e5 f9cf 	bl	80080fc <__adddf3>
 8022d5e:	4622      	mov	r2, r4
 8022d60:	462b      	mov	r3, r5
 8022d62:	f7e5 fb81 	bl	8008468 <__aeabi_dmul>
 8022d66:	a372      	add	r3, pc, #456	; (adr r3, 8022f30 <__ieee754_pow+0x6f0>)
 8022d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d6c:	f7e5 f9c6 	bl	80080fc <__adddf3>
 8022d70:	4622      	mov	r2, r4
 8022d72:	462b      	mov	r3, r5
 8022d74:	f7e5 fb78 	bl	8008468 <__aeabi_dmul>
 8022d78:	a36f      	add	r3, pc, #444	; (adr r3, 8022f38 <__ieee754_pow+0x6f8>)
 8022d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d7e:	f7e5 f9bd 	bl	80080fc <__adddf3>
 8022d82:	4622      	mov	r2, r4
 8022d84:	4606      	mov	r6, r0
 8022d86:	460f      	mov	r7, r1
 8022d88:	462b      	mov	r3, r5
 8022d8a:	4620      	mov	r0, r4
 8022d8c:	4629      	mov	r1, r5
 8022d8e:	f7e5 fb6b 	bl	8008468 <__aeabi_dmul>
 8022d92:	4602      	mov	r2, r0
 8022d94:	460b      	mov	r3, r1
 8022d96:	4630      	mov	r0, r6
 8022d98:	4639      	mov	r1, r7
 8022d9a:	f7e5 fb65 	bl	8008468 <__aeabi_dmul>
 8022d9e:	4642      	mov	r2, r8
 8022da0:	4604      	mov	r4, r0
 8022da2:	460d      	mov	r5, r1
 8022da4:	464b      	mov	r3, r9
 8022da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022daa:	f7e5 f9a7 	bl	80080fc <__adddf3>
 8022dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022db2:	f7e5 fb59 	bl	8008468 <__aeabi_dmul>
 8022db6:	4622      	mov	r2, r4
 8022db8:	462b      	mov	r3, r5
 8022dba:	f7e5 f99f 	bl	80080fc <__adddf3>
 8022dbe:	4642      	mov	r2, r8
 8022dc0:	4606      	mov	r6, r0
 8022dc2:	460f      	mov	r7, r1
 8022dc4:	464b      	mov	r3, r9
 8022dc6:	4640      	mov	r0, r8
 8022dc8:	4649      	mov	r1, r9
 8022dca:	f7e5 fb4d 	bl	8008468 <__aeabi_dmul>
 8022dce:	2200      	movs	r2, #0
 8022dd0:	4b68      	ldr	r3, [pc, #416]	; (8022f74 <__ieee754_pow+0x734>)
 8022dd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8022dd6:	f7e5 f991 	bl	80080fc <__adddf3>
 8022dda:	4632      	mov	r2, r6
 8022ddc:	463b      	mov	r3, r7
 8022dde:	f7e5 f98d 	bl	80080fc <__adddf3>
 8022de2:	9802      	ldr	r0, [sp, #8]
 8022de4:	460d      	mov	r5, r1
 8022de6:	4604      	mov	r4, r0
 8022de8:	4602      	mov	r2, r0
 8022dea:	460b      	mov	r3, r1
 8022dec:	4640      	mov	r0, r8
 8022dee:	4649      	mov	r1, r9
 8022df0:	f7e5 fb3a 	bl	8008468 <__aeabi_dmul>
 8022df4:	2200      	movs	r2, #0
 8022df6:	4680      	mov	r8, r0
 8022df8:	4689      	mov	r9, r1
 8022dfa:	4b5e      	ldr	r3, [pc, #376]	; (8022f74 <__ieee754_pow+0x734>)
 8022dfc:	4620      	mov	r0, r4
 8022dfe:	4629      	mov	r1, r5
 8022e00:	f7e5 f97a 	bl	80080f8 <__aeabi_dsub>
 8022e04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022e08:	f7e5 f976 	bl	80080f8 <__aeabi_dsub>
 8022e0c:	4602      	mov	r2, r0
 8022e0e:	460b      	mov	r3, r1
 8022e10:	4630      	mov	r0, r6
 8022e12:	4639      	mov	r1, r7
 8022e14:	f7e5 f970 	bl	80080f8 <__aeabi_dsub>
 8022e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022e1c:	f7e5 fb24 	bl	8008468 <__aeabi_dmul>
 8022e20:	4622      	mov	r2, r4
 8022e22:	4606      	mov	r6, r0
 8022e24:	460f      	mov	r7, r1
 8022e26:	462b      	mov	r3, r5
 8022e28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022e2c:	f7e5 fb1c 	bl	8008468 <__aeabi_dmul>
 8022e30:	4602      	mov	r2, r0
 8022e32:	460b      	mov	r3, r1
 8022e34:	4630      	mov	r0, r6
 8022e36:	4639      	mov	r1, r7
 8022e38:	f7e5 f960 	bl	80080fc <__adddf3>
 8022e3c:	4606      	mov	r6, r0
 8022e3e:	460f      	mov	r7, r1
 8022e40:	4602      	mov	r2, r0
 8022e42:	460b      	mov	r3, r1
 8022e44:	4640      	mov	r0, r8
 8022e46:	4649      	mov	r1, r9
 8022e48:	f7e5 f958 	bl	80080fc <__adddf3>
 8022e4c:	9802      	ldr	r0, [sp, #8]
 8022e4e:	a33c      	add	r3, pc, #240	; (adr r3, 8022f40 <__ieee754_pow+0x700>)
 8022e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e54:	4604      	mov	r4, r0
 8022e56:	460d      	mov	r5, r1
 8022e58:	f7e5 fb06 	bl	8008468 <__aeabi_dmul>
 8022e5c:	4642      	mov	r2, r8
 8022e5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022e62:	464b      	mov	r3, r9
 8022e64:	4620      	mov	r0, r4
 8022e66:	4629      	mov	r1, r5
 8022e68:	f7e5 f946 	bl	80080f8 <__aeabi_dsub>
 8022e6c:	4602      	mov	r2, r0
 8022e6e:	460b      	mov	r3, r1
 8022e70:	4630      	mov	r0, r6
 8022e72:	4639      	mov	r1, r7
 8022e74:	f7e5 f940 	bl	80080f8 <__aeabi_dsub>
 8022e78:	a333      	add	r3, pc, #204	; (adr r3, 8022f48 <__ieee754_pow+0x708>)
 8022e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e7e:	f7e5 faf3 	bl	8008468 <__aeabi_dmul>
 8022e82:	a333      	add	r3, pc, #204	; (adr r3, 8022f50 <__ieee754_pow+0x710>)
 8022e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e88:	4606      	mov	r6, r0
 8022e8a:	460f      	mov	r7, r1
 8022e8c:	4620      	mov	r0, r4
 8022e8e:	4629      	mov	r1, r5
 8022e90:	f7e5 faea 	bl	8008468 <__aeabi_dmul>
 8022e94:	4602      	mov	r2, r0
 8022e96:	460b      	mov	r3, r1
 8022e98:	4630      	mov	r0, r6
 8022e9a:	4639      	mov	r1, r7
 8022e9c:	f7e5 f92e 	bl	80080fc <__adddf3>
 8022ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ea2:	4b35      	ldr	r3, [pc, #212]	; (8022f78 <__ieee754_pow+0x738>)
 8022ea4:	4413      	add	r3, r2
 8022ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eaa:	f7e5 f927 	bl	80080fc <__adddf3>
 8022eae:	4604      	mov	r4, r0
 8022eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022eb2:	460d      	mov	r5, r1
 8022eb4:	f7e5 fa6e 	bl	8008394 <__aeabi_i2d>
 8022eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022eba:	4b30      	ldr	r3, [pc, #192]	; (8022f7c <__ieee754_pow+0x73c>)
 8022ebc:	4413      	add	r3, r2
 8022ebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022ec2:	4606      	mov	r6, r0
 8022ec4:	460f      	mov	r7, r1
 8022ec6:	4622      	mov	r2, r4
 8022ec8:	462b      	mov	r3, r5
 8022eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022ece:	f7e5 f915 	bl	80080fc <__adddf3>
 8022ed2:	4642      	mov	r2, r8
 8022ed4:	464b      	mov	r3, r9
 8022ed6:	f7e5 f911 	bl	80080fc <__adddf3>
 8022eda:	4632      	mov	r2, r6
 8022edc:	463b      	mov	r3, r7
 8022ede:	f7e5 f90d 	bl	80080fc <__adddf3>
 8022ee2:	9802      	ldr	r0, [sp, #8]
 8022ee4:	4632      	mov	r2, r6
 8022ee6:	463b      	mov	r3, r7
 8022ee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022eec:	f7e5 f904 	bl	80080f8 <__aeabi_dsub>
 8022ef0:	4642      	mov	r2, r8
 8022ef2:	464b      	mov	r3, r9
 8022ef4:	f7e5 f900 	bl	80080f8 <__aeabi_dsub>
 8022ef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022efc:	e607      	b.n	8022b0e <__ieee754_pow+0x2ce>
 8022efe:	f04f 0a01 	mov.w	sl, #1
 8022f02:	e6a5      	b.n	8022c50 <__ieee754_pow+0x410>
 8022f04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8022f58 <__ieee754_pow+0x718>
 8022f08:	e613      	b.n	8022b32 <__ieee754_pow+0x2f2>
 8022f0a:	bf00      	nop
 8022f0c:	f3af 8000 	nop.w
 8022f10:	4a454eef 	.word	0x4a454eef
 8022f14:	3fca7e28 	.word	0x3fca7e28
 8022f18:	93c9db65 	.word	0x93c9db65
 8022f1c:	3fcd864a 	.word	0x3fcd864a
 8022f20:	a91d4101 	.word	0xa91d4101
 8022f24:	3fd17460 	.word	0x3fd17460
 8022f28:	518f264d 	.word	0x518f264d
 8022f2c:	3fd55555 	.word	0x3fd55555
 8022f30:	db6fabff 	.word	0xdb6fabff
 8022f34:	3fdb6db6 	.word	0x3fdb6db6
 8022f38:	33333303 	.word	0x33333303
 8022f3c:	3fe33333 	.word	0x3fe33333
 8022f40:	e0000000 	.word	0xe0000000
 8022f44:	3feec709 	.word	0x3feec709
 8022f48:	dc3a03fd 	.word	0xdc3a03fd
 8022f4c:	3feec709 	.word	0x3feec709
 8022f50:	145b01f5 	.word	0x145b01f5
 8022f54:	be3e2fe0 	.word	0xbe3e2fe0
 8022f58:	00000000 	.word	0x00000000
 8022f5c:	3ff00000 	.word	0x3ff00000
 8022f60:	43400000 	.word	0x43400000
 8022f64:	0003988e 	.word	0x0003988e
 8022f68:	000bb679 	.word	0x000bb679
 8022f6c:	08035fa0 	.word	0x08035fa0
 8022f70:	3ff00000 	.word	0x3ff00000
 8022f74:	40080000 	.word	0x40080000
 8022f78:	08035fc0 	.word	0x08035fc0
 8022f7c:	08035fb0 	.word	0x08035fb0
 8022f80:	a3b4      	add	r3, pc, #720	; (adr r3, 8023254 <__ieee754_pow+0xa14>)
 8022f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f86:	4640      	mov	r0, r8
 8022f88:	4649      	mov	r1, r9
 8022f8a:	f7e5 f8b7 	bl	80080fc <__adddf3>
 8022f8e:	4622      	mov	r2, r4
 8022f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022f94:	462b      	mov	r3, r5
 8022f96:	4630      	mov	r0, r6
 8022f98:	4639      	mov	r1, r7
 8022f9a:	f7e5 f8ad 	bl	80080f8 <__aeabi_dsub>
 8022f9e:	4602      	mov	r2, r0
 8022fa0:	460b      	mov	r3, r1
 8022fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022fa6:	f7e5 fcef 	bl	8008988 <__aeabi_dcmpgt>
 8022faa:	2800      	cmp	r0, #0
 8022fac:	f47f adfe 	bne.w	8022bac <__ieee754_pow+0x36c>
 8022fb0:	4aa3      	ldr	r2, [pc, #652]	; (8023240 <__ieee754_pow+0xa00>)
 8022fb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8022fb6:	4293      	cmp	r3, r2
 8022fb8:	f340 810a 	ble.w	80231d0 <__ieee754_pow+0x990>
 8022fbc:	151b      	asrs	r3, r3, #20
 8022fbe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8022fc2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8022fc6:	fa4a f303 	asr.w	r3, sl, r3
 8022fca:	445b      	add	r3, fp
 8022fcc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8022fd0:	4e9c      	ldr	r6, [pc, #624]	; (8023244 <__ieee754_pow+0xa04>)
 8022fd2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8022fd6:	4116      	asrs	r6, r2
 8022fd8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8022fdc:	2000      	movs	r0, #0
 8022fde:	ea23 0106 	bic.w	r1, r3, r6
 8022fe2:	f1c2 0214 	rsb	r2, r2, #20
 8022fe6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8022fea:	fa4a fa02 	asr.w	sl, sl, r2
 8022fee:	f1bb 0f00 	cmp.w	fp, #0
 8022ff2:	4602      	mov	r2, r0
 8022ff4:	460b      	mov	r3, r1
 8022ff6:	4620      	mov	r0, r4
 8022ff8:	4629      	mov	r1, r5
 8022ffa:	bfb8      	it	lt
 8022ffc:	f1ca 0a00 	rsblt	sl, sl, #0
 8023000:	f7e5 f87a 	bl	80080f8 <__aeabi_dsub>
 8023004:	e9cd 0100 	strd	r0, r1, [sp]
 8023008:	4642      	mov	r2, r8
 802300a:	464b      	mov	r3, r9
 802300c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023010:	f7e5 f874 	bl	80080fc <__adddf3>
 8023014:	2000      	movs	r0, #0
 8023016:	a378      	add	r3, pc, #480	; (adr r3, 80231f8 <__ieee754_pow+0x9b8>)
 8023018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802301c:	4604      	mov	r4, r0
 802301e:	460d      	mov	r5, r1
 8023020:	f7e5 fa22 	bl	8008468 <__aeabi_dmul>
 8023024:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023028:	4606      	mov	r6, r0
 802302a:	460f      	mov	r7, r1
 802302c:	4620      	mov	r0, r4
 802302e:	4629      	mov	r1, r5
 8023030:	f7e5 f862 	bl	80080f8 <__aeabi_dsub>
 8023034:	4602      	mov	r2, r0
 8023036:	460b      	mov	r3, r1
 8023038:	4640      	mov	r0, r8
 802303a:	4649      	mov	r1, r9
 802303c:	f7e5 f85c 	bl	80080f8 <__aeabi_dsub>
 8023040:	a36f      	add	r3, pc, #444	; (adr r3, 8023200 <__ieee754_pow+0x9c0>)
 8023042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023046:	f7e5 fa0f 	bl	8008468 <__aeabi_dmul>
 802304a:	a36f      	add	r3, pc, #444	; (adr r3, 8023208 <__ieee754_pow+0x9c8>)
 802304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023050:	4680      	mov	r8, r0
 8023052:	4689      	mov	r9, r1
 8023054:	4620      	mov	r0, r4
 8023056:	4629      	mov	r1, r5
 8023058:	f7e5 fa06 	bl	8008468 <__aeabi_dmul>
 802305c:	4602      	mov	r2, r0
 802305e:	460b      	mov	r3, r1
 8023060:	4640      	mov	r0, r8
 8023062:	4649      	mov	r1, r9
 8023064:	f7e5 f84a 	bl	80080fc <__adddf3>
 8023068:	4604      	mov	r4, r0
 802306a:	460d      	mov	r5, r1
 802306c:	4602      	mov	r2, r0
 802306e:	460b      	mov	r3, r1
 8023070:	4630      	mov	r0, r6
 8023072:	4639      	mov	r1, r7
 8023074:	f7e5 f842 	bl	80080fc <__adddf3>
 8023078:	4632      	mov	r2, r6
 802307a:	463b      	mov	r3, r7
 802307c:	4680      	mov	r8, r0
 802307e:	4689      	mov	r9, r1
 8023080:	f7e5 f83a 	bl	80080f8 <__aeabi_dsub>
 8023084:	4602      	mov	r2, r0
 8023086:	460b      	mov	r3, r1
 8023088:	4620      	mov	r0, r4
 802308a:	4629      	mov	r1, r5
 802308c:	f7e5 f834 	bl	80080f8 <__aeabi_dsub>
 8023090:	4642      	mov	r2, r8
 8023092:	4606      	mov	r6, r0
 8023094:	460f      	mov	r7, r1
 8023096:	464b      	mov	r3, r9
 8023098:	4640      	mov	r0, r8
 802309a:	4649      	mov	r1, r9
 802309c:	f7e5 f9e4 	bl	8008468 <__aeabi_dmul>
 80230a0:	a35b      	add	r3, pc, #364	; (adr r3, 8023210 <__ieee754_pow+0x9d0>)
 80230a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230a6:	4604      	mov	r4, r0
 80230a8:	460d      	mov	r5, r1
 80230aa:	f7e5 f9dd 	bl	8008468 <__aeabi_dmul>
 80230ae:	a35a      	add	r3, pc, #360	; (adr r3, 8023218 <__ieee754_pow+0x9d8>)
 80230b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230b4:	f7e5 f820 	bl	80080f8 <__aeabi_dsub>
 80230b8:	4622      	mov	r2, r4
 80230ba:	462b      	mov	r3, r5
 80230bc:	f7e5 f9d4 	bl	8008468 <__aeabi_dmul>
 80230c0:	a357      	add	r3, pc, #348	; (adr r3, 8023220 <__ieee754_pow+0x9e0>)
 80230c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230c6:	f7e5 f819 	bl	80080fc <__adddf3>
 80230ca:	4622      	mov	r2, r4
 80230cc:	462b      	mov	r3, r5
 80230ce:	f7e5 f9cb 	bl	8008468 <__aeabi_dmul>
 80230d2:	a355      	add	r3, pc, #340	; (adr r3, 8023228 <__ieee754_pow+0x9e8>)
 80230d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230d8:	f7e5 f80e 	bl	80080f8 <__aeabi_dsub>
 80230dc:	4622      	mov	r2, r4
 80230de:	462b      	mov	r3, r5
 80230e0:	f7e5 f9c2 	bl	8008468 <__aeabi_dmul>
 80230e4:	a352      	add	r3, pc, #328	; (adr r3, 8023230 <__ieee754_pow+0x9f0>)
 80230e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230ea:	f7e5 f807 	bl	80080fc <__adddf3>
 80230ee:	4622      	mov	r2, r4
 80230f0:	462b      	mov	r3, r5
 80230f2:	f7e5 f9b9 	bl	8008468 <__aeabi_dmul>
 80230f6:	4602      	mov	r2, r0
 80230f8:	460b      	mov	r3, r1
 80230fa:	4640      	mov	r0, r8
 80230fc:	4649      	mov	r1, r9
 80230fe:	f7e4 fffb 	bl	80080f8 <__aeabi_dsub>
 8023102:	4604      	mov	r4, r0
 8023104:	460d      	mov	r5, r1
 8023106:	4602      	mov	r2, r0
 8023108:	460b      	mov	r3, r1
 802310a:	4640      	mov	r0, r8
 802310c:	4649      	mov	r1, r9
 802310e:	f7e5 f9ab 	bl	8008468 <__aeabi_dmul>
 8023112:	2200      	movs	r2, #0
 8023114:	e9cd 0100 	strd	r0, r1, [sp]
 8023118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802311c:	4620      	mov	r0, r4
 802311e:	4629      	mov	r1, r5
 8023120:	f7e4 ffea 	bl	80080f8 <__aeabi_dsub>
 8023124:	4602      	mov	r2, r0
 8023126:	460b      	mov	r3, r1
 8023128:	e9dd 0100 	ldrd	r0, r1, [sp]
 802312c:	f7e5 fac6 	bl	80086bc <__aeabi_ddiv>
 8023130:	4632      	mov	r2, r6
 8023132:	4604      	mov	r4, r0
 8023134:	460d      	mov	r5, r1
 8023136:	463b      	mov	r3, r7
 8023138:	4640      	mov	r0, r8
 802313a:	4649      	mov	r1, r9
 802313c:	f7e5 f994 	bl	8008468 <__aeabi_dmul>
 8023140:	4632      	mov	r2, r6
 8023142:	463b      	mov	r3, r7
 8023144:	f7e4 ffda 	bl	80080fc <__adddf3>
 8023148:	4602      	mov	r2, r0
 802314a:	460b      	mov	r3, r1
 802314c:	4620      	mov	r0, r4
 802314e:	4629      	mov	r1, r5
 8023150:	f7e4 ffd2 	bl	80080f8 <__aeabi_dsub>
 8023154:	4642      	mov	r2, r8
 8023156:	464b      	mov	r3, r9
 8023158:	f7e4 ffce 	bl	80080f8 <__aeabi_dsub>
 802315c:	4602      	mov	r2, r0
 802315e:	460b      	mov	r3, r1
 8023160:	2000      	movs	r0, #0
 8023162:	4939      	ldr	r1, [pc, #228]	; (8023248 <__ieee754_pow+0xa08>)
 8023164:	f7e4 ffc8 	bl	80080f8 <__aeabi_dsub>
 8023168:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 802316c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8023170:	4602      	mov	r2, r0
 8023172:	460b      	mov	r3, r1
 8023174:	da2f      	bge.n	80231d6 <__ieee754_pow+0x996>
 8023176:	4650      	mov	r0, sl
 8023178:	ec43 2b10 	vmov	d0, r2, r3
 802317c:	f001 f8fc 	bl	8024378 <scalbn>
 8023180:	ec51 0b10 	vmov	r0, r1, d0
 8023184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023188:	f7ff bbf1 	b.w	802296e <__ieee754_pow+0x12e>
 802318c:	4b2f      	ldr	r3, [pc, #188]	; (802324c <__ieee754_pow+0xa0c>)
 802318e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023192:	429e      	cmp	r6, r3
 8023194:	f77f af0c 	ble.w	8022fb0 <__ieee754_pow+0x770>
 8023198:	4b2d      	ldr	r3, [pc, #180]	; (8023250 <__ieee754_pow+0xa10>)
 802319a:	440b      	add	r3, r1
 802319c:	4303      	orrs	r3, r0
 802319e:	d00b      	beq.n	80231b8 <__ieee754_pow+0x978>
 80231a0:	a325      	add	r3, pc, #148	; (adr r3, 8023238 <__ieee754_pow+0x9f8>)
 80231a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80231aa:	f7e5 f95d 	bl	8008468 <__aeabi_dmul>
 80231ae:	a322      	add	r3, pc, #136	; (adr r3, 8023238 <__ieee754_pow+0x9f8>)
 80231b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231b4:	f7ff bbdb 	b.w	802296e <__ieee754_pow+0x12e>
 80231b8:	4622      	mov	r2, r4
 80231ba:	462b      	mov	r3, r5
 80231bc:	f7e4 ff9c 	bl	80080f8 <__aeabi_dsub>
 80231c0:	4642      	mov	r2, r8
 80231c2:	464b      	mov	r3, r9
 80231c4:	f7e5 fbd6 	bl	8008974 <__aeabi_dcmpge>
 80231c8:	2800      	cmp	r0, #0
 80231ca:	f43f aef1 	beq.w	8022fb0 <__ieee754_pow+0x770>
 80231ce:	e7e7      	b.n	80231a0 <__ieee754_pow+0x960>
 80231d0:	f04f 0a00 	mov.w	sl, #0
 80231d4:	e718      	b.n	8023008 <__ieee754_pow+0x7c8>
 80231d6:	4621      	mov	r1, r4
 80231d8:	e7d4      	b.n	8023184 <__ieee754_pow+0x944>
 80231da:	2000      	movs	r0, #0
 80231dc:	491a      	ldr	r1, [pc, #104]	; (8023248 <__ieee754_pow+0xa08>)
 80231de:	f7ff bb8f 	b.w	8022900 <__ieee754_pow+0xc0>
 80231e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80231e6:	f7ff bb8b 	b.w	8022900 <__ieee754_pow+0xc0>
 80231ea:	4630      	mov	r0, r6
 80231ec:	4639      	mov	r1, r7
 80231ee:	f7ff bb87 	b.w	8022900 <__ieee754_pow+0xc0>
 80231f2:	4693      	mov	fp, r2
 80231f4:	f7ff bb98 	b.w	8022928 <__ieee754_pow+0xe8>
 80231f8:	00000000 	.word	0x00000000
 80231fc:	3fe62e43 	.word	0x3fe62e43
 8023200:	fefa39ef 	.word	0xfefa39ef
 8023204:	3fe62e42 	.word	0x3fe62e42
 8023208:	0ca86c39 	.word	0x0ca86c39
 802320c:	be205c61 	.word	0xbe205c61
 8023210:	72bea4d0 	.word	0x72bea4d0
 8023214:	3e663769 	.word	0x3e663769
 8023218:	c5d26bf1 	.word	0xc5d26bf1
 802321c:	3ebbbd41 	.word	0x3ebbbd41
 8023220:	af25de2c 	.word	0xaf25de2c
 8023224:	3f11566a 	.word	0x3f11566a
 8023228:	16bebd93 	.word	0x16bebd93
 802322c:	3f66c16c 	.word	0x3f66c16c
 8023230:	5555553e 	.word	0x5555553e
 8023234:	3fc55555 	.word	0x3fc55555
 8023238:	c2f8f359 	.word	0xc2f8f359
 802323c:	01a56e1f 	.word	0x01a56e1f
 8023240:	3fe00000 	.word	0x3fe00000
 8023244:	000fffff 	.word	0x000fffff
 8023248:	3ff00000 	.word	0x3ff00000
 802324c:	4090cbff 	.word	0x4090cbff
 8023250:	3f6f3400 	.word	0x3f6f3400
 8023254:	652b82fe 	.word	0x652b82fe
 8023258:	3c971547 	.word	0x3c971547
 802325c:	00000000 	.word	0x00000000

08023260 <__ieee754_rem_pio2>:
 8023260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023264:	ec57 6b10 	vmov	r6, r7, d0
 8023268:	4bc3      	ldr	r3, [pc, #780]	; (8023578 <__ieee754_rem_pio2+0x318>)
 802326a:	b08d      	sub	sp, #52	; 0x34
 802326c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8023270:	4598      	cmp	r8, r3
 8023272:	4604      	mov	r4, r0
 8023274:	9704      	str	r7, [sp, #16]
 8023276:	dc07      	bgt.n	8023288 <__ieee754_rem_pio2+0x28>
 8023278:	2200      	movs	r2, #0
 802327a:	2300      	movs	r3, #0
 802327c:	ed84 0b00 	vstr	d0, [r4]
 8023280:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023284:	2500      	movs	r5, #0
 8023286:	e027      	b.n	80232d8 <__ieee754_rem_pio2+0x78>
 8023288:	4bbc      	ldr	r3, [pc, #752]	; (802357c <__ieee754_rem_pio2+0x31c>)
 802328a:	4598      	cmp	r8, r3
 802328c:	dc75      	bgt.n	802337a <__ieee754_rem_pio2+0x11a>
 802328e:	9b04      	ldr	r3, [sp, #16]
 8023290:	4dbb      	ldr	r5, [pc, #748]	; (8023580 <__ieee754_rem_pio2+0x320>)
 8023292:	2b00      	cmp	r3, #0
 8023294:	ee10 0a10 	vmov	r0, s0
 8023298:	a3a9      	add	r3, pc, #676	; (adr r3, 8023540 <__ieee754_rem_pio2+0x2e0>)
 802329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802329e:	4639      	mov	r1, r7
 80232a0:	dd36      	ble.n	8023310 <__ieee754_rem_pio2+0xb0>
 80232a2:	f7e4 ff29 	bl	80080f8 <__aeabi_dsub>
 80232a6:	45a8      	cmp	r8, r5
 80232a8:	4606      	mov	r6, r0
 80232aa:	460f      	mov	r7, r1
 80232ac:	d018      	beq.n	80232e0 <__ieee754_rem_pio2+0x80>
 80232ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8023548 <__ieee754_rem_pio2+0x2e8>)
 80232b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232b4:	f7e4 ff20 	bl	80080f8 <__aeabi_dsub>
 80232b8:	4602      	mov	r2, r0
 80232ba:	460b      	mov	r3, r1
 80232bc:	e9c4 2300 	strd	r2, r3, [r4]
 80232c0:	4630      	mov	r0, r6
 80232c2:	4639      	mov	r1, r7
 80232c4:	f7e4 ff18 	bl	80080f8 <__aeabi_dsub>
 80232c8:	a39f      	add	r3, pc, #636	; (adr r3, 8023548 <__ieee754_rem_pio2+0x2e8>)
 80232ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232ce:	f7e4 ff13 	bl	80080f8 <__aeabi_dsub>
 80232d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80232d6:	2501      	movs	r5, #1
 80232d8:	4628      	mov	r0, r5
 80232da:	b00d      	add	sp, #52	; 0x34
 80232dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232e0:	a39b      	add	r3, pc, #620	; (adr r3, 8023550 <__ieee754_rem_pio2+0x2f0>)
 80232e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232e6:	f7e4 ff07 	bl	80080f8 <__aeabi_dsub>
 80232ea:	a39b      	add	r3, pc, #620	; (adr r3, 8023558 <__ieee754_rem_pio2+0x2f8>)
 80232ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232f0:	4606      	mov	r6, r0
 80232f2:	460f      	mov	r7, r1
 80232f4:	f7e4 ff00 	bl	80080f8 <__aeabi_dsub>
 80232f8:	4602      	mov	r2, r0
 80232fa:	460b      	mov	r3, r1
 80232fc:	e9c4 2300 	strd	r2, r3, [r4]
 8023300:	4630      	mov	r0, r6
 8023302:	4639      	mov	r1, r7
 8023304:	f7e4 fef8 	bl	80080f8 <__aeabi_dsub>
 8023308:	a393      	add	r3, pc, #588	; (adr r3, 8023558 <__ieee754_rem_pio2+0x2f8>)
 802330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802330e:	e7de      	b.n	80232ce <__ieee754_rem_pio2+0x6e>
 8023310:	f7e4 fef4 	bl	80080fc <__adddf3>
 8023314:	45a8      	cmp	r8, r5
 8023316:	4606      	mov	r6, r0
 8023318:	460f      	mov	r7, r1
 802331a:	d016      	beq.n	802334a <__ieee754_rem_pio2+0xea>
 802331c:	a38a      	add	r3, pc, #552	; (adr r3, 8023548 <__ieee754_rem_pio2+0x2e8>)
 802331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023322:	f7e4 feeb 	bl	80080fc <__adddf3>
 8023326:	4602      	mov	r2, r0
 8023328:	460b      	mov	r3, r1
 802332a:	e9c4 2300 	strd	r2, r3, [r4]
 802332e:	4630      	mov	r0, r6
 8023330:	4639      	mov	r1, r7
 8023332:	f7e4 fee1 	bl	80080f8 <__aeabi_dsub>
 8023336:	a384      	add	r3, pc, #528	; (adr r3, 8023548 <__ieee754_rem_pio2+0x2e8>)
 8023338:	e9d3 2300 	ldrd	r2, r3, [r3]
 802333c:	f7e4 fede 	bl	80080fc <__adddf3>
 8023340:	f04f 35ff 	mov.w	r5, #4294967295
 8023344:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023348:	e7c6      	b.n	80232d8 <__ieee754_rem_pio2+0x78>
 802334a:	a381      	add	r3, pc, #516	; (adr r3, 8023550 <__ieee754_rem_pio2+0x2f0>)
 802334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023350:	f7e4 fed4 	bl	80080fc <__adddf3>
 8023354:	a380      	add	r3, pc, #512	; (adr r3, 8023558 <__ieee754_rem_pio2+0x2f8>)
 8023356:	e9d3 2300 	ldrd	r2, r3, [r3]
 802335a:	4606      	mov	r6, r0
 802335c:	460f      	mov	r7, r1
 802335e:	f7e4 fecd 	bl	80080fc <__adddf3>
 8023362:	4602      	mov	r2, r0
 8023364:	460b      	mov	r3, r1
 8023366:	e9c4 2300 	strd	r2, r3, [r4]
 802336a:	4630      	mov	r0, r6
 802336c:	4639      	mov	r1, r7
 802336e:	f7e4 fec3 	bl	80080f8 <__aeabi_dsub>
 8023372:	a379      	add	r3, pc, #484	; (adr r3, 8023558 <__ieee754_rem_pio2+0x2f8>)
 8023374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023378:	e7e0      	b.n	802333c <__ieee754_rem_pio2+0xdc>
 802337a:	4b82      	ldr	r3, [pc, #520]	; (8023584 <__ieee754_rem_pio2+0x324>)
 802337c:	4598      	cmp	r8, r3
 802337e:	f300 80d0 	bgt.w	8023522 <__ieee754_rem_pio2+0x2c2>
 8023382:	f000 fed3 	bl	802412c <fabs>
 8023386:	ec57 6b10 	vmov	r6, r7, d0
 802338a:	ee10 0a10 	vmov	r0, s0
 802338e:	a374      	add	r3, pc, #464	; (adr r3, 8023560 <__ieee754_rem_pio2+0x300>)
 8023390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023394:	4639      	mov	r1, r7
 8023396:	f7e5 f867 	bl	8008468 <__aeabi_dmul>
 802339a:	2200      	movs	r2, #0
 802339c:	4b7a      	ldr	r3, [pc, #488]	; (8023588 <__ieee754_rem_pio2+0x328>)
 802339e:	f7e4 fead 	bl	80080fc <__adddf3>
 80233a2:	f7e5 fb11 	bl	80089c8 <__aeabi_d2iz>
 80233a6:	4605      	mov	r5, r0
 80233a8:	f7e4 fff4 	bl	8008394 <__aeabi_i2d>
 80233ac:	a364      	add	r3, pc, #400	; (adr r3, 8023540 <__ieee754_rem_pio2+0x2e0>)
 80233ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80233b6:	f7e5 f857 	bl	8008468 <__aeabi_dmul>
 80233ba:	4602      	mov	r2, r0
 80233bc:	460b      	mov	r3, r1
 80233be:	4630      	mov	r0, r6
 80233c0:	4639      	mov	r1, r7
 80233c2:	f7e4 fe99 	bl	80080f8 <__aeabi_dsub>
 80233c6:	a360      	add	r3, pc, #384	; (adr r3, 8023548 <__ieee754_rem_pio2+0x2e8>)
 80233c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233cc:	4682      	mov	sl, r0
 80233ce:	468b      	mov	fp, r1
 80233d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80233d4:	f7e5 f848 	bl	8008468 <__aeabi_dmul>
 80233d8:	2d1f      	cmp	r5, #31
 80233da:	4606      	mov	r6, r0
 80233dc:	460f      	mov	r7, r1
 80233de:	dc0c      	bgt.n	80233fa <__ieee754_rem_pio2+0x19a>
 80233e0:	1e6a      	subs	r2, r5, #1
 80233e2:	4b6a      	ldr	r3, [pc, #424]	; (802358c <__ieee754_rem_pio2+0x32c>)
 80233e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80233e8:	4543      	cmp	r3, r8
 80233ea:	d006      	beq.n	80233fa <__ieee754_rem_pio2+0x19a>
 80233ec:	4632      	mov	r2, r6
 80233ee:	463b      	mov	r3, r7
 80233f0:	4650      	mov	r0, sl
 80233f2:	4659      	mov	r1, fp
 80233f4:	f7e4 fe80 	bl	80080f8 <__aeabi_dsub>
 80233f8:	e00e      	b.n	8023418 <__ieee754_rem_pio2+0x1b8>
 80233fa:	4632      	mov	r2, r6
 80233fc:	463b      	mov	r3, r7
 80233fe:	4650      	mov	r0, sl
 8023400:	4659      	mov	r1, fp
 8023402:	f7e4 fe79 	bl	80080f8 <__aeabi_dsub>
 8023406:	ea4f 5328 	mov.w	r3, r8, asr #20
 802340a:	9305      	str	r3, [sp, #20]
 802340c:	9a05      	ldr	r2, [sp, #20]
 802340e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023412:	1ad3      	subs	r3, r2, r3
 8023414:	2b10      	cmp	r3, #16
 8023416:	dc02      	bgt.n	802341e <__ieee754_rem_pio2+0x1be>
 8023418:	e9c4 0100 	strd	r0, r1, [r4]
 802341c:	e039      	b.n	8023492 <__ieee754_rem_pio2+0x232>
 802341e:	a34c      	add	r3, pc, #304	; (adr r3, 8023550 <__ieee754_rem_pio2+0x2f0>)
 8023420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023428:	f7e5 f81e 	bl	8008468 <__aeabi_dmul>
 802342c:	4606      	mov	r6, r0
 802342e:	460f      	mov	r7, r1
 8023430:	4602      	mov	r2, r0
 8023432:	460b      	mov	r3, r1
 8023434:	4650      	mov	r0, sl
 8023436:	4659      	mov	r1, fp
 8023438:	f7e4 fe5e 	bl	80080f8 <__aeabi_dsub>
 802343c:	4602      	mov	r2, r0
 802343e:	460b      	mov	r3, r1
 8023440:	4680      	mov	r8, r0
 8023442:	4689      	mov	r9, r1
 8023444:	4650      	mov	r0, sl
 8023446:	4659      	mov	r1, fp
 8023448:	f7e4 fe56 	bl	80080f8 <__aeabi_dsub>
 802344c:	4632      	mov	r2, r6
 802344e:	463b      	mov	r3, r7
 8023450:	f7e4 fe52 	bl	80080f8 <__aeabi_dsub>
 8023454:	a340      	add	r3, pc, #256	; (adr r3, 8023558 <__ieee754_rem_pio2+0x2f8>)
 8023456:	e9d3 2300 	ldrd	r2, r3, [r3]
 802345a:	4606      	mov	r6, r0
 802345c:	460f      	mov	r7, r1
 802345e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023462:	f7e5 f801 	bl	8008468 <__aeabi_dmul>
 8023466:	4632      	mov	r2, r6
 8023468:	463b      	mov	r3, r7
 802346a:	f7e4 fe45 	bl	80080f8 <__aeabi_dsub>
 802346e:	4602      	mov	r2, r0
 8023470:	460b      	mov	r3, r1
 8023472:	4606      	mov	r6, r0
 8023474:	460f      	mov	r7, r1
 8023476:	4640      	mov	r0, r8
 8023478:	4649      	mov	r1, r9
 802347a:	f7e4 fe3d 	bl	80080f8 <__aeabi_dsub>
 802347e:	9a05      	ldr	r2, [sp, #20]
 8023480:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023484:	1ad3      	subs	r3, r2, r3
 8023486:	2b31      	cmp	r3, #49	; 0x31
 8023488:	dc20      	bgt.n	80234cc <__ieee754_rem_pio2+0x26c>
 802348a:	e9c4 0100 	strd	r0, r1, [r4]
 802348e:	46c2      	mov	sl, r8
 8023490:	46cb      	mov	fp, r9
 8023492:	e9d4 8900 	ldrd	r8, r9, [r4]
 8023496:	4650      	mov	r0, sl
 8023498:	4642      	mov	r2, r8
 802349a:	464b      	mov	r3, r9
 802349c:	4659      	mov	r1, fp
 802349e:	f7e4 fe2b 	bl	80080f8 <__aeabi_dsub>
 80234a2:	463b      	mov	r3, r7
 80234a4:	4632      	mov	r2, r6
 80234a6:	f7e4 fe27 	bl	80080f8 <__aeabi_dsub>
 80234aa:	9b04      	ldr	r3, [sp, #16]
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80234b2:	f6bf af11 	bge.w	80232d8 <__ieee754_rem_pio2+0x78>
 80234b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80234ba:	6063      	str	r3, [r4, #4]
 80234bc:	f8c4 8000 	str.w	r8, [r4]
 80234c0:	60a0      	str	r0, [r4, #8]
 80234c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80234c6:	60e3      	str	r3, [r4, #12]
 80234c8:	426d      	negs	r5, r5
 80234ca:	e705      	b.n	80232d8 <__ieee754_rem_pio2+0x78>
 80234cc:	a326      	add	r3, pc, #152	; (adr r3, 8023568 <__ieee754_rem_pio2+0x308>)
 80234ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80234d6:	f7e4 ffc7 	bl	8008468 <__aeabi_dmul>
 80234da:	4606      	mov	r6, r0
 80234dc:	460f      	mov	r7, r1
 80234de:	4602      	mov	r2, r0
 80234e0:	460b      	mov	r3, r1
 80234e2:	4640      	mov	r0, r8
 80234e4:	4649      	mov	r1, r9
 80234e6:	f7e4 fe07 	bl	80080f8 <__aeabi_dsub>
 80234ea:	4602      	mov	r2, r0
 80234ec:	460b      	mov	r3, r1
 80234ee:	4682      	mov	sl, r0
 80234f0:	468b      	mov	fp, r1
 80234f2:	4640      	mov	r0, r8
 80234f4:	4649      	mov	r1, r9
 80234f6:	f7e4 fdff 	bl	80080f8 <__aeabi_dsub>
 80234fa:	4632      	mov	r2, r6
 80234fc:	463b      	mov	r3, r7
 80234fe:	f7e4 fdfb 	bl	80080f8 <__aeabi_dsub>
 8023502:	a31b      	add	r3, pc, #108	; (adr r3, 8023570 <__ieee754_rem_pio2+0x310>)
 8023504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023508:	4606      	mov	r6, r0
 802350a:	460f      	mov	r7, r1
 802350c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023510:	f7e4 ffaa 	bl	8008468 <__aeabi_dmul>
 8023514:	4632      	mov	r2, r6
 8023516:	463b      	mov	r3, r7
 8023518:	f7e4 fdee 	bl	80080f8 <__aeabi_dsub>
 802351c:	4606      	mov	r6, r0
 802351e:	460f      	mov	r7, r1
 8023520:	e764      	b.n	80233ec <__ieee754_rem_pio2+0x18c>
 8023522:	4b1b      	ldr	r3, [pc, #108]	; (8023590 <__ieee754_rem_pio2+0x330>)
 8023524:	4598      	cmp	r8, r3
 8023526:	dd35      	ble.n	8023594 <__ieee754_rem_pio2+0x334>
 8023528:	ee10 2a10 	vmov	r2, s0
 802352c:	463b      	mov	r3, r7
 802352e:	4630      	mov	r0, r6
 8023530:	4639      	mov	r1, r7
 8023532:	f7e4 fde1 	bl	80080f8 <__aeabi_dsub>
 8023536:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802353a:	e9c4 0100 	strd	r0, r1, [r4]
 802353e:	e6a1      	b.n	8023284 <__ieee754_rem_pio2+0x24>
 8023540:	54400000 	.word	0x54400000
 8023544:	3ff921fb 	.word	0x3ff921fb
 8023548:	1a626331 	.word	0x1a626331
 802354c:	3dd0b461 	.word	0x3dd0b461
 8023550:	1a600000 	.word	0x1a600000
 8023554:	3dd0b461 	.word	0x3dd0b461
 8023558:	2e037073 	.word	0x2e037073
 802355c:	3ba3198a 	.word	0x3ba3198a
 8023560:	6dc9c883 	.word	0x6dc9c883
 8023564:	3fe45f30 	.word	0x3fe45f30
 8023568:	2e000000 	.word	0x2e000000
 802356c:	3ba3198a 	.word	0x3ba3198a
 8023570:	252049c1 	.word	0x252049c1
 8023574:	397b839a 	.word	0x397b839a
 8023578:	3fe921fb 	.word	0x3fe921fb
 802357c:	4002d97b 	.word	0x4002d97b
 8023580:	3ff921fb 	.word	0x3ff921fb
 8023584:	413921fb 	.word	0x413921fb
 8023588:	3fe00000 	.word	0x3fe00000
 802358c:	08035fd0 	.word	0x08035fd0
 8023590:	7fefffff 	.word	0x7fefffff
 8023594:	ea4f 5528 	mov.w	r5, r8, asr #20
 8023598:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 802359c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80235a0:	4630      	mov	r0, r6
 80235a2:	460f      	mov	r7, r1
 80235a4:	f7e5 fa10 	bl	80089c8 <__aeabi_d2iz>
 80235a8:	f7e4 fef4 	bl	8008394 <__aeabi_i2d>
 80235ac:	4602      	mov	r2, r0
 80235ae:	460b      	mov	r3, r1
 80235b0:	4630      	mov	r0, r6
 80235b2:	4639      	mov	r1, r7
 80235b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80235b8:	f7e4 fd9e 	bl	80080f8 <__aeabi_dsub>
 80235bc:	2200      	movs	r2, #0
 80235be:	4b1f      	ldr	r3, [pc, #124]	; (802363c <__ieee754_rem_pio2+0x3dc>)
 80235c0:	f7e4 ff52 	bl	8008468 <__aeabi_dmul>
 80235c4:	460f      	mov	r7, r1
 80235c6:	4606      	mov	r6, r0
 80235c8:	f7e5 f9fe 	bl	80089c8 <__aeabi_d2iz>
 80235cc:	f7e4 fee2 	bl	8008394 <__aeabi_i2d>
 80235d0:	4602      	mov	r2, r0
 80235d2:	460b      	mov	r3, r1
 80235d4:	4630      	mov	r0, r6
 80235d6:	4639      	mov	r1, r7
 80235d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80235dc:	f7e4 fd8c 	bl	80080f8 <__aeabi_dsub>
 80235e0:	2200      	movs	r2, #0
 80235e2:	4b16      	ldr	r3, [pc, #88]	; (802363c <__ieee754_rem_pio2+0x3dc>)
 80235e4:	f7e4 ff40 	bl	8008468 <__aeabi_dmul>
 80235e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80235ec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80235f0:	f04f 0803 	mov.w	r8, #3
 80235f4:	2600      	movs	r6, #0
 80235f6:	2700      	movs	r7, #0
 80235f8:	4632      	mov	r2, r6
 80235fa:	463b      	mov	r3, r7
 80235fc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8023600:	f108 3aff 	add.w	sl, r8, #4294967295
 8023604:	f7e5 f998 	bl	8008938 <__aeabi_dcmpeq>
 8023608:	b9b0      	cbnz	r0, 8023638 <__ieee754_rem_pio2+0x3d8>
 802360a:	4b0d      	ldr	r3, [pc, #52]	; (8023640 <__ieee754_rem_pio2+0x3e0>)
 802360c:	9301      	str	r3, [sp, #4]
 802360e:	2302      	movs	r3, #2
 8023610:	9300      	str	r3, [sp, #0]
 8023612:	462a      	mov	r2, r5
 8023614:	4643      	mov	r3, r8
 8023616:	4621      	mov	r1, r4
 8023618:	a806      	add	r0, sp, #24
 802361a:	f000 f98d 	bl	8023938 <__kernel_rem_pio2>
 802361e:	9b04      	ldr	r3, [sp, #16]
 8023620:	2b00      	cmp	r3, #0
 8023622:	4605      	mov	r5, r0
 8023624:	f6bf ae58 	bge.w	80232d8 <__ieee754_rem_pio2+0x78>
 8023628:	6863      	ldr	r3, [r4, #4]
 802362a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802362e:	6063      	str	r3, [r4, #4]
 8023630:	68e3      	ldr	r3, [r4, #12]
 8023632:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023636:	e746      	b.n	80234c6 <__ieee754_rem_pio2+0x266>
 8023638:	46d0      	mov	r8, sl
 802363a:	e7dd      	b.n	80235f8 <__ieee754_rem_pio2+0x398>
 802363c:	41700000 	.word	0x41700000
 8023640:	08036050 	.word	0x08036050

08023644 <__ieee754_sqrt>:
 8023644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023648:	4955      	ldr	r1, [pc, #340]	; (80237a0 <__ieee754_sqrt+0x15c>)
 802364a:	ec55 4b10 	vmov	r4, r5, d0
 802364e:	43a9      	bics	r1, r5
 8023650:	462b      	mov	r3, r5
 8023652:	462a      	mov	r2, r5
 8023654:	d112      	bne.n	802367c <__ieee754_sqrt+0x38>
 8023656:	ee10 2a10 	vmov	r2, s0
 802365a:	ee10 0a10 	vmov	r0, s0
 802365e:	4629      	mov	r1, r5
 8023660:	f7e4 ff02 	bl	8008468 <__aeabi_dmul>
 8023664:	4602      	mov	r2, r0
 8023666:	460b      	mov	r3, r1
 8023668:	4620      	mov	r0, r4
 802366a:	4629      	mov	r1, r5
 802366c:	f7e4 fd46 	bl	80080fc <__adddf3>
 8023670:	4604      	mov	r4, r0
 8023672:	460d      	mov	r5, r1
 8023674:	ec45 4b10 	vmov	d0, r4, r5
 8023678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802367c:	2d00      	cmp	r5, #0
 802367e:	ee10 0a10 	vmov	r0, s0
 8023682:	4621      	mov	r1, r4
 8023684:	dc0f      	bgt.n	80236a6 <__ieee754_sqrt+0x62>
 8023686:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802368a:	4330      	orrs	r0, r6
 802368c:	d0f2      	beq.n	8023674 <__ieee754_sqrt+0x30>
 802368e:	b155      	cbz	r5, 80236a6 <__ieee754_sqrt+0x62>
 8023690:	ee10 2a10 	vmov	r2, s0
 8023694:	4620      	mov	r0, r4
 8023696:	4629      	mov	r1, r5
 8023698:	f7e4 fd2e 	bl	80080f8 <__aeabi_dsub>
 802369c:	4602      	mov	r2, r0
 802369e:	460b      	mov	r3, r1
 80236a0:	f7e5 f80c 	bl	80086bc <__aeabi_ddiv>
 80236a4:	e7e4      	b.n	8023670 <__ieee754_sqrt+0x2c>
 80236a6:	151b      	asrs	r3, r3, #20
 80236a8:	d073      	beq.n	8023792 <__ieee754_sqrt+0x14e>
 80236aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80236ae:	07dd      	lsls	r5, r3, #31
 80236b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80236b4:	bf48      	it	mi
 80236b6:	0fc8      	lsrmi	r0, r1, #31
 80236b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80236bc:	bf44      	itt	mi
 80236be:	0049      	lslmi	r1, r1, #1
 80236c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80236c4:	2500      	movs	r5, #0
 80236c6:	1058      	asrs	r0, r3, #1
 80236c8:	0fcb      	lsrs	r3, r1, #31
 80236ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80236ce:	0049      	lsls	r1, r1, #1
 80236d0:	2316      	movs	r3, #22
 80236d2:	462c      	mov	r4, r5
 80236d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80236d8:	19a7      	adds	r7, r4, r6
 80236da:	4297      	cmp	r7, r2
 80236dc:	bfde      	ittt	le
 80236de:	19bc      	addle	r4, r7, r6
 80236e0:	1bd2      	suble	r2, r2, r7
 80236e2:	19ad      	addle	r5, r5, r6
 80236e4:	0fcf      	lsrs	r7, r1, #31
 80236e6:	3b01      	subs	r3, #1
 80236e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80236ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80236f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80236f4:	d1f0      	bne.n	80236d8 <__ieee754_sqrt+0x94>
 80236f6:	f04f 0c20 	mov.w	ip, #32
 80236fa:	469e      	mov	lr, r3
 80236fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8023700:	42a2      	cmp	r2, r4
 8023702:	eb06 070e 	add.w	r7, r6, lr
 8023706:	dc02      	bgt.n	802370e <__ieee754_sqrt+0xca>
 8023708:	d112      	bne.n	8023730 <__ieee754_sqrt+0xec>
 802370a:	428f      	cmp	r7, r1
 802370c:	d810      	bhi.n	8023730 <__ieee754_sqrt+0xec>
 802370e:	2f00      	cmp	r7, #0
 8023710:	eb07 0e06 	add.w	lr, r7, r6
 8023714:	da42      	bge.n	802379c <__ieee754_sqrt+0x158>
 8023716:	f1be 0f00 	cmp.w	lr, #0
 802371a:	db3f      	blt.n	802379c <__ieee754_sqrt+0x158>
 802371c:	f104 0801 	add.w	r8, r4, #1
 8023720:	1b12      	subs	r2, r2, r4
 8023722:	428f      	cmp	r7, r1
 8023724:	bf88      	it	hi
 8023726:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802372a:	1bc9      	subs	r1, r1, r7
 802372c:	4433      	add	r3, r6
 802372e:	4644      	mov	r4, r8
 8023730:	0052      	lsls	r2, r2, #1
 8023732:	f1bc 0c01 	subs.w	ip, ip, #1
 8023736:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 802373a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802373e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023742:	d1dd      	bne.n	8023700 <__ieee754_sqrt+0xbc>
 8023744:	430a      	orrs	r2, r1
 8023746:	d006      	beq.n	8023756 <__ieee754_sqrt+0x112>
 8023748:	1c5c      	adds	r4, r3, #1
 802374a:	bf13      	iteet	ne
 802374c:	3301      	addne	r3, #1
 802374e:	3501      	addeq	r5, #1
 8023750:	4663      	moveq	r3, ip
 8023752:	f023 0301 	bicne.w	r3, r3, #1
 8023756:	106a      	asrs	r2, r5, #1
 8023758:	085b      	lsrs	r3, r3, #1
 802375a:	07e9      	lsls	r1, r5, #31
 802375c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8023760:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8023764:	bf48      	it	mi
 8023766:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802376a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 802376e:	461c      	mov	r4, r3
 8023770:	e780      	b.n	8023674 <__ieee754_sqrt+0x30>
 8023772:	0aca      	lsrs	r2, r1, #11
 8023774:	3815      	subs	r0, #21
 8023776:	0549      	lsls	r1, r1, #21
 8023778:	2a00      	cmp	r2, #0
 802377a:	d0fa      	beq.n	8023772 <__ieee754_sqrt+0x12e>
 802377c:	02d6      	lsls	r6, r2, #11
 802377e:	d50a      	bpl.n	8023796 <__ieee754_sqrt+0x152>
 8023780:	f1c3 0420 	rsb	r4, r3, #32
 8023784:	fa21 f404 	lsr.w	r4, r1, r4
 8023788:	1e5d      	subs	r5, r3, #1
 802378a:	4099      	lsls	r1, r3
 802378c:	4322      	orrs	r2, r4
 802378e:	1b43      	subs	r3, r0, r5
 8023790:	e78b      	b.n	80236aa <__ieee754_sqrt+0x66>
 8023792:	4618      	mov	r0, r3
 8023794:	e7f0      	b.n	8023778 <__ieee754_sqrt+0x134>
 8023796:	0052      	lsls	r2, r2, #1
 8023798:	3301      	adds	r3, #1
 802379a:	e7ef      	b.n	802377c <__ieee754_sqrt+0x138>
 802379c:	46a0      	mov	r8, r4
 802379e:	e7bf      	b.n	8023720 <__ieee754_sqrt+0xdc>
 80237a0:	7ff00000 	.word	0x7ff00000
 80237a4:	00000000 	.word	0x00000000

080237a8 <__kernel_cos>:
 80237a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237ac:	ec59 8b10 	vmov	r8, r9, d0
 80237b0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80237b4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80237b8:	ed2d 8b02 	vpush	{d8}
 80237bc:	eeb0 8a41 	vmov.f32	s16, s2
 80237c0:	eef0 8a61 	vmov.f32	s17, s3
 80237c4:	da07      	bge.n	80237d6 <__kernel_cos+0x2e>
 80237c6:	ee10 0a10 	vmov	r0, s0
 80237ca:	4649      	mov	r1, r9
 80237cc:	f7e5 f8fc 	bl	80089c8 <__aeabi_d2iz>
 80237d0:	2800      	cmp	r0, #0
 80237d2:	f000 8089 	beq.w	80238e8 <__kernel_cos+0x140>
 80237d6:	4642      	mov	r2, r8
 80237d8:	464b      	mov	r3, r9
 80237da:	4640      	mov	r0, r8
 80237dc:	4649      	mov	r1, r9
 80237de:	f7e4 fe43 	bl	8008468 <__aeabi_dmul>
 80237e2:	2200      	movs	r2, #0
 80237e4:	4b4e      	ldr	r3, [pc, #312]	; (8023920 <__kernel_cos+0x178>)
 80237e6:	4604      	mov	r4, r0
 80237e8:	460d      	mov	r5, r1
 80237ea:	f7e4 fe3d 	bl	8008468 <__aeabi_dmul>
 80237ee:	a340      	add	r3, pc, #256	; (adr r3, 80238f0 <__kernel_cos+0x148>)
 80237f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237f4:	4682      	mov	sl, r0
 80237f6:	468b      	mov	fp, r1
 80237f8:	4620      	mov	r0, r4
 80237fa:	4629      	mov	r1, r5
 80237fc:	f7e4 fe34 	bl	8008468 <__aeabi_dmul>
 8023800:	a33d      	add	r3, pc, #244	; (adr r3, 80238f8 <__kernel_cos+0x150>)
 8023802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023806:	f7e4 fc79 	bl	80080fc <__adddf3>
 802380a:	4622      	mov	r2, r4
 802380c:	462b      	mov	r3, r5
 802380e:	f7e4 fe2b 	bl	8008468 <__aeabi_dmul>
 8023812:	a33b      	add	r3, pc, #236	; (adr r3, 8023900 <__kernel_cos+0x158>)
 8023814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023818:	f7e4 fc6e 	bl	80080f8 <__aeabi_dsub>
 802381c:	4622      	mov	r2, r4
 802381e:	462b      	mov	r3, r5
 8023820:	f7e4 fe22 	bl	8008468 <__aeabi_dmul>
 8023824:	a338      	add	r3, pc, #224	; (adr r3, 8023908 <__kernel_cos+0x160>)
 8023826:	e9d3 2300 	ldrd	r2, r3, [r3]
 802382a:	f7e4 fc67 	bl	80080fc <__adddf3>
 802382e:	4622      	mov	r2, r4
 8023830:	462b      	mov	r3, r5
 8023832:	f7e4 fe19 	bl	8008468 <__aeabi_dmul>
 8023836:	a336      	add	r3, pc, #216	; (adr r3, 8023910 <__kernel_cos+0x168>)
 8023838:	e9d3 2300 	ldrd	r2, r3, [r3]
 802383c:	f7e4 fc5c 	bl	80080f8 <__aeabi_dsub>
 8023840:	4622      	mov	r2, r4
 8023842:	462b      	mov	r3, r5
 8023844:	f7e4 fe10 	bl	8008468 <__aeabi_dmul>
 8023848:	a333      	add	r3, pc, #204	; (adr r3, 8023918 <__kernel_cos+0x170>)
 802384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802384e:	f7e4 fc55 	bl	80080fc <__adddf3>
 8023852:	4622      	mov	r2, r4
 8023854:	462b      	mov	r3, r5
 8023856:	f7e4 fe07 	bl	8008468 <__aeabi_dmul>
 802385a:	4622      	mov	r2, r4
 802385c:	462b      	mov	r3, r5
 802385e:	f7e4 fe03 	bl	8008468 <__aeabi_dmul>
 8023862:	ec53 2b18 	vmov	r2, r3, d8
 8023866:	4604      	mov	r4, r0
 8023868:	460d      	mov	r5, r1
 802386a:	4640      	mov	r0, r8
 802386c:	4649      	mov	r1, r9
 802386e:	f7e4 fdfb 	bl	8008468 <__aeabi_dmul>
 8023872:	460b      	mov	r3, r1
 8023874:	4602      	mov	r2, r0
 8023876:	4629      	mov	r1, r5
 8023878:	4620      	mov	r0, r4
 802387a:	f7e4 fc3d 	bl	80080f8 <__aeabi_dsub>
 802387e:	4b29      	ldr	r3, [pc, #164]	; (8023924 <__kernel_cos+0x17c>)
 8023880:	429e      	cmp	r6, r3
 8023882:	4680      	mov	r8, r0
 8023884:	4689      	mov	r9, r1
 8023886:	dc11      	bgt.n	80238ac <__kernel_cos+0x104>
 8023888:	4602      	mov	r2, r0
 802388a:	460b      	mov	r3, r1
 802388c:	4650      	mov	r0, sl
 802388e:	4659      	mov	r1, fp
 8023890:	f7e4 fc32 	bl	80080f8 <__aeabi_dsub>
 8023894:	460b      	mov	r3, r1
 8023896:	4924      	ldr	r1, [pc, #144]	; (8023928 <__kernel_cos+0x180>)
 8023898:	4602      	mov	r2, r0
 802389a:	2000      	movs	r0, #0
 802389c:	f7e4 fc2c 	bl	80080f8 <__aeabi_dsub>
 80238a0:	ecbd 8b02 	vpop	{d8}
 80238a4:	ec41 0b10 	vmov	d0, r0, r1
 80238a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238ac:	4b1f      	ldr	r3, [pc, #124]	; (802392c <__kernel_cos+0x184>)
 80238ae:	491e      	ldr	r1, [pc, #120]	; (8023928 <__kernel_cos+0x180>)
 80238b0:	429e      	cmp	r6, r3
 80238b2:	bfcc      	ite	gt
 80238b4:	4d1e      	ldrgt	r5, [pc, #120]	; (8023930 <__kernel_cos+0x188>)
 80238b6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80238ba:	2400      	movs	r4, #0
 80238bc:	4622      	mov	r2, r4
 80238be:	462b      	mov	r3, r5
 80238c0:	2000      	movs	r0, #0
 80238c2:	f7e4 fc19 	bl	80080f8 <__aeabi_dsub>
 80238c6:	4622      	mov	r2, r4
 80238c8:	4606      	mov	r6, r0
 80238ca:	460f      	mov	r7, r1
 80238cc:	462b      	mov	r3, r5
 80238ce:	4650      	mov	r0, sl
 80238d0:	4659      	mov	r1, fp
 80238d2:	f7e4 fc11 	bl	80080f8 <__aeabi_dsub>
 80238d6:	4642      	mov	r2, r8
 80238d8:	464b      	mov	r3, r9
 80238da:	f7e4 fc0d 	bl	80080f8 <__aeabi_dsub>
 80238de:	4602      	mov	r2, r0
 80238e0:	460b      	mov	r3, r1
 80238e2:	4630      	mov	r0, r6
 80238e4:	4639      	mov	r1, r7
 80238e6:	e7d9      	b.n	802389c <__kernel_cos+0xf4>
 80238e8:	2000      	movs	r0, #0
 80238ea:	490f      	ldr	r1, [pc, #60]	; (8023928 <__kernel_cos+0x180>)
 80238ec:	e7d8      	b.n	80238a0 <__kernel_cos+0xf8>
 80238ee:	bf00      	nop
 80238f0:	be8838d4 	.word	0xbe8838d4
 80238f4:	bda8fae9 	.word	0xbda8fae9
 80238f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80238fc:	3e21ee9e 	.word	0x3e21ee9e
 8023900:	809c52ad 	.word	0x809c52ad
 8023904:	3e927e4f 	.word	0x3e927e4f
 8023908:	19cb1590 	.word	0x19cb1590
 802390c:	3efa01a0 	.word	0x3efa01a0
 8023910:	16c15177 	.word	0x16c15177
 8023914:	3f56c16c 	.word	0x3f56c16c
 8023918:	5555554c 	.word	0x5555554c
 802391c:	3fa55555 	.word	0x3fa55555
 8023920:	3fe00000 	.word	0x3fe00000
 8023924:	3fd33332 	.word	0x3fd33332
 8023928:	3ff00000 	.word	0x3ff00000
 802392c:	3fe90000 	.word	0x3fe90000
 8023930:	3fd20000 	.word	0x3fd20000
 8023934:	00000000 	.word	0x00000000

08023938 <__kernel_rem_pio2>:
 8023938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802393c:	ed2d 8b02 	vpush	{d8}
 8023940:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8023944:	1ed4      	subs	r4, r2, #3
 8023946:	9308      	str	r3, [sp, #32]
 8023948:	9101      	str	r1, [sp, #4]
 802394a:	4bc5      	ldr	r3, [pc, #788]	; (8023c60 <__kernel_rem_pio2+0x328>)
 802394c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 802394e:	9009      	str	r0, [sp, #36]	; 0x24
 8023950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8023954:	9304      	str	r3, [sp, #16]
 8023956:	9b08      	ldr	r3, [sp, #32]
 8023958:	3b01      	subs	r3, #1
 802395a:	9307      	str	r3, [sp, #28]
 802395c:	2318      	movs	r3, #24
 802395e:	fb94 f4f3 	sdiv	r4, r4, r3
 8023962:	f06f 0317 	mvn.w	r3, #23
 8023966:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802396a:	fb04 3303 	mla	r3, r4, r3, r3
 802396e:	eb03 0a02 	add.w	sl, r3, r2
 8023972:	9b04      	ldr	r3, [sp, #16]
 8023974:	9a07      	ldr	r2, [sp, #28]
 8023976:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8023c50 <__kernel_rem_pio2+0x318>
 802397a:	eb03 0802 	add.w	r8, r3, r2
 802397e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8023980:	1aa7      	subs	r7, r4, r2
 8023982:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8023986:	ae22      	add	r6, sp, #136	; 0x88
 8023988:	2500      	movs	r5, #0
 802398a:	4545      	cmp	r5, r8
 802398c:	dd13      	ble.n	80239b6 <__kernel_rem_pio2+0x7e>
 802398e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8023c50 <__kernel_rem_pio2+0x318>
 8023992:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8023996:	2600      	movs	r6, #0
 8023998:	9b04      	ldr	r3, [sp, #16]
 802399a:	429e      	cmp	r6, r3
 802399c:	dc32      	bgt.n	8023a04 <__kernel_rem_pio2+0xcc>
 802399e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239a0:	9302      	str	r3, [sp, #8]
 80239a2:	9b08      	ldr	r3, [sp, #32]
 80239a4:	199d      	adds	r5, r3, r6
 80239a6:	ab22      	add	r3, sp, #136	; 0x88
 80239a8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80239ac:	9306      	str	r3, [sp, #24]
 80239ae:	ec59 8b18 	vmov	r8, r9, d8
 80239b2:	2700      	movs	r7, #0
 80239b4:	e01f      	b.n	80239f6 <__kernel_rem_pio2+0xbe>
 80239b6:	42ef      	cmn	r7, r5
 80239b8:	d407      	bmi.n	80239ca <__kernel_rem_pio2+0x92>
 80239ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80239be:	f7e4 fce9 	bl	8008394 <__aeabi_i2d>
 80239c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80239c6:	3501      	adds	r5, #1
 80239c8:	e7df      	b.n	802398a <__kernel_rem_pio2+0x52>
 80239ca:	ec51 0b18 	vmov	r0, r1, d8
 80239ce:	e7f8      	b.n	80239c2 <__kernel_rem_pio2+0x8a>
 80239d0:	9906      	ldr	r1, [sp, #24]
 80239d2:	9d02      	ldr	r5, [sp, #8]
 80239d4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80239d8:	9106      	str	r1, [sp, #24]
 80239da:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80239de:	9502      	str	r5, [sp, #8]
 80239e0:	f7e4 fd42 	bl	8008468 <__aeabi_dmul>
 80239e4:	4602      	mov	r2, r0
 80239e6:	460b      	mov	r3, r1
 80239e8:	4640      	mov	r0, r8
 80239ea:	4649      	mov	r1, r9
 80239ec:	f7e4 fb86 	bl	80080fc <__adddf3>
 80239f0:	3701      	adds	r7, #1
 80239f2:	4680      	mov	r8, r0
 80239f4:	4689      	mov	r9, r1
 80239f6:	9b07      	ldr	r3, [sp, #28]
 80239f8:	429f      	cmp	r7, r3
 80239fa:	dde9      	ble.n	80239d0 <__kernel_rem_pio2+0x98>
 80239fc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8023a00:	3601      	adds	r6, #1
 8023a02:	e7c9      	b.n	8023998 <__kernel_rem_pio2+0x60>
 8023a04:	9b04      	ldr	r3, [sp, #16]
 8023a06:	aa0e      	add	r2, sp, #56	; 0x38
 8023a08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023a0c:	930c      	str	r3, [sp, #48]	; 0x30
 8023a0e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8023a10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023a14:	9c04      	ldr	r4, [sp, #16]
 8023a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a18:	ab9a      	add	r3, sp, #616	; 0x268
 8023a1a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8023a1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023a22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023a26:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8023a2a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8023a2e:	ab9a      	add	r3, sp, #616	; 0x268
 8023a30:	445b      	add	r3, fp
 8023a32:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8023a36:	2500      	movs	r5, #0
 8023a38:	1b63      	subs	r3, r4, r5
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	dc78      	bgt.n	8023b30 <__kernel_rem_pio2+0x1f8>
 8023a3e:	4650      	mov	r0, sl
 8023a40:	ec49 8b10 	vmov	d0, r8, r9
 8023a44:	f000 fc98 	bl	8024378 <scalbn>
 8023a48:	ec57 6b10 	vmov	r6, r7, d0
 8023a4c:	2200      	movs	r2, #0
 8023a4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8023a52:	ee10 0a10 	vmov	r0, s0
 8023a56:	4639      	mov	r1, r7
 8023a58:	f7e4 fd06 	bl	8008468 <__aeabi_dmul>
 8023a5c:	ec41 0b10 	vmov	d0, r0, r1
 8023a60:	f000 fb76 	bl	8024150 <floor>
 8023a64:	2200      	movs	r2, #0
 8023a66:	ec51 0b10 	vmov	r0, r1, d0
 8023a6a:	4b7e      	ldr	r3, [pc, #504]	; (8023c64 <__kernel_rem_pio2+0x32c>)
 8023a6c:	f7e4 fcfc 	bl	8008468 <__aeabi_dmul>
 8023a70:	4602      	mov	r2, r0
 8023a72:	460b      	mov	r3, r1
 8023a74:	4630      	mov	r0, r6
 8023a76:	4639      	mov	r1, r7
 8023a78:	f7e4 fb3e 	bl	80080f8 <__aeabi_dsub>
 8023a7c:	460f      	mov	r7, r1
 8023a7e:	4606      	mov	r6, r0
 8023a80:	f7e4 ffa2 	bl	80089c8 <__aeabi_d2iz>
 8023a84:	9006      	str	r0, [sp, #24]
 8023a86:	f7e4 fc85 	bl	8008394 <__aeabi_i2d>
 8023a8a:	4602      	mov	r2, r0
 8023a8c:	460b      	mov	r3, r1
 8023a8e:	4630      	mov	r0, r6
 8023a90:	4639      	mov	r1, r7
 8023a92:	f7e4 fb31 	bl	80080f8 <__aeabi_dsub>
 8023a96:	f1ba 0f00 	cmp.w	sl, #0
 8023a9a:	4606      	mov	r6, r0
 8023a9c:	460f      	mov	r7, r1
 8023a9e:	dd6c      	ble.n	8023b7a <__kernel_rem_pio2+0x242>
 8023aa0:	1e62      	subs	r2, r4, #1
 8023aa2:	ab0e      	add	r3, sp, #56	; 0x38
 8023aa4:	f1ca 0118 	rsb	r1, sl, #24
 8023aa8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023aac:	9d06      	ldr	r5, [sp, #24]
 8023aae:	fa40 f301 	asr.w	r3, r0, r1
 8023ab2:	441d      	add	r5, r3
 8023ab4:	408b      	lsls	r3, r1
 8023ab6:	1ac0      	subs	r0, r0, r3
 8023ab8:	ab0e      	add	r3, sp, #56	; 0x38
 8023aba:	9506      	str	r5, [sp, #24]
 8023abc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8023ac0:	f1ca 0317 	rsb	r3, sl, #23
 8023ac4:	fa40 f303 	asr.w	r3, r0, r3
 8023ac8:	9302      	str	r3, [sp, #8]
 8023aca:	9b02      	ldr	r3, [sp, #8]
 8023acc:	2b00      	cmp	r3, #0
 8023ace:	dd62      	ble.n	8023b96 <__kernel_rem_pio2+0x25e>
 8023ad0:	9b06      	ldr	r3, [sp, #24]
 8023ad2:	2200      	movs	r2, #0
 8023ad4:	3301      	adds	r3, #1
 8023ad6:	9306      	str	r3, [sp, #24]
 8023ad8:	4615      	mov	r5, r2
 8023ada:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8023ade:	4294      	cmp	r4, r2
 8023ae0:	f300 8095 	bgt.w	8023c0e <__kernel_rem_pio2+0x2d6>
 8023ae4:	f1ba 0f00 	cmp.w	sl, #0
 8023ae8:	dd07      	ble.n	8023afa <__kernel_rem_pio2+0x1c2>
 8023aea:	f1ba 0f01 	cmp.w	sl, #1
 8023aee:	f000 80a2 	beq.w	8023c36 <__kernel_rem_pio2+0x2fe>
 8023af2:	f1ba 0f02 	cmp.w	sl, #2
 8023af6:	f000 80c1 	beq.w	8023c7c <__kernel_rem_pio2+0x344>
 8023afa:	9b02      	ldr	r3, [sp, #8]
 8023afc:	2b02      	cmp	r3, #2
 8023afe:	d14a      	bne.n	8023b96 <__kernel_rem_pio2+0x25e>
 8023b00:	4632      	mov	r2, r6
 8023b02:	463b      	mov	r3, r7
 8023b04:	2000      	movs	r0, #0
 8023b06:	4958      	ldr	r1, [pc, #352]	; (8023c68 <__kernel_rem_pio2+0x330>)
 8023b08:	f7e4 faf6 	bl	80080f8 <__aeabi_dsub>
 8023b0c:	4606      	mov	r6, r0
 8023b0e:	460f      	mov	r7, r1
 8023b10:	2d00      	cmp	r5, #0
 8023b12:	d040      	beq.n	8023b96 <__kernel_rem_pio2+0x25e>
 8023b14:	4650      	mov	r0, sl
 8023b16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8023c58 <__kernel_rem_pio2+0x320>
 8023b1a:	f000 fc2d 	bl	8024378 <scalbn>
 8023b1e:	4630      	mov	r0, r6
 8023b20:	4639      	mov	r1, r7
 8023b22:	ec53 2b10 	vmov	r2, r3, d0
 8023b26:	f7e4 fae7 	bl	80080f8 <__aeabi_dsub>
 8023b2a:	4606      	mov	r6, r0
 8023b2c:	460f      	mov	r7, r1
 8023b2e:	e032      	b.n	8023b96 <__kernel_rem_pio2+0x25e>
 8023b30:	2200      	movs	r2, #0
 8023b32:	4b4e      	ldr	r3, [pc, #312]	; (8023c6c <__kernel_rem_pio2+0x334>)
 8023b34:	4640      	mov	r0, r8
 8023b36:	4649      	mov	r1, r9
 8023b38:	f7e4 fc96 	bl	8008468 <__aeabi_dmul>
 8023b3c:	f7e4 ff44 	bl	80089c8 <__aeabi_d2iz>
 8023b40:	f7e4 fc28 	bl	8008394 <__aeabi_i2d>
 8023b44:	2200      	movs	r2, #0
 8023b46:	4b4a      	ldr	r3, [pc, #296]	; (8023c70 <__kernel_rem_pio2+0x338>)
 8023b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023b4c:	f7e4 fc8c 	bl	8008468 <__aeabi_dmul>
 8023b50:	4602      	mov	r2, r0
 8023b52:	460b      	mov	r3, r1
 8023b54:	4640      	mov	r0, r8
 8023b56:	4649      	mov	r1, r9
 8023b58:	f7e4 face 	bl	80080f8 <__aeabi_dsub>
 8023b5c:	f7e4 ff34 	bl	80089c8 <__aeabi_d2iz>
 8023b60:	ab0e      	add	r3, sp, #56	; 0x38
 8023b62:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8023b66:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8023b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023b6e:	f7e4 fac5 	bl	80080fc <__adddf3>
 8023b72:	3501      	adds	r5, #1
 8023b74:	4680      	mov	r8, r0
 8023b76:	4689      	mov	r9, r1
 8023b78:	e75e      	b.n	8023a38 <__kernel_rem_pio2+0x100>
 8023b7a:	d105      	bne.n	8023b88 <__kernel_rem_pio2+0x250>
 8023b7c:	1e63      	subs	r3, r4, #1
 8023b7e:	aa0e      	add	r2, sp, #56	; 0x38
 8023b80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8023b84:	15c3      	asrs	r3, r0, #23
 8023b86:	e79f      	b.n	8023ac8 <__kernel_rem_pio2+0x190>
 8023b88:	2200      	movs	r2, #0
 8023b8a:	4b3a      	ldr	r3, [pc, #232]	; (8023c74 <__kernel_rem_pio2+0x33c>)
 8023b8c:	f7e4 fef2 	bl	8008974 <__aeabi_dcmpge>
 8023b90:	2800      	cmp	r0, #0
 8023b92:	d139      	bne.n	8023c08 <__kernel_rem_pio2+0x2d0>
 8023b94:	9002      	str	r0, [sp, #8]
 8023b96:	2200      	movs	r2, #0
 8023b98:	2300      	movs	r3, #0
 8023b9a:	4630      	mov	r0, r6
 8023b9c:	4639      	mov	r1, r7
 8023b9e:	f7e4 fecb 	bl	8008938 <__aeabi_dcmpeq>
 8023ba2:	2800      	cmp	r0, #0
 8023ba4:	f000 80c7 	beq.w	8023d36 <__kernel_rem_pio2+0x3fe>
 8023ba8:	1e65      	subs	r5, r4, #1
 8023baa:	462b      	mov	r3, r5
 8023bac:	2200      	movs	r2, #0
 8023bae:	9904      	ldr	r1, [sp, #16]
 8023bb0:	428b      	cmp	r3, r1
 8023bb2:	da6a      	bge.n	8023c8a <__kernel_rem_pio2+0x352>
 8023bb4:	2a00      	cmp	r2, #0
 8023bb6:	f000 8088 	beq.w	8023cca <__kernel_rem_pio2+0x392>
 8023bba:	ab0e      	add	r3, sp, #56	; 0x38
 8023bbc:	f1aa 0a18 	sub.w	sl, sl, #24
 8023bc0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023bc4:	2b00      	cmp	r3, #0
 8023bc6:	f000 80b4 	beq.w	8023d32 <__kernel_rem_pio2+0x3fa>
 8023bca:	4650      	mov	r0, sl
 8023bcc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8023c58 <__kernel_rem_pio2+0x320>
 8023bd0:	f000 fbd2 	bl	8024378 <scalbn>
 8023bd4:	00ec      	lsls	r4, r5, #3
 8023bd6:	ab72      	add	r3, sp, #456	; 0x1c8
 8023bd8:	191e      	adds	r6, r3, r4
 8023bda:	ec59 8b10 	vmov	r8, r9, d0
 8023bde:	f106 0a08 	add.w	sl, r6, #8
 8023be2:	462f      	mov	r7, r5
 8023be4:	2f00      	cmp	r7, #0
 8023be6:	f280 80df 	bge.w	8023da8 <__kernel_rem_pio2+0x470>
 8023bea:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8023c50 <__kernel_rem_pio2+0x318>
 8023bee:	f04f 0a00 	mov.w	sl, #0
 8023bf2:	eba5 030a 	sub.w	r3, r5, sl
 8023bf6:	2b00      	cmp	r3, #0
 8023bf8:	f2c0 810a 	blt.w	8023e10 <__kernel_rem_pio2+0x4d8>
 8023bfc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8023c78 <__kernel_rem_pio2+0x340>
 8023c00:	ec59 8b18 	vmov	r8, r9, d8
 8023c04:	2700      	movs	r7, #0
 8023c06:	e0f5      	b.n	8023df4 <__kernel_rem_pio2+0x4bc>
 8023c08:	2302      	movs	r3, #2
 8023c0a:	9302      	str	r3, [sp, #8]
 8023c0c:	e760      	b.n	8023ad0 <__kernel_rem_pio2+0x198>
 8023c0e:	ab0e      	add	r3, sp, #56	; 0x38
 8023c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023c14:	b94d      	cbnz	r5, 8023c2a <__kernel_rem_pio2+0x2f2>
 8023c16:	b12b      	cbz	r3, 8023c24 <__kernel_rem_pio2+0x2ec>
 8023c18:	a80e      	add	r0, sp, #56	; 0x38
 8023c1a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8023c1e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8023c22:	2301      	movs	r3, #1
 8023c24:	3201      	adds	r2, #1
 8023c26:	461d      	mov	r5, r3
 8023c28:	e759      	b.n	8023ade <__kernel_rem_pio2+0x1a6>
 8023c2a:	a80e      	add	r0, sp, #56	; 0x38
 8023c2c:	1acb      	subs	r3, r1, r3
 8023c2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8023c32:	462b      	mov	r3, r5
 8023c34:	e7f6      	b.n	8023c24 <__kernel_rem_pio2+0x2ec>
 8023c36:	1e62      	subs	r2, r4, #1
 8023c38:	ab0e      	add	r3, sp, #56	; 0x38
 8023c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023c3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023c42:	a90e      	add	r1, sp, #56	; 0x38
 8023c44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8023c48:	e757      	b.n	8023afa <__kernel_rem_pio2+0x1c2>
 8023c4a:	bf00      	nop
 8023c4c:	f3af 8000 	nop.w
	...
 8023c5c:	3ff00000 	.word	0x3ff00000
 8023c60:	08036198 	.word	0x08036198
 8023c64:	40200000 	.word	0x40200000
 8023c68:	3ff00000 	.word	0x3ff00000
 8023c6c:	3e700000 	.word	0x3e700000
 8023c70:	41700000 	.word	0x41700000
 8023c74:	3fe00000 	.word	0x3fe00000
 8023c78:	08036158 	.word	0x08036158
 8023c7c:	1e62      	subs	r2, r4, #1
 8023c7e:	ab0e      	add	r3, sp, #56	; 0x38
 8023c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023c84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8023c88:	e7db      	b.n	8023c42 <__kernel_rem_pio2+0x30a>
 8023c8a:	a90e      	add	r1, sp, #56	; 0x38
 8023c8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8023c90:	3b01      	subs	r3, #1
 8023c92:	430a      	orrs	r2, r1
 8023c94:	e78b      	b.n	8023bae <__kernel_rem_pio2+0x276>
 8023c96:	3301      	adds	r3, #1
 8023c98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023c9c:	2900      	cmp	r1, #0
 8023c9e:	d0fa      	beq.n	8023c96 <__kernel_rem_pio2+0x35e>
 8023ca0:	9a08      	ldr	r2, [sp, #32]
 8023ca2:	4422      	add	r2, r4
 8023ca4:	00d2      	lsls	r2, r2, #3
 8023ca6:	a922      	add	r1, sp, #136	; 0x88
 8023ca8:	18e3      	adds	r3, r4, r3
 8023caa:	9206      	str	r2, [sp, #24]
 8023cac:	440a      	add	r2, r1
 8023cae:	9302      	str	r3, [sp, #8]
 8023cb0:	f10b 0108 	add.w	r1, fp, #8
 8023cb4:	f102 0308 	add.w	r3, r2, #8
 8023cb8:	1c66      	adds	r6, r4, #1
 8023cba:	910a      	str	r1, [sp, #40]	; 0x28
 8023cbc:	2500      	movs	r5, #0
 8023cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8023cc0:	9b02      	ldr	r3, [sp, #8]
 8023cc2:	42b3      	cmp	r3, r6
 8023cc4:	da04      	bge.n	8023cd0 <__kernel_rem_pio2+0x398>
 8023cc6:	461c      	mov	r4, r3
 8023cc8:	e6a6      	b.n	8023a18 <__kernel_rem_pio2+0xe0>
 8023cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023ccc:	2301      	movs	r3, #1
 8023cce:	e7e3      	b.n	8023c98 <__kernel_rem_pio2+0x360>
 8023cd0:	9b06      	ldr	r3, [sp, #24]
 8023cd2:	18ef      	adds	r7, r5, r3
 8023cd4:	ab22      	add	r3, sp, #136	; 0x88
 8023cd6:	441f      	add	r7, r3
 8023cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023cda:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8023cde:	f7e4 fb59 	bl	8008394 <__aeabi_i2d>
 8023ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ce4:	461c      	mov	r4, r3
 8023ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023ce8:	e9c7 0100 	strd	r0, r1, [r7]
 8023cec:	eb03 0b05 	add.w	fp, r3, r5
 8023cf0:	2700      	movs	r7, #0
 8023cf2:	f04f 0800 	mov.w	r8, #0
 8023cf6:	f04f 0900 	mov.w	r9, #0
 8023cfa:	9b07      	ldr	r3, [sp, #28]
 8023cfc:	429f      	cmp	r7, r3
 8023cfe:	dd08      	ble.n	8023d12 <__kernel_rem_pio2+0x3da>
 8023d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d02:	aa72      	add	r2, sp, #456	; 0x1c8
 8023d04:	18eb      	adds	r3, r5, r3
 8023d06:	4413      	add	r3, r2
 8023d08:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8023d0c:	3601      	adds	r6, #1
 8023d0e:	3508      	adds	r5, #8
 8023d10:	e7d6      	b.n	8023cc0 <__kernel_rem_pio2+0x388>
 8023d12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8023d16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8023d1a:	f7e4 fba5 	bl	8008468 <__aeabi_dmul>
 8023d1e:	4602      	mov	r2, r0
 8023d20:	460b      	mov	r3, r1
 8023d22:	4640      	mov	r0, r8
 8023d24:	4649      	mov	r1, r9
 8023d26:	f7e4 f9e9 	bl	80080fc <__adddf3>
 8023d2a:	3701      	adds	r7, #1
 8023d2c:	4680      	mov	r8, r0
 8023d2e:	4689      	mov	r9, r1
 8023d30:	e7e3      	b.n	8023cfa <__kernel_rem_pio2+0x3c2>
 8023d32:	3d01      	subs	r5, #1
 8023d34:	e741      	b.n	8023bba <__kernel_rem_pio2+0x282>
 8023d36:	f1ca 0000 	rsb	r0, sl, #0
 8023d3a:	ec47 6b10 	vmov	d0, r6, r7
 8023d3e:	f000 fb1b 	bl	8024378 <scalbn>
 8023d42:	ec57 6b10 	vmov	r6, r7, d0
 8023d46:	2200      	movs	r2, #0
 8023d48:	4b99      	ldr	r3, [pc, #612]	; (8023fb0 <__kernel_rem_pio2+0x678>)
 8023d4a:	ee10 0a10 	vmov	r0, s0
 8023d4e:	4639      	mov	r1, r7
 8023d50:	f7e4 fe10 	bl	8008974 <__aeabi_dcmpge>
 8023d54:	b1f8      	cbz	r0, 8023d96 <__kernel_rem_pio2+0x45e>
 8023d56:	2200      	movs	r2, #0
 8023d58:	4b96      	ldr	r3, [pc, #600]	; (8023fb4 <__kernel_rem_pio2+0x67c>)
 8023d5a:	4630      	mov	r0, r6
 8023d5c:	4639      	mov	r1, r7
 8023d5e:	f7e4 fb83 	bl	8008468 <__aeabi_dmul>
 8023d62:	f7e4 fe31 	bl	80089c8 <__aeabi_d2iz>
 8023d66:	4680      	mov	r8, r0
 8023d68:	f7e4 fb14 	bl	8008394 <__aeabi_i2d>
 8023d6c:	2200      	movs	r2, #0
 8023d6e:	4b90      	ldr	r3, [pc, #576]	; (8023fb0 <__kernel_rem_pio2+0x678>)
 8023d70:	f7e4 fb7a 	bl	8008468 <__aeabi_dmul>
 8023d74:	460b      	mov	r3, r1
 8023d76:	4602      	mov	r2, r0
 8023d78:	4639      	mov	r1, r7
 8023d7a:	4630      	mov	r0, r6
 8023d7c:	f7e4 f9bc 	bl	80080f8 <__aeabi_dsub>
 8023d80:	f7e4 fe22 	bl	80089c8 <__aeabi_d2iz>
 8023d84:	1c65      	adds	r5, r4, #1
 8023d86:	ab0e      	add	r3, sp, #56	; 0x38
 8023d88:	f10a 0a18 	add.w	sl, sl, #24
 8023d8c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023d90:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8023d94:	e719      	b.n	8023bca <__kernel_rem_pio2+0x292>
 8023d96:	4630      	mov	r0, r6
 8023d98:	4639      	mov	r1, r7
 8023d9a:	f7e4 fe15 	bl	80089c8 <__aeabi_d2iz>
 8023d9e:	ab0e      	add	r3, sp, #56	; 0x38
 8023da0:	4625      	mov	r5, r4
 8023da2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023da6:	e710      	b.n	8023bca <__kernel_rem_pio2+0x292>
 8023da8:	ab0e      	add	r3, sp, #56	; 0x38
 8023daa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8023dae:	f7e4 faf1 	bl	8008394 <__aeabi_i2d>
 8023db2:	4642      	mov	r2, r8
 8023db4:	464b      	mov	r3, r9
 8023db6:	f7e4 fb57 	bl	8008468 <__aeabi_dmul>
 8023dba:	2200      	movs	r2, #0
 8023dbc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8023dc0:	4b7c      	ldr	r3, [pc, #496]	; (8023fb4 <__kernel_rem_pio2+0x67c>)
 8023dc2:	4640      	mov	r0, r8
 8023dc4:	4649      	mov	r1, r9
 8023dc6:	f7e4 fb4f 	bl	8008468 <__aeabi_dmul>
 8023dca:	3f01      	subs	r7, #1
 8023dcc:	4680      	mov	r8, r0
 8023dce:	4689      	mov	r9, r1
 8023dd0:	e708      	b.n	8023be4 <__kernel_rem_pio2+0x2ac>
 8023dd2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8023dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dda:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8023dde:	f7e4 fb43 	bl	8008468 <__aeabi_dmul>
 8023de2:	4602      	mov	r2, r0
 8023de4:	460b      	mov	r3, r1
 8023de6:	4640      	mov	r0, r8
 8023de8:	4649      	mov	r1, r9
 8023dea:	f7e4 f987 	bl	80080fc <__adddf3>
 8023dee:	3701      	adds	r7, #1
 8023df0:	4680      	mov	r8, r0
 8023df2:	4689      	mov	r9, r1
 8023df4:	9b04      	ldr	r3, [sp, #16]
 8023df6:	429f      	cmp	r7, r3
 8023df8:	dc01      	bgt.n	8023dfe <__kernel_rem_pio2+0x4c6>
 8023dfa:	45ba      	cmp	sl, r7
 8023dfc:	dae9      	bge.n	8023dd2 <__kernel_rem_pio2+0x49a>
 8023dfe:	ab4a      	add	r3, sp, #296	; 0x128
 8023e00:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8023e04:	e9c3 8900 	strd	r8, r9, [r3]
 8023e08:	f10a 0a01 	add.w	sl, sl, #1
 8023e0c:	3e08      	subs	r6, #8
 8023e0e:	e6f0      	b.n	8023bf2 <__kernel_rem_pio2+0x2ba>
 8023e10:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023e12:	2b03      	cmp	r3, #3
 8023e14:	d85b      	bhi.n	8023ece <__kernel_rem_pio2+0x596>
 8023e16:	e8df f003 	tbb	[pc, r3]
 8023e1a:	264a      	.short	0x264a
 8023e1c:	0226      	.short	0x0226
 8023e1e:	ab9a      	add	r3, sp, #616	; 0x268
 8023e20:	441c      	add	r4, r3
 8023e22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8023e26:	46a2      	mov	sl, r4
 8023e28:	46ab      	mov	fp, r5
 8023e2a:	f1bb 0f00 	cmp.w	fp, #0
 8023e2e:	dc6c      	bgt.n	8023f0a <__kernel_rem_pio2+0x5d2>
 8023e30:	46a2      	mov	sl, r4
 8023e32:	46ab      	mov	fp, r5
 8023e34:	f1bb 0f01 	cmp.w	fp, #1
 8023e38:	f300 8086 	bgt.w	8023f48 <__kernel_rem_pio2+0x610>
 8023e3c:	2000      	movs	r0, #0
 8023e3e:	2100      	movs	r1, #0
 8023e40:	2d01      	cmp	r5, #1
 8023e42:	f300 80a0 	bgt.w	8023f86 <__kernel_rem_pio2+0x64e>
 8023e46:	9b02      	ldr	r3, [sp, #8]
 8023e48:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8023e4c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	f040 809e 	bne.w	8023f92 <__kernel_rem_pio2+0x65a>
 8023e56:	9b01      	ldr	r3, [sp, #4]
 8023e58:	e9c3 7800 	strd	r7, r8, [r3]
 8023e5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8023e60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8023e64:	e033      	b.n	8023ece <__kernel_rem_pio2+0x596>
 8023e66:	3408      	adds	r4, #8
 8023e68:	ab4a      	add	r3, sp, #296	; 0x128
 8023e6a:	441c      	add	r4, r3
 8023e6c:	462e      	mov	r6, r5
 8023e6e:	2000      	movs	r0, #0
 8023e70:	2100      	movs	r1, #0
 8023e72:	2e00      	cmp	r6, #0
 8023e74:	da3a      	bge.n	8023eec <__kernel_rem_pio2+0x5b4>
 8023e76:	9b02      	ldr	r3, [sp, #8]
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d03d      	beq.n	8023ef8 <__kernel_rem_pio2+0x5c0>
 8023e7c:	4602      	mov	r2, r0
 8023e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023e82:	9c01      	ldr	r4, [sp, #4]
 8023e84:	e9c4 2300 	strd	r2, r3, [r4]
 8023e88:	4602      	mov	r2, r0
 8023e8a:	460b      	mov	r3, r1
 8023e8c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8023e90:	f7e4 f932 	bl	80080f8 <__aeabi_dsub>
 8023e94:	ae4c      	add	r6, sp, #304	; 0x130
 8023e96:	2401      	movs	r4, #1
 8023e98:	42a5      	cmp	r5, r4
 8023e9a:	da30      	bge.n	8023efe <__kernel_rem_pio2+0x5c6>
 8023e9c:	9b02      	ldr	r3, [sp, #8]
 8023e9e:	b113      	cbz	r3, 8023ea6 <__kernel_rem_pio2+0x56e>
 8023ea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023ea4:	4619      	mov	r1, r3
 8023ea6:	9b01      	ldr	r3, [sp, #4]
 8023ea8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023eac:	e00f      	b.n	8023ece <__kernel_rem_pio2+0x596>
 8023eae:	ab9a      	add	r3, sp, #616	; 0x268
 8023eb0:	441c      	add	r4, r3
 8023eb2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8023eb6:	2000      	movs	r0, #0
 8023eb8:	2100      	movs	r1, #0
 8023eba:	2d00      	cmp	r5, #0
 8023ebc:	da10      	bge.n	8023ee0 <__kernel_rem_pio2+0x5a8>
 8023ebe:	9b02      	ldr	r3, [sp, #8]
 8023ec0:	b113      	cbz	r3, 8023ec8 <__kernel_rem_pio2+0x590>
 8023ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023ec6:	4619      	mov	r1, r3
 8023ec8:	9b01      	ldr	r3, [sp, #4]
 8023eca:	e9c3 0100 	strd	r0, r1, [r3]
 8023ece:	9b06      	ldr	r3, [sp, #24]
 8023ed0:	f003 0007 	and.w	r0, r3, #7
 8023ed4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8023ed8:	ecbd 8b02 	vpop	{d8}
 8023edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ee0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023ee4:	f7e4 f90a 	bl	80080fc <__adddf3>
 8023ee8:	3d01      	subs	r5, #1
 8023eea:	e7e6      	b.n	8023eba <__kernel_rem_pio2+0x582>
 8023eec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023ef0:	f7e4 f904 	bl	80080fc <__adddf3>
 8023ef4:	3e01      	subs	r6, #1
 8023ef6:	e7bc      	b.n	8023e72 <__kernel_rem_pio2+0x53a>
 8023ef8:	4602      	mov	r2, r0
 8023efa:	460b      	mov	r3, r1
 8023efc:	e7c1      	b.n	8023e82 <__kernel_rem_pio2+0x54a>
 8023efe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8023f02:	f7e4 f8fb 	bl	80080fc <__adddf3>
 8023f06:	3401      	adds	r4, #1
 8023f08:	e7c6      	b.n	8023e98 <__kernel_rem_pio2+0x560>
 8023f0a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8023f0e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8023f12:	4640      	mov	r0, r8
 8023f14:	ec53 2b17 	vmov	r2, r3, d7
 8023f18:	4649      	mov	r1, r9
 8023f1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8023f1e:	f7e4 f8ed 	bl	80080fc <__adddf3>
 8023f22:	4602      	mov	r2, r0
 8023f24:	460b      	mov	r3, r1
 8023f26:	4606      	mov	r6, r0
 8023f28:	460f      	mov	r7, r1
 8023f2a:	4640      	mov	r0, r8
 8023f2c:	4649      	mov	r1, r9
 8023f2e:	f7e4 f8e3 	bl	80080f8 <__aeabi_dsub>
 8023f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023f36:	f7e4 f8e1 	bl	80080fc <__adddf3>
 8023f3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f3e:	e9ca 0100 	strd	r0, r1, [sl]
 8023f42:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8023f46:	e770      	b.n	8023e2a <__kernel_rem_pio2+0x4f2>
 8023f48:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8023f4c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8023f50:	4630      	mov	r0, r6
 8023f52:	ec53 2b17 	vmov	r2, r3, d7
 8023f56:	4639      	mov	r1, r7
 8023f58:	ed8d 7b04 	vstr	d7, [sp, #16]
 8023f5c:	f7e4 f8ce 	bl	80080fc <__adddf3>
 8023f60:	4602      	mov	r2, r0
 8023f62:	460b      	mov	r3, r1
 8023f64:	4680      	mov	r8, r0
 8023f66:	4689      	mov	r9, r1
 8023f68:	4630      	mov	r0, r6
 8023f6a:	4639      	mov	r1, r7
 8023f6c:	f7e4 f8c4 	bl	80080f8 <__aeabi_dsub>
 8023f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023f74:	f7e4 f8c2 	bl	80080fc <__adddf3>
 8023f78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f7c:	e9ca 0100 	strd	r0, r1, [sl]
 8023f80:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8023f84:	e756      	b.n	8023e34 <__kernel_rem_pio2+0x4fc>
 8023f86:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023f8a:	f7e4 f8b7 	bl	80080fc <__adddf3>
 8023f8e:	3d01      	subs	r5, #1
 8023f90:	e756      	b.n	8023e40 <__kernel_rem_pio2+0x508>
 8023f92:	9b01      	ldr	r3, [sp, #4]
 8023f94:	9a01      	ldr	r2, [sp, #4]
 8023f96:	601f      	str	r7, [r3, #0]
 8023f98:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8023f9c:	605c      	str	r4, [r3, #4]
 8023f9e:	609d      	str	r5, [r3, #8]
 8023fa0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8023fa4:	60d3      	str	r3, [r2, #12]
 8023fa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023faa:	6110      	str	r0, [r2, #16]
 8023fac:	6153      	str	r3, [r2, #20]
 8023fae:	e78e      	b.n	8023ece <__kernel_rem_pio2+0x596>
 8023fb0:	41700000 	.word	0x41700000
 8023fb4:	3e700000 	.word	0x3e700000

08023fb8 <__kernel_sin>:
 8023fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fbc:	ec55 4b10 	vmov	r4, r5, d0
 8023fc0:	b085      	sub	sp, #20
 8023fc2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023fc6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8023fca:	ed8d 1b00 	vstr	d1, [sp]
 8023fce:	9002      	str	r0, [sp, #8]
 8023fd0:	da06      	bge.n	8023fe0 <__kernel_sin+0x28>
 8023fd2:	ee10 0a10 	vmov	r0, s0
 8023fd6:	4629      	mov	r1, r5
 8023fd8:	f7e4 fcf6 	bl	80089c8 <__aeabi_d2iz>
 8023fdc:	2800      	cmp	r0, #0
 8023fde:	d051      	beq.n	8024084 <__kernel_sin+0xcc>
 8023fe0:	4622      	mov	r2, r4
 8023fe2:	462b      	mov	r3, r5
 8023fe4:	4620      	mov	r0, r4
 8023fe6:	4629      	mov	r1, r5
 8023fe8:	f7e4 fa3e 	bl	8008468 <__aeabi_dmul>
 8023fec:	4682      	mov	sl, r0
 8023fee:	468b      	mov	fp, r1
 8023ff0:	4602      	mov	r2, r0
 8023ff2:	460b      	mov	r3, r1
 8023ff4:	4620      	mov	r0, r4
 8023ff6:	4629      	mov	r1, r5
 8023ff8:	f7e4 fa36 	bl	8008468 <__aeabi_dmul>
 8023ffc:	a341      	add	r3, pc, #260	; (adr r3, 8024104 <__kernel_sin+0x14c>)
 8023ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024002:	4680      	mov	r8, r0
 8024004:	4689      	mov	r9, r1
 8024006:	4650      	mov	r0, sl
 8024008:	4659      	mov	r1, fp
 802400a:	f7e4 fa2d 	bl	8008468 <__aeabi_dmul>
 802400e:	a33f      	add	r3, pc, #252	; (adr r3, 802410c <__kernel_sin+0x154>)
 8024010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024014:	f7e4 f870 	bl	80080f8 <__aeabi_dsub>
 8024018:	4652      	mov	r2, sl
 802401a:	465b      	mov	r3, fp
 802401c:	f7e4 fa24 	bl	8008468 <__aeabi_dmul>
 8024020:	a33c      	add	r3, pc, #240	; (adr r3, 8024114 <__kernel_sin+0x15c>)
 8024022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024026:	f7e4 f869 	bl	80080fc <__adddf3>
 802402a:	4652      	mov	r2, sl
 802402c:	465b      	mov	r3, fp
 802402e:	f7e4 fa1b 	bl	8008468 <__aeabi_dmul>
 8024032:	a33a      	add	r3, pc, #232	; (adr r3, 802411c <__kernel_sin+0x164>)
 8024034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024038:	f7e4 f85e 	bl	80080f8 <__aeabi_dsub>
 802403c:	4652      	mov	r2, sl
 802403e:	465b      	mov	r3, fp
 8024040:	f7e4 fa12 	bl	8008468 <__aeabi_dmul>
 8024044:	a337      	add	r3, pc, #220	; (adr r3, 8024124 <__kernel_sin+0x16c>)
 8024046:	e9d3 2300 	ldrd	r2, r3, [r3]
 802404a:	f7e4 f857 	bl	80080fc <__adddf3>
 802404e:	9b02      	ldr	r3, [sp, #8]
 8024050:	4606      	mov	r6, r0
 8024052:	460f      	mov	r7, r1
 8024054:	b9db      	cbnz	r3, 802408e <__kernel_sin+0xd6>
 8024056:	4602      	mov	r2, r0
 8024058:	460b      	mov	r3, r1
 802405a:	4650      	mov	r0, sl
 802405c:	4659      	mov	r1, fp
 802405e:	f7e4 fa03 	bl	8008468 <__aeabi_dmul>
 8024062:	a325      	add	r3, pc, #148	; (adr r3, 80240f8 <__kernel_sin+0x140>)
 8024064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024068:	f7e4 f846 	bl	80080f8 <__aeabi_dsub>
 802406c:	4642      	mov	r2, r8
 802406e:	464b      	mov	r3, r9
 8024070:	f7e4 f9fa 	bl	8008468 <__aeabi_dmul>
 8024074:	4602      	mov	r2, r0
 8024076:	460b      	mov	r3, r1
 8024078:	4620      	mov	r0, r4
 802407a:	4629      	mov	r1, r5
 802407c:	f7e4 f83e 	bl	80080fc <__adddf3>
 8024080:	4604      	mov	r4, r0
 8024082:	460d      	mov	r5, r1
 8024084:	ec45 4b10 	vmov	d0, r4, r5
 8024088:	b005      	add	sp, #20
 802408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802408e:	2200      	movs	r2, #0
 8024090:	4b1b      	ldr	r3, [pc, #108]	; (8024100 <__kernel_sin+0x148>)
 8024092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024096:	f7e4 f9e7 	bl	8008468 <__aeabi_dmul>
 802409a:	4632      	mov	r2, r6
 802409c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80240a0:	463b      	mov	r3, r7
 80240a2:	4640      	mov	r0, r8
 80240a4:	4649      	mov	r1, r9
 80240a6:	f7e4 f9df 	bl	8008468 <__aeabi_dmul>
 80240aa:	4602      	mov	r2, r0
 80240ac:	460b      	mov	r3, r1
 80240ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80240b2:	f7e4 f821 	bl	80080f8 <__aeabi_dsub>
 80240b6:	4652      	mov	r2, sl
 80240b8:	465b      	mov	r3, fp
 80240ba:	f7e4 f9d5 	bl	8008468 <__aeabi_dmul>
 80240be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80240c2:	f7e4 f819 	bl	80080f8 <__aeabi_dsub>
 80240c6:	a30c      	add	r3, pc, #48	; (adr r3, 80240f8 <__kernel_sin+0x140>)
 80240c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240cc:	4606      	mov	r6, r0
 80240ce:	460f      	mov	r7, r1
 80240d0:	4640      	mov	r0, r8
 80240d2:	4649      	mov	r1, r9
 80240d4:	f7e4 f9c8 	bl	8008468 <__aeabi_dmul>
 80240d8:	4602      	mov	r2, r0
 80240da:	460b      	mov	r3, r1
 80240dc:	4630      	mov	r0, r6
 80240de:	4639      	mov	r1, r7
 80240e0:	f7e4 f80c 	bl	80080fc <__adddf3>
 80240e4:	4602      	mov	r2, r0
 80240e6:	460b      	mov	r3, r1
 80240e8:	4620      	mov	r0, r4
 80240ea:	4629      	mov	r1, r5
 80240ec:	f7e4 f804 	bl	80080f8 <__aeabi_dsub>
 80240f0:	e7c6      	b.n	8024080 <__kernel_sin+0xc8>
 80240f2:	bf00      	nop
 80240f4:	f3af 8000 	nop.w
 80240f8:	55555549 	.word	0x55555549
 80240fc:	3fc55555 	.word	0x3fc55555
 8024100:	3fe00000 	.word	0x3fe00000
 8024104:	5acfd57c 	.word	0x5acfd57c
 8024108:	3de5d93a 	.word	0x3de5d93a
 802410c:	8a2b9ceb 	.word	0x8a2b9ceb
 8024110:	3e5ae5e6 	.word	0x3e5ae5e6
 8024114:	57b1fe7d 	.word	0x57b1fe7d
 8024118:	3ec71de3 	.word	0x3ec71de3
 802411c:	19c161d5 	.word	0x19c161d5
 8024120:	3f2a01a0 	.word	0x3f2a01a0
 8024124:	1110f8a6 	.word	0x1110f8a6
 8024128:	3f811111 	.word	0x3f811111

0802412c <fabs>:
 802412c:	ec51 0b10 	vmov	r0, r1, d0
 8024130:	ee10 2a10 	vmov	r2, s0
 8024134:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024138:	ec43 2b10 	vmov	d0, r2, r3
 802413c:	4770      	bx	lr

0802413e <finite>:
 802413e:	ee10 3a90 	vmov	r3, s1
 8024142:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8024146:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802414a:	0fc0      	lsrs	r0, r0, #31
 802414c:	4770      	bx	lr
	...

08024150 <floor>:
 8024150:	ec51 0b10 	vmov	r0, r1, d0
 8024154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024158:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802415c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024160:	2e13      	cmp	r6, #19
 8024162:	460c      	mov	r4, r1
 8024164:	ee10 5a10 	vmov	r5, s0
 8024168:	4680      	mov	r8, r0
 802416a:	dc34      	bgt.n	80241d6 <floor+0x86>
 802416c:	2e00      	cmp	r6, #0
 802416e:	da16      	bge.n	802419e <floor+0x4e>
 8024170:	a335      	add	r3, pc, #212	; (adr r3, 8024248 <floor+0xf8>)
 8024172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024176:	f7e3 ffc1 	bl	80080fc <__adddf3>
 802417a:	2200      	movs	r2, #0
 802417c:	2300      	movs	r3, #0
 802417e:	f7e4 fc03 	bl	8008988 <__aeabi_dcmpgt>
 8024182:	b148      	cbz	r0, 8024198 <floor+0x48>
 8024184:	2c00      	cmp	r4, #0
 8024186:	da59      	bge.n	802423c <floor+0xec>
 8024188:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802418c:	4a30      	ldr	r2, [pc, #192]	; (8024250 <floor+0x100>)
 802418e:	432b      	orrs	r3, r5
 8024190:	2500      	movs	r5, #0
 8024192:	42ab      	cmp	r3, r5
 8024194:	bf18      	it	ne
 8024196:	4614      	movne	r4, r2
 8024198:	4621      	mov	r1, r4
 802419a:	4628      	mov	r0, r5
 802419c:	e025      	b.n	80241ea <floor+0x9a>
 802419e:	4f2d      	ldr	r7, [pc, #180]	; (8024254 <floor+0x104>)
 80241a0:	4137      	asrs	r7, r6
 80241a2:	ea01 0307 	and.w	r3, r1, r7
 80241a6:	4303      	orrs	r3, r0
 80241a8:	d01f      	beq.n	80241ea <floor+0x9a>
 80241aa:	a327      	add	r3, pc, #156	; (adr r3, 8024248 <floor+0xf8>)
 80241ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241b0:	f7e3 ffa4 	bl	80080fc <__adddf3>
 80241b4:	2200      	movs	r2, #0
 80241b6:	2300      	movs	r3, #0
 80241b8:	f7e4 fbe6 	bl	8008988 <__aeabi_dcmpgt>
 80241bc:	2800      	cmp	r0, #0
 80241be:	d0eb      	beq.n	8024198 <floor+0x48>
 80241c0:	2c00      	cmp	r4, #0
 80241c2:	bfbe      	ittt	lt
 80241c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80241c8:	fa43 f606 	asrlt.w	r6, r3, r6
 80241cc:	19a4      	addlt	r4, r4, r6
 80241ce:	ea24 0407 	bic.w	r4, r4, r7
 80241d2:	2500      	movs	r5, #0
 80241d4:	e7e0      	b.n	8024198 <floor+0x48>
 80241d6:	2e33      	cmp	r6, #51	; 0x33
 80241d8:	dd0b      	ble.n	80241f2 <floor+0xa2>
 80241da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80241de:	d104      	bne.n	80241ea <floor+0x9a>
 80241e0:	ee10 2a10 	vmov	r2, s0
 80241e4:	460b      	mov	r3, r1
 80241e6:	f7e3 ff89 	bl	80080fc <__adddf3>
 80241ea:	ec41 0b10 	vmov	d0, r0, r1
 80241ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80241f6:	f04f 33ff 	mov.w	r3, #4294967295
 80241fa:	fa23 f707 	lsr.w	r7, r3, r7
 80241fe:	4207      	tst	r7, r0
 8024200:	d0f3      	beq.n	80241ea <floor+0x9a>
 8024202:	a311      	add	r3, pc, #68	; (adr r3, 8024248 <floor+0xf8>)
 8024204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024208:	f7e3 ff78 	bl	80080fc <__adddf3>
 802420c:	2200      	movs	r2, #0
 802420e:	2300      	movs	r3, #0
 8024210:	f7e4 fbba 	bl	8008988 <__aeabi_dcmpgt>
 8024214:	2800      	cmp	r0, #0
 8024216:	d0bf      	beq.n	8024198 <floor+0x48>
 8024218:	2c00      	cmp	r4, #0
 802421a:	da02      	bge.n	8024222 <floor+0xd2>
 802421c:	2e14      	cmp	r6, #20
 802421e:	d103      	bne.n	8024228 <floor+0xd8>
 8024220:	3401      	adds	r4, #1
 8024222:	ea25 0507 	bic.w	r5, r5, r7
 8024226:	e7b7      	b.n	8024198 <floor+0x48>
 8024228:	2301      	movs	r3, #1
 802422a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802422e:	fa03 f606 	lsl.w	r6, r3, r6
 8024232:	4435      	add	r5, r6
 8024234:	4545      	cmp	r5, r8
 8024236:	bf38      	it	cc
 8024238:	18e4      	addcc	r4, r4, r3
 802423a:	e7f2      	b.n	8024222 <floor+0xd2>
 802423c:	2500      	movs	r5, #0
 802423e:	462c      	mov	r4, r5
 8024240:	e7aa      	b.n	8024198 <floor+0x48>
 8024242:	bf00      	nop
 8024244:	f3af 8000 	nop.w
 8024248:	8800759c 	.word	0x8800759c
 802424c:	7e37e43c 	.word	0x7e37e43c
 8024250:	bff00000 	.word	0xbff00000
 8024254:	000fffff 	.word	0x000fffff

08024258 <matherr>:
 8024258:	2000      	movs	r0, #0
 802425a:	4770      	bx	lr
 802425c:	0000      	movs	r0, r0
	...

08024260 <nan>:
 8024260:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024268 <nan+0x8>
 8024264:	4770      	bx	lr
 8024266:	bf00      	nop
 8024268:	00000000 	.word	0x00000000
 802426c:	7ff80000 	.word	0x7ff80000

08024270 <rint>:
 8024270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024272:	ec51 0b10 	vmov	r0, r1, d0
 8024276:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802427a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802427e:	2e13      	cmp	r6, #19
 8024280:	460b      	mov	r3, r1
 8024282:	ee10 4a10 	vmov	r4, s0
 8024286:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 802428a:	dc56      	bgt.n	802433a <rint+0xca>
 802428c:	2e00      	cmp	r6, #0
 802428e:	da2b      	bge.n	80242e8 <rint+0x78>
 8024290:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024294:	4302      	orrs	r2, r0
 8024296:	d023      	beq.n	80242e0 <rint+0x70>
 8024298:	f3c1 0213 	ubfx	r2, r1, #0, #20
 802429c:	4302      	orrs	r2, r0
 802429e:	4254      	negs	r4, r2
 80242a0:	4314      	orrs	r4, r2
 80242a2:	0c4b      	lsrs	r3, r1, #17
 80242a4:	0b24      	lsrs	r4, r4, #12
 80242a6:	045b      	lsls	r3, r3, #17
 80242a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80242ac:	ea44 0103 	orr.w	r1, r4, r3
 80242b0:	460b      	mov	r3, r1
 80242b2:	492f      	ldr	r1, [pc, #188]	; (8024370 <rint+0x100>)
 80242b4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80242b8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80242bc:	4602      	mov	r2, r0
 80242be:	4639      	mov	r1, r7
 80242c0:	4630      	mov	r0, r6
 80242c2:	f7e3 ff1b 	bl	80080fc <__adddf3>
 80242c6:	e9cd 0100 	strd	r0, r1, [sp]
 80242ca:	463b      	mov	r3, r7
 80242cc:	4632      	mov	r2, r6
 80242ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80242d2:	f7e3 ff11 	bl	80080f8 <__aeabi_dsub>
 80242d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80242da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80242de:	4639      	mov	r1, r7
 80242e0:	ec41 0b10 	vmov	d0, r0, r1
 80242e4:	b003      	add	sp, #12
 80242e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80242e8:	4a22      	ldr	r2, [pc, #136]	; (8024374 <rint+0x104>)
 80242ea:	4132      	asrs	r2, r6
 80242ec:	ea01 0702 	and.w	r7, r1, r2
 80242f0:	4307      	orrs	r7, r0
 80242f2:	d0f5      	beq.n	80242e0 <rint+0x70>
 80242f4:	0852      	lsrs	r2, r2, #1
 80242f6:	4011      	ands	r1, r2
 80242f8:	430c      	orrs	r4, r1
 80242fa:	d00b      	beq.n	8024314 <rint+0xa4>
 80242fc:	ea23 0202 	bic.w	r2, r3, r2
 8024300:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024304:	2e13      	cmp	r6, #19
 8024306:	fa43 f306 	asr.w	r3, r3, r6
 802430a:	bf0c      	ite	eq
 802430c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8024310:	2400      	movne	r4, #0
 8024312:	4313      	orrs	r3, r2
 8024314:	4916      	ldr	r1, [pc, #88]	; (8024370 <rint+0x100>)
 8024316:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 802431a:	4622      	mov	r2, r4
 802431c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024320:	4620      	mov	r0, r4
 8024322:	4629      	mov	r1, r5
 8024324:	f7e3 feea 	bl	80080fc <__adddf3>
 8024328:	e9cd 0100 	strd	r0, r1, [sp]
 802432c:	4622      	mov	r2, r4
 802432e:	462b      	mov	r3, r5
 8024330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024334:	f7e3 fee0 	bl	80080f8 <__aeabi_dsub>
 8024338:	e7d2      	b.n	80242e0 <rint+0x70>
 802433a:	2e33      	cmp	r6, #51	; 0x33
 802433c:	dd07      	ble.n	802434e <rint+0xde>
 802433e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024342:	d1cd      	bne.n	80242e0 <rint+0x70>
 8024344:	ee10 2a10 	vmov	r2, s0
 8024348:	f7e3 fed8 	bl	80080fc <__adddf3>
 802434c:	e7c8      	b.n	80242e0 <rint+0x70>
 802434e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8024352:	f04f 32ff 	mov.w	r2, #4294967295
 8024356:	40f2      	lsrs	r2, r6
 8024358:	4210      	tst	r0, r2
 802435a:	d0c1      	beq.n	80242e0 <rint+0x70>
 802435c:	0852      	lsrs	r2, r2, #1
 802435e:	4210      	tst	r0, r2
 8024360:	bf1f      	itttt	ne
 8024362:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8024366:	ea20 0202 	bicne.w	r2, r0, r2
 802436a:	4134      	asrne	r4, r6
 802436c:	4314      	orrne	r4, r2
 802436e:	e7d1      	b.n	8024314 <rint+0xa4>
 8024370:	080361a8 	.word	0x080361a8
 8024374:	000fffff 	.word	0x000fffff

08024378 <scalbn>:
 8024378:	b570      	push	{r4, r5, r6, lr}
 802437a:	ec55 4b10 	vmov	r4, r5, d0
 802437e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024382:	4606      	mov	r6, r0
 8024384:	462b      	mov	r3, r5
 8024386:	b9aa      	cbnz	r2, 80243b4 <scalbn+0x3c>
 8024388:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802438c:	4323      	orrs	r3, r4
 802438e:	d03b      	beq.n	8024408 <scalbn+0x90>
 8024390:	4b31      	ldr	r3, [pc, #196]	; (8024458 <scalbn+0xe0>)
 8024392:	4629      	mov	r1, r5
 8024394:	2200      	movs	r2, #0
 8024396:	ee10 0a10 	vmov	r0, s0
 802439a:	f7e4 f865 	bl	8008468 <__aeabi_dmul>
 802439e:	4b2f      	ldr	r3, [pc, #188]	; (802445c <scalbn+0xe4>)
 80243a0:	429e      	cmp	r6, r3
 80243a2:	4604      	mov	r4, r0
 80243a4:	460d      	mov	r5, r1
 80243a6:	da12      	bge.n	80243ce <scalbn+0x56>
 80243a8:	a327      	add	r3, pc, #156	; (adr r3, 8024448 <scalbn+0xd0>)
 80243aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243ae:	f7e4 f85b 	bl	8008468 <__aeabi_dmul>
 80243b2:	e009      	b.n	80243c8 <scalbn+0x50>
 80243b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80243b8:	428a      	cmp	r2, r1
 80243ba:	d10c      	bne.n	80243d6 <scalbn+0x5e>
 80243bc:	ee10 2a10 	vmov	r2, s0
 80243c0:	4620      	mov	r0, r4
 80243c2:	4629      	mov	r1, r5
 80243c4:	f7e3 fe9a 	bl	80080fc <__adddf3>
 80243c8:	4604      	mov	r4, r0
 80243ca:	460d      	mov	r5, r1
 80243cc:	e01c      	b.n	8024408 <scalbn+0x90>
 80243ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80243d2:	460b      	mov	r3, r1
 80243d4:	3a36      	subs	r2, #54	; 0x36
 80243d6:	4432      	add	r2, r6
 80243d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80243dc:	428a      	cmp	r2, r1
 80243de:	dd0b      	ble.n	80243f8 <scalbn+0x80>
 80243e0:	ec45 4b11 	vmov	d1, r4, r5
 80243e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8024450 <scalbn+0xd8>
 80243e8:	f000 f9f0 	bl	80247cc <copysign>
 80243ec:	a318      	add	r3, pc, #96	; (adr r3, 8024450 <scalbn+0xd8>)
 80243ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243f2:	ec51 0b10 	vmov	r0, r1, d0
 80243f6:	e7da      	b.n	80243ae <scalbn+0x36>
 80243f8:	2a00      	cmp	r2, #0
 80243fa:	dd08      	ble.n	802440e <scalbn+0x96>
 80243fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024404:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024408:	ec45 4b10 	vmov	d0, r4, r5
 802440c:	bd70      	pop	{r4, r5, r6, pc}
 802440e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024412:	da0d      	bge.n	8024430 <scalbn+0xb8>
 8024414:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024418:	429e      	cmp	r6, r3
 802441a:	ec45 4b11 	vmov	d1, r4, r5
 802441e:	dce1      	bgt.n	80243e4 <scalbn+0x6c>
 8024420:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8024448 <scalbn+0xd0>
 8024424:	f000 f9d2 	bl	80247cc <copysign>
 8024428:	a307      	add	r3, pc, #28	; (adr r3, 8024448 <scalbn+0xd0>)
 802442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802442e:	e7e0      	b.n	80243f2 <scalbn+0x7a>
 8024430:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024434:	3236      	adds	r2, #54	; 0x36
 8024436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802443a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802443e:	4620      	mov	r0, r4
 8024440:	4629      	mov	r1, r5
 8024442:	2200      	movs	r2, #0
 8024444:	4b06      	ldr	r3, [pc, #24]	; (8024460 <scalbn+0xe8>)
 8024446:	e7b2      	b.n	80243ae <scalbn+0x36>
 8024448:	c2f8f359 	.word	0xc2f8f359
 802444c:	01a56e1f 	.word	0x01a56e1f
 8024450:	8800759c 	.word	0x8800759c
 8024454:	7e37e43c 	.word	0x7e37e43c
 8024458:	43500000 	.word	0x43500000
 802445c:	ffff3cb0 	.word	0xffff3cb0
 8024460:	3c900000 	.word	0x3c900000
 8024464:	00000000 	.word	0x00000000

08024468 <__ieee754_log>:
 8024468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802446c:	ec51 0b10 	vmov	r0, r1, d0
 8024470:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8024474:	b087      	sub	sp, #28
 8024476:	460d      	mov	r5, r1
 8024478:	da27      	bge.n	80244ca <__ieee754_log+0x62>
 802447a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802447e:	4303      	orrs	r3, r0
 8024480:	ee10 2a10 	vmov	r2, s0
 8024484:	d10a      	bne.n	802449c <__ieee754_log+0x34>
 8024486:	49cc      	ldr	r1, [pc, #816]	; (80247b8 <__ieee754_log+0x350>)
 8024488:	2200      	movs	r2, #0
 802448a:	2300      	movs	r3, #0
 802448c:	2000      	movs	r0, #0
 802448e:	f7e4 f915 	bl	80086bc <__aeabi_ddiv>
 8024492:	ec41 0b10 	vmov	d0, r0, r1
 8024496:	b007      	add	sp, #28
 8024498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802449c:	2900      	cmp	r1, #0
 802449e:	da05      	bge.n	80244ac <__ieee754_log+0x44>
 80244a0:	460b      	mov	r3, r1
 80244a2:	f7e3 fe29 	bl	80080f8 <__aeabi_dsub>
 80244a6:	2200      	movs	r2, #0
 80244a8:	2300      	movs	r3, #0
 80244aa:	e7f0      	b.n	802448e <__ieee754_log+0x26>
 80244ac:	4bc3      	ldr	r3, [pc, #780]	; (80247bc <__ieee754_log+0x354>)
 80244ae:	2200      	movs	r2, #0
 80244b0:	f7e3 ffda 	bl	8008468 <__aeabi_dmul>
 80244b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80244b8:	460d      	mov	r5, r1
 80244ba:	4ac1      	ldr	r2, [pc, #772]	; (80247c0 <__ieee754_log+0x358>)
 80244bc:	4295      	cmp	r5, r2
 80244be:	dd06      	ble.n	80244ce <__ieee754_log+0x66>
 80244c0:	4602      	mov	r2, r0
 80244c2:	460b      	mov	r3, r1
 80244c4:	f7e3 fe1a 	bl	80080fc <__adddf3>
 80244c8:	e7e3      	b.n	8024492 <__ieee754_log+0x2a>
 80244ca:	2300      	movs	r3, #0
 80244cc:	e7f5      	b.n	80244ba <__ieee754_log+0x52>
 80244ce:	152c      	asrs	r4, r5, #20
 80244d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80244d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80244d8:	441c      	add	r4, r3
 80244da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80244de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80244e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80244e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80244ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80244ee:	ea42 0105 	orr.w	r1, r2, r5
 80244f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80244f6:	2200      	movs	r2, #0
 80244f8:	4bb2      	ldr	r3, [pc, #712]	; (80247c4 <__ieee754_log+0x35c>)
 80244fa:	f7e3 fdfd 	bl	80080f8 <__aeabi_dsub>
 80244fe:	1cab      	adds	r3, r5, #2
 8024500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024504:	2b02      	cmp	r3, #2
 8024506:	4682      	mov	sl, r0
 8024508:	468b      	mov	fp, r1
 802450a:	f04f 0200 	mov.w	r2, #0
 802450e:	dc53      	bgt.n	80245b8 <__ieee754_log+0x150>
 8024510:	2300      	movs	r3, #0
 8024512:	f7e4 fa11 	bl	8008938 <__aeabi_dcmpeq>
 8024516:	b1d0      	cbz	r0, 802454e <__ieee754_log+0xe6>
 8024518:	2c00      	cmp	r4, #0
 802451a:	f000 8120 	beq.w	802475e <__ieee754_log+0x2f6>
 802451e:	4620      	mov	r0, r4
 8024520:	f7e3 ff38 	bl	8008394 <__aeabi_i2d>
 8024524:	a390      	add	r3, pc, #576	; (adr r3, 8024768 <__ieee754_log+0x300>)
 8024526:	e9d3 2300 	ldrd	r2, r3, [r3]
 802452a:	4606      	mov	r6, r0
 802452c:	460f      	mov	r7, r1
 802452e:	f7e3 ff9b 	bl	8008468 <__aeabi_dmul>
 8024532:	a38f      	add	r3, pc, #572	; (adr r3, 8024770 <__ieee754_log+0x308>)
 8024534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024538:	4604      	mov	r4, r0
 802453a:	460d      	mov	r5, r1
 802453c:	4630      	mov	r0, r6
 802453e:	4639      	mov	r1, r7
 8024540:	f7e3 ff92 	bl	8008468 <__aeabi_dmul>
 8024544:	4602      	mov	r2, r0
 8024546:	460b      	mov	r3, r1
 8024548:	4620      	mov	r0, r4
 802454a:	4629      	mov	r1, r5
 802454c:	e7ba      	b.n	80244c4 <__ieee754_log+0x5c>
 802454e:	a38a      	add	r3, pc, #552	; (adr r3, 8024778 <__ieee754_log+0x310>)
 8024550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024554:	4650      	mov	r0, sl
 8024556:	4659      	mov	r1, fp
 8024558:	f7e3 ff86 	bl	8008468 <__aeabi_dmul>
 802455c:	4602      	mov	r2, r0
 802455e:	460b      	mov	r3, r1
 8024560:	2000      	movs	r0, #0
 8024562:	4999      	ldr	r1, [pc, #612]	; (80247c8 <__ieee754_log+0x360>)
 8024564:	f7e3 fdc8 	bl	80080f8 <__aeabi_dsub>
 8024568:	4652      	mov	r2, sl
 802456a:	4606      	mov	r6, r0
 802456c:	460f      	mov	r7, r1
 802456e:	465b      	mov	r3, fp
 8024570:	4650      	mov	r0, sl
 8024572:	4659      	mov	r1, fp
 8024574:	f7e3 ff78 	bl	8008468 <__aeabi_dmul>
 8024578:	4602      	mov	r2, r0
 802457a:	460b      	mov	r3, r1
 802457c:	4630      	mov	r0, r6
 802457e:	4639      	mov	r1, r7
 8024580:	f7e3 ff72 	bl	8008468 <__aeabi_dmul>
 8024584:	4606      	mov	r6, r0
 8024586:	460f      	mov	r7, r1
 8024588:	b914      	cbnz	r4, 8024590 <__ieee754_log+0x128>
 802458a:	4632      	mov	r2, r6
 802458c:	463b      	mov	r3, r7
 802458e:	e0a0      	b.n	80246d2 <__ieee754_log+0x26a>
 8024590:	4620      	mov	r0, r4
 8024592:	f7e3 feff 	bl	8008394 <__aeabi_i2d>
 8024596:	a374      	add	r3, pc, #464	; (adr r3, 8024768 <__ieee754_log+0x300>)
 8024598:	e9d3 2300 	ldrd	r2, r3, [r3]
 802459c:	4680      	mov	r8, r0
 802459e:	4689      	mov	r9, r1
 80245a0:	f7e3 ff62 	bl	8008468 <__aeabi_dmul>
 80245a4:	a372      	add	r3, pc, #456	; (adr r3, 8024770 <__ieee754_log+0x308>)
 80245a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245aa:	4604      	mov	r4, r0
 80245ac:	460d      	mov	r5, r1
 80245ae:	4640      	mov	r0, r8
 80245b0:	4649      	mov	r1, r9
 80245b2:	f7e3 ff59 	bl	8008468 <__aeabi_dmul>
 80245b6:	e0a5      	b.n	8024704 <__ieee754_log+0x29c>
 80245b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80245bc:	f7e3 fd9e 	bl	80080fc <__adddf3>
 80245c0:	4602      	mov	r2, r0
 80245c2:	460b      	mov	r3, r1
 80245c4:	4650      	mov	r0, sl
 80245c6:	4659      	mov	r1, fp
 80245c8:	f7e4 f878 	bl	80086bc <__aeabi_ddiv>
 80245cc:	e9cd 0100 	strd	r0, r1, [sp]
 80245d0:	4620      	mov	r0, r4
 80245d2:	f7e3 fedf 	bl	8008394 <__aeabi_i2d>
 80245d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80245da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80245de:	4610      	mov	r0, r2
 80245e0:	4619      	mov	r1, r3
 80245e2:	f7e3 ff41 	bl	8008468 <__aeabi_dmul>
 80245e6:	4602      	mov	r2, r0
 80245e8:	460b      	mov	r3, r1
 80245ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80245ee:	f7e3 ff3b 	bl	8008468 <__aeabi_dmul>
 80245f2:	a363      	add	r3, pc, #396	; (adr r3, 8024780 <__ieee754_log+0x318>)
 80245f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245f8:	4680      	mov	r8, r0
 80245fa:	4689      	mov	r9, r1
 80245fc:	f7e3 ff34 	bl	8008468 <__aeabi_dmul>
 8024600:	a361      	add	r3, pc, #388	; (adr r3, 8024788 <__ieee754_log+0x320>)
 8024602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024606:	f7e3 fd79 	bl	80080fc <__adddf3>
 802460a:	4642      	mov	r2, r8
 802460c:	464b      	mov	r3, r9
 802460e:	f7e3 ff2b 	bl	8008468 <__aeabi_dmul>
 8024612:	a35f      	add	r3, pc, #380	; (adr r3, 8024790 <__ieee754_log+0x328>)
 8024614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024618:	f7e3 fd70 	bl	80080fc <__adddf3>
 802461c:	4642      	mov	r2, r8
 802461e:	464b      	mov	r3, r9
 8024620:	f7e3 ff22 	bl	8008468 <__aeabi_dmul>
 8024624:	a35c      	add	r3, pc, #368	; (adr r3, 8024798 <__ieee754_log+0x330>)
 8024626:	e9d3 2300 	ldrd	r2, r3, [r3]
 802462a:	f7e3 fd67 	bl	80080fc <__adddf3>
 802462e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024632:	f7e3 ff19 	bl	8008468 <__aeabi_dmul>
 8024636:	a35a      	add	r3, pc, #360	; (adr r3, 80247a0 <__ieee754_log+0x338>)
 8024638:	e9d3 2300 	ldrd	r2, r3, [r3]
 802463c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024640:	4640      	mov	r0, r8
 8024642:	4649      	mov	r1, r9
 8024644:	f7e3 ff10 	bl	8008468 <__aeabi_dmul>
 8024648:	a357      	add	r3, pc, #348	; (adr r3, 80247a8 <__ieee754_log+0x340>)
 802464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802464e:	f7e3 fd55 	bl	80080fc <__adddf3>
 8024652:	4642      	mov	r2, r8
 8024654:	464b      	mov	r3, r9
 8024656:	f7e3 ff07 	bl	8008468 <__aeabi_dmul>
 802465a:	a355      	add	r3, pc, #340	; (adr r3, 80247b0 <__ieee754_log+0x348>)
 802465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024660:	f7e3 fd4c 	bl	80080fc <__adddf3>
 8024664:	4642      	mov	r2, r8
 8024666:	464b      	mov	r3, r9
 8024668:	f7e3 fefe 	bl	8008468 <__aeabi_dmul>
 802466c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8024670:	4602      	mov	r2, r0
 8024672:	460b      	mov	r3, r1
 8024674:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8024678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802467c:	f7e3 fd3e 	bl	80080fc <__adddf3>
 8024680:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8024684:	3551      	adds	r5, #81	; 0x51
 8024686:	4335      	orrs	r5, r6
 8024688:	2d00      	cmp	r5, #0
 802468a:	4680      	mov	r8, r0
 802468c:	4689      	mov	r9, r1
 802468e:	dd48      	ble.n	8024722 <__ieee754_log+0x2ba>
 8024690:	2200      	movs	r2, #0
 8024692:	4b4d      	ldr	r3, [pc, #308]	; (80247c8 <__ieee754_log+0x360>)
 8024694:	4650      	mov	r0, sl
 8024696:	4659      	mov	r1, fp
 8024698:	f7e3 fee6 	bl	8008468 <__aeabi_dmul>
 802469c:	4652      	mov	r2, sl
 802469e:	465b      	mov	r3, fp
 80246a0:	f7e3 fee2 	bl	8008468 <__aeabi_dmul>
 80246a4:	4602      	mov	r2, r0
 80246a6:	460b      	mov	r3, r1
 80246a8:	4606      	mov	r6, r0
 80246aa:	460f      	mov	r7, r1
 80246ac:	4640      	mov	r0, r8
 80246ae:	4649      	mov	r1, r9
 80246b0:	f7e3 fd24 	bl	80080fc <__adddf3>
 80246b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80246b8:	f7e3 fed6 	bl	8008468 <__aeabi_dmul>
 80246bc:	4680      	mov	r8, r0
 80246be:	4689      	mov	r9, r1
 80246c0:	b964      	cbnz	r4, 80246dc <__ieee754_log+0x274>
 80246c2:	4602      	mov	r2, r0
 80246c4:	460b      	mov	r3, r1
 80246c6:	4630      	mov	r0, r6
 80246c8:	4639      	mov	r1, r7
 80246ca:	f7e3 fd15 	bl	80080f8 <__aeabi_dsub>
 80246ce:	4602      	mov	r2, r0
 80246d0:	460b      	mov	r3, r1
 80246d2:	4650      	mov	r0, sl
 80246d4:	4659      	mov	r1, fp
 80246d6:	f7e3 fd0f 	bl	80080f8 <__aeabi_dsub>
 80246da:	e6da      	b.n	8024492 <__ieee754_log+0x2a>
 80246dc:	a322      	add	r3, pc, #136	; (adr r3, 8024768 <__ieee754_log+0x300>)
 80246de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80246e6:	f7e3 febf 	bl	8008468 <__aeabi_dmul>
 80246ea:	a321      	add	r3, pc, #132	; (adr r3, 8024770 <__ieee754_log+0x308>)
 80246ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246f0:	4604      	mov	r4, r0
 80246f2:	460d      	mov	r5, r1
 80246f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80246f8:	f7e3 feb6 	bl	8008468 <__aeabi_dmul>
 80246fc:	4642      	mov	r2, r8
 80246fe:	464b      	mov	r3, r9
 8024700:	f7e3 fcfc 	bl	80080fc <__adddf3>
 8024704:	4602      	mov	r2, r0
 8024706:	460b      	mov	r3, r1
 8024708:	4630      	mov	r0, r6
 802470a:	4639      	mov	r1, r7
 802470c:	f7e3 fcf4 	bl	80080f8 <__aeabi_dsub>
 8024710:	4652      	mov	r2, sl
 8024712:	465b      	mov	r3, fp
 8024714:	f7e3 fcf0 	bl	80080f8 <__aeabi_dsub>
 8024718:	4602      	mov	r2, r0
 802471a:	460b      	mov	r3, r1
 802471c:	4620      	mov	r0, r4
 802471e:	4629      	mov	r1, r5
 8024720:	e7d9      	b.n	80246d6 <__ieee754_log+0x26e>
 8024722:	4602      	mov	r2, r0
 8024724:	460b      	mov	r3, r1
 8024726:	4650      	mov	r0, sl
 8024728:	4659      	mov	r1, fp
 802472a:	f7e3 fce5 	bl	80080f8 <__aeabi_dsub>
 802472e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024732:	f7e3 fe99 	bl	8008468 <__aeabi_dmul>
 8024736:	4606      	mov	r6, r0
 8024738:	460f      	mov	r7, r1
 802473a:	2c00      	cmp	r4, #0
 802473c:	f43f af25 	beq.w	802458a <__ieee754_log+0x122>
 8024740:	a309      	add	r3, pc, #36	; (adr r3, 8024768 <__ieee754_log+0x300>)
 8024742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802474a:	f7e3 fe8d 	bl	8008468 <__aeabi_dmul>
 802474e:	a308      	add	r3, pc, #32	; (adr r3, 8024770 <__ieee754_log+0x308>)
 8024750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024754:	4604      	mov	r4, r0
 8024756:	460d      	mov	r5, r1
 8024758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802475c:	e729      	b.n	80245b2 <__ieee754_log+0x14a>
 802475e:	2000      	movs	r0, #0
 8024760:	2100      	movs	r1, #0
 8024762:	e696      	b.n	8024492 <__ieee754_log+0x2a>
 8024764:	f3af 8000 	nop.w
 8024768:	fee00000 	.word	0xfee00000
 802476c:	3fe62e42 	.word	0x3fe62e42
 8024770:	35793c76 	.word	0x35793c76
 8024774:	3dea39ef 	.word	0x3dea39ef
 8024778:	55555555 	.word	0x55555555
 802477c:	3fd55555 	.word	0x3fd55555
 8024780:	df3e5244 	.word	0xdf3e5244
 8024784:	3fc2f112 	.word	0x3fc2f112
 8024788:	96cb03de 	.word	0x96cb03de
 802478c:	3fc74664 	.word	0x3fc74664
 8024790:	94229359 	.word	0x94229359
 8024794:	3fd24924 	.word	0x3fd24924
 8024798:	55555593 	.word	0x55555593
 802479c:	3fe55555 	.word	0x3fe55555
 80247a0:	d078c69f 	.word	0xd078c69f
 80247a4:	3fc39a09 	.word	0x3fc39a09
 80247a8:	1d8e78af 	.word	0x1d8e78af
 80247ac:	3fcc71c5 	.word	0x3fcc71c5
 80247b0:	9997fa04 	.word	0x9997fa04
 80247b4:	3fd99999 	.word	0x3fd99999
 80247b8:	c3500000 	.word	0xc3500000
 80247bc:	43500000 	.word	0x43500000
 80247c0:	7fefffff 	.word	0x7fefffff
 80247c4:	3ff00000 	.word	0x3ff00000
 80247c8:	3fe00000 	.word	0x3fe00000

080247cc <copysign>:
 80247cc:	ec51 0b10 	vmov	r0, r1, d0
 80247d0:	ee11 0a90 	vmov	r0, s3
 80247d4:	ee10 2a10 	vmov	r2, s0
 80247d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80247dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80247e0:	ea41 0300 	orr.w	r3, r1, r0
 80247e4:	ec43 2b10 	vmov	d0, r2, r3
 80247e8:	4770      	bx	lr
	...

080247ec <_init>:
 80247ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247ee:	bf00      	nop
 80247f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247f2:	bc08      	pop	{r3}
 80247f4:	469e      	mov	lr, r3
 80247f6:	4770      	bx	lr

080247f8 <_fini>:
 80247f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247fa:	bf00      	nop
 80247fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247fe:	bc08      	pop	{r3}
 8024800:	469e      	mov	lr, r3
 8024802:	4770      	bx	lr
